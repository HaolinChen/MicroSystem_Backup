
/home/chl/AI_deck/gap_sdk/CNN_SSD_Body_detection/BUILD/GAP8_V2/GCC_RISCV/body_detection:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .data_tiny_fc 00000390  00000004  1b000004  00001004  2**2  CONTENTS, ALLOC, LOAD, DATA
  1 .stack        00000c38  1b000398  1b000398  00001398  2**3  CONTENTS, ALLOC, LOAD, DATA
  2 .vectors      000000a0  1c000000  1c000000  00002000  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00013c30  1c0000a0  1c0000a0  000020a0  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .init_array   0000003c  1c013cd0  1c013cd0  00015cd0  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   0000000c  1c013d0c  1c013d0c  00015d0c  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .init         00000000  1c013d18  1c013d18  00017028  2**0  CONTENTS, ALLOC, LOAD, CODE
  7 .fini         00000000  1c013d18  1c013d18  00017028  2**0  CONTENTS, ALLOC, LOAD, CODE
  8 .preinit_array 00000000  1c013d18  1c013d18  00017028  2**0  CONTENTS, ALLOC, LOAD, DATA
  9 .boot         00000000  1c013d18  1c013d18  00017028  2**0  CONTENTS
 10 .got          00000000  1c013d18  1c013d18  00017028  2**0  CONTENTS, ALLOC, LOAD, DATA
 11 .shbss        00000000  1c013d18  1c013d18  00017028  2**0  CONTENTS
 12 .gnu.offload_funcs 00000000  1c013d18  1c013d18  00017028  2**0  CONTENTS
 13 .gnu.offload_vars 00000000  1c013d18  1c013d18  00017028  2**0  CONTENTS
 14 .rodata       00000b7c  1c013d18  1c013d18  00015d18  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .data         0000040c  1c014894  1c014894  00016894  2**2  CONTENTS, ALLOC, LOAD, DATA
 16 .bss          000003e4  1c014ca0  1c014ca0  00016ca0  2**2  ALLOC
 17 .data_tiny_l1 00000018  00000004  1c015084  00017004  2**2  CONTENTS, ALLOC, LOAD, DATA
 18 .l1cluster_g  0000000c  1000001c  1c01509c  0001701c  2**2  CONTENTS, ALLOC, LOAD, DATA
 19 .bss_l1       00000000  10000028  10000028  00017028  2**0  CONTENTS
 20 .debug_frame  00010fac  00000000  00000000  00017028  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_info   00109d5b  00000000  00000000  00027fd4  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_abbrev 0000f324  00000000  00000000  00131d2f  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    000a3c62  00000000  00000000  00141053  2**0  CONTENTS, READONLY, DEBUGGING
 24 .debug_aranges 000023e0  00000000  00000000  001e4cb8  2**3  CONTENTS, READONLY, DEBUGGING
 25 .debug_ranges 00015fd8  00000000  00000000  001e7098  2**3  CONTENTS, READONLY, DEBUGGING
 26 .debug_line   00053bb7  00000000  00000000  001fd070  2**0  CONTENTS, READONLY, DEBUGGING
 27 .debug_str    00011079  00000000  00000000  00250c27  2**0  CONTENTS, READONLY, DEBUGGING
 28 .comment      0000001a  00000000  00000000  00261ca0  2**0  CONTENTS, READONLY
 29 .Pulp_Chip.Info 0000004e  00000000  00000000  00261cba  2**0  CONTENTS, READONLY
SYMBOL TABLE:
00000004 l    d  .data_tiny_fc	00000000 .data_tiny_fc
1b000398 l    d  .stack	00000000 .stack
1c000000 l    d  .vectors	00000000 .vectors
1c0000a0 l    d  .text	00000000 .text
1c013cd0 l    d  .init_array	00000000 .init_array
1c013d0c l    d  .fini_array	00000000 .fini_array
1c013d18 l    d  .init	00000000 .init
1c013d18 l    d  .fini	00000000 .fini
1c013d18 l    d  .preinit_array	00000000 .preinit_array
1c013d18 l    d  .boot	00000000 .boot
1c013d18 l    d  .got	00000000 .got
1c013d18 l    d  .shbss	00000000 .shbss
1c013d18 l    d  .gnu.offload_funcs	00000000 .gnu.offload_funcs
1c013d18 l    d  .gnu.offload_vars	00000000 .gnu.offload_vars
1c013d18 l    d  .rodata	00000000 .rodata
1c014894 l    d  .data	00000000 .data
1c014ca0 l    d  .bss	00000000 .bss
00000004 l    d  .data_tiny_l1	00000000 .data_tiny_l1
1000001c l    d  .l1cluster_g	00000000 .l1cluster_g
10000028 l    d  .bss_l1	00000000 .bss_l1
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .Pulp_Chip.Info	00000000 .Pulp_Chip.Info
00000000 l    df *ABS*	00000000 bridge.c
1c010422 l     F .text	0000001c __rt_event_enqueue
1c01043e l     F .text	00000020 __rt_bridge_check_bridge_req.part.5
1c01045e l     F .text	00000046 __rt_bridge_wait
00000004 l     O .data_tiny_fc	00000004 __rt_bridge_flash_handle
00000008 l     O .data_tiny_fc	00000004 __rt_bridge_flash_type
0000000c l     O .data_tiny_fc	00000004 __rt_bridge_flash_itf
00000010 l     O .data_tiny_fc	00000004 __rt_bridge_flash_cs
00000014 l     O .data_tiny_fc	00000004 __rt_bridge_eeprom_handle
00000000 l    df *ABS*	00000000 events.c
00000000 l    df *ABS*	00000000 periph-v2.c
00000000 l    df *ABS*	00000000 hyperram-v1.c
1c011a0a l     F .text	00000014 l2_memcpy
1c011a1e l     F .text	00000024 rt_event_enqueue
1c011a42 l     F .text	00000032 pi_task_wait_on.isra.4
1c011d32 l     F .text	00000046 __pi_hyper_copy_exec
1c011e92 l     F .text	00000296 __pi_hyper_copy_misaligned
1c011d78 l     F .text	00000056 __pi_hyper_copy
1c011e40 l     F .text	00000052 exec_pending_task
1c012128 l     F .text	0000009e __pi_hyper_copy_2d
1c012204 l     F .text	0000002e __rt_hyper_init
1c014dc8 l     O .bss	00000080 __pi_hyper_temp_buffer
1c014758 l     O .rodata	00000034 __hyper_pad
1c014f88 l     O .bss	00000004 __pi_hyper_cluster_reqs_first
1c014f8c l     O .bss	00000004 __rt_hyper_open_count
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 conf.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 utils.c
1c010242 l     F .text	0000007c __rt_fc_cluster_lock_req
1b0007a0 l     O .stack	00000018 cbsys_first
00000000 l    df *ABS*	00000000 himax.c
00000000 l    df *ABS*	00000000 io.c
1c012458 l     F .text	0000000e __rt_io_end_of_flush
1c012466 l     F .text	00000050 __rt_io_uart_wait_req
1c0124b6 l     F .text	00000042 __rt_do_putc_host
1c0124f8 l     F .text	0000005a __rt_io_start
1c012552 l     F .text	00000020 rt_event_execute.isra.4.constprop.12
1c012572 l     F .text	00000070 __rt_io_lock
1c0125e2 l     F .text	00000034 __rt_putc_host_cluster_req
1c012616 l     F .text	00000070 __rt_io_unlock
1c012686 l     F .text	000000da __rt_io_uart_flush.constprop.11
1c012760 l     F .text	00000092 __rt_io_uart_wait_pending
1c0127f2 l     F .text	00000028 __rt_io_stop
1c01295e l     F .text	000000ac tfp_putc.isra.9
1c014ee0 l     O .bss	00000080 __rt_io_event
1b0007bc l     O .stack	00000010 __rt_io_fc_lock
1c014c20 l     O .data	00000080 __rt_putc_host_buffer
1c014f9c l     O .bss	00000004 __rt_io_event_current
1c014fa0 l     O .bss	00000004 __rt_io_pending_flush
1c014fa4 l     O .bss	00000004 __rt_putc_host_buffer_index
1c014fa8 l     O .bss	00000004 _rt_io_uart
00000000 l    df *ABS*	00000000 crt0.o
1c000094 l       .vectors	00000000 __rt_no_irq_handler
00000000 l    df *ABS*	00000000 sched.o
1c000132 l       .text	00000000 __rt_handle_special_event
1c00012c l       .text	00000000 __rt_no_first
1c00012e l       .text	00000000 __rt_common
1c000130 l       .text	00000000 enqueue_end
1c000192 l       .text	00000000 __rt_remote_enqueue_event_loop_cluster
1c0001ce l       .text	00000000 __rt_remote_enqueue_event_loop_cluster_continue
1c0001b8 l       .text	00000000 __rt_cluster_pool_update_end
1c0001a0 l       .text	00000000 __rt_cluster_pool_update_loop
1c0001a8 l       .text	00000000 __rt_cluster_pool_update_loop_end
1c0001b0 l       .text	00000000 __rt_cluster_pool_update_no_current
1c0001ec l       .text	00000000 __rt_remote_enqueue_event_loop_next_cluster
00000000 l    df *ABS*	00000000 vectors.o
1c000266 l       .text	00000000 __rt_call_c_function
00000000 l    df *ABS*	00000000 udma-v2.o
1c000356 l       .text	00000000 __rt_udma_no_copy
1c00031e l       .text	00000000 repeat_transfer
1c00036e l       .text	00000000 handle_special_end
1c0002ca l       .text	00000000 resume_after_special_end
1c000308 l       .text	00000000 checkTask
1c0002de l       .text	00000000 __rt_udma_call_enqueue_callback_resume
1c000304 l       .text	00000000 transfer_resume
1c0002fc l       .text	00000000 hyper
1c0002fc l       .text	00000000 fc_tcdm
1c0002fc l       .text	00000000 dual
1c00031e l       .text	00000000 dmaCmd
1c000346 l       .text	00000000 not_last
1c0003b6 l       .text	00000000 i2c_step1
1c0003d2 l       .text	00000000 i2c_step2
1c000378 l       .text	00000000 spim_step3
1c000394 l       .text	00000000 spim_step2
00000000 l    df *ABS*	00000000 soc_event_eu.o
1c000426 l       .text	00000000 __rt_fc_socevents_not_hyper_rx
1c00042c l       .text	00000000 __rt_fc_socevents_not_hyper_tx
1c000446 l       .text	00000000 __rt_soc_evt_no_udma_channel
1c0004b4 l       .text	00000000 rtc_event_handler
1c000472 l       .text	00000000 __rt_soc_evt_pwm
1c000486 l       .text	00000000 __rt_soc_evt_store
1c00049a l       .text	00000000 socevents_set
00000000 l    df *ABS*	00000000 hyperram-v1_asm.o
1c000514 l       .text	00000000 __rt_hyper_handle_copy_end
1c0004ce l       .text	00000000 __rt_hyper_repeat_copy
1c000500 l       .text	00000000 __rt_hyper_repeat_copy_not_last
1c000526 l       .text	00000000 __rt_hyper_handle_emu_task
1c000540 l       .text	00000000 __rt_hyper_handle_pending_tasks
1c0005a2 l       .text	00000000 __rt_hyper_repeat_copy_not_last2
00000000 l    df *ABS*	00000000 gpio.o
1c0005f0 l       .text	00000000 __rt_gpio_handler_end
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 main.c
1c001544 l     F .text	0000008a RunNN
1c0016f8 l     F .text	000002a0 RunSSD
1c014ca0 l     O .bss	00000024 conf
1c014cc4 l     O .bss	00000032 imgName.18551
1c014f74 l     O .bss	00000004 idx
00000000 l    df *ABS*	00000000 ImgIO.c
00000000 l    df *ABS*	00000000 ImageDraw.c
00000000 l    df *ABS*	00000000 SSDKernels.c
00000000 l    df *ABS*	00000000 SSDBasicKernels.c
1c014530 l     O .rodata	00000018 FractionExpLUT
1c014548 l     O .rodata	00000018 IntegerExpLUT
00000000 l    df *ABS*	00000000 SSDParams.c
00000000 l    df *ABS*	00000000 cnn_ssdKernels.c
1c014cf8 l     O .bss	0000001c HyperFlash
00000000 l    df *ABS*	00000000 CNN_BiasReLULinear_BasicKernels.c
1c00c806 l     F .text	00000124 KerReductIO_Compact_fp
00000000 l    df *ABS*	00000000 CNN_Conv_DP_BasicKernels.c
1c00cb86 l     F .text	000000ce KerConv2x3from3x3Stride1_V_DP_fp
1c00cc54 l     F .text	00000144 KerConv3x3Stride1_Body_DP_fp.isra.60
1c00cd98 l     F .text	00000086 KerConv3x2from3x3Stride1_H_DP_fp.isra.61
1c00ce1e l     F .text	00000124 KerConv3x3BorderStride1_DP_fp.isra.62
00000000 l    df *ABS*	00000000 CNN_Pooling_BasicKernels.c
1c00d0ec l     F .text	0000034a KerMaxPool2x2Stride2_fp
1c00d436 l     F .text	00000304 KerAvgPool2x2Stride2_fp
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 fs.c
1c00d914 l     F .text	00000024 rt_event_enqueue
1c00d970 l     F .text	00000032 pi_task_wait_on.isra.3
00000000 l    df *ABS*	00000000 read_fs.c
1c00db32 l     F .text	00000008 pi_flash_read_async
1c00db3a l     F .text	0000003e __pi_read_fs_write
1c00db78 l     F .text	00000010 __pi_read_fs_seek
1c00db88 l     F .text	00000040 __pi_read_fs_direct_read_async
1c00dbc8 l     F .text	00000018 __pi_read_fs_copy_async
1c00dbe0 l     F .text	00000018 __pi_read_fs_copy_2d_async
1c00dbf8 l     F .text	00000024 rt_event_enqueue
1c00dc1c l     F .text	00000038 __pi_fs_free
1c00dc54 l     F .text	00000004 __pi_read_fs_unmount
1c00dc58 l     F .text	00000126 __pi_read_fs_open
1c00dd7e l     F .text	0000012a __pi_fs_mount_step
1c00dea8 l     F .text	0000004e __pi_read_fs_close
1c00def6 l     F .text	0000009c __pi_read_fs_mount
1c00df92 l     F .text	00000072 __pi_fs_read_cached
1c00e0e8 l     F .text	00000094 __pi_read_fs_try_read
1c00e17c l     F .text	00000042 __pi_read_fs_read_async
00000000 l    df *ABS*	00000000 host_fs.c
1c00e1be l     F .text	0000000c __pi_host_fs_mount
1c00e1ca l     F .text	00000002 __pi_host_fs_unmount
1c00e1cc l     F .text	00000024 rt_event_enqueue
1c00e1f0 l     F .text	00000006 __pi_host_fs_seek
1c00e1f6 l     F .text	00000080 __pi_host_fs_copy_2d_async
1c00e276 l     F .text	0000002a __pi_host_fs_write_async
1c00e2a0 l     F .text	00000026 __pi_host_fs_read_async
1c00e2c6 l     F .text	00000046 __pi_host_fs_copy_async
1c00e30c l     F .text	00000004 __pi_host_fs_direct_read_async
1c00e310 l     F .text	0000001c __pi_host_fs_close
1c00e32c l     F .text	0000005c __pi_host_fs_open
1c014d14 l     O .bss	00000088 bsp_fs_data
00000000 l    df *ABS*	00000000 hyperflash.c
1c00e388 l     F .text	0000001c __rt_event_enqueue
1c00e3a4 l     F .text	0000000e hyperflash_ioctl
1c00e3b2 l     F .text	0000000e hyperflash_set_reg_exec
1c00e3c0 l     F .text	00000040 hyperflash_stall_task
1c00e400 l     F .text	0000008a hyperflash_read_2d_async
1c00e68c l     F .text	00000106 hyperflash_handle_pending_task
1c00e48a l     F .text	0000001a hyperflash_copy_2d_async
1c00e4a4 l     F .text	000000be hyperflash_erase_sector_async
1c00ecc0 l     F .text	00000054 hyperflash_check_erase
1c00e562 l     F .text	000000b4 hyperflash_erase_chip_async
1c00e616 l     F .text	00000076 hyperflash_read_async
1c00e8fa l     F .text	0000005e hyperflash_program_async
1c00e7f2 l     F .text	00000056 hyperflash_reg_set_async
1c00e792 l     F .text	00000060 hyperflash_reg_get_async
1c00e848 l     F .text	000000b2 hyperflash_program_resume
1c00ed14 l     F .text	00000052 hyperflash_check_program
1c00e958 l     F .text	0000001c hyperflash_copy_async
1c00e974 l     F .text	0000001e hyperflash_close
1c00e992 l     F .text	00000088 hyperflash_open
1c00ea1a l     F .text	00000032 pi_task_wait_on.isra.3
1c00ea4c l     F .text	0000002c hyperflash_copy_2d
1c00ea78 l     F .text	00000024 hyperflash_erase_sector
1c00ea9c l     F .text	00000024 hyperflash_erase_chip
1c00eac0 l     F .text	00000024 hyperflash_read
1c00eae4 l     F .text	00000024 hyperflash_reg_get
1c00eb08 l     F .text	00000024 hyperflash_reg_set
1c00eb2c l     F .text	00000024 hyperflash_program
1c00eb50 l     F .text	0000002e hyperflash_copy
1c00eb7e l     F .text	000000aa hyperflash_erase_resume
1c00ec28 l     F .text	00000044 hyperflash_erase_async
1c00ec6c l     F .text	00000024 hyperflash_erase
1c00ec90 l     F .text	00000030 hyperflash_get_status_reg
1c0148e4 l     O .data	00000054 hyperflash_api
00000000 l    df *ABS*	00000000 hyperram.c
1c00edb8 l     F .text	00000012 hyperram_copy_2d_async
1c00edca l     F .text	00000010 hyperram_copy_async
1c00edda l     F .text	00000022 hyperram_close
1c00edfc l     F .text	00000094 hyperram_open
1c014938 l     O .data	00000018 hyperram_api
00000000 l    df *ABS*	00000000 ram.c
1c00eeaa l     F .text	00000070 __pi_ram_cluster_req
1c00ef1a l     F .text	0000001e __pi_ram_cluster_req_done
00000000 l    df *ABS*	00000000 alloc_extern.c
00000000 l    df *ABS*	00000000 partition.c
00000000 l    df *ABS*	00000000 flash_partition.c
00000000 l    df *ABS*	00000000 md5.c
1c00f39a l     F .text	000008d6 body
00000000 l    df *ABS*	00000000 semihost.c
1c00fe76 l     F .text	0000000e __internal_semihost
00000000 l    df *ABS*	00000000 ai_deck.c
1c00ff1a l     F .text	0000003c __bsp_init_pads
1c014f7c l     O .bss	00000004 __bsp_init_pads_done
00000000 l    df *ABS*	00000000 init.c
1c00ff98 l     F .text	00000026 cluster_start
1c013cd4 l     O .init_array	00000004 ctor_list
1c013d10 l     O .fini_array	00000004 dtor_list
00000000 l    df *ABS*	00000000 irq.c
00000000 l    df *ABS*	00000000 alloc.c
00000000 l    df *ABS*	00000000 time.c
1c010a98 l     F .text	00000018 __rt_time_poweroff
1c010ab0 l     F .text	00000018 __rt_time_poweron
1c014f80 l     O .bss	00000004 timer_count
00000000 l    df *ABS*	00000000 time_irq.c
00000000 l    df *ABS*	00000000 freq.c
00000000 l    df *ABS*	00000000 pmu_driver.c
1c010f54 l     F .text	0000002c SetFllMultDivFactors
1c010f80 l     F .text	00000026 soc_eu_fcEventMask_setEvent
1c014bf4 l     O .data	00000007 SystemStateToSCUFastSeq
1c014c0c l     O .data	00000003 ToHWDCDC_Pos
1c014c1c l     O .data	00000004 RetPMUStateToPMUState
00000000 l    df *ABS*	00000000 cluster.c
1c0113a0 l     F .text	00000062 __rt_init_cluster_data
1c011402 l     F .text	00000064 __rt_cluster_init
1c011466 l     F .text	0000012a __rt_cluster_mount_step
00000000 l    df *ABS*	00000000 pulpos_emu.c
1c01174c l     F .text	0000003c __rt_cluster_pulpos_emu_init
1c014d9c l     O .bss	0000002c __rt_pulpos_emu_global_cluster_task
1c014f84 l     O .bss	00000004 __rt_fc_cluster_device
00000000 l    df *ABS*	00000000 cluster_call.c
00000000 l    df *ABS*	00000000 pads-v1.c
00000000 l    df *ABS*	00000000 pads-v1.c
00000000 l    df *ABS*	00000000 alloc_extern.c
00000000 l    df *ABS*	00000000 gpio-v2.c
1c014e48 l     O .bss	00000098 __rt_gpio
00000000 l    df *ABS*	00000000 i2s-v1.c
1c01234e l     F .text	00000034 __rt_i2s_resume
1c012382 l     F .text	0000002a __rt_i2s_setfreq_after
1c0123ac l     F .text	0000002c __rt_i2s_setfreq_before
1c014f90 l     O .bss	00000004 __rt_i2s_first
00000000 l    df *ABS*	00000000 spim-v2.c
1c014f94 l     O .bss	00000008 __rt_spim_open_count
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 prf.c
1c012bcc l     F .text	00000092 _to_x
1c012c5e l     F .text	00000020 _rlrshift
1c012c7e l     F .text	00000044 _ldiv5
1c012cc2 l     F .text	00000034 _get_digit
00000000 l    df *ABS*	00000000 sprintf.c
1c0137ac l     F .text	0000001e sprintf_out
00000000 l    df *ABS*	00000000 uart.c
1c01382c l     F .text	00000024 __rt_uart_setup.isra.5
1c013850 l     F .text	00000022 __rt_uart_setfreq_after
1c013872 l     F .text	00000042 __rt_uart_wait_tx_done.isra.6
1c0138b4 l     F .text	0000002c __rt_uart_setfreq_before
1c0138e0 l     F .text	00000042 __rt_uart_cluster_req
1c013922 l     F .text	00000026 soc_eu_fcEventMask_setEvent
1c014f60 l     O .bss	00000010 __rt_uart
00000000 l    df *ABS*	00000000 pe-eu-v3.o
1c013bde l       .text	00000000 __rt_slave_start
1c013b34 l       .text	00000000 __rt_master_event
1c013b48 l       .text	00000000 __rt_master_loop
1c013b38 l       .text	00000000 __rt_push_event_to_fc_retry
1c013bd0 l       .text	00000000 __rt_push_event_to_fc_wait
1c013bc2 l       .text	00000000 __rt_master_sleep
1c013b50 l       .text	00000000 __rt_master_loop_update_next
1c013ba4 l       .text	00000000 __rt_no_stack_check
1c013bb0 l       .text	00000000 __rt_master_no_slave_barrier
1c013bc0 l       .text	00000000 __rt_master_loop_no_slave
1c013bfc l       .text	00000000 __rt_fork_return
1c013c00 l       .text	00000000 __rt_wait_for_dispatch
1c013c16 l       .text	00000000 __rt_other_entry
1c013c10 l       .text	00000000 __rt_fork_entry
1c013c3e l       .text	00000000 __rt_no_stack_check_end
1c013cb0 l       .text	00000000 __rt_dma_2d_done
1c013c6e l       .text	00000000 __rt_dma_2d_redo
1c013c76 l       .text	00000000 __rt_dma_2d_not_last
1c013c98 l       .text	00000000 __rt_dma_2d_exit
00000000 l    df *ABS*	00000000 libgcc2.c
1c011dce g     F .text	00000016 pi_hyper_read_async
1c012a80 g     F .text	00000006 putchar
1c00d906 g     F .text	0000000c pi_flash_open
00000000 g       *ABS*	00000000 __rt_debug_init_config_trace
00000350 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_stride
1c014a8c g     O .data	00000004 tmp_buffer_classes
1c010a7a g     F .text	0000000e pi_l2_malloc
1c0103b4 g     F .text	00000038 __rt_fc_cluster_lock
1c011116 g     F .text	000000a4 InitOneFll
1c010a88 g     F .text	00000010 pi_l2_free
00000000 g       *ABS*	00000000 __RT_DEBUG_CONFIG
1c015058 g     O .bss	00000004 __rt_cluster_tasks
1c010586 g     F .text	00000022 __rt_bridge_send_notif
1c00cf42 g     F .text	000001aa KerParConv3x3Stride1_DP_fp
1c0106f8 g     F .text	00000076 rt_event_alloc
00000338 g     O .data_tiny_fc	00000001 __rt_hyper_pending_emu_do_memcpy
1c0121c6 g     F .text	00000018 pi_hyper_read_2d_async
1c00fede g     F .text	0000001e semihost_write
1c0107ce g     F .text	00000064 __rt_event_execute
1c0101f0 g     F .text	00000052 __rt_irq_init
1c0108b6 g     F .text	00000048 rt_user_alloc
1c0049d0 g     F .text	00000256 Predecoder2_2
00000310 g     O .data_tiny_fc	00000004 __rt_hyper_pending_hyper_addr
1c011596 g     F .text	000000d8 pi_cluster_open
1c012ba0 g     F .text	0000002c printf
ffffffff g       *ABS*	00000000 pulp__L2
1c0109f6 g     F .text	00000072 __rt_allocs_init
1c01503c g     O .bss	00000004 __rt_alloc_l1
1c011590 g     F .text	00000006 pi_cluster_conf_init
ffffffff g       *ABS*	00000000 pulp__PE
1c011c3c g     F .text	0000009e pi_hyper_close
1c010152 g     F .text	0000004c rt_irq_set_handler
00000314 g     O .data_tiny_fc	00000004 __rt_hyper_pending_addr
1c00d9b4 g     F .text	0000002c pi_fs_mount
00000308 g     O .data_tiny_fc	00000004 __rt_hyper_udma_handle
1c011284 g     F .text	00000044 InitFlls
00000018 g     O .data_tiny_fc	00000004 __rt_first_free
1c00f124 g     F .text	0000000a pi_partition_get_flash_offset
1c0044ec g     F .text	00000272 SDD3Dto2DSoftmax_2_2_18
1c00ff56 g     F .text	00000018 bsp_hyperram_conf_init
1c014b48 g     O .data	00000014 n_aspect_ratios_3
00000001 g       *ABS*	00000000 __ACTIVE_FC
1c000f48 g     F .text	000001fe .hidden __divsf3
1c01097a g     F .text	0000002e rt_free
1c00f130 g     F .text	00000004 pi_partition_table_load
1c00401e g     F .text	00000274 SDD3Dto2D_5_4_24
00000400 g       *ABS*	00000000 __rt_cl_slave_stack_size
1c010f16 g     F .text	0000003e __rt_freq_init
1c00ffbe g     F .text	00000168 __rt_init
00000001 g       *ABS*	00000000 __FC
1c011384 g     F .text	00000012 __rt_fll_init
1c001332 g     F .text	00000056 .hidden __fixsfsi
1b000fd0 g       .stack	00000000 __fc_tcdm_end
1c012266 g     F .text	00000058 rt_extern_alloc_init
1c014fac g     O .bss	00000004 Output_6
1c010684 g     F .text	00000034 __rt_bridge_init
1c014fb0 g     O .bss	0000000c HyperRam
00000018 g     O .data_tiny_l1	00000004 __rt_cluster_nb_active_pe
0000032c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_hyper_addr
1000001c g     O .l1cluster_g	00000004 SSDKernels_L1_Memory
1c013cd0 g       .text	00000000 _etext
1c014af0 g     O .data	00000014 n_aspect_ratios_2
0000030c g     O .data_tiny_fc	00000004 __rt_hyper_pending_base
1c00da68 g     F .text	00000050 __pi_cl_fs_copy_req_exec
1c014894 g       .data	00000000 sdata
1c014a7c g     O .data	00000004 SSDKernels_L2_Memory
1c014bb4 g     O .data	00000010 n_variances_4
1c00fec0 g     F .text	0000001e semihost_read
1c00c9de g     F .text	000000d6 KerDP_fp
00000001 g       *ABS*	00000000 __rt_nb_cluster
1c00ff88 g     F .text	00000010 bsp_hyperflash_open
1c00ed66 g     F .text	00000028 pi_hyperflash_conf_init
1c00efe0 g     F .text	00000052 extern_alloc_init
1c014aac g     O .data	00000010 n_variances_1
00000390 g     O .data_tiny_fc	00000004 __rtc_handler
1c01094a g     F .text	00000030 rt_alloc
1c00d73a g     F .text	000001cc KerParPool2x2Stride2_fp
1c014fbc g     O .bss	00000004 Output_3
1c014fc0 g     O .bss	00000004 Output_2
1c013806 g     F .text	00000026 __rt_uart_cluster_req_done
1c010126 g     F .text	00000028 __rt_deinit
1b0007b8 g     O .stack	00000001 camera_isAwaked
1c00010e g       .text	00000000 __rt_event_enqueue
1c010b42 g     F .text	00000024 rt_time_wait_us
1c012874 g     F .text	00000036 memcpy
1c00c92a g     F .text	000000b4 KerParSetBias_DP_fp
1c0005da g       .text	00000000 __rt_gpio_handler
1c000246 g       .text	00000000 __rt_illegal_instr
1c0109cc g     F .text	0000002a __rt_alloc_init_l1_for_fc
1c0121de g     F .text	0000001a pi_hyper_write_2d_async
1c014a80 g     O .data	00000004 cnn_ssd_L2_Memory
1c00da2e g     F .text	00000026 pi_fs_write
1c01225a g     F .text	0000000c __rt_padframe_init
1c013d18 g       .fini_array	00000000 __DTOR_END__
0000020c g       *ABS*	00000000 __cluster_text_size
1c0004c8 g       .text	00000000 __rt_hyper_handle_copy
1c012a0a g     F .text	0000002c puts
1c014980  w    O .data	00000018 __rt_padframe_profiles
1c005714 g     F .text	000000a0 initAnchorLayer_4
00000330 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_addr
1c014aec g     O .data	00000004 anchor_layer_2
00000344 g     O .data_tiny_fc	00000004 __rt_hyper_pending_tasks_last
1c010788 g     F .text	00000022 rt_event_get_blocking
1c007b74 g     F .text	00000706 S20_Conv2d_24x32x3x3
1c00567e g     F .text	00000096 initAnchorLayer_3
1c014ca0 g       .bss	00000000 _bss_start
1c014ca0 g       .data	00000000 edata
1c0109a8 g     F .text	00000024 __rt_alloc_init_l1
1c014a70  w    O .data	00000004 __rt_iodev_uart_baudrate
1c000174 g       .text	00000000 __rt_remote_enqueue_event
1c014f70 g     O .bss	00000004 cnn_ssd_L3_Flash
1c014bfc g     O .data	00000010 PMUState
1c014a84 g     O .data	00000008 bbxs
1c00ef86 g     F .text	0000005a pi_cl_ram_copy_2d
1c014894 g       .data	00000000 _sdata
1c01088e g     F .text	00000008 pi_cl_send_task_to_fc
1c00ed8e g     F .text	0000001e hyperram_alloc
10000028 g       .l1cluster_g	00000000 __l1_end
1c00a360 g     F .text	000005f0 S44_Conv2d_24x128x3x3
1c000560 g       .text	00000000 __rt_hyper_handle_burst
1c006508 g     F .text	000006d2 S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu
1c010ce4 g     F .text	00000134 rt_periph_copy
1c012922 g     F .text	0000003c __rt_putc_uart
1b000398 g     O .stack	00000400 __rt_fc_stack
1c0057b4 g     F .text	00000672 S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu
1c00f032 g     F .text	00000008 extern_alloc_deinit
00000010 g     O .data_tiny_l1	00000004 __rt_dma_last_pending
1c014ff0 g     O .bss	00000004 cnn_ssd_L3_Memory
1c00013c g       .text	00000000 __rt_bridge_enqueue_event
1c0014bc g     F .text	00000088 .hidden __extendsfdf2
1c012cf6 g     F .text	00000ab6 _prf
1c0038c2 g     F .text	00000280 SDD3Dto2D_10_8_24
10000028 g       .l1cluster_g	00000000 _libgomp_start
1c000930 g     F .text	0000032e .hidden __umoddi3
1c010bf2 g     F .text	000000f2 __rt_timer_handler
1c006bda g     F .text	00000682 S12_Conv2d_32x16x3x3_Relu
1c015040 g     O .bss	00000004 __rt_alloc_l2
1b000fd0 g       .stack	00000000 stack
1c0005f4 g     F .text	0000033c .hidden __udivdi3
1c00ef44 g     F .text	00000042 pi_cl_ram_copy
1c012b24 g     F .text	0000000a abort
1c00d9e8 g     F .text	00000008 pi_fs_open
1c01076e g     F .text	0000001a rt_event_get
1c01504c g     O .bss	00000008 __rt_freq_domains
1c00878a g     F .text	000001ee S25_MaxPool_2x2
00000024 g       *ABS*	00000000 _l1_preload_size
1c00c2a2 g     F .text	00000564 cnn_ssdCNN
1c00010c g       .text	00000000 _init
1c014fc4 g     O .bss	00000004 Output_8
1c00f098 g     F .text	0000008c extern_free
1c015084 g       .bss	00000000 _bss_end
1c00f32e g     F .text	0000006c flash_partition_find_first
1c014960  w    O .data	00000010 __rt_padframe_hyper
1c010568 g     F .text	0000001e __rt_bridge_set_available
1c013c40 g       .text	00000000 __rt_dma_2d
1c013ac4 g       .text	00000000 __rt_pe_start
1c014a5c g     O .data	00000004 Hi
1c015048 g     O .bss	00000004 first_delayed
1c003daa g     F .text	00000274 SDD3Dto2DSoftmax_5_4_18
0000038c g     O .data_tiny_fc	00000004 __rt_rtc_init_done
1c014b04 g     O .data	00000010 n_variances_2
1c014bc4 g     O .data	00000030 anchorWH_4
00000008 g       *ABS*	00000000 __NB_ACTIVE_PE
1c01196e g     F .text	0000004a pi_cluster_send_task_to_cl
1c0111ba g     F .text	000000ca __rt_pmu_cluster_power_up
1b0007d0 g       .stack	00000000 stack_start
00000004 g     O .data_tiny_l1	0000000c __rt_cluster_pool
00010000 g       *ABS*	00000000 __L1Cl
1c00725c g     F .text	000001d8 S13_MaxPool_2x2
1c013958 g     F .text	0000008e __rt_uart_open
1c011e1e g     F .text	00000022 pi_hyper_write
1c01032c g     F .text	00000022 __rt_utils_init
1c011874 g     F .text	000000fa pi_cluster_send_task_to_cl_async
1c00e004 g     F .text	000000e4 __pi_fs_read
1c014950  w    O .data	00000010 __rt_padframe_default
1c012a36 g     F .text	0000001a fputc_locked
1c010a6e g     F .text	0000000c pi_cl_l1_free
1c00daea g     F .text	00000008 pi_fs_seek
1c0139e6 g     F .text	0000004e rt_uart_close
1c011adc g     F .text	00000160 pi_hyper_open
1c0108fe g     F .text	0000004c rt_user_free
1c003228 g     F .text	00000416 Predecoder20_16
1c00da00 g     F .text	00000026 pi_fs_read
1c013cd0 g       .init_array	00000000 __CTOR_LIST__
1c010e18 g     F .text	00000056 __rt_periph_wait_event
1c00ee90 g     F .text	0000001a pi_hyperram_conf_init
1c010ecc g     F .text	0000004a rt_freq_set_and_get
1c00fe84 g     F .text	00000008 semihost_write0
1c01019e  w    F .text	00000002 illegal_insn_handler_c
1c00da5e g     F .text	0000000a pi_fs_copy_2d_async
0000033c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_task
1c0116a0 g     F .text	00000070 __rt_cluster_push_fc_event
00000320 g     O .data_tiny_fc	00000004 __rt_hyper_end_task
1c013ac4 g       .text	00000000 __cluster_text_start
1c002da2 g     F .text	00000486 SDD3Dto2D_20_16_24
1c011e06 g     F .text	00000018 pi_hyper_write_async
1c000080 g       .vectors	00000000 _start
1c011de4 g     F .text	00000022 pi_hyper_read
1c010896 g     F .text	00000020 rt_user_alloc_init
1c014ff4 g     O .bss	00000048 AT_GraphPerf
00000000 g       *ABS*	00000000 __rt_config
1c00fc70 g     F .text	00000032 MD5_Init
1c014fc8 g     O .bss	00000004 Output_1
1c001388 g     F .text	000000a4 .hidden __floatsisf
00000334 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_size
1c0099c6 g     F .text	000001e6 S37_MaxPool_2x2
1c00daf2 g     F .text	00000040 pi_cl_fs_copy
1c01282e g     F .text	00000020 strncmp
1c015084 g       .bss	00000000 _l1_preload_start_inL2
1c01034e g     F .text	00000032 __rt_fc_lock
10000028 g       .l1cluster_g	00000000 __l1_heap_start
1c0106e0 g     F .text	00000018 __rt_wait_event_prepare_blocking
1c005e26 g     F .text	000006e2 S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu
1c0104a4 g     F .text	00000078 __rt_bridge_handle_notif
1c00045e g       .text	00000000 __rt_soc_evt_no_udma
1c00d9f0 g     F .text	00000008 pi_fs_close
10000024 g     O .l1cluster_g	00000004 __rt_cluster_fc_task_lock
1c00554e g     F .text	0000009c initAnchorLayer_1
00000340 g     O .data_tiny_fc	00000004 __rt_hyper_pending_tasks
1c0107aa g     F .text	00000024 rt_event_push
1c003b42 g     F .text	00000268 Predecoder10_8
1c0105a8 g     F .text	00000022 __rt_bridge_clear_notif
1c00f206 g     F .text	00000104 flash_partition_table_load
00000014 g     O .data_tiny_l1	00000004 __rt_dma_first_pending
1c014998 g     O .data	000000c0 __hal_debug_struct
1c00d9a2 g     F .text	00000012 pi_fs_conf_init
1c00fd3e g     F .text	00000138 MD5_Final
1c010b66 g     F .text	0000008c __rt_time_init
1c011aa0 g     F .text	0000002c __pi_hyper_pin_reset_settings
00080000 g       *ABS*	00000000 __L2
00000008 g       *ABS*	00000000 __rt_nb_pe
1c001998 g     F .text	0000007e drawBboxes
1c0000a0 g       .text	00000000 _entry
1c014b44 g     O .data	00000004 anchor_layer_3
1c014a60 g     O .data	00000004 W
1c00f134 g     F .text	0000005e pi_partition_find_first
1c010832 g     F .text	0000002c __rt_wait_event
1c014abc g     O .data	00000030 anchorWH_1
1c008978 g     F .text	00000442 S28_Conv2d_18x64x3x3
1c0112c8 g     F .text	000000bc __rt_pmu_init
1c00a950 g     F .text	000005fe S48_Conv2d_128x128x3x3_Relu
1c00ff7e g     F .text	0000000a bsp_hyperflash_conf_init
10000020 g     O .l1cluster_g	00000004 cnn_ssd_L1_Memory
1c00363e g     F .text	00000284 SDD3Dto2DSoftmax_10_8_18
1c00d9f8 g     F .text	00000008 pi_fs_read_async
1c0101a0 g     F .text	00000050 __rt_handle_illegal_instr
1c004c26 g     F .text	00000318 KerSDD3Dto2DShort
1c012864 g     F .text	00000010 memset
1c011cda g     F .text	00000058 __pi_hyper_copy_aligned
1c002134 g     F .text	00000008 main
1c011396 g     F .text	00000002 __rt_fll_deinit
1c0004a4 g       .text	00000000 udma_event_handler_end
1c015044 g     O .bss	00000004 __rt_alloc_fc_tcdm
1c01242a g     F .text	0000000a __rt_himax_init
1c002912 g     F .text	00000490 SDD3Dto2DSoftmax_20_16_18
1c0103ec g     F .text	00000036 __rt_fc_cluster_unlock
00000318 g     O .data_tiny_fc	00000004 __rt_hyper_pending_repeat
1c012b2e g     F .text	00000072 __rt_io_init
1c014a58 g     O .data	00000004 H
1c014970  w    O .data	00000010 __rt_padframe_hyper_gpio
00000000 g       *ABS*	00000000 __FETCH_ALL
1c00ff6e g     F .text	00000010 bsp_hyperram_open
1c00d912 g     F .text	00000002 __flash_conf_init
1c014a74  w    O .data	00000004 __rt_platform
1c013d0c g       .init_array	00000000 __CTOR_END__
1c001146 g     F .text	000001ec .hidden __mulsf3
1c014894 g     O .data	00000028 __pi_read_fs_api
1c0055ea g     F .text	00000094 initAnchorLayer_2
1c011a74 g     F .text	0000002c __pi_hyper_pin_settings
1c01281a g     F .text	00000014 strcmp
1c00ff12 g     F .text	00000008 semihost_exit
1c013d0c g       .fini_array	00000000 __DTOR_LIST__
1c0106b8 g     F .text	00000028 __rt_event_init
000002e0 g     O .data_tiny_fc	00000028 __rt_udma_extra_callback_arg
1c0005b6 g       .text	00000000 pwm_event_handler
1c00bab4 g     F .text	00000794 cnn_ssdCNN_Construct
00000348 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_size_2d
1c012a86 g     F .text	00000028 _prf_locked
1c004292 g     F .text	0000025a Predecoder5_4
00000000 g       *ABS*	00000000 __USE_UART
1c0121f8 g     F .text	00000008 __rt_hyper_resume_emu_task
1c002556 g     F .text	000001e8 WriteImageToFile
1c011036 g     F .text	000000e0 SetFllFrequency
1c011398 g     F .text	00000002 __rt_flls_constructor
1c010ac8 g     F .text	0000007a rt_event_push_delayed
1c00010c g       .text	00000000 _fini
1c00f03a g     F .text	0000005e extern_alloc
1c01085e g     F .text	0000001a rt_event_wait
1c000090 g       .vectors	00000000 __rt_debug_struct_ptr
1c0137ca g     F .text	0000003c sprintf
1c013d90 g     O .rodata	00000100 .hidden __clz_tab
00000328 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_channel
1c014b6c g     O .data	00000030 anchorWH_3
1c00b42a g     F .text	0000068a S55_Conv2d_24x128x3x3
1c013c1c g       .text	00000000 __rt_set_slave_stack
1c01088c g     F .text	00000002 pi_task_push_delayed_us
1c010a68 g     F .text	00000006 pi_cl_l1_malloc
1c014a68  w    O .data	00000004 __rt_fc_stack_size
1c00f192 g     F .text	00000074 flash_partition_table_verify
1c014fcc g     O .bss	00000004 Output_5
1c009bac g     F .text	000007b4 S40_Conv2d_18x128x3x3
1c0003f4 g       .text	00000000 __rt_fc_socevents_handler
000002b8 g     O .data_tiny_fc	00000028 __rt_udma_extra_callback
1c00cab4 g     F .text	000000d2 KerDP_IO_fp
00000358 g     O .data_tiny_fc	00000034 dev_rtc
1c00da26 g     F .text	00000008 pi_fs_write_async
1c008dba g     F .text	000005fa S32_Conv2d_24x64x3x3
1c004f3e g     F .text	00000610 KerPredecoderShort
1c0148bc g     O .data	00000028 __pi_host_fs_api
1c012a50 g     F .text	00000030 fputc
1c0122be g     F .text	0000000a rt_extern_alloc_deinit
1c0119ec g     F .text	0000001e pi_pad_init
1c00da54 g     F .text	0000000a pi_fs_copy_async
1c014a98 g     O .data	00000014 n_aspect_ratios_1
1c014fd0 g     O .bss	0000000c ili
1c000200 g       .text	00000000 __rt_call_external_c_function
1c010380 g     F .text	00000034 __rt_fc_unlock
1c00ef38 g     F .text	0000000c pi_ram_open
00000004 g       .data_tiny_l1	00000000 _l1_preload_start
1c0122c8 g     F .text	00000086 __pi_gpio_handler
000002b0 g     O .data_tiny_fc	00000008 __rt_socevents_status
1c0105ca g     F .text	00000042 __rt_bridge_printf_flush
1c011acc g     F .text	00000010 pi_hyper_conf_init
1c014a6c  w    O .data	00000004 __rt_iodev
1c00dab8 g     F .text	00000032 __pi_cl_fs_copy_req_done
0000001c g     O .data_tiny_fc	00000014 __rt_sched
1c000000 g       .vectors	00000000 __irq_vector_base
1c00213c g     F .text	0000041a ReadImageFromFile
1c00d938 g     F .text	00000038 __pi_cl_fs_copy_req
1c014ca0 g       .data	00000000 _edata
1c00af4e g     F .text	000004dc S51_Conv2d_18x128x3x3
00000000 g       *ABS*	00000000 __ZERO
1c010e6e g     F .text	0000005e __rt_periph_init
1c00f12e g     F .text	00000002 pi_partition_table_free
1c012446 g     F .text	00000012 __rt_spim_init
1c01051c g     F .text	0000004c __rt_bridge_check_connection
1c011788 g     F .text	00000090 rt_cluster_call
1c014a64 g     O .data	00000004 Wi
00000800 g       *ABS*	00000000 __rt_stack_size
1c01014e g     F .text	00000004 pi_open_from_conf
1c014fdc g     O .bss	00000004 Output_4
ffffffff g       *ABS*	00000000 pulp__FC
1c0123d8 g     F .text	00000052 __rt_i2s_init
00000003 g       *ABS*	00000000 __rt_debug_init_config
1c00475e g     F .text	00000272 SDD3Dto2D_2_2_24
1c014a94 g     O .data	00000004 anchor_layer_1
1c00f30a g     F .text	00000024 flash_partition_table_free
1c01505c g     O .bss	00000028 __rt_fc_cluster_data
1c012aae g     F .text	00000076 exit
1c010878 g     F .text	00000014 __rt_event_sched_init
1c0015ce g     F .text	0000007c writeDetImg
1c00142c g     F .text	00000090 .hidden __floatunsisf
0000034c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_length
1c0002b4 g       .text	00000000 udma_event_handler
1c01166e g     F .text	00000032 pi_cluster_close
1c012200 g     F .text	00000004 __rt_hyper_resume_copy
1c007434 g     F .text	00000740 S16_Conv2d_18x32x3x3
1c001a16 g     F .text	0000071e start
00000354 g     O .data_tiny_fc	00000004 pwmEventsStatus
1c00d9e0 g     F .text	00000008 pi_fs_unmount
1c00fefc g     F .text	00000016 semihost_seek
1c0102fc g     F .text	00000030 __rt_cbsys_exec
0000ffd8 g       .l1cluster_g	00000000 __l1_heap_size
1c010fa6 g     F .text	00000090 __rt_pmu_cluster_power_down
0000031c g     O .data_tiny_fc	00000004 __rt_hyper_pending_repeat_size
1b000798 g     O .stack	00000004 __rt_debug_config_trace
1c014f78  w    O .bss	00000004 __rt_iodev_uart_channel
1c0000a0 g       .text	00000000 _stext
1c014c10 g     O .data	00000004 PMURetentionState
ffffffff g       *ABS*	00000000 pulp__L1CL
1c01284e g     F .text	00000016 strlen
1c014fe0 g     O .bss	0000000c device
1c012232 g     F .text	00000028 rt_padframe_set
1c00feb8 g     F .text	00000008 semihost_close
1c0119b8 g     F .text	00000034 pi_pad_set_function
1c015054 g     O .bss	00000004 __rt_wakeup_use_fast
1c00273e g     F .text	000001d4 DrawRectangle
00000400 g       *ABS*	00000000 __rt_cl_master_stack_size
1c0128aa g     F .text	0000001a strchr
1c01060c g     F .text	00000078 __rt_bridge_req_shutdown
1c013948 g     F .text	00000010 rt_uart_conf_init
1c00c248 g     F .text	0000005a cnn_ssdCNN_Destruct
1c013cd0 g       .text	00000000 __cluster_text_end
1c013a68 g     F .text	0000005c __rt_uart_init
1c014a78 g     O .data	00000004 ImageIn
1c014b5c g     O .data	00000010 n_variances_3
1c0150a8 g       *ABS*	00000000 __l2_end
1c011818 g     F .text	0000005c rt_cluster_mount
1c012434 g     F .text	00000012 __rt_rtc_init
1c0093b4 g     F .text	00000612 S36_Conv2d_128x64x3x3_Relu
1c00164a g     F .text	000000ae non_max_suppress
1c013a34 g     F .text	00000034 rt_uart_cluster_write
1c014ba0 g     O .data	00000014 n_aspect_ratios_4
1c014b9c g     O .data	00000004 anchor_layer_4
1c00edac g     F .text	0000000c hyperram_free
1c000098 g       .vectors	00000000 __rt_semihosting_call
1c00fca2 g     F .text	0000009c MD5_Update
1b00079c g     O .stack	00000004 __rt_debug_config
1c000c5e g     F .text	000002ea .hidden __addsf3
1c00827a g     F .text	00000510 S24_Conv2d_64x32x3x3_Relu
1c01139a g     F .text	00000006 __rt_fll_set_freq
1c0102be g     F .text	0000003e __rt_cbsys_add
1c014a90 g     O .data	00000004 tmp_buffer_boxes
1c014b14 g     O .data	00000030 anchorWH_2
1c011710 g     F .text	0000003c __rt_cluster_new
1c0128c4 g     F .text	0000005e __rt_putc_debug_bridge
1c013cd0 g       .text	00000000 _endtext
00000324 g     O .data_tiny_fc	00000004 __rt_hyper_current_task
1c00fe8c g     F .text	0000002c semihost_open
ffffffff g       *ABS*	00000000 pulp__L1FC
1c014fec g     O .bss	00000004 Output_7
1c014c14 g     O .data	00000008 FllsFrequency
00000030 g     O .data_tiny_fc	00000280 periph_channels



Disassembly of section .vectors:

1c000000 <__irq_vector_base>:


#ifdef ARCHI_CORE_HAS_1_10
  j __rt_illegal_instr
#else
  j __rt_no_irq_handler
1c000000:	0940006f          	j	1c000094 <__rt_no_irq_handler>
#endif

  j __rt_no_irq_handler
1c000004:	0900006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000008:	08c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00000c:	0880006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000010:	0840006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000014:	0800006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000018:	07c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00001c:	0780006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000020:	0740006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000024:	0700006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000028:	06c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00002c:	0680006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000030:	0640006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000034:	0600006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000038:	05c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00003c:	0580006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000040:	0540006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000044:	0500006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000048:	04c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00004c:	0480006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000050:	0440006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000054:	0400006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000058:	03c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00005c:	0380006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000060:	0340006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000064:	0300006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000068:	02c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00006c:	0280006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000070:	0240006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000074:	0200006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000078:	01c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00007c:	0180006f          	j	1c000094 <__rt_no_irq_handler>

1c000080 <_start>:


  .org 0x80
  .global _start
_start:
  jal x0, _entry
1c000080:	0200006f          	j	1c0000a0 <_entry>


#ifndef __RT_MODE_BARE

  jal x0, __rt_illegal_instr
1c000084:	1c20006f          	j	1c000246 <__rt_illegal_instr>
	...

1c000090 <__rt_debug_struct_ptr>:
1c000090:	4998                	lw	a4,16(a1)
1c000092:	1c01                	addi	s8,s8,-32

1c000094 <__rt_no_irq_handler>:
  .word __hal_debug_struct

#endif

__rt_no_irq_handler:
  j __rt_no_irq_handler
1c000094:	0000006f          	j	1c000094 <__rt_no_irq_handler>

1c000098 <__rt_semihosting_call>:

#endif

  .global __rt_semihosting_call
__rt_semihosting_call:
  ebreak
1c000098:	00100073          	ebreak
  jr          ra
1c00009c:	00008067          	ret

Disassembly of section .text:

1c0000a0 <_entry>:
  csrw    0x7A1, x0
1c0000a0:	7a101073          	csrw	pcmr,zero
  csrr    a0, 0xF14
1c0000a4:	f1402573          	csrr	a0,mhartid
  andi    a1, a0, 0x1f
1c0000a8:	01f57593          	andi	a1,a0,31
  srli    a0, a0, 5
1c0000ac:	8115                	srli	a0,a0,0x5
  li      a2, ARCHI_FC_CID
1c0000ae:	02000613          	li	a2,32
  bne     a0, a2, __rt_pe_start
1c0000b2:	00c50463          	beq	a0,a2,1c0000ba <_entry+0x1a>
1c0000b6:	20f1306f          	j	1c013ac4 <__cluster_text_start>
  la      t0, _bss_start
1c0000ba:	00015297          	auipc	t0,0x15
1c0000be:	be628293          	addi	t0,t0,-1050 # 1c014ca0 <_edata>
  la      t1, _bss_end
1c0000c2:	00015317          	auipc	t1,0x15
1c0000c6:	fc230313          	addi	t1,t1,-62 # 1c015084 <_bss_end>
  sw      zero,0(t0)
1c0000ca:	0002a023          	sw	zero,0(t0)
  addi    t0, t0, 4
1c0000ce:	0291                	addi	t0,t0,4
  bltu    t0, t1, 1b
1c0000d0:	fe62ede3          	bltu	t0,t1,1c0000ca <_entry+0x2a>
  la   a0, __rt_fc_stack_size
1c0000d4:	00015517          	auipc	a0,0x15
1c0000d8:	99450513          	addi	a0,a0,-1644 # 1c014a68 <__rt_fc_stack_size>
  lw   a0, 0(a0)
1c0000dc:	4108                	lw	a0,0(a0)
  la   x2, __rt_fc_stack
1c0000de:	ff000117          	auipc	sp,0xff000
1c0000e2:	2ba10113          	addi	sp,sp,698 # 1b000398 <__rt_fc_stack>
  add  x2, x2, a0
1c0000e6:	912a                	add	sp,sp,a0
  jal  x1, __rt_init
1c0000e8:	6d70f0ef          	jal	ra,1c00ffbe <__rt_init>
  addi  a0, x0, 0
1c0000ec:	00000513          	li	a0,0
  addi  a1, x0, 0
1c0000f0:	00000593          	li	a1,0
  la    t2, main
1c0000f4:	00002397          	auipc	t2,0x2
1c0000f8:	04038393          	addi	t2,t2,64 # 1c002134 <main>
  jalr  x1, t2
1c0000fc:	000380e7          	jalr	t2
  mv    s0, a0
1c000100:	842a                	mv	s0,a0
  jal  x1, __rt_deinit
1c000102:	024100ef          	jal	ra,1c010126 <__rt_deinit>
  mv   a0, s0
1c000106:	8522                	mv	a0,s0
  jal  x1, exit
1c000108:	1a7120ef          	jal	ra,1c012aae <exit>

1c00010c <_fini>:
  ret
1c00010c:	8082                	ret

1c00010e <__rt_event_enqueue>:
  //   x10/a0: temporary register
  //   x11/a1: the event
  //   x12/a2: temporary register

  // First check if it is a normal event
  andi    x10, x11, 0x3
1c00010e:	0035f513          	andi	a0,a1,3
  bne     x10, x0, __rt_handle_special_event
1c000112:	02051063          	bnez	a0,1c000132 <__rt_handle_special_event>

  // Enqueue normal event
  la      x10, __rt_sched
1c000116:	e4000517          	auipc	a0,0xe4000
1c00011a:	f0650513          	addi	a0,a0,-250 # 1c <__rt_sched>
  sw      x0, RT_EVENT_T_NEXT(x11)
1c00011e:	0005a023          	sw	zero,0(a1)
  lw      x12, RT_SCHED_T_FIRST(x10)
1c000122:	4110                	lw	a2,0(a0)
  beqz    x12, __rt_no_first
1c000124:	c601                	beqz	a2,1c00012c <__rt_no_first>
  lw      x12, RT_SCHED_T_LAST(x10)
1c000126:	4150                	lw	a2,4(a0)
  sw      x11, RT_EVENT_T_NEXT(x12)
1c000128:	c20c                	sw	a1,0(a2)
  j       __rt_common
1c00012a:	a011                	j	1c00012e <__rt_common>

1c00012c <__rt_no_first>:

__rt_no_first:
  sw      x11, RT_SCHED_T_FIRST(x10)
1c00012c:	c10c                	sw	a1,0(a0)

1c00012e <__rt_common>:

__rt_common:
  sw      x11, RT_SCHED_T_LAST(x10)
1c00012e:	c14c                	sw	a1,4(a0)

1c000130 <enqueue_end>:

enqueue_end:
  jr          x9
1c000130:	8482                	jr	s1

1c000132 <__rt_handle_special_event>:

__rt_handle_special_event:
  li      x10, ~0x3
1c000132:	5571                	li	a0,-4
  and     x11, x11, x10
1c000134:	8de9                	and	a1,a1,a0
  lw      x12, PI_CALLBACK_T_ENTRY(x11)
1c000136:	41d0                	lw	a2,4(a1)
  lw      x10, PI_CALLBACK_T_ARG(x11)
1c000138:	4588                	lw	a0,8(a1)
  j       __rt_call_external_c_function
1c00013a:	a0d9                	j	1c000200 <__rt_call_external_c_function>

1c00013c <__rt_bridge_enqueue_event>:
    // to enqueue an event to the FC scheduler.

    .global __rt_bridge_enqueue_event
__rt_bridge_enqueue_event:

    sw  x8, -4(sp)
1c00013c:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c000140:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c000144:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c000148:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c00014c:	fec12623          	sw	a2,-20(sp)

    // Everything is done from C code
    la      x12, __rt_bridge_handle_notif
1c000150:	00010617          	auipc	a2,0x10
1c000154:	35460613          	addi	a2,a2,852 # 1c0104a4 <__rt_bridge_handle_notif>
    jal     x9, __rt_call_external_c_function
1c000158:	0a8004ef          	jal	s1,1c000200 <__rt_call_external_c_function>

    lw  x8, -4(sp)
1c00015c:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c000160:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c000164:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c000168:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c00016c:	fec12603          	lw	a2,-20(sp)

    mret
1c000170:	30200073          	mret

1c000174 <__rt_remote_enqueue_event>:
    // The FC must get it and push it to the scheduler

    .global __rt_remote_enqueue_event
__rt_remote_enqueue_event:

    sw  x8, -4(sp)
1c000174:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c000178:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c00017c:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c000180:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c000184:	fec12623          	sw	a2,-20(sp)

#ifndef ARCHI_NB_CLUSTER
    li   x8, 1
1c000188:	4405                	li	s0,1
#else
    li   x8, ARCHI_NB_CLUSTER
#endif
    la   x9, __rt_fc_cluster_data
1c00018a:	00015497          	auipc	s1,0x15
1c00018e:	ed248493          	addi	s1,s1,-302 # 1c01505c <__rt_fc_cluster_data>

1c000192 <__rt_remote_enqueue_event_loop_cluster>:

    // Loop over the clusters to see if there is an event to push
__rt_remote_enqueue_event_loop_cluster:
    lw   a1, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c000192:	40cc                	lw	a1,4(s1)
    beq  a1, x0, __rt_remote_enqueue_event_loop_cluster_continue
1c000194:	02058d63          	beqz	a1,1c0001ce <__rt_remote_enqueue_event_loop_cluster_continue>

    // Everytime a task is finished, first check if we can update the queue head
    // as it is not updated by cluster side to avoid race conditions.
    // At least this task won t be there anymore after we update, and maybe even
    // more tasks, which is not an issue, as we compare against the head.
    lw   a1, RT_FC_CLUSTER_DATA_T_CLUSTER_POOL(x9)
1c000198:	48cc                	lw	a1,20(s1)
    lw   a0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c00019a:	41c8                	lw	a0,4(a1)

    beq  a0, x0, __rt_cluster_pool_update_end
1c00019c:	00050e63          	beqz	a0,1c0001b8 <__rt_cluster_pool_update_end>

1c0001a0 <__rt_cluster_pool_update_loop>:

__rt_cluster_pool_update_loop:
    lw    a2, RT_CLUSTER_TASK_PENDING(a0)
1c0001a0:	5150                	lw	a2,36(a0)
    bnez  a2, __rt_cluster_pool_update_loop_end
1c0001a2:	e219                	bnez	a2,1c0001a8 <__rt_cluster_pool_update_loop_end>

    lw   a0, RT_CLUSTER_TASK_NEXT(a0)
1c0001a4:	5108                	lw	a0,32(a0)
    bnez a0, __rt_cluster_pool_update_loop
1c0001a6:	fd6d                	bnez	a0,1c0001a0 <__rt_cluster_pool_update_loop>

1c0001a8 <__rt_cluster_pool_update_loop_end>:


__rt_cluster_pool_update_loop_end:
    
    beqz a0, __rt_cluster_pool_update_no_current
1c0001a8:	c501                	beqz	a0,1c0001b0 <__rt_cluster_pool_update_no_current>

    lw   a0, RT_CLUSTER_TASK_NEXT(a0)
1c0001aa:	5108                	lw	a0,32(a0)
    sw   a0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c0001ac:	c1c8                	sw	a0,4(a1)

    j    __rt_cluster_pool_update_end
1c0001ae:	a029                	j	1c0001b8 <__rt_cluster_pool_update_end>

1c0001b0 <__rt_cluster_pool_update_no_current>:

__rt_cluster_pool_update_no_current:

    sw   x0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c0001b0:	0005a223          	sw	zero,4(a1)
    sw   x0, RT_CLUSTER_CALL_POOL_T_FIRST_LAST_FC(a1)
1c0001b4:	0005a423          	sw	zero,8(a1)

1c0001b8 <__rt_cluster_pool_update_end>:




__rt_cluster_pool_update_end:
    lw   a1, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c0001b8:	40cc                	lw	a1,4(s1)

    lw   a2, RT_FC_CLUSTER_DATA_T_TRIG_ADDR(x9)
1c0001ba:	4890                	lw	a2,16(s1)
    sw   x0, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c0001bc:	0004a223          	sw	zero,4(s1)

    sw   x0, 0(a2)
1c0001c0:	00062023          	sw	zero,0(a2)

    la   x9, __rt_remote_enqueue_event_loop_cluster_continue
1c0001c4:	00000497          	auipc	s1,0x0
1c0001c8:	00a48493          	addi	s1,s1,10 # 1c0001ce <__rt_remote_enqueue_event_loop_cluster_continue>
    j    __rt_event_enqueue
1c0001cc:	b789                	j	1c00010e <__rt_event_enqueue>

1c0001ce <__rt_remote_enqueue_event_loop_cluster_continue>:

__rt_remote_enqueue_event_loop_cluster_continue:
    addi x8, x8, -1
1c0001ce:	147d                	addi	s0,s0,-1
    bgt  x8, x0, __rt_remote_enqueue_event_loop_next_cluster
1c0001d0:	00804e63          	bgtz	s0,1c0001ec <__rt_remote_enqueue_event_loop_next_cluster>



    lw  x8, -4(sp)
1c0001d4:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c0001d8:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c0001dc:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c0001e0:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c0001e4:	fec12603          	lw	a2,-20(sp)

    mret
1c0001e8:	30200073          	mret

1c0001ec <__rt_remote_enqueue_event_loop_next_cluster>:

__rt_remote_enqueue_event_loop_next_cluster:
    la   x9, __rt_fc_cluster_data
1c0001ec:	00015497          	auipc	s1,0x15
1c0001f0:	e7048493          	addi	s1,s1,-400 # 1c01505c <__rt_fc_cluster_data>
    li   a1, RT_FC_CLUSTER_DATA_T_SIZEOF
1c0001f4:	02800593          	li	a1,40
    mul  a1, x8, a1
1c0001f8:	02b405b3          	mul	a1,s0,a1
    add  x9, x9, a1
1c0001fc:	94ae                	add	s1,s1,a1
    j __rt_remote_enqueue_event_loop_cluster
1c0001fe:	bf51                	j	1c000192 <__rt_remote_enqueue_event_loop_cluster>

1c000200 <__rt_call_external_c_function>:
#endif

  .global __rt_call_external_c_function
__rt_call_external_c_function:

    add  sp, sp, -128
1c000200:	7119                	addi	sp,sp,-128

    sw   ra, 0x00(sp)
1c000202:	c006                	sw	ra,0(sp)
    sw   gp, 0x04(sp)
1c000204:	c20e                	sw	gp,4(sp)
    sw   tp, 0x08(sp)
1c000206:	c412                	sw	tp,8(sp)
    sw   t0, 0x0C(sp)
1c000208:	c616                	sw	t0,12(sp)
    sw   t1, 0x10(sp)
1c00020a:	c81a                	sw	t1,16(sp)
    sw   t2, 0x14(sp)
1c00020c:	ca1e                	sw	t2,20(sp)
    sw   a3, 0x24(sp)
1c00020e:	d236                	sw	a3,36(sp)
    sw   a4, 0x28(sp)
1c000210:	d43a                	sw	a4,40(sp)
    sw   a5, 0x2C(sp)
1c000212:	d63e                	sw	a5,44(sp)
    sw   a6, 0x30(sp)
1c000214:	d842                	sw	a6,48(sp)
    sw   a7, 0x34(sp)
1c000216:	da46                	sw	a7,52(sp)
    sw   t3, 0x38(sp)
1c000218:	dc72                	sw	t3,56(sp)
    sw   t4, 0x3C(sp)
1c00021a:	de76                	sw	t4,60(sp)
    sw   t5, 0x40(sp)
1c00021c:	c0fa                	sw	t5,64(sp)
    sw   t6, 0x4C(sp)
1c00021e:	c6fe                	sw	t6,76(sp)

    jalr ra, a2
1c000220:	000600e7          	jalr	a2

    lw   ra, 0x00(sp)
1c000224:	4082                	lw	ra,0(sp)
    lw   gp, 0x04(sp)
1c000226:	4192                	lw	gp,4(sp)
    lw   tp, 0x08(sp)
1c000228:	4222                	lw	tp,8(sp)
    lw   t0, 0x0C(sp)
1c00022a:	42b2                	lw	t0,12(sp)
    lw   t1, 0x10(sp)
1c00022c:	4342                	lw	t1,16(sp)
    lw   t2, 0x14(sp)
1c00022e:	43d2                	lw	t2,20(sp)
    lw   a3, 0x24(sp)
1c000230:	5692                	lw	a3,36(sp)
    lw   a4, 0x28(sp)
1c000232:	5722                	lw	a4,40(sp)
    lw   a5, 0x2C(sp)
1c000234:	57b2                	lw	a5,44(sp)
    lw   a6, 0x30(sp)
1c000236:	5842                	lw	a6,48(sp)
    lw   a7, 0x34(sp)
1c000238:	58d2                	lw	a7,52(sp)
    lw   t3, 0x38(sp)
1c00023a:	5e62                	lw	t3,56(sp)
    lw   t4, 0x3C(sp)
1c00023c:	5ef2                	lw	t4,60(sp)
    lw   t5, 0x40(sp)
1c00023e:	4f06                	lw	t5,64(sp)
    lw   t6, 0x4C(sp)
1c000240:	4fb6                	lw	t6,76(sp)

    add  sp, sp, 128
1c000242:	6109                	addi	sp,sp,128

    jr   x9
1c000244:	8482                	jr	s1

1c000246 <__rt_illegal_instr>:

  .section .text
  
    .global __rt_illegal_instr
__rt_illegal_instr:
    sw   ra, -4(sp)
1c000246:	fe112e23          	sw	ra,-4(sp)
    sw   a0, -8(sp)
1c00024a:	fea12c23          	sw	a0,-8(sp)
    la   a0, __rt_handle_illegal_instr
1c00024e:	00010517          	auipc	a0,0x10
1c000252:	f5250513          	addi	a0,a0,-174 # 1c0101a0 <__rt_handle_illegal_instr>
    jal  ra, __rt_call_c_function
1c000256:	010000ef          	jal	ra,1c000266 <__rt_call_c_function>
    lw   ra, -4(sp)
1c00025a:	ffc12083          	lw	ra,-4(sp)
    lw   a0, -8(sp)
1c00025e:	ff812503          	lw	a0,-8(sp)
#if PULP_CORE == CORE_RISCV_V4
    mret
1c000262:	30200073          	mret

1c000266 <__rt_call_c_function>:
#endif


__rt_call_c_function:

    add  sp, sp, -128
1c000266:	7119                	addi	sp,sp,-128

    sw   ra, 0x00(sp)
1c000268:	c006                	sw	ra,0(sp)
    sw   gp, 0x04(sp)
1c00026a:	c20e                	sw	gp,4(sp)
    sw   tp, 0x08(sp)
1c00026c:	c412                	sw	tp,8(sp)
    sw   t0, 0x0C(sp)
1c00026e:	c616                	sw	t0,12(sp)
    sw   t1, 0x10(sp)
1c000270:	c81a                	sw	t1,16(sp)
    sw   t2, 0x14(sp)
1c000272:	ca1e                	sw	t2,20(sp)
    sw   a1, 0x1C(sp)
1c000274:	ce2e                	sw	a1,28(sp)
    sw   a2, 0x20(sp)
1c000276:	d032                	sw	a2,32(sp)
    sw   a3, 0x24(sp)
1c000278:	d236                	sw	a3,36(sp)
    sw   a4, 0x28(sp)
1c00027a:	d43a                	sw	a4,40(sp)
    sw   a5, 0x2C(sp)
1c00027c:	d63e                	sw	a5,44(sp)
    sw   a6, 0x30(sp)
1c00027e:	d842                	sw	a6,48(sp)
    sw   a7, 0x34(sp)
1c000280:	da46                	sw	a7,52(sp)
    sw   t3, 0x38(sp)
1c000282:	dc72                	sw	t3,56(sp)
    sw   t4, 0x3C(sp)
1c000284:	de76                	sw	t4,60(sp)
    sw   t5, 0x40(sp)
1c000286:	c0fa                	sw	t5,64(sp)
    sw   t6, 0x4C(sp)
1c000288:	c6fe                	sw	t6,76(sp)

    jalr ra, a0
1c00028a:	000500e7          	jalr	a0

    lw   ra, 0x00(sp)
1c00028e:	4082                	lw	ra,0(sp)
    lw   gp, 0x04(sp)
1c000290:	4192                	lw	gp,4(sp)
    lw   tp, 0x08(sp)
1c000292:	4222                	lw	tp,8(sp)
    lw   t0, 0x0C(sp)
1c000294:	42b2                	lw	t0,12(sp)
    lw   t1, 0x10(sp)
1c000296:	4342                	lw	t1,16(sp)
    lw   t2, 0x14(sp)
1c000298:	43d2                	lw	t2,20(sp)
    lw   a1, 0x1C(sp)
1c00029a:	45f2                	lw	a1,28(sp)
    lw   a2, 0x20(sp)
1c00029c:	5602                	lw	a2,32(sp)
    lw   a3, 0x24(sp)
1c00029e:	5692                	lw	a3,36(sp)
    lw   a4, 0x28(sp)
1c0002a0:	5722                	lw	a4,40(sp)
    lw   a5, 0x2C(sp)
1c0002a2:	57b2                	lw	a5,44(sp)
    lw   a6, 0x30(sp)
1c0002a4:	5842                	lw	a6,48(sp)
    lw   a7, 0x34(sp)
1c0002a6:	58d2                	lw	a7,52(sp)
    lw   t3, 0x38(sp)
1c0002a8:	5e62                	lw	t3,56(sp)
    lw   t4, 0x3C(sp)
1c0002aa:	5ef2                	lw	t4,60(sp)
    lw   t5, 0x40(sp)
1c0002ac:	4f06                	lw	t5,64(sp)
    lw   t6, 0x4C(sp)
1c0002ae:	4fb6                	lw	t6,76(sp)

    add  sp, sp, 128
1c0002b0:	6109                	addi	sp,sp,128

    jr   ra
1c0002b2:	8082                	ret

1c0002b4 <udma_event_handler>:

  .global udma_event_handler
udma_event_handler:

  // Dequeue the transfer which have just finished and mark it as done
  lw   x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0002b4:	4080                	lw	s0,0(s1)
  lw   x11, RT_PERIPH_CHANNEL_T_FIRST_TO_ENQUEUE(x9)   // This is used later on, just put here to fill the slot
1c0002b6:	448c                	lw	a1,8(s1)
  beq  x8, x0, __rt_udma_no_copy                       // Special case where there is no copy, just register the event in the bitfield
1c0002b8:	08040f63          	beqz	s0,1c000356 <__rt_udma_no_copy>
  lw   x12, RT_PERIPH_COPY_T_REPEAT(x8)
1c0002bc:	4c50                	lw	a2,28(s0)
  lw   x10, RT_PERIPH_COPY_T_NEXT(x8)
1c0002be:	4848                	lw	a0,20(s0)
  bne  x12, x0, repeat_transfer
1c0002c0:	04061f63          	bnez	a2,1c00031e <dmaCmd>
  sw   x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0002c4:	c088                	sw	a0,0(s1)
  
  // Handle any special end-of-transfer control
  lw       x10, RT_PERIPH_COPY_T_CTRL(x8)
1c0002c6:	4448                	lw	a0,12(s0)
  bnez     x10, handle_special_end
1c0002c8:	e15d                	bnez	a0,1c00036e <handle_special_end>

1c0002ca <resume_after_special_end>:
resume_after_special_end:


  // Now check if there are some transfers enqueued in the SW FIFO to be enqueued to the UDMA
  beq x11, x0, checkTask
1c0002ca:	02058f63          	beqz	a1,1c000308 <checkTask>

  // x9 contains the pointer to the channel and x11 the first copy

  // Update the FIFO pointers and just copy from node to UDMA
  lw  x12, RT_PERIPH_COPY_T_ENQUEUE_CALLBACK(x11)
1c0002ce:	4990                	lw	a2,16(a1)
  lw  x10, RT_PERIPH_COPY_T_NEXT(x11)
1c0002d0:	49c8                	lw	a0,20(a1)
  beqz x12, __rt_udma_call_enqueue_callback_resume
1c0002d2:	c611                	beqz	a2,1c0002de <__rt_udma_call_enqueue_callback_resume>

  la  x9, __rt_udma_call_enqueue_callback_resume
1c0002d4:	00000497          	auipc	s1,0x0
1c0002d8:	00a48493          	addi	s1,s1,10 # 1c0002de <__rt_udma_call_enqueue_callback_resume>
  jr  x12
1c0002dc:	8602                	jr	a2

1c0002de <__rt_udma_call_enqueue_callback_resume>:

__rt_udma_call_enqueue_callback_resume:
  lw  x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0002de:	44d0                	lw	a2,12(s1)
  sw  x10, RT_PERIPH_CHANNEL_T_FIRST_TO_ENQUEUE(x9)
1c0002e0:	c488                	sw	a0,8(s1)
  lw  x10, RT_PERIPH_COPY_T_ADDR(x11)
1c0002e2:	4188                	lw	a0,0(a1)
  lw  x9, RT_PERIPH_COPY_T_SIZE(x11)
1c0002e4:	41c4                	lw	s1,4(a1)
  sw  x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0002e6:	c208                	sw	a0,0(a2)
  sw  x9, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0002e8:	c244                	sw	s1,4(a2)

  lw  x9, RT_PERIPH_COPY_T_CTRL(x11)
1c0002ea:	45c4                	lw	s1,12(a1)
  andi x9, x9, (1<<RT_PERIPH_COPY_CTRL_TYPE_WIDTH)-1
1c0002ec:	88bd                	andi	s1,s1,15
  li  x10, RT_PERIPH_COPY_SPECIAL_ENQUEUE_THRESHOLD
1c0002ee:	4515                	li	a0,5
  blt x9, x10, transfer_resume
1c0002f0:	00a4ca63          	blt	s1,a0,1c000304 <transfer_resume>
  li          x10, RT_PERIPH_COPY_HYPER
  beq         x9, x10, hyper
  li          x10, RT_PERIPH_COPY_FC_TCDM
  beq         x9, x10, fc_tcdm
#else
  p.beqimm      x9, RT_PERIPH_COPY_HYPER, hyper
1c0002f4:	0064a463          	p.beqimm	s1,6,1c0002fc <dual>
  p.beqimm      x9, RT_PERIPH_COPY_FC_TCDM, fc_tcdm
1c0002f8:	0074a263          	p.beqimm	s1,7,1c0002fc <dual>

1c0002fc <dual>:
#ifdef RV_ISA_RV32
  li    x10, ~(1<<UDMA_CHANNEL_SIZE_LOG2)
  and   x9, x12, x10
  lw    x10, RT_PERIPH_COPY_T_HYPER_ADDR(x11)
#else
  lw    x10, RT_PERIPH_COPY_T_HYPER_ADDR(x11)
1c0002fc:	51c8                	lw	a0,36(a1)
  p.bclr  x9, x12, 0, UDMA_CHANNEL_SIZE_LOG2
1c0002fe:	c04634b3          	p.bclr	s1,a2,0,4
#endif
  sw    x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c000302:	d088                	sw	a0,32(s1)

1c000304 <transfer_resume>:
#endif

transfer_resume:
  lw  x10, RT_PERIPH_COPY_T_CFG(x11)
1c000304:	4588                	lw	a0,8(a1)
  sw  x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c000306:	c608                	sw	a0,8(a2)

1c000308 <checkTask>:

checkTask:

  // Check if we have a DMA transfer from L2 to L1   
  //lw          x10, RT_PERIPH_COPY_T_DMACMD(x8)           // Not null if we must transfer
  lw          x11, RT_PERIPH_COPY_T_EVENT(x8)             // Read this in advance to fill the slot, it is used later on in case there is no DMA command
1c000308:	4c0c                	lw	a1,24(s0)

  //bne         x10, zero, dmaCmd
  la          x9, udma_event_handler_end
1c00030a:	00000497          	auipc	s1,0x0
1c00030e:	19a48493          	addi	s1,s1,410 # 1c0004a4 <udma_event_handler_end>
  bne         x11, zero, __rt_event_enqueue
1c000312:	00058463          	beqz	a1,1c00031a <checkTask+0x12>
1c000316:	df9ff06f          	j	1c00010e <__rt_event_enqueue>

  // Loop again in case there are still events in the FIFO
  j udma_event_handler_end
1c00031a:	18a0006f          	j	1c0004a4 <udma_event_handler_end>

1c00031e <dmaCmd>:
//   x12 : number of bytes to repeat
repeat_transfer:

#ifdef ARCHI_UDMA_HAS_HYPER

  lw      x11, RT_PERIPH_CHANNEL_T_BASE(x9)
1c00031e:	44cc                	lw	a1,12(s1)
#ifdef RV_ISA_RV32
  li      x10, ~(1<<UDMA_CHANNEL_SIZE_LOG2)
  and     x9, x11, x10
  lw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
#else
  lw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
1c000320:	5048                	lw	a0,36(s0)
  p.bclr  x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c000322:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add     x10, x10, x12
1c000326:	9532                	add	a0,a0,a2
  sw      x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c000328:	d088                	sw	a0,32(s1)
  sw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
1c00032a:	d048                	sw	a0,36(s0)

  lw      x10, RT_PERIPH_COPY_T_ADDR(x8)
1c00032c:	4008                	lw	a0,0(s0)
  lw      x9, RT_PERIPH_COPY_T_REPEAT_SIZE(x8)
1c00032e:	5004                	lw	s1,32(s0)
  add     x10, x10, x12
1c000330:	9532                	add	a0,a0,a2
  sub     x9, x9, x12
1c000332:	8c91                	sub	s1,s1,a2
  blt     x12, x9, not_last
1c000334:	00964963          	blt	a2,s1,1c000346 <not_last>
  mv      x12, x9
1c000338:	8626                	mv	a2,s1
  sw      x0, RT_PERIPH_COPY_T_REPEAT(x8)
1c00033a:	00042e23          	sw	zero,28(s0)
  beq     x12, x0, udma_event_handler_end
1c00033e:	00061463          	bnez	a2,1c000346 <not_last>
1c000342:	1620006f          	j	1c0004a4 <udma_event_handler_end>

1c000346 <not_last>:

not_last:
  sw      x10, RT_PERIPH_COPY_T_ADDR(x8)
1c000346:	c008                	sw	a0,0(s0)
  sw      x9, RT_PERIPH_COPY_T_REPEAT_SIZE(x8)
1c000348:	d004                	sw	s1,32(s0)
  sw      x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c00034a:	c188                	sw	a0,0(a1)
  sw      x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c00034c:	c1d0                	sw	a2,4(a1)

  li      x10, UDMA_CHANNEL_CFG_EN
1c00034e:	4541                	li	a0,16
  sw      x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c000350:	c588                	sw	a0,8(a1)

#endif

  j           udma_event_handler_end
1c000352:	1520006f          	j	1c0004a4 <udma_event_handler_end>

1c000356 <__rt_udma_no_copy>:




__rt_udma_no_copy:
  la      x9, __rt_socevents_status
1c000356:	e4000497          	auipc	s1,0xe4000
1c00035a:	f5a48493          	addi	s1,s1,-166 # 2b0 <__rt_socevents_status>
  lw      x8, 0(x9)
1c00035e:	4080                	lw	s0,0(s1)
  li      x11, 1
1c000360:	4585                	li	a1,1
  sll     x10, x11, x10
1c000362:	00a59533          	sll	a0,a1,a0
  or      x8, x8, x10
1c000366:	8c49                	or	s0,s0,a0
  sw      x8, 0(x9)
1c000368:	c080                	sw	s0,0(s1)
  j udma_event_handler_end
1c00036a:	13a0006f          	j	1c0004a4 <udma_event_handler_end>

1c00036e <handle_special_end>:
  li          x12, RT_PERIPH_COPY_I2C_STEP1
  beq         x10, x12, i2c_step1
  li          x12, RT_PERIPH_COPY_I2C_STEP2
  beq         x10, x12, i2c_step2
#else
  p.beqimm    x10, RT_PERIPH_COPY_I2C_STEP1, i2c_step1  
1c00036e:	04352463          	p.beqimm	a0,3,1c0003b6 <i2c_step1>
  p.beqimm    x10, RT_PERIPH_COPY_I2C_STEP2, i2c_step2
1c000372:	06452063          	p.beqimm	a0,4,1c0003d2 <i2c_step2>
#endif

  j           resume_after_special_end
1c000376:	bf91                	j	1c0002ca <resume_after_special_end>

1c000378 <spim_step3>:


spim_step3:
  // The current copy was enqueued to configure spi, cs and send command
  // now we need to reenqueue the same copy with the user buffer.
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL1(x8)
1c000378:	5408                	lw	a0,40(s0)
  sw          x10, RT_PERIPH_COPY_T_CTRL(x8)
1c00037a:	c448                	sw	a0,12(s0)

  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c00037c:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c00037e:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c000380:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c000382:	44d0                	lw	a2,12(s1)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL2(x8)
1c000384:	5448                	lw	a0,44(s0)
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c000386:	c208                	sw	a0,0(a2)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL0(x8)
1c000388:	5048                	lw	a0,36(s0)
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c00038a:	c248                	sw	a0,4(a2)
  lw          x10, RT_PERIPH_COPY_T_CFG(x8)
1c00038c:	4408                	lw	a0,8(s0)
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c00038e:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c000390:	1140006f          	j	1c0004a4 <udma_event_handler_end>

1c000394 <spim_step2>:

spim_step2:
  // Now that the user data has been pushed, we must push an EOT command
  sw          x0, RT_PERIPH_COPY_T_CTRL(x8)
1c000394:	00042623          	sw	zero,12(s0)
  
  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c000398:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c00039a:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c00039c:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  #if PULP_CHIP_FAMILY == CHIP_GAP

  lw          x8, RT_PERIPH_COPY_T_PERIPH_DATA(x8)
1c00039e:	4060                	lw	s0,68(s0)
  li          x12, SPI_CMD_EOT(0)
1c0003a0:	90000637          	lui	a2,0x90000
  sw          x12, 0(x8)
1c0003a4:	c010                	sw	a2,0(s0)
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0003a6:	44d0                	lw	a2,12(s1)
  sw          x8, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0003a8:	c200                	sw	s0,0(a2)
  addi        x10, x8, RT_PERIPH_COPY_T_PERIPH_DATA
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)

  #endif

  li          x10, 4
1c0003aa:	4511                	li	a0,4
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0003ac:	c248                	sw	a0,4(a2)
  li          x10, UDMA_CHANNEL_CFG_EN
1c0003ae:	4541                	li	a0,16
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c0003b0:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c0003b2:	0f20006f          	j	1c0004a4 <udma_event_handler_end>

1c0003b6 <i2c_step1>:
 */

i2c_step1:
  // The current copy was enqueued to configure i2c, cs and send command
  // now we need to reenqueue the same copy with the user buffer.
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL1(x8)
1c0003b6:	5408                	lw	a0,40(s0)
  sw          x10, RT_PERIPH_COPY_T_CTRL(x8)
1c0003b8:	c448                	sw	a0,12(s0)

  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003ba:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c0003bc:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003be:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0003c0:	44d0                	lw	a2,12(s1)
  lw          x10, RT_PERIPH_COPY_T_ADDR(x8)
1c0003c2:	4008                	lw	a0,0(s0)
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0003c4:	c208                	sw	a0,0(a2)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL0(x8)
1c0003c6:	5048                	lw	a0,36(s0)
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0003c8:	c248                	sw	a0,4(a2)
  lw          x10, RT_PERIPH_COPY_T_CFG(x8)
1c0003ca:	4408                	lw	a0,8(s0)
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c0003cc:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c0003ce:	0d60006f          	j	1c0004a4 <udma_event_handler_end>

1c0003d2 <i2c_step2>:

i2c_step2:
  // Now that the user data has been pushed, we must push a STOP command
  sw          x0, RT_PERIPH_COPY_T_CTRL(x8)
1c0003d2:	00042623          	sw	zero,12(s0)
  
  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003d6:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c0003d8:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003da:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  #if PULP_CHIP_FAMILY == CHIP_GAP

  lw          x8, RT_PERIPH_COPY_T_PERIPH_DATA(x8)
1c0003dc:	4060                	lw	s0,68(s0)
  li          x12, I2C_CMD_STOP
1c0003de:	02000613          	li	a2,32
  sw          x12, 0(x8)
1c0003e2:	c010                	sw	a2,0(s0)
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0003e4:	44d0                	lw	a2,12(s1)
  sw          x8, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0003e6:	c200                	sw	s0,0(a2)
  addi        x10, x8, RT_PERIPH_COPY_T_PERIPH_DATA
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)

  #endif

  li          x10, 1
1c0003e8:	4505                	li	a0,1
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0003ea:	c248                	sw	a0,4(a2)
  li          x10, UDMA_CHANNEL_CFG_EN
1c0003ec:	4541                	li	a0,16
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c0003ee:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c0003f0:	0b40006f          	j	1c0004a4 <udma_event_handler_end>

1c0003f4 <__rt_fc_socevents_handler>:

  .global __rt_fc_socevents_handler
  .extern pwm_event_handler
__rt_fc_socevents_handler:
// The stack is first adjusted to have stack-based load/store compressed
  add sp, sp, -128
1c0003f4:	7119                	addi	sp,sp,-128
  sw  x8, 0(sp)
1c0003f6:	c022                	sw	s0,0(sp)
  sw  x9, 4(sp)
1c0003f8:	c226                	sw	s1,4(sp)
  sw  x10, 8(sp)
1c0003fa:	c42a                	sw	a0,8(sp)
  sw  x11, 12(sp)
1c0003fc:	c62e                	sw	a1,12(sp)
  sw  x12, 16(sp)
1c0003fe:	c832                	sw	a2,16(sp)


  // Pop one element from the FIFO
  li  x8, ARCHI_EU_ADDR + EU_SOC_EVENTS_AREA_OFFSET + EU_SOC_EVENTS_CURRENT_EVENT
1c000400:	00201437          	lui	s0,0x201
1c000404:	f0040413          	addi	s0,s0,-256 # 200f00 <__L2+0x180f00>
  lw  x8, 0(x8)
1c000408:	4000                	lw	s0,0(s0)

  // Now that we popped the element, we can clear the soc event FIFO event as the FIFO is generating
  // an event as soon as the FIFO is not empty
  li  x9, 1<<PULP_SOC_EVENTS_EVENT
1c00040a:	080004b7          	lui	s1,0x8000
  li  x10, ARCHI_EU_DEMUX_ADDR + EU_CORE_BUFFER_CLEAR
1c00040e:	00204537          	lui	a0,0x204
1c000412:	02850513          	addi	a0,a0,40 # 204028 <__L2+0x184028>
  sw  x9, 0(x10)
1c000416:	c104                	sw	s1,0(a0)
  // Due to a HW bug in the core on Gap, we have to load this value early
#ifdef CONFIG_NO_FC_TINY
  la    x12, __rt_hyper_udma_handle
  lw    x12, 0(x12)
#else
  lw    x12, %tiny(__rt_hyper_udma_handle)(x0)
1c000418:	30802603          	lw	a2,776(zero) # 308 <__rt_hyper_udma_handle>
#endif
#endif

  // Extract ID part
  p.extractu x10, x8, EU_SOC_EVENTS_EVENT_MASK_BITS-1, EU_SOC_EVENTS_EVENT_MASK_OFFSET
1c00041c:	ce041533          	p.extractu	a0,s0,7,0

#ifdef ARCHI_UDMA_HAS_HYPER
  p.bneimm x10, UDMA_EVENT_ID(ARCHI_UDMA_HYPER_ID(0)), __rt_fc_socevents_not_hyper_rx
1c000420:	00653363          	p.bneimm	a0,6,1c000426 <__rt_fc_socevents_not_hyper_rx>
  jr x12
1c000424:	8602                	jr	a2

1c000426 <__rt_fc_socevents_not_hyper_rx>:

__rt_fc_socevents_not_hyper_rx:
  p.bneimm x10, UDMA_EVENT_ID(ARCHI_UDMA_HYPER_ID(0))+1, __rt_fc_socevents_not_hyper_tx
1c000426:	00753363          	p.bneimm	a0,7,1c00042c <__rt_fc_socevents_not_hyper_tx>
  jr x12
1c00042a:	8602                	jr	a2

1c00042c <__rt_fc_socevents_not_hyper_tx>:
#endif

__rt_fc_socevents_not_hyper_tx:

  // UDMA CHANNEL EVENTS
  li x9, ARCHI_SOC_EVENT_UDMA_NB_EVT
1c00042c:	44cd                	li	s1,19
  bge x10, x9, __rt_soc_evt_no_udma_channel
1c00042e:	00955c63          	ble	s1,a0,1c000446 <__rt_soc_evt_no_udma_channel>
  andi   x8, x10, 1
  srli   x10, x10, 1
  or     x10, x10, x8
#endif

  la     x8, periph_channels
1c000432:	e4000417          	auipc	s0,0xe4000
1c000436:	bfe40413          	addi	s0,s0,-1026 # 30 <periph_channels>
  slli   x9, x10, RT_PERIPH_CHANNEL_T_SIZEOF_LOG2
1c00043a:	00551493          	slli	s1,a0,0x5
  add    x9, x9, x8
1c00043e:	94a2                	add	s1,s1,s0

  lw   x11, RT_PERIPH_CHANNEL_T_CALLBACK(x9)
1c000440:	4ccc                	lw	a1,28(s1)
  lw   x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c000442:	4080                	lw	s0,0(s1)

  jr   x11
1c000444:	8582                	jr	a1

1c000446 <__rt_soc_evt_no_udma_channel>:


__rt_soc_evt_no_udma_channel:

  li x9, ARCHI_SOC_EVENT_UDMA_FIRST_EXTRA_EVT + ARCHI_SOC_EVENT_UDMA_NB_EXTRA_EVT
1c000446:	44f9                	li	s1,30
  bge x10, x9, __rt_soc_evt_no_udma
1c000448:	00955b63          	ble	s1,a0,1c00045e <__rt_soc_evt_no_udma>

  addi x8, x10, -ARCHI_SOC_EVENT_UDMA_FIRST_EXTRA_EVT
1c00044c:	fec50413          	addi	s0,a0,-20
  slli x11, x8, 2
1c000450:	00241593          	slli	a1,s0,0x2
  la   x12, __rt_udma_extra_callback
  p.lw x12, x12(x11)
  la   x9, __rt_udma_extra_callback_arg
  p.lw x11, x9(x11)
#else
  lw   x12, %tiny(__rt_udma_extra_callback)(x11)
1c000454:	2b85a603          	lw	a2,696(a1)
  lw   x11, %tiny(__rt_udma_extra_callback_arg)(x11)
1c000458:	2e05a583          	lw	a1,736(a1)
#endif

  jr   x12
1c00045c:	8602                	jr	a2

1c00045e <__rt_soc_evt_no_udma>:

  .global __rt_soc_evt_no_udma
__rt_soc_evt_no_udma:
#ifdef RT_CONFIG_GPIO_ENABLED
  // GPIO EVENT
  li      x9, ARCHI_SOC_EVENT_GPIO
1c00045e:	02a00493          	li	s1,42
  beq     x10, x9, __rt_gpio_handler
1c000462:	00951463          	bne	a0,s1,1c00046a <__rt_soc_evt_no_udma+0xc>
1c000466:	1740006f          	j	1c0005da <__rt_gpio_handler>
#endif

  li      x9, ARCHI_SOC_EVENT_RTC_IRQ
1c00046a:	02c00493          	li	s1,44
  beq     x9, x10, rtc_event_handler
1c00046e:	04a48363          	beq	s1,a0,1c0004b4 <rtc_event_handler>

1c000472 <__rt_soc_evt_pwm>:


// pwm event handler
//x9 : nb of event that will be used by handler
__rt_soc_evt_pwm:
  li x11, ARCHI_SOC_EVENT_ADV_TIMER_NB_EVT-1 // 3
1c000472:	458d                	li	a1,3
  addi x9, x11, ARCHI_SOC_EVENT_ADV_TIMER_FIRST_EVT //3+38=41
1c000474:	02658493          	addi	s1,a1,38
  sub x9, x9, x10 // 41 - 56
1c000478:	8c89                	sub	s1,s1,a0
  bgt x9, x11, __rt_soc_evt_store // if > 3 not for pwm
1c00047a:	0095c663          	blt	a1,s1,1c000486 <__rt_soc_evt_store>
  blt x9, x0,  __rt_soc_evt_store // if > 3 not for pwm
1c00047e:	0004c463          	bltz	s1,1c000486 <__rt_soc_evt_store>
  j pwm_event_handler
1c000482:	1340006f          	j	1c0005b6 <pwm_event_handler>

1c000486 <__rt_soc_evt_store>:


__rt_soc_evt_store:
  // If the event is not handled, store it in the soc event status mask
  la      x9, __rt_socevents_status
1c000486:	e4000497          	auipc	s1,0xe4000
1c00048a:	e2a48493          	addi	s1,s1,-470 # 2b0 <__rt_socevents_status>
  li      x11, 32
1c00048e:	02000593          	li	a1,32
  blt     x10, x11, socevents_set
1c000492:	00b54463          	blt	a0,a1,1c00049a <socevents_set>
  addi    x9, x9, 4
1c000496:	0491                	addi	s1,s1,4
  addi    x10, x10, -32
1c000498:	1501                	addi	a0,a0,-32

1c00049a <socevents_set>:

socevents_set:
  lw      x11, 0(x9)
1c00049a:	408c                	lw	a1,0(s1)
  p.bsetr x12, x11, x10
1c00049c:	80a5c633          	p.bsetr	a2,a1,a0
  sw      x12, 0(x9)
1c0004a0:	c090                	sw	a2,0(s1)
  j       udma_event_handler_end
1c0004a2:	a009                	j	1c0004a4 <udma_event_handler_end>

1c0004a4 <udma_event_handler_end>:

  .global udma_event_handler_end
udma_event_handler_end:
  lw  x8, 0(sp)
1c0004a4:	4402                	lw	s0,0(sp)
  lw  x9, 4(sp)
1c0004a6:	4492                	lw	s1,4(sp)
  lw  x10, 8(sp)
1c0004a8:	4522                	lw	a0,8(sp)
  lw  x11, 12(sp)
1c0004aa:	45b2                	lw	a1,12(sp)
  lw  x12, 16(sp)
1c0004ac:	4642                	lw	a2,16(sp)
  add sp, sp, 128
1c0004ae:	6109                	addi	sp,sp,128
  mret
1c0004b0:	30200073          	mret

1c0004b4 <rtc_event_handler>:


rtc_event_handler:
  lw    x11, __rtc_handler
1c0004b4:	e4000597          	auipc	a1,0xe4000
1c0004b8:	edc5a583          	lw	a1,-292(a1) # 390 <__rtc_handler>
  la    x9, udma_event_handler_end
1c0004bc:	00000497          	auipc	s1,0x0
1c0004c0:	fe848493          	addi	s1,s1,-24 # 1c0004a4 <udma_event_handler_end>
  j   __rt_event_enqueue
1c0004c4:	c4bff06f          	j	1c00010e <__rt_event_enqueue>

1c0004c8 <__rt_hyper_handle_copy>:

#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_repeat
  lw    x12, 0(x8)
#else
  lw    x12, %tiny(__rt_hyper_pending_repeat)(x0)
1c0004c8:	31802603          	lw	a2,792(zero) # 318 <__rt_hyper_pending_repeat>
#endif
  beqz      x12, __rt_hyper_handle_copy_end
1c0004cc:	c621                	beqz	a2,1c000514 <__rt_hyper_handle_copy_end>

1c0004ce <__rt_hyper_repeat_copy>:

#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_base
  lw        x11, 0(x8)
#else
  lw        x11, %tiny(__rt_hyper_pending_base)(x0)
1c0004ce:	30c02583          	lw	a1,780(zero) # 30c <__rt_hyper_pending_base>
#else
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_hyper_addr
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c0004d2:	31002503          	lw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>
#endif
  p.bclr    x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c0004d6:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add       x10, x10, x12
1c0004da:	9532                	add	a0,a0,a2
  sw        x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c0004dc:	d088                	sw	a0,32(s1)
  la        x8, __rt_hyper_pending_addr
  lw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  lw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c0004de:	30a02823          	sw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>

  lw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c0004e2:	31402503          	lw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  lw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c0004e6:	31c02483          	lw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  add       x10, x10, x12
1c0004ea:	9532                	add	a0,a0,a2
  sub       x9, x9, x12
1c0004ec:	8c91                	sub	s1,s1,a2
  blt       x12, x9, __rt_hyper_repeat_copy_not_last
1c0004ee:	00964963          	blt	a2,s1,1c000500 <__rt_hyper_repeat_copy_not_last>
  mv        x12, x9
1c0004f2:	8626                	mv	a2,s1
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_repeat
  sw        x0, 0(x8)
#else
  sw        x0, %tiny(__rt_hyper_pending_repeat)(x0)
1c0004f4:	30002c23          	sw	zero,792(zero) # 318 <__rt_hyper_pending_repeat>
#endif
  beq       x12, x0, udma_event_handler_end
1c0004f8:	00061463          	bnez	a2,1c000500 <__rt_hyper_repeat_copy_not_last>
1c0004fc:	fa9ff06f          	j	1c0004a4 <udma_event_handler_end>

1c000500 <__rt_hyper_repeat_copy_not_last>:
  la        x8, __rt_hyper_pending_addr
  sw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  sw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c000500:	30a02a23          	sw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  sw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c000504:	30902e23          	sw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  sw        x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c000508:	c188                	sw	a0,0(a1)
  sw        x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c00050a:	c1d0                	sw	a2,4(a1)

  li        x10, UDMA_CHANNEL_CFG_EN
1c00050c:	4541                	li	a0,16
  sw        x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c00050e:	c588                	sw	a0,8(a1)

  j         udma_event_handler_end
1c000510:	f95ff06f          	j	1c0004a4 <udma_event_handler_end>

1c000514 <__rt_hyper_handle_copy_end>:
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_end_task
  lw        x11, 0(x8)
  sw        x0, 0(x8)
#else
  lw        x11, %tiny(__rt_hyper_end_task)(x0)
1c000514:	32002583          	lw	a1,800(zero) # 320 <__rt_hyper_end_task>
  sw        x0, %tiny(__rt_hyper_end_task)(x0)
1c000518:	32002023          	sw	zero,800(zero) # 320 <__rt_hyper_end_task>
#endif
  beqz      x11, __rt_hyper_handle_emu_task
1c00051c:	c589                	beqz	a1,1c000526 <__rt_hyper_handle_emu_task>
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_current_task
  sw        x0, 0(x8)
#else
  sw        x0, %tiny(__rt_hyper_current_task)(x0)
1c00051e:	32002223          	sw	zero,804(zero) # 324 <__rt_hyper_current_task>
#endif
  jal       x9, __rt_event_enqueue
1c000522:	bedff4ef          	jal	s1,1c00010e <__rt_event_enqueue>

1c000526 <__rt_hyper_handle_emu_task>:
__rt_hyper_handle_emu_task:
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_emu_task
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_emu_task)(x0)
1c000526:	33c02503          	lw	a0,828(zero) # 33c <__rt_hyper_pending_emu_task>
#endif
  beqz      x10, __rt_hyper_handle_pending_tasks
1c00052a:	c919                	beqz	a0,1c000540 <__rt_hyper_handle_pending_tasks>

  la      x12, __rt_hyper_resume_emu_task
1c00052c:	00012617          	auipc	a2,0x12
1c000530:	ccc60613          	addi	a2,a2,-820 # 1c0121f8 <__rt_hyper_resume_emu_task>
  la        x9, udma_event_handler_end
1c000534:	00000497          	auipc	s1,0x0
1c000538:	f7048493          	addi	s1,s1,-144 # 1c0004a4 <udma_event_handler_end>
  j         __rt_call_external_c_function
1c00053c:	cc5ff06f          	j	1c000200 <__rt_call_external_c_function>

1c000540 <__rt_hyper_handle_pending_tasks>:
__rt_hyper_handle_pending_tasks:
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_tasks
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_tasks)(x0)
1c000540:	34002503          	lw	a0,832(zero) # 340 <__rt_hyper_pending_tasks>
#endif
  beqz      x10, udma_event_handler_end
1c000544:	00051463          	bnez	a0,1c00054c <__rt_hyper_handle_pending_tasks+0xc>
1c000548:	f5dff06f          	j	1c0004a4 <udma_event_handler_end>

  la      x12, __rt_hyper_resume_copy
1c00054c:	00012617          	auipc	a2,0x12
1c000550:	cb460613          	addi	a2,a2,-844 # 1c012200 <__rt_hyper_resume_copy>
  la        x9, udma_event_handler_end
1c000554:	00000497          	auipc	s1,0x0
1c000558:	f5048493          	addi	s1,s1,-176 # 1c0004a4 <udma_event_handler_end>
  j         __rt_call_external_c_function
1c00055c:	ca5ff06f          	j	1c000200 <__rt_call_external_c_function>

1c000560 <__rt_hyper_handle_burst>:
  la        x8, __rt_hyper_pending_repeat
  lw        x12, 0(x8)
  la        x8, __rt_hyper_pending_base
  lw        x11, 0(x8)
#else
  lw        x12, %tiny(__rt_hyper_pending_repeat)(x0)
1c000560:	31802603          	lw	a2,792(zero) # 318 <__rt_hyper_pending_repeat>

  lw        x11, %tiny(__rt_hyper_pending_base)(x0)
1c000564:	30c02583          	lw	a1,780(zero) # 30c <__rt_hyper_pending_base>
#else
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_hyper_addr
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c000568:	31002503          	lw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>
#endif
  p.bclr    x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c00056c:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add       x10, x10, x12
1c000570:	9532                	add	a0,a0,a2
  sw        x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c000572:	d088                	sw	a0,32(s1)
  la        x8, __rt_hyper_pending_addr
  lw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  lw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c000574:	30a02823          	sw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>

  lw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c000578:	31402503          	lw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  lw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c00057c:	31c02483          	lw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  add       x10, x10, x12
1c000580:	9532                	add	a0,a0,a2
  sub       x9, x9, x12
1c000582:	8c91                	sub	s1,s1,a2
  blt       x12, x9, __rt_hyper_repeat_copy_not_last2
1c000584:	00964f63          	blt	a2,s1,1c0005a2 <__rt_hyper_repeat_copy_not_last2>

  la        x12, __rt_hyper_handle_copy
1c000588:	00000617          	auipc	a2,0x0
1c00058c:	f4060613          	addi	a2,a2,-192 # 1c0004c8 <__rt_hyper_handle_copy>
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_udma_handle
  sw        x12, 0(x8)
#else
  sw        x12, %tiny(__rt_hyper_udma_handle)(x0)
1c000590:	30c02423          	sw	a2,776(zero) # 308 <__rt_hyper_udma_handle>
#endif

  mv        x12, x9
1c000594:	8626                	mv	a2,s1
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_repeat
  sw        x0, 0(x8)
#else
  sw        x0, %tiny(__rt_hyper_pending_repeat)(x0)
1c000596:	30002c23          	sw	zero,792(zero) # 318 <__rt_hyper_pending_repeat>
#endif
  beq       x12, x0, udma_event_handler_end
1c00059a:	00061463          	bnez	a2,1c0005a2 <__rt_hyper_repeat_copy_not_last2>
1c00059e:	f07ff06f          	j	1c0004a4 <udma_event_handler_end>

1c0005a2 <__rt_hyper_repeat_copy_not_last2>:
  la        x8, __rt_hyper_pending_addr
  sw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  sw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c0005a2:	30a02a23          	sw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  sw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c0005a6:	30902e23          	sw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  sw        x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c0005aa:	c188                	sw	a0,0(a1)
  sw        x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c0005ac:	c1d0                	sw	a2,4(a1)

  li        x10, UDMA_CHANNEL_CFG_EN
1c0005ae:	4541                	li	a0,16
  sw        x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c0005b0:	c588                	sw	a0,8(a1)

  j         udma_event_handler_end
1c0005b2:	ef3ff06f          	j	1c0004a4 <udma_event_handler_end>

1c0005b6 <pwm_event_handler>:
#include "archi/eu/eu_v3.h"

  .global pwm_event_handler
  .extern pwmEventsStatus
pwm_event_handler:
  la   x10, pwmEventsStatus
1c0005b6:	e4000517          	auipc	a0,0xe4000
1c0005ba:	d9e50513          	addi	a0,a0,-610 # 354 <pwmEventsStatus>
  addi  x11, x0, 1
1c0005be:	00100593          	li	a1,1
  lw   x8, 0(x10)
1c0005c2:	4100                	lw	s0,0(a0)
  p.insertr x8, x11, x9
1c0005c4:	8095a433          	p.insertr	s0,a1,s1
  sw   x8, 0(x10)
1c0005c8:	c100                	sw	s0,0(a0)

  // continue with sw event raising
  li   x9, ARCHI_EU_DEMUX_ADDR + EU_SW_EVENTS_DEMUX_OFFSET + EU_CORE_TRIGG_SW_EVENT + (PLP_RT_NOTIF_EVENT << 2)
1c0005ca:	002044b7          	lui	s1,0x204
1c0005ce:	10c48493          	addi	s1,s1,268 # 20410c <__L2+0x18410c>
  li   x10, -1
1c0005d2:	557d                	li	a0,-1
  sw   x10, 0(x9)
1c0005d4:	c088                	sw	a0,0(s1)

  j udma_event_handler_end
1c0005d6:	ecfff06f          	j	1c0004a4 <udma_event_handler_end>

1c0005da <__rt_gpio_handler>:
  bnez     x8, __rt_gpio_ff1_loop
#endif

#else
  .extern __pi_gpio_handler
  mv        x11, x8
1c0005da:	85a2                	mv	a1,s0
  la        x12, __pi_gpio_handler
1c0005dc:	00012617          	auipc	a2,0x12
1c0005e0:	cec60613          	addi	a2,a2,-788 # 1c0122c8 <__pi_gpio_handler>
  la        x9, __rt_gpio_handler_end
1c0005e4:	00000497          	auipc	s1,0x0
1c0005e8:	00c48493          	addi	s1,s1,12 # 1c0005f0 <__rt_gpio_handler_end>
  j         __rt_call_external_c_function
1c0005ec:	c15ff06f          	j	1c000200 <__rt_call_external_c_function>

1c0005f0 <__rt_gpio_handler_end>:

  mret

#else

  j udma_event_handler_end
1c0005f0:	eb5ff06f          	j	1c0004a4 <udma_event_handler_end>

1c0005f4 <__udivdi3>:
1c0005f4:	87b2                	mv	a5,a2
1c0005f6:	8736                	mv	a4,a3
1c0005f8:	88aa                	mv	a7,a0
1c0005fa:	882e                	mv	a6,a1
1c0005fc:	1e069d63          	bnez	a3,1c0007f6 <__udivdi3+0x202>
1c000600:	1c014337          	lui	t1,0x1c014
1c000604:	d9030313          	addi	t1,t1,-624 # 1c013d90 <__clz_tab>
1c000608:	0ac5fd63          	bleu	a2,a1,1c0006c2 <__udivdi3+0xce>
1c00060c:	6741                	lui	a4,0x10
1c00060e:	0ae67363          	bleu	a4,a2,1c0006b4 <__udivdi3+0xc0>
1c000612:	0ff00693          	li	a3,255
1c000616:	00c6b6b3          	sltu	a3,a3,a2
1c00061a:	068e                	slli	a3,a3,0x3
1c00061c:	00d65733          	srl	a4,a2,a3
1c000620:	933a                	add	t1,t1,a4
1c000622:	00034703          	lbu	a4,0(t1)
1c000626:	02000313          	li	t1,32
1c00062a:	96ba                	add	a3,a3,a4
1c00062c:	40d30333          	sub	t1,t1,a3
1c000630:	00030c63          	beqz	t1,1c000648 <__udivdi3+0x54>
1c000634:	00659733          	sll	a4,a1,t1
1c000638:	00d556b3          	srl	a3,a0,a3
1c00063c:	006617b3          	sll	a5,a2,t1
1c000640:	00e6e833          	or	a6,a3,a4
1c000644:	006518b3          	sll	a7,a0,t1
1c000648:	0107d513          	srli	a0,a5,0x10
1c00064c:	02a85733          	divu	a4,a6,a0
1c000650:	1007d5b3          	p.exthz	a1,a5
1c000654:	0108d693          	srli	a3,a7,0x10
1c000658:	02a87633          	remu	a2,a6,a0
1c00065c:	02e58833          	mul	a6,a1,a4
1c000660:	0642                	slli	a2,a2,0x10
1c000662:	8ed1                	or	a3,a3,a2
1c000664:	863a                	mv	a2,a4
1c000666:	0106fc63          	bleu	a6,a3,1c00067e <__udivdi3+0x8a>
1c00066a:	96be                	add	a3,a3,a5
1c00066c:	fff70613          	addi	a2,a4,-1 # ffff <__l1_heap_size+0x27>
1c000670:	00f6e763          	bltu	a3,a5,1c00067e <__udivdi3+0x8a>
1c000674:	0106f563          	bleu	a6,a3,1c00067e <__udivdi3+0x8a>
1c000678:	ffe70613          	addi	a2,a4,-2
1c00067c:	96be                	add	a3,a3,a5
1c00067e:	410686b3          	sub	a3,a3,a6
1c000682:	02a6f833          	remu	a6,a3,a0
1c000686:	02a6d6b3          	divu	a3,a3,a0
1c00068a:	df0828b3          	p.insert	a7,a6,15,16
1c00068e:	02d58733          	mul	a4,a1,a3
1c000692:	8536                	mv	a0,a3
1c000694:	00e8fb63          	bleu	a4,a7,1c0006aa <__udivdi3+0xb6>
1c000698:	98be                	add	a7,a7,a5
1c00069a:	fff68513          	addi	a0,a3,-1
1c00069e:	00f8e663          	bltu	a7,a5,1c0006aa <__udivdi3+0xb6>
1c0006a2:	00e8f463          	bleu	a4,a7,1c0006aa <__udivdi3+0xb6>
1c0006a6:	ffe68513          	addi	a0,a3,-2
1c0006aa:	01061793          	slli	a5,a2,0x10
1c0006ae:	8fc9                	or	a5,a5,a0
1c0006b0:	4801                	li	a6,0
1c0006b2:	a06d                	j	1c00075c <__udivdi3+0x168>
1c0006b4:	01000737          	lui	a4,0x1000
1c0006b8:	46c1                	li	a3,16
1c0006ba:	f6e661e3          	bltu	a2,a4,1c00061c <__udivdi3+0x28>
1c0006be:	46e1                	li	a3,24
1c0006c0:	bfb1                	j	1c00061c <__udivdi3+0x28>
1c0006c2:	e601                	bnez	a2,1c0006ca <__udivdi3+0xd6>
1c0006c4:	4685                	li	a3,1
1c0006c6:	02c6d7b3          	divu	a5,a3,a2
1c0006ca:	66c1                	lui	a3,0x10
1c0006cc:	08d7fb63          	bleu	a3,a5,1c000762 <__udivdi3+0x16e>
1c0006d0:	0ff00693          	li	a3,255
1c0006d4:	00f6f363          	bleu	a5,a3,1c0006da <__udivdi3+0xe6>
1c0006d8:	4721                	li	a4,8
1c0006da:	00e7d6b3          	srl	a3,a5,a4
1c0006de:	9336                	add	t1,t1,a3
1c0006e0:	00034683          	lbu	a3,0(t1)
1c0006e4:	02000613          	li	a2,32
1c0006e8:	96ba                	add	a3,a3,a4
1c0006ea:	8e15                	sub	a2,a2,a3
1c0006ec:	e251                	bnez	a2,1c000770 <__udivdi3+0x17c>
1c0006ee:	40f58733          	sub	a4,a1,a5
1c0006f2:	4805                	li	a6,1
1c0006f4:	0107d513          	srli	a0,a5,0x10
1c0006f8:	1007d5b3          	p.exthz	a1,a5
1c0006fc:	0108d693          	srli	a3,a7,0x10
1c000700:	02a77633          	remu	a2,a4,a0
1c000704:	02a75733          	divu	a4,a4,a0
1c000708:	0642                	slli	a2,a2,0x10
1c00070a:	8ed1                	or	a3,a3,a2
1c00070c:	02e58333          	mul	t1,a1,a4
1c000710:	863a                	mv	a2,a4
1c000712:	0066fc63          	bleu	t1,a3,1c00072a <__udivdi3+0x136>
1c000716:	96be                	add	a3,a3,a5
1c000718:	fff70613          	addi	a2,a4,-1 # ffffff <__L2+0xf7ffff>
1c00071c:	00f6e763          	bltu	a3,a5,1c00072a <__udivdi3+0x136>
1c000720:	0066f563          	bleu	t1,a3,1c00072a <__udivdi3+0x136>
1c000724:	ffe70613          	addi	a2,a4,-2
1c000728:	96be                	add	a3,a3,a5
1c00072a:	406686b3          	sub	a3,a3,t1
1c00072e:	02a6f333          	remu	t1,a3,a0
1c000732:	02a6d6b3          	divu	a3,a3,a0
1c000736:	df0328b3          	p.insert	a7,t1,15,16
1c00073a:	02d58733          	mul	a4,a1,a3
1c00073e:	8536                	mv	a0,a3
1c000740:	00e8fb63          	bleu	a4,a7,1c000756 <__udivdi3+0x162>
1c000744:	98be                	add	a7,a7,a5
1c000746:	fff68513          	addi	a0,a3,-1 # ffff <__l1_heap_size+0x27>
1c00074a:	00f8e663          	bltu	a7,a5,1c000756 <__udivdi3+0x162>
1c00074e:	00e8f463          	bleu	a4,a7,1c000756 <__udivdi3+0x162>
1c000752:	ffe68513          	addi	a0,a3,-2
1c000756:	01061793          	slli	a5,a2,0x10
1c00075a:	8fc9                	or	a5,a5,a0
1c00075c:	853e                	mv	a0,a5
1c00075e:	85c2                	mv	a1,a6
1c000760:	8082                	ret
1c000762:	010006b7          	lui	a3,0x1000
1c000766:	4741                	li	a4,16
1c000768:	f6d7e9e3          	bltu	a5,a3,1c0006da <__udivdi3+0xe6>
1c00076c:	4761                	li	a4,24
1c00076e:	b7b5                	j	1c0006da <__udivdi3+0xe6>
1c000770:	00c797b3          	sll	a5,a5,a2
1c000774:	00d5d333          	srl	t1,a1,a3
1c000778:	0107de13          	srli	t3,a5,0x10
1c00077c:	00c59733          	sll	a4,a1,a2
1c000780:	00c518b3          	sll	a7,a0,a2
1c000784:	00d555b3          	srl	a1,a0,a3
1c000788:	03c35533          	divu	a0,t1,t3
1c00078c:	8dd9                	or	a1,a1,a4
1c00078e:	1007d733          	p.exthz	a4,a5
1c000792:	0105d693          	srli	a3,a1,0x10
1c000796:	03c37633          	remu	a2,t1,t3
1c00079a:	882a                	mv	a6,a0
1c00079c:	02a70333          	mul	t1,a4,a0
1c0007a0:	0642                	slli	a2,a2,0x10
1c0007a2:	8ed1                	or	a3,a3,a2
1c0007a4:	0066fc63          	bleu	t1,a3,1c0007bc <__udivdi3+0x1c8>
1c0007a8:	96be                	add	a3,a3,a5
1c0007aa:	fff50813          	addi	a6,a0,-1
1c0007ae:	00f6e763          	bltu	a3,a5,1c0007bc <__udivdi3+0x1c8>
1c0007b2:	0066f563          	bleu	t1,a3,1c0007bc <__udivdi3+0x1c8>
1c0007b6:	ffe50813          	addi	a6,a0,-2
1c0007ba:	96be                	add	a3,a3,a5
1c0007bc:	406686b3          	sub	a3,a3,t1
1c0007c0:	03c6f633          	remu	a2,a3,t3
1c0007c4:	03c6d6b3          	divu	a3,a3,t3
1c0007c8:	df0625b3          	p.insert	a1,a2,15,16
1c0007cc:	02d70733          	mul	a4,a4,a3
1c0007d0:	8636                	mv	a2,a3
1c0007d2:	00e5fc63          	bleu	a4,a1,1c0007ea <__udivdi3+0x1f6>
1c0007d6:	95be                	add	a1,a1,a5
1c0007d8:	fff68613          	addi	a2,a3,-1 # ffffff <__L2+0xf7ffff>
1c0007dc:	00f5e763          	bltu	a1,a5,1c0007ea <__udivdi3+0x1f6>
1c0007e0:	00e5f563          	bleu	a4,a1,1c0007ea <__udivdi3+0x1f6>
1c0007e4:	ffe68613          	addi	a2,a3,-2
1c0007e8:	95be                	add	a1,a1,a5
1c0007ea:	0842                	slli	a6,a6,0x10
1c0007ec:	40e58733          	sub	a4,a1,a4
1c0007f0:	00c86833          	or	a6,a6,a2
1c0007f4:	b701                	j	1c0006f4 <__udivdi3+0x100>
1c0007f6:	12d5ea63          	bltu	a1,a3,1c00092a <__udivdi3+0x336>
1c0007fa:	67c1                	lui	a5,0x10
1c0007fc:	02f6fd63          	bleu	a5,a3,1c000836 <__udivdi3+0x242>
1c000800:	0ff00793          	li	a5,255
1c000804:	00d7b8b3          	sltu	a7,a5,a3
1c000808:	088e                	slli	a7,a7,0x3
1c00080a:	1c014737          	lui	a4,0x1c014
1c00080e:	0116d7b3          	srl	a5,a3,a7
1c000812:	d9070713          	addi	a4,a4,-624 # 1c013d90 <__clz_tab>
1c000816:	97ba                	add	a5,a5,a4
1c000818:	0007c783          	lbu	a5,0(a5) # 10000 <__L1Cl>
1c00081c:	02000813          	li	a6,32
1c000820:	97c6                	add	a5,a5,a7
1c000822:	40f80833          	sub	a6,a6,a5
1c000826:	00081f63          	bnez	a6,1c000844 <__udivdi3+0x250>
1c00082a:	4785                	li	a5,1
1c00082c:	f2b6e8e3          	bltu	a3,a1,1c00075c <__udivdi3+0x168>
1c000830:	04a637b3          	p.sletu	a5,a2,a0
1c000834:	b725                	j	1c00075c <__udivdi3+0x168>
1c000836:	010007b7          	lui	a5,0x1000
1c00083a:	48c1                	li	a7,16
1c00083c:	fcf6e7e3          	bltu	a3,a5,1c00080a <__udivdi3+0x216>
1c000840:	48e1                	li	a7,24
1c000842:	b7e1                	j	1c00080a <__udivdi3+0x216>
1c000844:	00f658b3          	srl	a7,a2,a5
1c000848:	010696b3          	sll	a3,a3,a6
1c00084c:	00d8e6b3          	or	a3,a7,a3
1c000850:	00f5d333          	srl	t1,a1,a5
1c000854:	0106de13          	srli	t3,a3,0x10
1c000858:	00f55733          	srl	a4,a0,a5
1c00085c:	03c377b3          	remu	a5,t1,t3
1c000860:	1006d8b3          	p.exthz	a7,a3
1c000864:	010595b3          	sll	a1,a1,a6
1c000868:	8f4d                	or	a4,a4,a1
1c00086a:	01075593          	srli	a1,a4,0x10
1c00086e:	01061633          	sll	a2,a2,a6
1c000872:	03c35333          	divu	t1,t1,t3
1c000876:	07c2                	slli	a5,a5,0x10
1c000878:	8ddd                	or	a1,a1,a5
1c00087a:	02688eb3          	mul	t4,a7,t1
1c00087e:	879a                	mv	a5,t1
1c000880:	01d5fc63          	bleu	t4,a1,1c000898 <__udivdi3+0x2a4>
1c000884:	95b6                	add	a1,a1,a3
1c000886:	fff30793          	addi	a5,t1,-1
1c00088a:	00d5e763          	bltu	a1,a3,1c000898 <__udivdi3+0x2a4>
1c00088e:	01d5f563          	bleu	t4,a1,1c000898 <__udivdi3+0x2a4>
1c000892:	ffe30793          	addi	a5,t1,-2
1c000896:	95b6                	add	a1,a1,a3
1c000898:	41d585b3          	sub	a1,a1,t4
1c00089c:	03c5f333          	remu	t1,a1,t3
1c0008a0:	03c5d5b3          	divu	a1,a1,t3
1c0008a4:	df032733          	p.insert	a4,t1,15,16
1c0008a8:	02b888b3          	mul	a7,a7,a1
1c0008ac:	832e                	mv	t1,a1
1c0008ae:	01177c63          	bleu	a7,a4,1c0008c6 <__udivdi3+0x2d2>
1c0008b2:	9736                	add	a4,a4,a3
1c0008b4:	fff58313          	addi	t1,a1,-1
1c0008b8:	00d76763          	bltu	a4,a3,1c0008c6 <__udivdi3+0x2d2>
1c0008bc:	01177563          	bleu	a7,a4,1c0008c6 <__udivdi3+0x2d2>
1c0008c0:	ffe58313          	addi	t1,a1,-2
1c0008c4:	9736                	add	a4,a4,a3
1c0008c6:	07c2                	slli	a5,a5,0x10
1c0008c8:	6e41                	lui	t3,0x10
1c0008ca:	0067e7b3          	or	a5,a5,t1
1c0008ce:	fffe0593          	addi	a1,t3,-1 # ffff <__l1_heap_size+0x27>
1c0008d2:	00b7f6b3          	and	a3,a5,a1
1c0008d6:	41170733          	sub	a4,a4,a7
1c0008da:	8df1                	and	a1,a1,a2
1c0008dc:	0107d893          	srli	a7,a5,0x10
1c0008e0:	02b68333          	mul	t1,a3,a1
1c0008e4:	8241                	srli	a2,a2,0x10
1c0008e6:	02b885b3          	mul	a1,a7,a1
1c0008ea:	8eae                	mv	t4,a1
1c0008ec:	42c68eb3          	p.mac	t4,a3,a2
1c0008f0:	01035693          	srli	a3,t1,0x10
1c0008f4:	96f6                	add	a3,a3,t4
1c0008f6:	02c888b3          	mul	a7,a7,a2
1c0008fa:	00b6f363          	bleu	a1,a3,1c000900 <__udivdi3+0x30c>
1c0008fe:	98f2                	add	a7,a7,t3
1c000900:	0106d613          	srli	a2,a3,0x10
1c000904:	98b2                	add	a7,a7,a2
1c000906:	03176063          	bltu	a4,a7,1c000926 <__udivdi3+0x332>
1c00090a:	db1713e3          	bne	a4,a7,1c0006b0 <__udivdi3+0xbc>
1c00090e:	6741                	lui	a4,0x10
1c000910:	177d                	addi	a4,a4,-1
1c000912:	8ef9                	and	a3,a3,a4
1c000914:	06c2                	slli	a3,a3,0x10
1c000916:	00e37333          	and	t1,t1,a4
1c00091a:	01051533          	sll	a0,a0,a6
1c00091e:	969a                	add	a3,a3,t1
1c000920:	4801                	li	a6,0
1c000922:	e2d57de3          	bleu	a3,a0,1c00075c <__udivdi3+0x168>
1c000926:	17fd                	addi	a5,a5,-1
1c000928:	b361                	j	1c0006b0 <__udivdi3+0xbc>
1c00092a:	4801                	li	a6,0
1c00092c:	4781                	li	a5,0
1c00092e:	b53d                	j	1c00075c <__udivdi3+0x168>

1c000930 <__umoddi3>:
1c000930:	88b2                	mv	a7,a2
1c000932:	8736                	mv	a4,a3
1c000934:	87aa                	mv	a5,a0
1c000936:	882e                	mv	a6,a1
1c000938:	1a069963          	bnez	a3,1c000aea <__umoddi3+0x1ba>
1c00093c:	1c0146b7          	lui	a3,0x1c014
1c000940:	d9068693          	addi	a3,a3,-624 # 1c013d90 <__clz_tab>
1c000944:	0ac5f463          	bleu	a2,a1,1c0009ec <__umoddi3+0xbc>
1c000948:	6341                	lui	t1,0x10
1c00094a:	08667a63          	bleu	t1,a2,1c0009de <__umoddi3+0xae>
1c00094e:	0ff00313          	li	t1,255
1c000952:	00c37363          	bleu	a2,t1,1c000958 <__umoddi3+0x28>
1c000956:	4721                	li	a4,8
1c000958:	00e65333          	srl	t1,a2,a4
1c00095c:	969a                	add	a3,a3,t1
1c00095e:	0006c683          	lbu	a3,0(a3)
1c000962:	02000313          	li	t1,32
1c000966:	9736                	add	a4,a4,a3
1c000968:	40e30333          	sub	t1,t1,a4
1c00096c:	00030c63          	beqz	t1,1c000984 <__umoddi3+0x54>
1c000970:	006595b3          	sll	a1,a1,t1
1c000974:	00e55733          	srl	a4,a0,a4
1c000978:	006618b3          	sll	a7,a2,t1
1c00097c:	00b76833          	or	a6,a4,a1
1c000980:	006517b3          	sll	a5,a0,t1
1c000984:	0108d613          	srli	a2,a7,0x10
1c000988:	02c87733          	remu	a4,a6,a2
1c00098c:	1008d533          	p.exthz	a0,a7
1c000990:	0107d693          	srli	a3,a5,0x10
1c000994:	02c85833          	divu	a6,a6,a2
1c000998:	0742                	slli	a4,a4,0x10
1c00099a:	8ed9                	or	a3,a3,a4
1c00099c:	03050833          	mul	a6,a0,a6
1c0009a0:	0106f863          	bleu	a6,a3,1c0009b0 <__umoddi3+0x80>
1c0009a4:	96c6                	add	a3,a3,a7
1c0009a6:	0116e563          	bltu	a3,a7,1c0009b0 <__umoddi3+0x80>
1c0009aa:	0106f363          	bleu	a6,a3,1c0009b0 <__umoddi3+0x80>
1c0009ae:	96c6                	add	a3,a3,a7
1c0009b0:	410686b3          	sub	a3,a3,a6
1c0009b4:	02c6f733          	remu	a4,a3,a2
1c0009b8:	02c6d6b3          	divu	a3,a3,a2
1c0009bc:	df0727b3          	p.insert	a5,a4,15,16
1c0009c0:	02d506b3          	mul	a3,a0,a3
1c0009c4:	00d7f863          	bleu	a3,a5,1c0009d4 <__umoddi3+0xa4>
1c0009c8:	97c6                	add	a5,a5,a7
1c0009ca:	0117e563          	bltu	a5,a7,1c0009d4 <__umoddi3+0xa4>
1c0009ce:	00d7f363          	bleu	a3,a5,1c0009d4 <__umoddi3+0xa4>
1c0009d2:	97c6                	add	a5,a5,a7
1c0009d4:	8f95                	sub	a5,a5,a3
1c0009d6:	0067d533          	srl	a0,a5,t1
1c0009da:	4581                	li	a1,0
1c0009dc:	8082                	ret
1c0009de:	01000337          	lui	t1,0x1000
1c0009e2:	4741                	li	a4,16
1c0009e4:	f6666ae3          	bltu	a2,t1,1c000958 <__umoddi3+0x28>
1c0009e8:	4761                	li	a4,24
1c0009ea:	b7bd                	j	1c000958 <__umoddi3+0x28>
1c0009ec:	e601                	bnez	a2,1c0009f4 <__umoddi3+0xc4>
1c0009ee:	4605                	li	a2,1
1c0009f0:	031658b3          	divu	a7,a2,a7
1c0009f4:	6641                	lui	a2,0x10
1c0009f6:	06c8ff63          	bleu	a2,a7,1c000a74 <__umoddi3+0x144>
1c0009fa:	0ff00613          	li	a2,255
1c0009fe:	01167363          	bleu	a7,a2,1c000a04 <__umoddi3+0xd4>
1c000a02:	4721                	li	a4,8
1c000a04:	00e8d633          	srl	a2,a7,a4
1c000a08:	96b2                	add	a3,a3,a2
1c000a0a:	0006c603          	lbu	a2,0(a3)
1c000a0e:	02000313          	li	t1,32
1c000a12:	963a                	add	a2,a2,a4
1c000a14:	40c30333          	sub	t1,t1,a2
1c000a18:	06031563          	bnez	t1,1c000a82 <__umoddi3+0x152>
1c000a1c:	411585b3          	sub	a1,a1,a7
1c000a20:	0108d713          	srli	a4,a7,0x10
1c000a24:	1008d533          	p.exthz	a0,a7
1c000a28:	0107d613          	srli	a2,a5,0x10
1c000a2c:	02e5f6b3          	remu	a3,a1,a4
1c000a30:	02e5d5b3          	divu	a1,a1,a4
1c000a34:	06c2                	slli	a3,a3,0x10
1c000a36:	8ed1                	or	a3,a3,a2
1c000a38:	02b505b3          	mul	a1,a0,a1
1c000a3c:	00b6f863          	bleu	a1,a3,1c000a4c <__umoddi3+0x11c>
1c000a40:	96c6                	add	a3,a3,a7
1c000a42:	0116e563          	bltu	a3,a7,1c000a4c <__umoddi3+0x11c>
1c000a46:	00b6f363          	bleu	a1,a3,1c000a4c <__umoddi3+0x11c>
1c000a4a:	96c6                	add	a3,a3,a7
1c000a4c:	40b685b3          	sub	a1,a3,a1
1c000a50:	02e5f6b3          	remu	a3,a1,a4
1c000a54:	02e5d5b3          	divu	a1,a1,a4
1c000a58:	df06a7b3          	p.insert	a5,a3,15,16
1c000a5c:	02b505b3          	mul	a1,a0,a1
1c000a60:	00b7f863          	bleu	a1,a5,1c000a70 <__umoddi3+0x140>
1c000a64:	97c6                	add	a5,a5,a7
1c000a66:	0117e563          	bltu	a5,a7,1c000a70 <__umoddi3+0x140>
1c000a6a:	00b7f363          	bleu	a1,a5,1c000a70 <__umoddi3+0x140>
1c000a6e:	97c6                	add	a5,a5,a7
1c000a70:	8f8d                	sub	a5,a5,a1
1c000a72:	b795                	j	1c0009d6 <__umoddi3+0xa6>
1c000a74:	01000637          	lui	a2,0x1000
1c000a78:	4741                	li	a4,16
1c000a7a:	f8c8e5e3          	bltu	a7,a2,1c000a04 <__umoddi3+0xd4>
1c000a7e:	4761                	li	a4,24
1c000a80:	b751                	j	1c000a04 <__umoddi3+0xd4>
1c000a82:	006898b3          	sll	a7,a7,t1
1c000a86:	00c5d733          	srl	a4,a1,a2
1c000a8a:	006517b3          	sll	a5,a0,t1
1c000a8e:	00c55633          	srl	a2,a0,a2
1c000a92:	006595b3          	sll	a1,a1,t1
1c000a96:	0108d513          	srli	a0,a7,0x10
1c000a9a:	8dd1                	or	a1,a1,a2
1c000a9c:	02a77633          	remu	a2,a4,a0
1c000aa0:	1008d833          	p.exthz	a6,a7
1c000aa4:	0105d693          	srli	a3,a1,0x10
1c000aa8:	02a75733          	divu	a4,a4,a0
1c000aac:	0642                	slli	a2,a2,0x10
1c000aae:	8ed1                	or	a3,a3,a2
1c000ab0:	02e80733          	mul	a4,a6,a4
1c000ab4:	00e6f863          	bleu	a4,a3,1c000ac4 <__umoddi3+0x194>
1c000ab8:	96c6                	add	a3,a3,a7
1c000aba:	0116e563          	bltu	a3,a7,1c000ac4 <__umoddi3+0x194>
1c000abe:	00e6f363          	bleu	a4,a3,1c000ac4 <__umoddi3+0x194>
1c000ac2:	96c6                	add	a3,a3,a7
1c000ac4:	8e99                	sub	a3,a3,a4
1c000ac6:	02a6f733          	remu	a4,a3,a0
1c000aca:	02a6d6b3          	divu	a3,a3,a0
1c000ace:	df0725b3          	p.insert	a1,a4,15,16
1c000ad2:	02d806b3          	mul	a3,a6,a3
1c000ad6:	00d5f863          	bleu	a3,a1,1c000ae6 <__umoddi3+0x1b6>
1c000ada:	95c6                	add	a1,a1,a7
1c000adc:	0115e563          	bltu	a1,a7,1c000ae6 <__umoddi3+0x1b6>
1c000ae0:	00d5f363          	bleu	a3,a1,1c000ae6 <__umoddi3+0x1b6>
1c000ae4:	95c6                	add	a1,a1,a7
1c000ae6:	8d95                	sub	a1,a1,a3
1c000ae8:	bf25                	j	1c000a20 <__umoddi3+0xf0>
1c000aea:	eed5e9e3          	bltu	a1,a3,1c0009dc <__umoddi3+0xac>
1c000aee:	6741                	lui	a4,0x10
1c000af0:	04e6f563          	bleu	a4,a3,1c000b3a <__umoddi3+0x20a>
1c000af4:	0ff00e93          	li	t4,255
1c000af8:	00deb733          	sltu	a4,t4,a3
1c000afc:	070e                	slli	a4,a4,0x3
1c000afe:	1c014337          	lui	t1,0x1c014
1c000b02:	00e6d8b3          	srl	a7,a3,a4
1c000b06:	d9030313          	addi	t1,t1,-624 # 1c013d90 <__clz_tab>
1c000b0a:	989a                	add	a7,a7,t1
1c000b0c:	0008ce83          	lbu	t4,0(a7)
1c000b10:	02000e13          	li	t3,32
1c000b14:	9eba                	add	t4,t4,a4
1c000b16:	41de0e33          	sub	t3,t3,t4
1c000b1a:	020e1763          	bnez	t3,1c000b48 <__umoddi3+0x218>
1c000b1e:	00b6e463          	bltu	a3,a1,1c000b26 <__umoddi3+0x1f6>
1c000b22:	00c56963          	bltu	a0,a2,1c000b34 <__umoddi3+0x204>
1c000b26:	40c507b3          	sub	a5,a0,a2
1c000b2a:	8d95                	sub	a1,a1,a3
1c000b2c:	00f53533          	sltu	a0,a0,a5
1c000b30:	40a58833          	sub	a6,a1,a0
1c000b34:	853e                	mv	a0,a5
1c000b36:	85c2                	mv	a1,a6
1c000b38:	b555                	j	1c0009dc <__umoddi3+0xac>
1c000b3a:	010008b7          	lui	a7,0x1000
1c000b3e:	4741                	li	a4,16
1c000b40:	fb16efe3          	bltu	a3,a7,1c000afe <__umoddi3+0x1ce>
1c000b44:	4761                	li	a4,24
1c000b46:	bf65                	j	1c000afe <__umoddi3+0x1ce>
1c000b48:	01d65733          	srl	a4,a2,t4
1c000b4c:	01c696b3          	sll	a3,a3,t3
1c000b50:	8ed9                	or	a3,a3,a4
1c000b52:	01d5d7b3          	srl	a5,a1,t4
1c000b56:	0106d813          	srli	a6,a3,0x10
1c000b5a:	0307f333          	remu	t1,a5,a6
1c000b5e:	1006d733          	p.exthz	a4,a3
1c000b62:	01d558b3          	srl	a7,a0,t4
1c000b66:	01c595b3          	sll	a1,a1,t3
1c000b6a:	00b8e5b3          	or	a1,a7,a1
1c000b6e:	0105d893          	srli	a7,a1,0x10
1c000b72:	01c61633          	sll	a2,a2,t3
1c000b76:	01c51533          	sll	a0,a0,t3
1c000b7a:	0307d7b3          	divu	a5,a5,a6
1c000b7e:	0342                	slli	t1,t1,0x10
1c000b80:	011368b3          	or	a7,t1,a7
1c000b84:	02f70f33          	mul	t5,a4,a5
1c000b88:	833e                	mv	t1,a5
1c000b8a:	01e8fc63          	bleu	t5,a7,1c000ba2 <__umoddi3+0x272>
1c000b8e:	98b6                	add	a7,a7,a3
1c000b90:	fff78313          	addi	t1,a5,-1 # ffffff <__L2+0xf7ffff>
1c000b94:	00d8e763          	bltu	a7,a3,1c000ba2 <__umoddi3+0x272>
1c000b98:	01e8f563          	bleu	t5,a7,1c000ba2 <__umoddi3+0x272>
1c000b9c:	ffe78313          	addi	t1,a5,-2
1c000ba0:	98b6                	add	a7,a7,a3
1c000ba2:	41e888b3          	sub	a7,a7,t5
1c000ba6:	0308f7b3          	remu	a5,a7,a6
1c000baa:	0308d8b3          	divu	a7,a7,a6
1c000bae:	df07a5b3          	p.insert	a1,a5,15,16
1c000bb2:	03170733          	mul	a4,a4,a7
1c000bb6:	87c6                	mv	a5,a7
1c000bb8:	00e5fc63          	bleu	a4,a1,1c000bd0 <__umoddi3+0x2a0>
1c000bbc:	95b6                	add	a1,a1,a3
1c000bbe:	fff88793          	addi	a5,a7,-1 # ffffff <__L2+0xf7ffff>
1c000bc2:	00d5e763          	bltu	a1,a3,1c000bd0 <__umoddi3+0x2a0>
1c000bc6:	00e5f563          	bleu	a4,a1,1c000bd0 <__umoddi3+0x2a0>
1c000bca:	ffe88793          	addi	a5,a7,-2
1c000bce:	95b6                	add	a1,a1,a3
1c000bd0:	0342                	slli	t1,t1,0x10
1c000bd2:	6f41                	lui	t5,0x10
1c000bd4:	00f36333          	or	t1,t1,a5
1c000bd8:	ffff0793          	addi	a5,t5,-1 # ffff <__l1_heap_size+0x27>
1c000bdc:	00f37833          	and	a6,t1,a5
1c000be0:	01035313          	srli	t1,t1,0x10
1c000be4:	8ff1                	and	a5,a5,a2
1c000be6:	02f808b3          	mul	a7,a6,a5
1c000bea:	8d99                	sub	a1,a1,a4
1c000bec:	01065713          	srli	a4,a2,0x10
1c000bf0:	02f307b3          	mul	a5,t1,a5
1c000bf4:	8fbe                	mv	t6,a5
1c000bf6:	42e80fb3          	p.mac	t6,a6,a4
1c000bfa:	0108d813          	srli	a6,a7,0x10
1c000bfe:	987e                	add	a6,a6,t6
1c000c00:	02e30333          	mul	t1,t1,a4
1c000c04:	00f87363          	bleu	a5,a6,1c000c0a <__umoddi3+0x2da>
1c000c08:	937a                	add	t1,t1,t5
1c000c0a:	01085713          	srli	a4,a6,0x10
1c000c0e:	933a                	add	t1,t1,a4
1c000c10:	6741                	lui	a4,0x10
1c000c12:	177d                	addi	a4,a4,-1
1c000c14:	00e87833          	and	a6,a6,a4
1c000c18:	0842                	slli	a6,a6,0x10
1c000c1a:	00e8f733          	and	a4,a7,a4
1c000c1e:	9742                	add	a4,a4,a6
1c000c20:	0065e663          	bltu	a1,t1,1c000c2c <__umoddi3+0x2fc>
1c000c24:	00659d63          	bne	a1,t1,1c000c3e <__umoddi3+0x30e>
1c000c28:	00e57b63          	bleu	a4,a0,1c000c3e <__umoddi3+0x30e>
1c000c2c:	40c70633          	sub	a2,a4,a2
1c000c30:	00c73733          	sltu	a4,a4,a2
1c000c34:	40d30333          	sub	t1,t1,a3
1c000c38:	40e30333          	sub	t1,t1,a4
1c000c3c:	8732                	mv	a4,a2
1c000c3e:	40e50733          	sub	a4,a0,a4
1c000c42:	00e53533          	sltu	a0,a0,a4
1c000c46:	406585b3          	sub	a1,a1,t1
1c000c4a:	8d89                	sub	a1,a1,a0
1c000c4c:	01d597b3          	sll	a5,a1,t4
1c000c50:	01c75733          	srl	a4,a4,t3
1c000c54:	00e7e533          	or	a0,a5,a4
1c000c58:	01c5d5b3          	srl	a1,a1,t3
1c000c5c:	b341                	j	1c0009dc <__umoddi3+0xac>

1c000c5e <__addsf3>:
1c000c5e:	ec0597b3          	p.extractu	a5,a1,22,0
1c000c62:	cf759733          	p.extractu	a4,a1,7,23
1c000c66:	ec0518b3          	p.extractu	a7,a0,22,0
1c000c6a:	cf751633          	p.extractu	a2,a0,7,23
1c000c6e:	01f55313          	srli	t1,a0,0x1f
1c000c72:	81fd                	srli	a1,a1,0x1f
1c000c74:	088e                	slli	a7,a7,0x3
1c000c76:	078e                	slli	a5,a5,0x3
1c000c78:	40e606b3          	sub	a3,a2,a4
1c000c7c:	12b31663          	bne	t1,a1,1c000da8 <__addsf3+0x14a>
1c000c80:	08d05063          	blez	a3,1c000d00 <__addsf3+0xa2>
1c000c84:	e739                	bnez	a4,1c000cd2 <__addsf3+0x74>
1c000c86:	eb81                	bnez	a5,1c000c96 <__addsf3+0x38>
1c000c88:	0ff00793          	li	a5,255
1c000c8c:	02f60f63          	beq	a2,a5,1c000cca <__addsf3+0x6c>
1c000c90:	87c6                	mv	a5,a7
1c000c92:	8732                	mv	a4,a2
1c000c94:	a061                	j	1c000d1c <__addsf3+0xbe>
1c000c96:	16fd                	addi	a3,a3,-1
1c000c98:	e68d                	bnez	a3,1c000cc2 <__addsf3+0x64>
1c000c9a:	97c6                	add	a5,a5,a7
1c000c9c:	8732                	mv	a4,a2
1c000c9e:	00579693          	slli	a3,a5,0x5
1c000ca2:	0606dd63          	bgez	a3,1c000d1c <__addsf3+0xbe>
1c000ca6:	0705                	addi	a4,a4,1
1c000ca8:	0ff00693          	li	a3,255
1c000cac:	24d70963          	beq	a4,a3,1c000efe <__addsf3+0x2a0>
1c000cb0:	7e0006b7          	lui	a3,0x7e000
1c000cb4:	fc17b633          	p.bclr	a2,a5,30,1
1c000cb8:	16fd                	addi	a3,a3,-1
1c000cba:	8385                	srli	a5,a5,0x1
1c000cbc:	8ff5                	and	a5,a5,a3
1c000cbe:	8fd1                	or	a5,a5,a2
1c000cc0:	a8b1                	j	1c000d1c <__addsf3+0xbe>
1c000cc2:	0ff00713          	li	a4,255
1c000cc6:	00e61c63          	bne	a2,a4,1c000cde <__addsf3+0x80>
1c000cca:	87c6                	mv	a5,a7
1c000ccc:	0ff00713          	li	a4,255
1c000cd0:	a0b1                	j	1c000d1c <__addsf3+0xbe>
1c000cd2:	0ff00713          	li	a4,255
1c000cd6:	fee60ae3          	beq	a2,a4,1c000cca <__addsf3+0x6c>
1c000cda:	c1a7c7b3          	p.bset	a5,a5,0,26
1c000cde:	476d                	li	a4,27
1c000ce0:	00d75463          	ble	a3,a4,1c000ce8 <__addsf3+0x8a>
1c000ce4:	4785                	li	a5,1
1c000ce6:	bf55                	j	1c000c9a <__addsf3+0x3c>
1c000ce8:	02000713          	li	a4,32
1c000cec:	00d7d5b3          	srl	a1,a5,a3
1c000cf0:	40d706b3          	sub	a3,a4,a3
1c000cf4:	00d797b3          	sll	a5,a5,a3
1c000cf8:	00f037b3          	snez	a5,a5
1c000cfc:	8fcd                	or	a5,a5,a1
1c000cfe:	bf71                	j	1c000c9a <__addsf3+0x3c>
1c000d00:	c2b5                	beqz	a3,1c000d64 <__addsf3+0x106>
1c000d02:	e61d                	bnez	a2,1c000d30 <__addsf3+0xd2>
1c000d04:	00088c63          	beqz	a7,1c000d1c <__addsf3+0xbe>
1c000d08:	01f6b463          	p.bneimm	a3,-1,1c000d10 <__addsf3+0xb2>
1c000d0c:	97c6                	add	a5,a5,a7
1c000d0e:	bf41                	j	1c000c9e <__addsf3+0x40>
1c000d10:	0ff00613          	li	a2,255
1c000d14:	fff6c693          	not	a3,a3
1c000d18:	02c71463          	bne	a4,a2,1c000d40 <__addsf3+0xe2>
1c000d1c:	f837b6b3          	p.bclr	a3,a5,28,3
1c000d20:	1e068063          	beqz	a3,1c000f00 <__addsf3+0x2a2>
1c000d24:	f647b6b3          	p.bclr	a3,a5,27,4
1c000d28:	1c46ac63          	p.beqimm	a3,4,1c000f00 <__addsf3+0x2a2>
1c000d2c:	0791                	addi	a5,a5,4
1c000d2e:	aac9                	j	1c000f00 <__addsf3+0x2a2>
1c000d30:	0ff00613          	li	a2,255
1c000d34:	fec704e3          	beq	a4,a2,1c000d1c <__addsf3+0xbe>
1c000d38:	40d006b3          	neg	a3,a3
1c000d3c:	c1a8c8b3          	p.bset	a7,a7,0,26
1c000d40:	466d                	li	a2,27
1c000d42:	00d65463          	ble	a3,a2,1c000d4a <__addsf3+0xec>
1c000d46:	4885                	li	a7,1
1c000d48:	b7d1                	j	1c000d0c <__addsf3+0xae>
1c000d4a:	02000613          	li	a2,32
1c000d4e:	00d8d5b3          	srl	a1,a7,a3
1c000d52:	40d606b3          	sub	a3,a2,a3
1c000d56:	00d898b3          	sll	a7,a7,a3
1c000d5a:	011038b3          	snez	a7,a7
1c000d5e:	0115e8b3          	or	a7,a1,a7
1c000d62:	b76d                	j	1c000d0c <__addsf3+0xae>
1c000d64:	00160713          	addi	a4,a2,1 # 1000001 <__L2+0xf80001>
1c000d68:	ee8735b3          	p.bclr	a1,a4,23,8
1c000d6c:	4685                	li	a3,1
1c000d6e:	02b6c663          	blt	a3,a1,1c000d9a <__addsf3+0x13c>
1c000d72:	ee19                	bnez	a2,1c000d90 <__addsf3+0x132>
1c000d74:	4701                	li	a4,0
1c000d76:	fa0883e3          	beqz	a7,1c000d1c <__addsf3+0xbe>
1c000d7a:	18078063          	beqz	a5,1c000efa <__addsf3+0x29c>
1c000d7e:	97c6                	add	a5,a5,a7
1c000d80:	00579693          	slli	a3,a5,0x5
1c000d84:	f806dce3          	bgez	a3,1c000d1c <__addsf3+0xbe>
1c000d88:	c1a7b7b3          	p.bclr	a5,a5,0,26
1c000d8c:	4705                	li	a4,1
1c000d8e:	b779                	j	1c000d1c <__addsf3+0xbe>
1c000d90:	f2088ee3          	beqz	a7,1c000ccc <__addsf3+0x6e>
1c000d94:	10079263          	bnez	a5,1c000e98 <__addsf3+0x23a>
1c000d98:	bf0d                	j	1c000cca <__addsf3+0x6c>
1c000d9a:	0ff00693          	li	a3,255
1c000d9e:	16d70063          	beq	a4,a3,1c000efe <__addsf3+0x2a0>
1c000da2:	82f8a7db          	p.addun	a5,a7,a5,1
1c000da6:	bf9d                	j	1c000d1c <__addsf3+0xbe>
1c000da8:	04d05e63          	blez	a3,1c000e04 <__addsf3+0x1a6>
1c000dac:	eb0d                	bnez	a4,1c000dde <__addsf3+0x180>
1c000dae:	ec078de3          	beqz	a5,1c000c88 <__addsf3+0x2a>
1c000db2:	16fd                	addi	a3,a3,-1
1c000db4:	ee81                	bnez	a3,1c000dcc <__addsf3+0x16e>
1c000db6:	40f887b3          	sub	a5,a7,a5
1c000dba:	8732                	mv	a4,a2
1c000dbc:	00579693          	slli	a3,a5,0x5
1c000dc0:	f406dee3          	bgez	a3,1c000d1c <__addsf3+0xbe>
1c000dc4:	cba7b833          	p.bclr	a6,a5,5,26
1c000dc8:	863a                	mv	a2,a4
1c000dca:	a0f5                	j	1c000eb6 <__addsf3+0x258>
1c000dcc:	0ff00713          	li	a4,255
1c000dd0:	eee60de3          	beq	a2,a4,1c000cca <__addsf3+0x6c>
1c000dd4:	476d                	li	a4,27
1c000dd6:	00d75b63          	ble	a3,a4,1c000dec <__addsf3+0x18e>
1c000dda:	4785                	li	a5,1
1c000ddc:	bfe9                	j	1c000db6 <__addsf3+0x158>
1c000dde:	0ff00713          	li	a4,255
1c000de2:	eee604e3          	beq	a2,a4,1c000cca <__addsf3+0x6c>
1c000de6:	c1a7c7b3          	p.bset	a5,a5,0,26
1c000dea:	b7ed                	j	1c000dd4 <__addsf3+0x176>
1c000dec:	02000713          	li	a4,32
1c000df0:	00d7d5b3          	srl	a1,a5,a3
1c000df4:	40d706b3          	sub	a3,a4,a3
1c000df8:	00d797b3          	sll	a5,a5,a3
1c000dfc:	00f037b3          	snez	a5,a5
1c000e00:	8fcd                	or	a5,a5,a1
1c000e02:	bf55                	j	1c000db6 <__addsf3+0x158>
1c000e04:	cea9                	beqz	a3,1c000e5e <__addsf3+0x200>
1c000e06:	e60d                	bnez	a2,1c000e30 <__addsf3+0x1d2>
1c000e08:	832e                	mv	t1,a1
1c000e0a:	f00889e3          	beqz	a7,1c000d1c <__addsf3+0xbe>
1c000e0e:	01f6b663          	p.bneimm	a3,-1,1c000e1a <__addsf3+0x1bc>
1c000e12:	411787b3          	sub	a5,a5,a7
1c000e16:	832e                	mv	t1,a1
1c000e18:	b755                	j	1c000dbc <__addsf3+0x15e>
1c000e1a:	0ff00613          	li	a2,255
1c000e1e:	fff6c693          	not	a3,a3
1c000e22:	eec70de3          	beq	a4,a2,1c000d1c <__addsf3+0xbe>
1c000e26:	466d                	li	a2,27
1c000e28:	00d65e63          	ble	a3,a2,1c000e44 <__addsf3+0x1e6>
1c000e2c:	4885                	li	a7,1
1c000e2e:	b7d5                	j	1c000e12 <__addsf3+0x1b4>
1c000e30:	0ff00613          	li	a2,255
1c000e34:	832e                	mv	t1,a1
1c000e36:	eec703e3          	beq	a4,a2,1c000d1c <__addsf3+0xbe>
1c000e3a:	40d006b3          	neg	a3,a3
1c000e3e:	c1a8c8b3          	p.bset	a7,a7,0,26
1c000e42:	b7d5                	j	1c000e26 <__addsf3+0x1c8>
1c000e44:	02000613          	li	a2,32
1c000e48:	00d8d533          	srl	a0,a7,a3
1c000e4c:	40d606b3          	sub	a3,a2,a3
1c000e50:	00d898b3          	sll	a7,a7,a3
1c000e54:	011038b3          	snez	a7,a7
1c000e58:	011568b3          	or	a7,a0,a7
1c000e5c:	bf5d                	j	1c000e12 <__addsf3+0x1b4>
1c000e5e:	00160713          	addi	a4,a2,1
1c000e62:	ee873733          	p.bclr	a4,a4,23,8
1c000e66:	4685                	li	a3,1
1c000e68:	02e6ce63          	blt	a3,a4,1c000ea4 <__addsf3+0x246>
1c000e6c:	e21d                	bnez	a2,1c000e92 <__addsf3+0x234>
1c000e6e:	00089563          	bnez	a7,1c000e78 <__addsf3+0x21a>
1c000e72:	e3f9                	bnez	a5,1c000f38 <__addsf3+0x2da>
1c000e74:	4701                	li	a4,0
1c000e76:	a02d                	j	1c000ea0 <__addsf3+0x242>
1c000e78:	c3f1                	beqz	a5,1c000f3c <__addsf3+0x2de>
1c000e7a:	40f88733          	sub	a4,a7,a5
1c000e7e:	00571693          	slli	a3,a4,0x5
1c000e82:	411787b3          	sub	a5,a5,a7
1c000e86:	0a06c963          	bltz	a3,1c000f38 <__addsf3+0x2da>
1c000e8a:	87ba                	mv	a5,a4
1c000e8c:	ef29                	bnez	a4,1c000ee6 <__addsf3+0x288>
1c000e8e:	4781                	li	a5,0
1c000e90:	b7d5                	j	1c000e74 <__addsf3+0x216>
1c000e92:	f00891e3          	bnez	a7,1c000d94 <__addsf3+0x136>
1c000e96:	e7cd                	bnez	a5,1c000f40 <__addsf3+0x2e2>
1c000e98:	020007b7          	lui	a5,0x2000
1c000e9c:	0ff00713          	li	a4,255
1c000ea0:	4301                	li	t1,0
1c000ea2:	a8b9                	j	1c000f00 <__addsf3+0x2a2>
1c000ea4:	40f88833          	sub	a6,a7,a5
1c000ea8:	00581713          	slli	a4,a6,0x5
1c000eac:	02075f63          	bgez	a4,1c000eea <__addsf3+0x28c>
1c000eb0:	41178833          	sub	a6,a5,a7
1c000eb4:	832e                	mv	t1,a1
1c000eb6:	10081733          	p.fl1	a4,a6
1c000eba:	47fd                	li	a5,31
1c000ebc:	40e78733          	sub	a4,a5,a4
1c000ec0:	176d                	addi	a4,a4,-5
1c000ec2:	00e81833          	sll	a6,a6,a4
1c000ec6:	02c74563          	blt	a4,a2,1c000ef0 <__addsf3+0x292>
1c000eca:	8f11                	sub	a4,a4,a2
1c000ecc:	0705                	addi	a4,a4,1
1c000ece:	02000613          	li	a2,32
1c000ed2:	00e857b3          	srl	a5,a6,a4
1c000ed6:	40e60733          	sub	a4,a2,a4
1c000eda:	00e81833          	sll	a6,a6,a4
1c000ede:	01003833          	snez	a6,a6
1c000ee2:	0107e7b3          	or	a5,a5,a6
1c000ee6:	4701                	li	a4,0
1c000ee8:	bd15                	j	1c000d1c <__addsf3+0xbe>
1c000eea:	fa0802e3          	beqz	a6,1c000e8e <__addsf3+0x230>
1c000eee:	b7e1                	j	1c000eb6 <__addsf3+0x258>
1c000ef0:	40e60733          	sub	a4,a2,a4
1c000ef4:	c1a837b3          	p.bclr	a5,a6,0,26
1c000ef8:	b515                	j	1c000d1c <__addsf3+0xbe>
1c000efa:	87c6                	mv	a5,a7
1c000efc:	b505                	j	1c000d1c <__addsf3+0xbe>
1c000efe:	4781                	li	a5,0
1c000f00:	00579693          	slli	a3,a5,0x5
1c000f04:	0006d963          	bgez	a3,1c000f16 <__addsf3+0x2b8>
1c000f08:	0705                	addi	a4,a4,1
1c000f0a:	0ff00693          	li	a3,255
1c000f0e:	02d70b63          	beq	a4,a3,1c000f44 <__addsf3+0x2e6>
1c000f12:	c1a7b7b3          	p.bclr	a5,a5,0,26
1c000f16:	0ff00693          	li	a3,255
1c000f1a:	838d                	srli	a5,a5,0x3
1c000f1c:	00d71663          	bne	a4,a3,1c000f28 <__addsf3+0x2ca>
1c000f20:	c781                	beqz	a5,1c000f28 <__addsf3+0x2ca>
1c000f22:	004007b7          	lui	a5,0x400
1c000f26:	4301                	li	t1,0
1c000f28:	4501                	li	a0,0
1c000f2a:	ec07a533          	p.insert	a0,a5,22,0
1c000f2e:	cf772533          	p.insert	a0,a4,7,23
1c000f32:	c1f32533          	p.insert	a0,t1,0,31
1c000f36:	8082                	ret
1c000f38:	832e                	mv	t1,a1
1c000f3a:	b775                	j	1c000ee6 <__addsf3+0x288>
1c000f3c:	87c6                	mv	a5,a7
1c000f3e:	b765                	j	1c000ee6 <__addsf3+0x288>
1c000f40:	832e                	mv	t1,a1
1c000f42:	b369                	j	1c000ccc <__addsf3+0x6e>
1c000f44:	4781                	li	a5,0
1c000f46:	bfc1                	j	1c000f16 <__addsf3+0x2b8>

1c000f48 <__divsf3>:
1c000f48:	cf751633          	p.extractu	a2,a0,7,23
1c000f4c:	ec051333          	p.extractu	t1,a0,22,0
1c000f50:	817d                	srli	a0,a0,0x1f
1c000f52:	ce39                	beqz	a2,1c000fb0 <__divsf3+0x68>
1c000f54:	0ff00793          	li	a5,255
1c000f58:	06f60b63          	beq	a2,a5,1c000fce <__divsf3+0x86>
1c000f5c:	030e                	slli	t1,t1,0x3
1c000f5e:	c1a34333          	p.bset	t1,t1,0,26
1c000f62:	f8160613          	addi	a2,a2,-127
1c000f66:	4681                	li	a3,0
1c000f68:	cf759733          	p.extractu	a4,a1,7,23
1c000f6c:	ec0597b3          	p.extractu	a5,a1,22,0
1c000f70:	81fd                	srli	a1,a1,0x1f
1c000f72:	cb25                	beqz	a4,1c000fe2 <__divsf3+0x9a>
1c000f74:	0ff00813          	li	a6,255
1c000f78:	09070463          	beq	a4,a6,1c001000 <__divsf3+0xb8>
1c000f7c:	078e                	slli	a5,a5,0x3
1c000f7e:	c1a7c7b3          	p.bset	a5,a5,0,26
1c000f82:	f8170713          	addi	a4,a4,-127 # ff81 <__rt_stack_size+0xf781>
1c000f86:	4801                	li	a6,0
1c000f88:	40e60e33          	sub	t3,a2,a4
1c000f8c:	00269713          	slli	a4,a3,0x2
1c000f90:	01076733          	or	a4,a4,a6
1c000f94:	177d                	addi	a4,a4,-1
1c000f96:	4639                	li	a2,14
1c000f98:	00b548b3          	xor	a7,a0,a1
1c000f9c:	06e66b63          	bltu	a2,a4,1c001012 <__divsf3+0xca>
1c000fa0:	1c014637          	lui	a2,0x1c014
1c000fa4:	070a                	slli	a4,a4,0x2
1c000fa6:	d1860613          	addi	a2,a2,-744 # 1c013d18 <__DTOR_END__>
1c000faa:	20e67703          	p.lw	a4,a4(a2)
1c000fae:	8702                	jr	a4
1c000fb0:	02030663          	beqz	t1,1c000fdc <__divsf3+0x94>
1c000fb4:	10031733          	p.fl1	a4,t1
1c000fb8:	47fd                	li	a5,31
1c000fba:	40e78733          	sub	a4,a5,a4
1c000fbe:	ffb70793          	addi	a5,a4,-5
1c000fc2:	f8a00613          	li	a2,-118
1c000fc6:	00f31333          	sll	t1,t1,a5
1c000fca:	8e19                	sub	a2,a2,a4
1c000fcc:	bf69                	j	1c000f66 <__divsf3+0x1e>
1c000fce:	0ff00613          	li	a2,255
1c000fd2:	4689                	li	a3,2
1c000fd4:	f8030ae3          	beqz	t1,1c000f68 <__divsf3+0x20>
1c000fd8:	468d                	li	a3,3
1c000fda:	b779                	j	1c000f68 <__divsf3+0x20>
1c000fdc:	4601                	li	a2,0
1c000fde:	4685                	li	a3,1
1c000fe0:	b761                	j	1c000f68 <__divsf3+0x20>
1c000fe2:	c78d                	beqz	a5,1c00100c <__divsf3+0xc4>
1c000fe4:	10079833          	p.fl1	a6,a5
1c000fe8:	477d                	li	a4,31
1c000fea:	41070833          	sub	a6,a4,a6
1c000fee:	ffb80713          	addi	a4,a6,-5
1c000ff2:	00e797b3          	sll	a5,a5,a4
1c000ff6:	f8a00713          	li	a4,-118
1c000ffa:	41070733          	sub	a4,a4,a6
1c000ffe:	b761                	j	1c000f86 <__divsf3+0x3e>
1c001000:	0ff00713          	li	a4,255
1c001004:	4809                	li	a6,2
1c001006:	d3c9                	beqz	a5,1c000f88 <__divsf3+0x40>
1c001008:	480d                	li	a6,3
1c00100a:	bfbd                	j	1c000f88 <__divsf3+0x40>
1c00100c:	4701                	li	a4,0
1c00100e:	4805                	li	a6,1
1c001010:	bfa5                	j	1c000f88 <__divsf3+0x40>
1c001012:	00579813          	slli	a6,a5,0x5
1c001016:	0af37a63          	bleu	a5,t1,1c0010ca <__divsf3+0x182>
1c00101a:	1e7d                	addi	t3,t3,-1
1c00101c:	4601                	li	a2,0
1c00101e:	01085793          	srli	a5,a6,0x10
1c001022:	02f35eb3          	divu	t4,t1,a5
1c001026:	65c1                	lui	a1,0x10
1c001028:	15fd                	addi	a1,a1,-1
1c00102a:	00b87733          	and	a4,a6,a1
1c00102e:	8241                	srli	a2,a2,0x10
1c001030:	02f376b3          	remu	a3,t1,a5
1c001034:	8576                	mv	a0,t4
1c001036:	03d705b3          	mul	a1,a4,t4
1c00103a:	06c2                	slli	a3,a3,0x10
1c00103c:	8ed1                	or	a3,a3,a2
1c00103e:	00b6fc63          	bleu	a1,a3,1c001056 <__divsf3+0x10e>
1c001042:	96c2                	add	a3,a3,a6
1c001044:	fffe8513          	addi	a0,t4,-1
1c001048:	0106e763          	bltu	a3,a6,1c001056 <__divsf3+0x10e>
1c00104c:	00b6f563          	bleu	a1,a3,1c001056 <__divsf3+0x10e>
1c001050:	ffee8513          	addi	a0,t4,-2
1c001054:	96c2                	add	a3,a3,a6
1c001056:	8e8d                	sub	a3,a3,a1
1c001058:	02f6d633          	divu	a2,a3,a5
1c00105c:	02f6f6b3          	remu	a3,a3,a5
1c001060:	87b2                	mv	a5,a2
1c001062:	02c705b3          	mul	a1,a4,a2
1c001066:	01069713          	slli	a4,a3,0x10
1c00106a:	00b77c63          	bleu	a1,a4,1c001082 <__divsf3+0x13a>
1c00106e:	9742                	add	a4,a4,a6
1c001070:	fff60793          	addi	a5,a2,-1
1c001074:	01076763          	bltu	a4,a6,1c001082 <__divsf3+0x13a>
1c001078:	00b77563          	bleu	a1,a4,1c001082 <__divsf3+0x13a>
1c00107c:	ffe60793          	addi	a5,a2,-2
1c001080:	9742                	add	a4,a4,a6
1c001082:	0542                	slli	a0,a0,0x10
1c001084:	8f0d                	sub	a4,a4,a1
1c001086:	8d5d                	or	a0,a0,a5
1c001088:	00e03733          	snez	a4,a4
1c00108c:	00e567b3          	or	a5,a0,a4
1c001090:	07fe0693          	addi	a3,t3,127
1c001094:	04d05e63          	blez	a3,1c0010f0 <__divsf3+0x1a8>
1c001098:	f837b733          	p.bclr	a4,a5,28,3
1c00109c:	c711                	beqz	a4,1c0010a8 <__divsf3+0x160>
1c00109e:	f647b733          	p.bclr	a4,a5,27,4
1c0010a2:	00472363          	p.beqimm	a4,4,1c0010a8 <__divsf3+0x160>
1c0010a6:	0791                	addi	a5,a5,4
1c0010a8:	00479713          	slli	a4,a5,0x4
1c0010ac:	00075663          	bgez	a4,1c0010b8 <__divsf3+0x170>
1c0010b0:	c1b7b7b3          	p.bclr	a5,a5,0,27
1c0010b4:	080e0693          	addi	a3,t3,128
1c0010b8:	0fe00713          	li	a4,254
1c0010bc:	838d                	srli	a5,a5,0x3
1c0010be:	06d75c63          	ble	a3,a4,1c001136 <__divsf3+0x1ee>
1c0010c2:	4781                	li	a5,0
1c0010c4:	0ff00693          	li	a3,255
1c0010c8:	a0bd                	j	1c001136 <__divsf3+0x1ee>
1c0010ca:	01f31613          	slli	a2,t1,0x1f
1c0010ce:	00135313          	srli	t1,t1,0x1
1c0010d2:	b7b1                	j	1c00101e <__divsf3+0xd6>
1c0010d4:	88aa                	mv	a7,a0
1c0010d6:	879a                	mv	a5,t1
1c0010d8:	8836                	mv	a6,a3
1c0010da:	fe2824e3          	p.beqimm	a6,2,1c0010c2 <__divsf3+0x17a>
1c0010de:	04382763          	p.beqimm	a6,3,1c00112c <__divsf3+0x1e4>
1c0010e2:	fa1837e3          	p.bneimm	a6,1,1c001090 <__divsf3+0x148>
1c0010e6:	4781                	li	a5,0
1c0010e8:	4681                	li	a3,0
1c0010ea:	a0b1                	j	1c001136 <__divsf3+0x1ee>
1c0010ec:	88ae                	mv	a7,a1
1c0010ee:	b7f5                	j	1c0010da <__divsf3+0x192>
1c0010f0:	4705                	li	a4,1
1c0010f2:	8f15                	sub	a4,a4,a3
1c0010f4:	46ed                	li	a3,27
1c0010f6:	fee6c8e3          	blt	a3,a4,1c0010e6 <__divsf3+0x19e>
1c0010fa:	09ee0613          	addi	a2,t3,158
1c0010fe:	00e7d733          	srl	a4,a5,a4
1c001102:	00c797b3          	sll	a5,a5,a2
1c001106:	00f037b3          	snez	a5,a5
1c00110a:	8fd9                	or	a5,a5,a4
1c00110c:	f837b733          	p.bclr	a4,a5,28,3
1c001110:	c711                	beqz	a4,1c00111c <__divsf3+0x1d4>
1c001112:	f647b733          	p.bclr	a4,a5,27,4
1c001116:	00472363          	p.beqimm	a4,4,1c00111c <__divsf3+0x1d4>
1c00111a:	0791                	addi	a5,a5,4
1c00111c:	00579713          	slli	a4,a5,0x5
1c001120:	838d                	srli	a5,a5,0x3
1c001122:	fc0753e3          	bgez	a4,1c0010e8 <__divsf3+0x1a0>
1c001126:	4781                	li	a5,0
1c001128:	4685                	li	a3,1
1c00112a:	a031                	j	1c001136 <__divsf3+0x1ee>
1c00112c:	004007b7          	lui	a5,0x400
1c001130:	0ff00693          	li	a3,255
1c001134:	4881                	li	a7,0
1c001136:	4501                	li	a0,0
1c001138:	ec07a533          	p.insert	a0,a5,22,0
1c00113c:	cf76a533          	p.insert	a0,a3,7,23
1c001140:	c1f8a533          	p.insert	a0,a7,0,31
1c001144:	8082                	ret

1c001146 <__mulsf3>:
1c001146:	cf751633          	p.extractu	a2,a0,7,23
1c00114a:	ec051733          	p.extractu	a4,a0,22,0
1c00114e:	817d                	srli	a0,a0,0x1f
1c001150:	c225                	beqz	a2,1c0011b0 <__mulsf3+0x6a>
1c001152:	0ff00793          	li	a5,255
1c001156:	06f60b63          	beq	a2,a5,1c0011cc <__mulsf3+0x86>
1c00115a:	070e                	slli	a4,a4,0x3
1c00115c:	c1a74733          	p.bset	a4,a4,0,26
1c001160:	f8160613          	addi	a2,a2,-127
1c001164:	4301                	li	t1,0
1c001166:	cf7596b3          	p.extractu	a3,a1,7,23
1c00116a:	ec0597b3          	p.extractu	a5,a1,22,0
1c00116e:	81fd                	srli	a1,a1,0x1f
1c001170:	c6bd                	beqz	a3,1c0011de <__mulsf3+0x98>
1c001172:	0ff00813          	li	a6,255
1c001176:	09068363          	beq	a3,a6,1c0011fc <__mulsf3+0xb6>
1c00117a:	078e                	slli	a5,a5,0x3
1c00117c:	c1a7c7b3          	p.bset	a5,a5,0,26
1c001180:	f8168693          	addi	a3,a3,-127 # 7dffff81 <__l2_end+0x61feaed9>
1c001184:	4801                	li	a6,0
1c001186:	96b2                	add	a3,a3,a2
1c001188:	00231613          	slli	a2,t1,0x2
1c00118c:	01066633          	or	a2,a2,a6
1c001190:	167d                	addi	a2,a2,-1
1c001192:	4eb9                	li	t4,14
1c001194:	00b548b3          	xor	a7,a0,a1
1c001198:	00168e13          	addi	t3,a3,1
1c00119c:	06cee963          	bltu	t4,a2,1c00120e <__mulsf3+0xc8>
1c0011a0:	1c0146b7          	lui	a3,0x1c014
1c0011a4:	060a                	slli	a2,a2,0x2
1c0011a6:	d5468693          	addi	a3,a3,-684 # 1c013d54 <__DTOR_END__+0x3c>
1c0011aa:	20c6f603          	p.lw	a2,a2(a3)
1c0011ae:	8602                	jr	a2
1c0011b0:	c705                	beqz	a4,1c0011d8 <__mulsf3+0x92>
1c0011b2:	100716b3          	p.fl1	a3,a4
1c0011b6:	47fd                	li	a5,31
1c0011b8:	40d786b3          	sub	a3,a5,a3
1c0011bc:	ffb68793          	addi	a5,a3,-5
1c0011c0:	f8a00613          	li	a2,-118
1c0011c4:	00f71733          	sll	a4,a4,a5
1c0011c8:	8e15                	sub	a2,a2,a3
1c0011ca:	bf69                	j	1c001164 <__mulsf3+0x1e>
1c0011cc:	0ff00613          	li	a2,255
1c0011d0:	4309                	li	t1,2
1c0011d2:	db51                	beqz	a4,1c001166 <__mulsf3+0x20>
1c0011d4:	430d                	li	t1,3
1c0011d6:	bf41                	j	1c001166 <__mulsf3+0x20>
1c0011d8:	4601                	li	a2,0
1c0011da:	4305                	li	t1,1
1c0011dc:	b769                	j	1c001166 <__mulsf3+0x20>
1c0011de:	c78d                	beqz	a5,1c001208 <__mulsf3+0xc2>
1c0011e0:	10079833          	p.fl1	a6,a5
1c0011e4:	46fd                	li	a3,31
1c0011e6:	41068833          	sub	a6,a3,a6
1c0011ea:	ffb80693          	addi	a3,a6,-5
1c0011ee:	00d797b3          	sll	a5,a5,a3
1c0011f2:	f8a00693          	li	a3,-118
1c0011f6:	410686b3          	sub	a3,a3,a6
1c0011fa:	b769                	j	1c001184 <__mulsf3+0x3e>
1c0011fc:	0ff00693          	li	a3,255
1c001200:	4809                	li	a6,2
1c001202:	d3d1                	beqz	a5,1c001186 <__mulsf3+0x40>
1c001204:	480d                	li	a6,3
1c001206:	b741                	j	1c001186 <__mulsf3+0x40>
1c001208:	4681                	li	a3,0
1c00120a:	4805                	li	a6,1
1c00120c:	bfad                	j	1c001186 <__mulsf3+0x40>
1c00120e:	6641                	lui	a2,0x10
1c001210:	fff60313          	addi	t1,a2,-1 # ffff <__l1_heap_size+0x27>
1c001214:	01075593          	srli	a1,a4,0x10
1c001218:	0107de93          	srli	t4,a5,0x10
1c00121c:	0067f7b3          	and	a5,a5,t1
1c001220:	02f58533          	mul	a0,a1,a5
1c001224:	00677733          	and	a4,a4,t1
1c001228:	02f70833          	mul	a6,a4,a5
1c00122c:	03d587b3          	mul	a5,a1,t4
1c001230:	85aa                	mv	a1,a0
1c001232:	42ee85b3          	p.mac	a1,t4,a4
1c001236:	01085713          	srli	a4,a6,0x10
1c00123a:	972e                	add	a4,a4,a1
1c00123c:	00a77363          	bleu	a0,a4,1c001242 <__mulsf3+0xfc>
1c001240:	97b2                	add	a5,a5,a2
1c001242:	00677633          	and	a2,a4,t1
1c001246:	0642                	slli	a2,a2,0x10
1c001248:	00687833          	and	a6,a6,t1
1c00124c:	9642                	add	a2,a2,a6
1c00124e:	00661593          	slli	a1,a2,0x6
1c001252:	8341                	srli	a4,a4,0x10
1c001254:	97ba                	add	a5,a5,a4
1c001256:	00b035b3          	snez	a1,a1
1c00125a:	8269                	srli	a2,a2,0x1a
1c00125c:	8e4d                	or	a2,a2,a1
1c00125e:	079a                	slli	a5,a5,0x6
1c001260:	8fd1                	or	a5,a5,a2
1c001262:	00479713          	slli	a4,a5,0x4
1c001266:	06075763          	bgez	a4,1c0012d4 <__mulsf3+0x18e>
1c00126a:	0017d713          	srli	a4,a5,0x1
1c00126e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001272:	8fd9                	or	a5,a5,a4
1c001274:	07fe0693          	addi	a3,t3,127
1c001278:	06d05063          	blez	a3,1c0012d8 <__mulsf3+0x192>
1c00127c:	f837b733          	p.bclr	a4,a5,28,3
1c001280:	c711                	beqz	a4,1c00128c <__mulsf3+0x146>
1c001282:	f647b733          	p.bclr	a4,a5,27,4
1c001286:	00472363          	p.beqimm	a4,4,1c00128c <__mulsf3+0x146>
1c00128a:	0791                	addi	a5,a5,4
1c00128c:	00479713          	slli	a4,a5,0x4
1c001290:	00075663          	bgez	a4,1c00129c <__mulsf3+0x156>
1c001294:	c1b7b7b3          	p.bclr	a5,a5,0,27
1c001298:	080e0693          	addi	a3,t3,128
1c00129c:	0fe00713          	li	a4,254
1c0012a0:	08d74063          	blt	a4,a3,1c001320 <__mulsf3+0x1da>
1c0012a4:	0037d713          	srli	a4,a5,0x3
1c0012a8:	a821                	j	1c0012c0 <__mulsf3+0x17a>
1c0012aa:	88aa                	mv	a7,a0
1c0012ac:	87ba                	mv	a5,a4
1c0012ae:	881a                	mv	a6,t1
1c0012b0:	06282863          	p.beqimm	a6,2,1c001320 <__mulsf3+0x1da>
1c0012b4:	06382063          	p.beqimm	a6,3,1c001314 <__mulsf3+0x1ce>
1c0012b8:	4701                	li	a4,0
1c0012ba:	4681                	li	a3,0
1c0012bc:	fa183ce3          	p.bneimm	a6,1,1c001274 <__mulsf3+0x12e>
1c0012c0:	4501                	li	a0,0
1c0012c2:	ec072533          	p.insert	a0,a4,22,0
1c0012c6:	cf76a533          	p.insert	a0,a3,7,23
1c0012ca:	c1f8a533          	p.insert	a0,a7,0,31
1c0012ce:	8082                	ret
1c0012d0:	88ae                	mv	a7,a1
1c0012d2:	bff9                	j	1c0012b0 <__mulsf3+0x16a>
1c0012d4:	8e36                	mv	t3,a3
1c0012d6:	bf79                	j	1c001274 <__mulsf3+0x12e>
1c0012d8:	4705                	li	a4,1
1c0012da:	8f15                	sub	a4,a4,a3
1c0012dc:	46ed                	li	a3,27
1c0012de:	04e6c563          	blt	a3,a4,1c001328 <__mulsf3+0x1e2>
1c0012e2:	09ee0e13          	addi	t3,t3,158
1c0012e6:	00e7d733          	srl	a4,a5,a4
1c0012ea:	01c797b3          	sll	a5,a5,t3
1c0012ee:	00f037b3          	snez	a5,a5
1c0012f2:	8fd9                	or	a5,a5,a4
1c0012f4:	f837b733          	p.bclr	a4,a5,28,3
1c0012f8:	c711                	beqz	a4,1c001304 <__mulsf3+0x1be>
1c0012fa:	f647b733          	p.bclr	a4,a5,27,4
1c0012fe:	00472363          	p.beqimm	a4,4,1c001304 <__mulsf3+0x1be>
1c001302:	0791                	addi	a5,a5,4
1c001304:	00579713          	slli	a4,a5,0x5
1c001308:	02074263          	bltz	a4,1c00132c <__mulsf3+0x1e6>
1c00130c:	0037d713          	srli	a4,a5,0x3
1c001310:	4681                	li	a3,0
1c001312:	b77d                	j	1c0012c0 <__mulsf3+0x17a>
1c001314:	00400737          	lui	a4,0x400
1c001318:	0ff00693          	li	a3,255
1c00131c:	4881                	li	a7,0
1c00131e:	b74d                	j	1c0012c0 <__mulsf3+0x17a>
1c001320:	4701                	li	a4,0
1c001322:	0ff00693          	li	a3,255
1c001326:	bf69                	j	1c0012c0 <__mulsf3+0x17a>
1c001328:	4701                	li	a4,0
1c00132a:	b7dd                	j	1c001310 <__mulsf3+0x1ca>
1c00132c:	4701                	li	a4,0
1c00132e:	4685                	li	a3,1
1c001330:	bf41                	j	1c0012c0 <__mulsf3+0x17a>

1c001332 <__fixsfsi>:
1c001332:	cf751733          	p.extractu	a4,a0,7,23
1c001336:	07e00613          	li	a2,126
1c00133a:	ec0517b3          	p.extractu	a5,a0,22,0
1c00133e:	01f55693          	srli	a3,a0,0x1f
1c001342:	04e67163          	bleu	a4,a2,1c001384 <__fixsfsi+0x52>
1c001346:	09d00613          	li	a2,157
1c00134a:	00e67863          	bleu	a4,a2,1c00135a <__fixsfsi+0x28>
1c00134e:	80000537          	lui	a0,0x80000
1c001352:	fff54513          	not	a0,a0
1c001356:	9536                	add	a0,a0,a3
1c001358:	8082                	ret
1c00135a:	c177c533          	p.bset	a0,a5,0,23
1c00135e:	09500793          	li	a5,149
1c001362:	00e7da63          	ble	a4,a5,1c001376 <__fixsfsi+0x44>
1c001366:	f6a70713          	addi	a4,a4,-150 # 3fff6a <__L2+0x37ff6a>
1c00136a:	00e51533          	sll	a0,a0,a4
1c00136e:	ce81                	beqz	a3,1c001386 <__fixsfsi+0x54>
1c001370:	40a00533          	neg	a0,a0
1c001374:	8082                	ret
1c001376:	09600793          	li	a5,150
1c00137a:	40e78733          	sub	a4,a5,a4
1c00137e:	00e55533          	srl	a0,a0,a4
1c001382:	b7f5                	j	1c00136e <__fixsfsi+0x3c>
1c001384:	4501                	li	a0,0
1c001386:	8082                	ret

1c001388 <__floatsisf>:
1c001388:	cd51                	beqz	a0,1c001424 <__floatsisf+0x9c>
1c00138a:	87aa                	mv	a5,a0
1c00138c:	01f55593          	srli	a1,a0,0x1f
1c001390:	00055463          	bgez	a0,1c001398 <__floatsisf+0x10>
1c001394:	40a007b3          	neg	a5,a0
1c001398:	46fd                	li	a3,31
1c00139a:	10079733          	p.fl1	a4,a5
1c00139e:	40e68733          	sub	a4,a3,a4
1c0013a2:	09e00693          	li	a3,158
1c0013a6:	8e99                	sub	a3,a3,a4
1c0013a8:	09600613          	li	a2,150
1c0013ac:	02d64063          	blt	a2,a3,1c0013cc <__floatsisf+0x44>
1c0013b0:	4621                	li	a2,8
1c0013b2:	00e65563          	ble	a4,a2,1c0013bc <__floatsisf+0x34>
1c0013b6:	1761                	addi	a4,a4,-8
1c0013b8:	00e797b3          	sll	a5,a5,a4
1c0013bc:	4501                	li	a0,0
1c0013be:	ec07a533          	p.insert	a0,a5,22,0
1c0013c2:	cf76a533          	p.insert	a0,a3,7,23
1c0013c6:	c1f5a533          	p.insert	a0,a1,0,31
1c0013ca:	8082                	ret
1c0013cc:	09900613          	li	a2,153
1c0013d0:	00d65d63          	ble	a3,a2,1c0013ea <__floatsisf+0x62>
1c0013d4:	4615                	li	a2,5
1c0013d6:	8e19                	sub	a2,a2,a4
1c0013d8:	01b70513          	addi	a0,a4,27
1c0013dc:	00c7d633          	srl	a2,a5,a2
1c0013e0:	00a797b3          	sll	a5,a5,a0
1c0013e4:	00f037b3          	snez	a5,a5
1c0013e8:	8fd1                	or	a5,a5,a2
1c0013ea:	4615                	li	a2,5
1c0013ec:	00e65663          	ble	a4,a2,1c0013f8 <__floatsisf+0x70>
1c0013f0:	ffb70613          	addi	a2,a4,-5
1c0013f4:	00c797b3          	sll	a5,a5,a2
1c0013f8:	f837b533          	p.bclr	a0,a5,28,3
1c0013fc:	c1a7b633          	p.bclr	a2,a5,0,26
1c001400:	c511                	beqz	a0,1c00140c <__floatsisf+0x84>
1c001402:	f647b7b3          	p.bclr	a5,a5,27,4
1c001406:	0047a363          	p.beqimm	a5,4,1c00140c <__floatsisf+0x84>
1c00140a:	0611                	addi	a2,a2,4
1c00140c:	00561793          	slli	a5,a2,0x5
1c001410:	0007d763          	bgez	a5,1c00141e <__floatsisf+0x96>
1c001414:	09f00693          	li	a3,159
1c001418:	c1a63633          	p.bclr	a2,a2,0,26
1c00141c:	8e99                	sub	a3,a3,a4
1c00141e:	00365793          	srli	a5,a2,0x3
1c001422:	bf69                	j	1c0013bc <__floatsisf+0x34>
1c001424:	4781                	li	a5,0
1c001426:	4681                	li	a3,0
1c001428:	4581                	li	a1,0
1c00142a:	bf49                	j	1c0013bc <__floatsisf+0x34>

1c00142c <__floatunsisf>:
1c00142c:	4701                	li	a4,0
1c00142e:	c11d                	beqz	a0,1c001454 <__floatunsisf+0x28>
1c001430:	477d                	li	a4,31
1c001432:	100517b3          	p.fl1	a5,a0
1c001436:	40f707b3          	sub	a5,a4,a5
1c00143a:	09e00713          	li	a4,158
1c00143e:	8f1d                	sub	a4,a4,a5
1c001440:	09600693          	li	a3,150
1c001444:	02e6c063          	blt	a3,a4,1c001464 <__floatunsisf+0x38>
1c001448:	46a1                	li	a3,8
1c00144a:	00f6d563          	ble	a5,a3,1c001454 <__floatunsisf+0x28>
1c00144e:	17e1                	addi	a5,a5,-8
1c001450:	00f51533          	sll	a0,a0,a5
1c001454:	4781                	li	a5,0
1c001456:	ec0527b3          	p.insert	a5,a0,22,0
1c00145a:	cf7727b3          	p.insert	a5,a4,7,23
1c00145e:	c1f7b533          	p.bclr	a0,a5,0,31
1c001462:	8082                	ret
1c001464:	09900693          	li	a3,153
1c001468:	00e6dd63          	ble	a4,a3,1c001482 <__floatunsisf+0x56>
1c00146c:	01b78693          	addi	a3,a5,27 # 40001b <__L2+0x38001b>
1c001470:	4615                	li	a2,5
1c001472:	00d516b3          	sll	a3,a0,a3
1c001476:	8e1d                	sub	a2,a2,a5
1c001478:	00d036b3          	snez	a3,a3
1c00147c:	00c55533          	srl	a0,a0,a2
1c001480:	8d55                	or	a0,a0,a3
1c001482:	4695                	li	a3,5
1c001484:	00f6d663          	ble	a5,a3,1c001490 <__floatunsisf+0x64>
1c001488:	ffb78693          	addi	a3,a5,-5
1c00148c:	00d51533          	sll	a0,a0,a3
1c001490:	f8353633          	p.bclr	a2,a0,28,3
1c001494:	c1a536b3          	p.bclr	a3,a0,0,26
1c001498:	c611                	beqz	a2,1c0014a4 <__floatunsisf+0x78>
1c00149a:	f6453533          	p.bclr	a0,a0,27,4
1c00149e:	00452363          	p.beqimm	a0,4,1c0014a4 <__floatunsisf+0x78>
1c0014a2:	0691                	addi	a3,a3,4
1c0014a4:	00569613          	slli	a2,a3,0x5
1c0014a8:	00065763          	bgez	a2,1c0014b6 <__floatunsisf+0x8a>
1c0014ac:	09f00713          	li	a4,159
1c0014b0:	c1a6b6b3          	p.bclr	a3,a3,0,26
1c0014b4:	8f1d                	sub	a4,a4,a5
1c0014b6:	0036d513          	srli	a0,a3,0x3
1c0014ba:	bf69                	j	1c001454 <__floatunsisf+0x28>

1c0014bc <__extendsfdf2>:
1c0014bc:	cf7516b3          	p.extractu	a3,a0,7,23
1c0014c0:	00168793          	addi	a5,a3,1
1c0014c4:	ee87b7b3          	p.bclr	a5,a5,23,8
1c0014c8:	4605                	li	a2,1
1c0014ca:	ec051733          	p.extractu	a4,a0,22,0
1c0014ce:	817d                	srli	a0,a0,0x1f
1c0014d0:	02f65163          	ble	a5,a2,1c0014f2 <__extendsfdf2+0x36>
1c0014d4:	00375793          	srli	a5,a4,0x3
1c0014d8:	38068693          	addi	a3,a3,896
1c0014dc:	0776                	slli	a4,a4,0x1d
1c0014de:	4601                	li	a2,0
1c0014e0:	e607a633          	p.insert	a2,a5,19,0
1c0014e4:	d546a633          	p.insert	a2,a3,10,20
1c0014e8:	c1f52633          	p.insert	a2,a0,0,31
1c0014ec:	85b2                	mv	a1,a2
1c0014ee:	853a                	mv	a0,a4
1c0014f0:	8082                	ret
1c0014f2:	ee85                	bnez	a3,1c00152a <__extendsfdf2+0x6e>
1c0014f4:	c729                	beqz	a4,1c00153e <__extendsfdf2+0x82>
1c0014f6:	47fd                	li	a5,31
1c0014f8:	10071633          	p.fl1	a2,a4
1c0014fc:	40c78633          	sub	a2,a5,a2
1c001500:	47a9                	li	a5,10
1c001502:	00c7ce63          	blt	a5,a2,1c00151e <__extendsfdf2+0x62>
1c001506:	47ad                	li	a5,11
1c001508:	8f91                	sub	a5,a5,a2
1c00150a:	01560693          	addi	a3,a2,21
1c00150e:	00f757b3          	srl	a5,a4,a5
1c001512:	00d71733          	sll	a4,a4,a3
1c001516:	38900693          	li	a3,905
1c00151a:	8e91                	sub	a3,a3,a2
1c00151c:	b7c9                	j	1c0014de <__extendsfdf2+0x22>
1c00151e:	ff560793          	addi	a5,a2,-11
1c001522:	00f717b3          	sll	a5,a4,a5
1c001526:	4701                	li	a4,0
1c001528:	b7fd                	j	1c001516 <__extendsfdf2+0x5a>
1c00152a:	4781                	li	a5,0
1c00152c:	c711                	beqz	a4,1c001538 <__extendsfdf2+0x7c>
1c00152e:	00375793          	srli	a5,a4,0x3
1c001532:	c137c7b3          	p.bset	a5,a5,0,19
1c001536:	0776                	slli	a4,a4,0x1d
1c001538:	7ff00693          	li	a3,2047
1c00153c:	b74d                	j	1c0014de <__extendsfdf2+0x22>
1c00153e:	4781                	li	a5,0
1c001540:	4681                	li	a3,0
1c001542:	bf71                	j	1c0014de <__extendsfdf2+0x22>

1c001544 <RunNN>:
    if( w > 24 + 2 || w < 24 - 2 )         return -1;
    if( h > 71 + 2 || h < 71 - 2 )         return -1;

    return 0;

}
1c001544:	1101                	addi	sp,sp,-32
1c001546:	ce06                	sw	ra,28(sp)
1c001548:	cc22                	sw	s0,24(sp)
1c00154a:	67c1                	lui	a5,0x10
1c00154c:	7a079073          	csrw	pcer,a5
1c001550:	10200437          	lui	s0,0x10200
1c001554:	40040413          	addi	s0,s0,1024 # 10200400 <__l1_end+0x2003d8>
1c001558:	4785                	li	a5,1
1c00155a:	00f42c23          	sw	a5,24(s0)
1c00155e:	478d                	li	a5,3
1c001560:	7a179073          	csrw	pcmr,a5
1c001564:	4785                	li	a5,1
1c001566:	02f42023          	sw	a5,32(s0)
1c00156a:	4781                	li	a5,0
1c00156c:	79f79073          	csrw	pccr31,a5
1c001570:	00842783          	lw	a5,8(s0)
1c001574:	1c0157b7          	lui	a5,0x1c015
1c001578:	fec7a883          	lw	a7,-20(a5) # 1c014fec <Output_7>
1c00157c:	1c015337          	lui	t1,0x1c015
1c001580:	1c0157b7          	lui	a5,0x1c015
1c001584:	fac7a803          	lw	a6,-84(a5) # 1c014fac <Output_6>
1c001588:	fc432303          	lw	t1,-60(t1) # 1c014fc4 <Output_8>
1c00158c:	1c0157b7          	lui	a5,0x1c015
1c001590:	1c015737          	lui	a4,0x1c015
1c001594:	1c0156b7          	lui	a3,0x1c015
1c001598:	1c015637          	lui	a2,0x1c015
1c00159c:	1c0155b7          	lui	a1,0x1c015
1c0015a0:	1c015537          	lui	a0,0x1c015
1c0015a4:	fcc7a783          	lw	a5,-52(a5) # 1c014fcc <Output_5>
1c0015a8:	fdc72703          	lw	a4,-36(a4) # 1c014fdc <Output_4>
1c0015ac:	fbc6a683          	lw	a3,-68(a3) # 1c014fbc <Output_3>
1c0015b0:	fc062603          	lw	a2,-64(a2) # 1c014fc0 <Output_2>
1c0015b4:	fc85a583          	lw	a1,-56(a1) # 1c014fc8 <Output_1>
1c0015b8:	a7852503          	lw	a0,-1416(a0) # 1c014a78 <ImageIn>
1c0015bc:	c01a                	sw	t1,0(sp)
1c0015be:	4e50a0ef          	jal	ra,1c00c2a2 <cnn_ssdCNN>
1c0015c2:	00842403          	lw	s0,8(s0)
1c0015c6:	40f2                	lw	ra,28(sp)
1c0015c8:	4462                	lw	s0,24(sp)
1c0015ca:	6105                	addi	sp,sp,32
1c0015cc:	8082                	ret

1c0015ce <writeDetImg>:
1c0015ce:	1141                	addi	sp,sp,-16
1c0015d0:	c226                	sw	s1,4(sp)
1c0015d2:	84aa                	mv	s1,a0
1c0015d4:	8532                	mv	a0,a2
1c0015d6:	c606                	sw	ra,12(sp)
1c0015d8:	c422                	sw	s0,8(sp)
1c0015da:	c04a                	sw	s2,0(sp)
1c0015dc:	892e                	mv	s2,a1
1c0015de:	336d                	jal	1c001388 <__floatsisf>
1c0015e0:	1c0147b7          	lui	a5,0x1c014
1c0015e4:	3a47a583          	lw	a1,932(a5) # 1c0143a4 <__clz_tab+0x614>
1c0015e8:	1c015437          	lui	s0,0x1c015
1c0015ec:	3ea9                	jal	1c001146 <__mulsf3>
1c0015ee:	35f9                	jal	1c0014bc <__extendsfdf2>
1c0015f0:	87ae                	mv	a5,a1
1c0015f2:	1c0145b7          	lui	a1,0x1c014
1c0015f6:	872a                	mv	a4,a0
1c0015f8:	864a                	mv	a2,s2
1c0015fa:	3a858593          	addi	a1,a1,936 # 1c0143a8 <__clz_tab+0x618>
1c0015fe:	cc440513          	addi	a0,s0,-828 # 1c014cc4 <imgName.18551>
1c001602:	1c8120ef          	jal	ra,1c0137ca <sprintf>
1c001606:	1c014537          	lui	a0,0x1c014
1c00160a:	cc440593          	addi	a1,s0,-828
1c00160e:	3d050513          	addi	a0,a0,976 # 1c0143d0 <__clz_tab+0x640>
1c001612:	58e110ef          	jal	ra,1c012ba0 <printf>
1c001616:	1c0157b7          	lui	a5,0x1c015
1c00161a:	a587a603          	lw	a2,-1448(a5) # 1c014a58 <H>
1c00161e:	1c0157b7          	lui	a5,0x1c015
1c001622:	a607a583          	lw	a1,-1440(a5) # 1c014a60 <W>
1c001626:	86a6                	mv	a3,s1
1c001628:	cc440513          	addi	a0,s0,-828
1c00162c:	72b000ef          	jal	ra,1c002556 <WriteImageToFile>
1c001630:	1c0157b7          	lui	a5,0x1c015
1c001634:	f7478793          	addi	a5,a5,-140 # 1c014f74 <idx>
1c001638:	4398                	lw	a4,0(a5)
1c00163a:	40b2                	lw	ra,12(sp)
1c00163c:	4422                	lw	s0,8(sp)
1c00163e:	0705                	addi	a4,a4,1
1c001640:	c398                	sw	a4,0(a5)
1c001642:	4492                	lw	s1,4(sp)
1c001644:	4902                	lw	s2,0(sp)
1c001646:	0141                	addi	sp,sp,16
1c001648:	8082                	ret

1c00164a <non_max_suppress>:
1c00164a:	00451f03          	lh	t5,4(a0)
1c00164e:	09e05d63          	blez	t5,1c0016e8 <non_max_suppress+0x9e>
1c001652:	00052f83          	lw	t6,0(a0)
1c001656:	4301                	li	t1,0
1c001658:	42a5                	li	t0,9
1c00165a:	857e                	mv	a0,t6
1c00165c:	8e7a                	mv	t3,t5
1c00165e:	03ae407b          	lp.setup	x0,t3,1c0016d2 <non_max_suppress+0x88>
1c001662:	01454783          	lbu	a5,20(a0)
1c001666:	c7ad                	beqz	a5,1c0016d0 <non_max_suppress+0x86>
1c001668:	87fe                	mv	a5,t6
1c00166a:	4581                	li	a1,0
1c00166c:	867a                	mv	a2,t5
1c00166e:	030640fb          	lp.setup	x1,a2,1c0016ce <non_max_suppress+0x84>
1c001672:	0147c703          	lbu	a4,20(a5)
1c001676:	cb39                	beqz	a4,1c0016cc <non_max_suppress+0x82>
1c001678:	04b30a63          	beq	t1,a1,1c0016cc <non_max_suppress+0x82>
1c00167c:	00051803          	lh	a6,0(a0)
1c001680:	00079883          	lh	a7,0(a5)
1c001684:	00879703          	lh	a4,8(a5)
1c001688:	00851683          	lh	a3,8(a0)
1c00168c:	05186eb3          	p.max	t4,a6,a7
1c001690:	9746                	add	a4,a4,a7
1c001692:	96c2                	add	a3,a3,a6
1c001694:	04d74733          	p.min	a4,a4,a3
1c001698:	41d70733          	sub	a4,a4,t4
1c00169c:	02e05863          	blez	a4,1c0016cc <non_max_suppress+0x82>
1c0016a0:	00451883          	lh	a7,4(a0)
1c0016a4:	00479e83          	lh	t4,4(a5)
1c0016a8:	00c79683          	lh	a3,12(a5)
1c0016ac:	00c51803          	lh	a6,12(a0)
1c0016b0:	05d8e3b3          	p.max	t2,a7,t4
1c0016b4:	96f6                	add	a3,a3,t4
1c0016b6:	9846                	add	a6,a6,a7
1c0016b8:	0506c6b3          	p.min	a3,a3,a6
1c0016bc:	407686b3          	sub	a3,a3,t2
1c0016c0:	02e68733          	mul	a4,a3,a4
1c0016c4:	00e2d463          	ble	a4,t0,1c0016cc <non_max_suppress+0x82>
1c0016c8:	00078a23          	sb	zero,20(a5)
1c0016cc:	0585                	addi	a1,a1,1
1c0016ce:	07e1                	addi	a5,a5,24
1c0016d0:	0305                	addi	t1,t1,1
1c0016d2:	0561                	addi	a0,a0,24
1c0016d4:	014f8713          	addi	a4,t6,20
1c0016d8:	4781                	li	a5,0
1c0016da:	4685                	li	a3,1
1c0016dc:	c799                	beqz	a5,1c0016ea <non_max_suppress+0xa0>
1c0016de:	00070c2b          	p.sb	zero,24(a4!)
1c0016e2:	0785                	addi	a5,a5,1
1c0016e4:	ffe79ce3          	bne	a5,t5,1c0016dc <non_max_suppress+0x92>
1c0016e8:	8082                	ret
1c0016ea:	00df8a23          	sb	a3,20(t6)
1c0016ee:	0761                	addi	a4,a4,24
1c0016f0:	fe1f2ce3          	p.beqimm	t5,1,1c0016e8 <non_max_suppress+0x9e>
1c0016f4:	4785                	li	a5,1
1c0016f6:	b7e5                	j	1c0016de <non_max_suppress+0x94>

1c0016f8 <RunSSD>:
1c0016f8:	102007b7          	lui	a5,0x10200
1c0016fc:	7139                	addi	sp,sp,-64
1c0016fe:	40078793          	addi	a5,a5,1024 # 10200400 <__l1_end+0x2003d8>
1c001702:	4705                	li	a4,1
1c001704:	de06                	sw	ra,60(sp)
1c001706:	dc22                	sw	s0,56(sp)
1c001708:	da26                	sw	s1,52(sp)
1c00170a:	d84a                	sw	s2,48(sp)
1c00170c:	d64e                	sw	s3,44(sp)
1c00170e:	d452                	sw	s4,40(sp)
1c001710:	d256                	sw	s5,36(sp)
1c001712:	d05a                	sw	s6,32(sp)
1c001714:	ce5e                	sw	s7,28(sp)
1c001716:	cc62                	sw	s8,24(sp)
1c001718:	ca66                	sw	s9,20(sp)
1c00171a:	c86a                	sw	s10,16(sp)
1c00171c:	c66e                	sw	s11,12(sp)
1c00171e:	02e7a023          	sw	a4,32(a5)
1c001722:	4701                	li	a4,0
1c001724:	79f71073          	csrw	pccr31,a4
1c001728:	0087a783          	lw	a5,8(a5)
1c00172c:	1c0154b7          	lui	s1,0x1c015
1c001730:	a8448413          	addi	s0,s1,-1404 # 1c014a84 <bbxs>
1c001734:	1c0157b7          	lui	a5,0x1c015
1c001738:	fc87a503          	lw	a0,-56(a5) # 1c014fc8 <Output_1>
1c00173c:	440c                	lw	a1,8(s0)
1c00173e:	468d                	li	a3,3
1c001740:	462d                	li	a2,11
1c001742:	00041223          	sh	zero,4(s0)
1c001746:	1cc010ef          	jal	ra,1c002912 <SDD3Dto2DSoftmax_20_16_18>
1c00174a:	1c0157b7          	lui	a5,0x1c015
1c00174e:	fc07a503          	lw	a0,-64(a5) # 1c014fc0 <Output_2>
1c001752:	444c                	lw	a1,12(s0)
1c001754:	4681                	li	a3,0
1c001756:	4601                	li	a2,0
1c001758:	64a010ef          	jal	ra,1c002da2 <SDD3Dto2D_20_16_24>
1c00175c:	1c0157b7          	lui	a5,0x1c015
1c001760:	a947a603          	lw	a2,-1388(a5) # 1c014a94 <anchor_layer_1>
1c001764:	444c                	lw	a1,12(s0)
1c001766:	4408                	lw	a0,8(s0)
1c001768:	472d                	li	a4,11
1c00176a:	a8448693          	addi	a3,s1,-1404
1c00176e:	2bb010ef          	jal	ra,1c003228 <Predecoder20_16>
1c001772:	1c0157b7          	lui	a5,0x1c015
1c001776:	fbc7a503          	lw	a0,-68(a5) # 1c014fbc <Output_3>
1c00177a:	440c                	lw	a1,8(s0)
1c00177c:	468d                	li	a3,3
1c00177e:	462d                	li	a2,11
1c001780:	6bf010ef          	jal	ra,1c00363e <SDD3Dto2DSoftmax_10_8_18>
1c001784:	1c0157b7          	lui	a5,0x1c015
1c001788:	fdc7a503          	lw	a0,-36(a5) # 1c014fdc <Output_4>
1c00178c:	444c                	lw	a1,12(s0)
1c00178e:	4681                	li	a3,0
1c001790:	4601                	li	a2,0
1c001792:	130020ef          	jal	ra,1c0038c2 <SDD3Dto2D_10_8_24>
1c001796:	1c0157b7          	lui	a5,0x1c015
1c00179a:	aec7a603          	lw	a2,-1300(a5) # 1c014aec <anchor_layer_2>
1c00179e:	444c                	lw	a1,12(s0)
1c0017a0:	4408                	lw	a0,8(s0)
1c0017a2:	4731                	li	a4,12
1c0017a4:	a8448693          	addi	a3,s1,-1404
1c0017a8:	39a020ef          	jal	ra,1c003b42 <Predecoder10_8>
1c0017ac:	1c0157b7          	lui	a5,0x1c015
1c0017b0:	fcc7a503          	lw	a0,-52(a5) # 1c014fcc <Output_5>
1c0017b4:	440c                	lw	a1,8(s0)
1c0017b6:	468d                	li	a3,3
1c0017b8:	462d                	li	a2,11
1c0017ba:	5f0020ef          	jal	ra,1c003daa <SDD3Dto2DSoftmax_5_4_18>
1c0017be:	1c0157b7          	lui	a5,0x1c015
1c0017c2:	fac7a503          	lw	a0,-84(a5) # 1c014fac <Output_6>
1c0017c6:	444c                	lw	a1,12(s0)
1c0017c8:	4681                	li	a3,0
1c0017ca:	4601                	li	a2,0
1c0017cc:	053020ef          	jal	ra,1c00401e <SDD3Dto2D_5_4_24>
1c0017d0:	1c0157b7          	lui	a5,0x1c015
1c0017d4:	b447a603          	lw	a2,-1212(a5) # 1c014b44 <anchor_layer_3>
1c0017d8:	444c                	lw	a1,12(s0)
1c0017da:	4408                	lw	a0,8(s0)
1c0017dc:	4731                	li	a4,12
1c0017de:	a8448693          	addi	a3,s1,-1404
1c0017e2:	2b1020ef          	jal	ra,1c004292 <Predecoder5_4>
1c0017e6:	1c0157b7          	lui	a5,0x1c015
1c0017ea:	fec7a503          	lw	a0,-20(a5) # 1c014fec <Output_7>
1c0017ee:	440c                	lw	a1,8(s0)
1c0017f0:	468d                	li	a3,3
1c0017f2:	4631                	li	a2,12
1c0017f4:	4f9020ef          	jal	ra,1c0044ec <SDD3Dto2DSoftmax_2_2_18>
1c0017f8:	1c0157b7          	lui	a5,0x1c015
1c0017fc:	fc47a503          	lw	a0,-60(a5) # 1c014fc4 <Output_8>
1c001800:	444c                	lw	a1,12(s0)
1c001802:	4681                	li	a3,0
1c001804:	4601                	li	a2,0
1c001806:	759020ef          	jal	ra,1c00475e <SDD3Dto2D_2_2_24>
1c00180a:	1c0157b7          	lui	a5,0x1c015
1c00180e:	b9c7a603          	lw	a2,-1124(a5) # 1c014b9c <anchor_layer_4>
1c001812:	444c                	lw	a1,12(s0)
1c001814:	4408                	lw	a0,8(s0)
1c001816:	4735                	li	a4,13
1c001818:	a8448693          	addi	a3,s1,-1404
1c00181c:	1b4030ef          	jal	ra,1c0049d0 <Predecoder2_2>
1c001820:	00441383          	lh	t2,4(s0)
1c001824:	4905                	li	s2,1
1c001826:	00139293          	slli	t0,t2,0x1
1c00182a:	929e                	add	t0,t0,t2
1c00182c:	028e                	slli	t0,t0,0x3
1c00182e:	08795863          	ble	t2,s2,1c0018be <RunSSD+0x1c6>
1c001832:	401c                	lw	a5,0(s0)
1c001834:	4f81                	li	t6,0
1c001836:	fe878513          	addi	a0,a5,-24
1c00183a:	9516                	add	a0,a0,t0
1c00183c:	01079603          	lh	a2,16(a5)
1c001840:	02879583          	lh	a1,40(a5)
1c001844:	873e                	mv	a4,a5
1c001846:	01878693          	addi	a3,a5,24
1c00184a:	06b65563          	ble	a1,a2,1c0018b4 <RunSSD+0x1bc>
1c00184e:	0006af03          	lw	t5,0(a3)
1c001852:	0007ae83          	lw	t4,0(a5)
1c001856:	0047ae03          	lw	t3,4(a5)
1c00185a:	0087a303          	lw	t1,8(a5)
1c00185e:	00c7a883          	lw	a7,12(a5)
1c001862:	0127d803          	lhu	a6,18(a5)
1c001866:	0147c583          	lbu	a1,20(a5)
1c00186a:	01e7222b          	p.sw	t5,4(a4!)
1c00186e:	01c7af03          	lw	t5,28(a5)
1c001872:	4f85                	li	t6,1
1c001874:	01e7222b          	p.sw	t5,4(a4!)
1c001878:	0207af03          	lw	t5,32(a5)
1c00187c:	01e7222b          	p.sw	t5,4(a4!)
1c001880:	0247af03          	lw	t5,36(a5)
1c001884:	01e7222b          	p.sw	t5,4(a4!)
1c001888:	0287af03          	lw	t5,40(a5)
1c00188c:	01e7222b          	p.sw	t5,4(a4!)
1c001890:	02c7af03          	lw	t5,44(a5)
1c001894:	01e72023          	sw	t5,0(a4)
1c001898:	01d7ac23          	sw	t4,24(a5)
1c00189c:	01c7ae23          	sw	t3,28(a5)
1c0018a0:	0267a023          	sw	t1,32(a5)
1c0018a4:	0317a223          	sw	a7,36(a5)
1c0018a8:	02c79423          	sh	a2,40(a5)
1c0018ac:	03079523          	sh	a6,42(a5)
1c0018b0:	02b78623          	sb	a1,44(a5)
1c0018b4:	87b6                	mv	a5,a3
1c0018b6:	f8d513e3          	bne	a0,a3,1c00183c <RunSSD+0x144>
1c0018ba:	f60f9ae3          	bnez	t6,1c00182e <RunSSD+0x136>
1c0018be:	0a705563          	blez	t2,1c001968 <RunSSD+0x270>
1c0018c2:	1c0147b7          	lui	a5,0x1c014
1c0018c6:	e987ab03          	lw	s6,-360(a5) # 1c013e98 <__clz_tab+0x108>
1c0018ca:	1c0147b7          	lui	a5,0x1c014
1c0018ce:	e907aa83          	lw	s5,-368(a5) # 1c013e90 <__clz_tab+0x100>
1c0018d2:	1c0147b7          	lui	a5,0x1c014
1c0018d6:	4000                	lw	s0,0(s0)
1c0018d8:	e947a983          	lw	s3,-364(a5) # 1c013e94 <__clz_tab+0x104>
1c0018dc:	1c0147b7          	lui	a5,0x1c014
1c0018e0:	e9c7aa03          	lw	s4,-356(a5) # 1c013e9c <__clz_tab+0x10c>
1c0018e4:	00828933          	add	s2,t0,s0
1c0018e8:	8d5a                	mv	s10,s6
1c0018ea:	8cd6                	mv	s9,s5
1c0018ec:	01444783          	lbu	a5,20(s0)
1c0018f0:	0617b963          	p.bneimm	a5,1,1c001962 <RunSSD+0x26a>
1c0018f4:	4008                	lw	a0,0(s0)
1c0018f6:	3e1d                	jal	1c00142c <__floatunsisf>
1c0018f8:	85da                	mv	a1,s6
1c0018fa:	30b1                	jal	1c001146 <__mulsf3>
1c0018fc:	85d6                	mv	a1,s5
1c0018fe:	30a1                	jal	1c001146 <__mulsf3>
1c001900:	3c0d                	jal	1c001332 <__fixsfsi>
1c001902:	8c2a                	mv	s8,a0
1c001904:	4048                	lw	a0,4(s0)
1c001906:	361d                	jal	1c00142c <__floatunsisf>
1c001908:	85ea                	mv	a1,s10
1c00190a:	3835                	jal	1c001146 <__mulsf3>
1c00190c:	85ce                	mv	a1,s3
1c00190e:	3825                	jal	1c001146 <__mulsf3>
1c001910:	340d                	jal	1c001332 <__fixsfsi>
1c001912:	8baa                	mv	s7,a0
1c001914:	4408                	lw	a0,8(s0)
1c001916:	3e19                	jal	1c00142c <__floatunsisf>
1c001918:	85d2                	mv	a1,s4
1c00191a:	3035                	jal	1c001146 <__mulsf3>
1c00191c:	85e6                	mv	a1,s9
1c00191e:	3025                	jal	1c001146 <__mulsf3>
1c001920:	3c09                	jal	1c001332 <__fixsfsi>
1c001922:	8daa                	mv	s11,a0
1c001924:	4448                	lw	a0,12(s0)
1c001926:	01b42423          	sw	s11,8(s0)
1c00192a:	001ddd93          	srli	s11,s11,0x1
1c00192e:	3cfd                	jal	1c00142c <__floatunsisf>
1c001930:	1c0147b7          	lui	a5,0x1c014
1c001934:	e9c78793          	addi	a5,a5,-356 # 1c013e9c <__clz_tab+0x10c>
1c001938:	438c                	lw	a1,0(a5)
1c00193a:	41bc0db3          	sub	s11,s8,s11
1c00193e:	809ff0ef          	jal	ra,1c001146 <__mulsf3>
1c001942:	1c0147b7          	lui	a5,0x1c014
1c001946:	e9478793          	addi	a5,a5,-364 # 1c013e94 <__clz_tab+0x104>
1c00194a:	438c                	lw	a1,0(a5)
1c00194c:	ffaff0ef          	jal	ra,1c001146 <__mulsf3>
1c001950:	32cd                	jal	1c001332 <__fixsfsi>
1c001952:	00155693          	srli	a3,a0,0x1
1c001956:	40db87b3          	sub	a5,s7,a3
1c00195a:	c448                	sw	a0,12(s0)
1c00195c:	01b42023          	sw	s11,0(s0)
1c001960:	c05c                	sw	a5,4(s0)
1c001962:	0461                	addi	s0,s0,24
1c001964:	f88914e3          	bne	s2,s0,1c0018ec <RunSSD+0x1f4>
1c001968:	a8448513          	addi	a0,s1,-1404
1c00196c:	39f9                	jal	1c00164a <non_max_suppress>
1c00196e:	102007b7          	lui	a5,0x10200
1c001972:	40078793          	addi	a5,a5,1024 # 10200400 <__l1_end+0x2003d8>
1c001976:	0087a783          	lw	a5,8(a5)
1c00197a:	50f2                	lw	ra,60(sp)
1c00197c:	5462                	lw	s0,56(sp)
1c00197e:	54d2                	lw	s1,52(sp)
1c001980:	5942                	lw	s2,48(sp)
1c001982:	59b2                	lw	s3,44(sp)
1c001984:	5a22                	lw	s4,40(sp)
1c001986:	5a92                	lw	s5,36(sp)
1c001988:	5b02                	lw	s6,32(sp)
1c00198a:	4bf2                	lw	s7,28(sp)
1c00198c:	4c62                	lw	s8,24(sp)
1c00198e:	4cd2                	lw	s9,20(sp)
1c001990:	4d42                	lw	s10,16(sp)
1c001992:	4db2                	lw	s11,12(sp)
1c001994:	6121                	addi	sp,sp,64
1c001996:	8082                	ret

1c001998 <drawBboxes>:
1c001998:	00451703          	lh	a4,4(a0)
1c00199c:	06e05c63          	blez	a4,1c001a14 <drawBboxes+0x7c>
1c0019a0:	4110                	lw	a2,0(a0)
1c0019a2:	1101                	addi	sp,sp,-32
1c0019a4:	cc22                	sw	s0,24(sp)
1c0019a6:	ca26                	sw	s1,20(sp)
1c0019a8:	c84a                	sw	s2,16(sp)
1c0019aa:	c64e                	sw	s3,12(sp)
1c0019ac:	c452                	sw	s4,8(sp)
1c0019ae:	c256                	sw	s5,4(sp)
1c0019b0:	ce06                	sw	ra,28(sp)
1c0019b2:	89ae                	mv	s3,a1
1c0019b4:	892a                	mv	s2,a0
1c0019b6:	4401                	li	s0,0
1c0019b8:	4481                	li	s1,0
1c0019ba:	1c015ab7          	lui	s5,0x1c015
1c0019be:	1c015a37          	lui	s4,0x1c015
1c0019c2:	008606b3          	add	a3,a2,s0
1c0019c6:	0146c783          	lbu	a5,20(a3)
1c0019ca:	ef91                	bnez	a5,1c0019e6 <drawBboxes+0x4e>
1c0019cc:	0485                	addi	s1,s1,1
1c0019ce:	0461                	addi	s0,s0,24
1c0019d0:	fee4c9e3          	blt	s1,a4,1c0019c2 <drawBboxes+0x2a>
1c0019d4:	40f2                	lw	ra,28(sp)
1c0019d6:	4462                	lw	s0,24(sp)
1c0019d8:	44d2                	lw	s1,20(sp)
1c0019da:	4942                	lw	s2,16(sp)
1c0019dc:	49b2                	lw	s3,12(sp)
1c0019de:	4a22                	lw	s4,8(sp)
1c0019e0:	4a92                	lw	s5,4(sp)
1c0019e2:	6105                	addi	sp,sp,32
1c0019e4:	8082                	ret
1c0019e6:	42d8                	lw	a4,4(a3)
1c0019e8:	00c6a803          	lw	a6,12(a3)
1c0019ec:	469c                	lw	a5,8(a3)
1c0019ee:	a60aa603          	lw	a2,-1440(s5) # 1c014a60 <W>
1c0019f2:	4294                	lw	a3,0(a3)
1c0019f4:	a58a2583          	lw	a1,-1448(s4) # 1c014a58 <H>
1c0019f8:	0ff00893          	li	a7,255
1c0019fc:	854e                	mv	a0,s3
1c0019fe:	541000ef          	jal	ra,1c00273e <DrawRectangle>
1c001a02:	00491703          	lh	a4,4(s2)
1c001a06:	0485                	addi	s1,s1,1
1c001a08:	0461                	addi	s0,s0,24
1c001a0a:	fce4d5e3          	ble	a4,s1,1c0019d4 <drawBboxes+0x3c>
1c001a0e:	00092603          	lw	a2,0(s2)
1c001a12:	bf45                	j	1c0019c2 <drawBboxes+0x2a>
1c001a14:	8082                	ret

1c001a16 <start>:
    char *ImageName;

    //Input image size
    int ret_state;

    PRINTF("Entering main controller\n");
1c001a16:	1c014537          	lui	a0,0x1c014
{
1c001a1a:	7175                	addi	sp,sp,-144
    PRINTF("Entering main controller\n");
1c001a1c:	1c050513          	addi	a0,a0,448 # 1c0141c0 <__clz_tab+0x430>
{
1c001a20:	c706                	sw	ra,140(sp)
1c001a22:	c522                	sw	s0,136(sp)
1c001a24:	c326                	sw	s1,132(sp)
1c001a26:	c14a                	sw	s2,128(sp)
1c001a28:	dece                	sw	s3,124(sp)
1c001a2a:	dcd2                	sw	s4,120(sp)
1c001a2c:	dad6                	sw	s5,116(sp)
1c001a2e:	d8da                	sw	s6,112(sp)
1c001a30:	d6de                	sw	s7,108(sp)
1c001a32:	d4e2                	sw	s8,104(sp)
1c001a34:	d2e6                	sw	s9,100(sp)
1c001a36:	d0ea                	sw	s10,96(sp)
1c001a38:	ceee                	sw	s11,92(sp)
    PRINTF("Entering main controller\n");
1c001a3a:	7d1100ef          	jal	ra,1c012a0a <puts>
    return domain == PI_FREQ_DOMAIN_FC ? RT_FREQ_DOMAIN_FC : domain == PI_FREQ_DOMAIN_CL ? RT_FREQ_DOMAIN_CL : RT_FREQ_DOMAIN_PERIPH;
}

static inline int32_t pi_freq_set(pi_freq_domain_e domain, uint32_t freq)
{
    return rt_freq_set_and_get(__pi_freq_get_domain(domain), freq, NULL);
1c001a3e:	0ee6b5b7          	lui	a1,0xee6b
1c001a42:	4601                	li	a2,0
1c001a44:	28058593          	addi	a1,a1,640 # ee6b280 <__L2+0xedeb280>
1c001a48:	4501                	li	a0,0

#else //reading image from host pc

    // sprintf(ImgName, "../../../OUTPUT/cnn_ssd_OUTPUT%ld.ppm", idx);
    // ImageName = "../../../test_samples/aideck_samples/converted/live_33.pgm";
    unsigned char *ImageInChar = (unsigned char *) pmsis_l2_malloc( W * H * sizeof(MNIST_IMAGE_IN_T));
1c001a4a:	1c015437          	lui	s0,0x1c015
1c001a4e:	1c0154b7          	lui	s1,0x1c015
1c001a52:	47a0f0ef          	jal	ra,1c010ecc <rt_freq_set_and_get>
1c001a56:	a6040413          	addi	s0,s0,-1440 # 1c014a60 <W>
1c001a5a:	a5848493          	addi	s1,s1,-1448 # 1c014a58 <H>
1c001a5e:	4008                	lw	a0,0(s0)
1c001a60:	409c                	lw	a5,0(s1)
1c001a62:	02f50533          	mul	a0,a0,a5
1c001a66:	0506                	slli	a0,a0,0x1
1c001a68:	0120f0ef          	jal	ra,1c010a7a <pi_l2_malloc>
    if (ImageInChar == 0)
1c001a6c:	1a050263          	beqz	a0,1c001c10 <start+0x1fa>
    printf("Streamer set up\n");

#endif

    /* Init & open ram. */
    pi_hyperram_conf_init(&conf);
1c001a70:	1c015937          	lui	s2,0x1c015
1c001a74:	89aa                	mv	s3,a0
1c001a76:	ca090513          	addi	a0,s2,-864 # 1c014ca0 <_edata>
1c001a7a:	4160d0ef          	jal	ra,1c00ee90 <pi_hyperram_conf_init>
    pi_open_from_conf(&HyperRam, &conf);
1c001a7e:	1c015a37          	lui	s4,0x1c015
1c001a82:	fb0a0513          	addi	a0,s4,-80 # 1c014fb0 <HyperRam>
1c001a86:	ca090593          	addi	a1,s2,-864
1c001a8a:	6c40e0ef          	jal	ra,1c01014e <pi_open_from_conf>
    if (pi_ram_open(&HyperRam))
1c001a8e:	fb0a0513          	addi	a0,s4,-80
1c001a92:	4a60d0ef          	jal	ra,1c00ef38 <pi_ram_open>
1c001a96:	18051b63          	bnez	a0,1c001c2c <start+0x216>
}

static inline int pi_ram_alloc(struct pi_device *device, uint32_t *addr, uint32_t size)
{
    pi_ram_api_t *api = (pi_ram_api_t *)device->api;
    return api->alloc(device, addr, size);
1c001a9a:	fb0a2783          	lw	a5,-80(s4)
1c001a9e:	6b8d                	lui	s7,0x3
1c001aa0:	1c015ab7          	lui	s5,0x1c015
1c001aa4:	4b9c                	lw	a5,16(a5)
1c001aa6:	d00b8613          	addi	a2,s7,-768 # 2d00 <__rt_stack_size+0x2500>
1c001aaa:	fc8a8593          	addi	a1,s5,-56 # 1c014fc8 <Output_1>
1c001aae:	fb0a0513          	addi	a0,s4,-80
1c001ab2:	9782                	jalr	a5
1c001ab4:	fb0a2783          	lw	a5,-80(s4)
1c001ab8:	6b11                	lui	s6,0x4
1c001aba:	1c015c37          	lui	s8,0x1c015
1c001abe:	4b9c                	lw	a5,16(a5)
1c001ac0:	c00b0613          	addi	a2,s6,-1024 # 3c00 <__rt_stack_size+0x3400>
1c001ac4:	fc0c0593          	addi	a1,s8,-64 # 1c014fc0 <Output_2>
1c001ac8:	fb0a0513          	addi	a0,s4,-80
1c001acc:	9782                	jalr	a5
1c001ace:	fb0a2783          	lw	a5,-80(s4)
1c001ad2:	6905                	lui	s2,0x1
1c001ad4:	1c015cb7          	lui	s9,0x1c015
1c001ad8:	4b9c                	lw	a5,16(a5)
1c001ada:	b4090613          	addi	a2,s2,-1216 # b40 <__rt_stack_size+0x340>
1c001ade:	fbcc8593          	addi	a1,s9,-68 # 1c014fbc <Output_3>
1c001ae2:	fb0a0513          	addi	a0,s4,-80
1c001ae6:	9782                	jalr	a5
1c001ae8:	fb0a2783          	lw	a5,-80(s4)
1c001aec:	1c015d37          	lui	s10,0x1c015
1c001af0:	f0090613          	addi	a2,s2,-256
1c001af4:	4b9c                	lw	a5,16(a5)
1c001af6:	fdcd0593          	addi	a1,s10,-36 # 1c014fdc <Output_4>
1c001afa:	fb0a0513          	addi	a0,s4,-80
1c001afe:	9782                	jalr	a5
1c001b00:	fb0a2783          	lw	a5,-80(s4)
1c001b04:	1c015db7          	lui	s11,0x1c015
1c001b08:	2d000613          	li	a2,720
1c001b0c:	4b9c                	lw	a5,16(a5)
1c001b0e:	fccd8593          	addi	a1,s11,-52 # 1c014fcc <Output_5>
1c001b12:	fb0a0513          	addi	a0,s4,-80
1c001b16:	9782                	jalr	a5
1c001b18:	fb0a2703          	lw	a4,-80(s4)
1c001b1c:	1c0157b7          	lui	a5,0x1c015
1c001b20:	fac78593          	addi	a1,a5,-84 # 1c014fac <Output_6>
1c001b24:	4b18                	lw	a4,16(a4)
1c001b26:	3c000613          	li	a2,960
1c001b2a:	c43e                	sw	a5,8(sp)
1c001b2c:	fb0a0513          	addi	a0,s4,-80
1c001b30:	9702                	jalr	a4
1c001b32:	fb0a2683          	lw	a3,-80(s4)
1c001b36:	1c015737          	lui	a4,0x1c015
1c001b3a:	fec70593          	addi	a1,a4,-20 # 1c014fec <Output_7>
1c001b3e:	4a94                	lw	a3,16(a3)
1c001b40:	09000613          	li	a2,144
1c001b44:	c63a                	sw	a4,12(sp)
1c001b46:	fb0a0513          	addi	a0,s4,-80
1c001b4a:	9682                	jalr	a3
1c001b4c:	fb0a2583          	lw	a1,-80(s4)
1c001b50:	1c0156b7          	lui	a3,0x1c015
1c001b54:	0c000613          	li	a2,192
1c001b58:	0105a883          	lw	a7,16(a1)
1c001b5c:	fb0a0513          	addi	a0,s4,-80
1c001b60:	fc468593          	addi	a1,a3,-60 # 1c014fc4 <Output_8>
1c001b64:	c836                	sw	a3,16(sp)
1c001b66:	9882                	jalr	a7
1c001b68:	fb0a2603          	lw	a2,-80(s4)
1c001b6c:	1c0155b7          	lui	a1,0x1c015
1c001b70:	a8458913          	addi	s2,a1,-1404 # 1c014a84 <bbxs>
1c001b74:	01062883          	lw	a7,16(a2)
1c001b78:	00890593          	addi	a1,s2,8
1c001b7c:	d00b8613          	addi	a2,s7,-768
1c001b80:	fb0a0513          	addi	a0,s4,-80
1c001b84:	9882                	jalr	a7
1c001b86:	fb0a2503          	lw	a0,-80(s4)
1c001b8a:	c00b0613          	addi	a2,s6,-1024
1c001b8e:	00c90593          	addi	a1,s2,12
1c001b92:	01052883          	lw	a7,16(a0)
1c001b96:	fb0a0513          	addi	a0,s4,-80
1c001b9a:	9882                	jalr	a7
    // Output_3 = (short int *) pmsis_l2_malloc( 12 * 30 * 30 * sizeof(short int));

    pi_ram_alloc(&HyperRam, &tmp_buffer_classes, 18 * 16* 20   * sizeof(short int));
    pi_ram_alloc(&HyperRam, &tmp_buffer_boxes  , 24 * 16* 20   * sizeof(short int));

    if(Output_1==NULL || Output_2==NULL || Output_3==NULL || Output_4==NULL || Output_5==NULL || Output_6==NULL || Output_7==NULL || Output_8==NULL )
1c001b9c:	fc8aa603          	lw	a2,-56(s5)
1c001ba0:	46c2                	lw	a3,16(sp)
1c001ba2:	4732                	lw	a4,12(sp)
1c001ba4:	47a2                	lw	a5,8(sp)
1c001ba6:	ce21                	beqz	a2,1c001bfe <start+0x1e8>
1c001ba8:	fc0c2603          	lw	a2,-64(s8)
1c001bac:	ca29                	beqz	a2,1c001bfe <start+0x1e8>
1c001bae:	fbcca603          	lw	a2,-68(s9)
1c001bb2:	c631                	beqz	a2,1c001bfe <start+0x1e8>
1c001bb4:	fdcd2603          	lw	a2,-36(s10)
1c001bb8:	c239                	beqz	a2,1c001bfe <start+0x1e8>
1c001bba:	fccda603          	lw	a2,-52(s11)
1c001bbe:	c221                	beqz	a2,1c001bfe <start+0x1e8>
1c001bc0:	fac7a783          	lw	a5,-84(a5)
1c001bc4:	cf8d                	beqz	a5,1c001bfe <start+0x1e8>
1c001bc6:	fec72783          	lw	a5,-20(a4)
1c001bca:	cb95                	beqz	a5,1c001bfe <start+0x1e8>
1c001bcc:	fc46a783          	lw	a5,-60(a3)
1c001bd0:	c79d                	beqz	a5,1c001bfe <start+0x1e8>
    {
        printf("Error Allocating OUTPUTs in L3\n");
        pmsis_exit(-7);
    }

    if(tmp_buffer_classes==NULL || tmp_buffer_classes==NULL)
1c001bd2:	00892783          	lw	a5,8(s2)
1c001bd6:	2c078a63          	beqz	a5,1c001eaa <start+0x494>
    #ifndef __EMUL__
    /* Configure And open cluster. */
    struct pi_device cluster_dev;
    struct pi_cluster_conf cl_conf;
    cl_conf.id = 0;
    pi_open_from_conf(&cluster_dev, (void *) &cl_conf);
1c001bda:	1068                	addi	a0,sp,44
1c001bdc:	182c                	addi	a1,sp,56
    cl_conf.id = 0;
1c001bde:	de02                	sw	zero,60(sp)
    pi_open_from_conf(&cluster_dev, (void *) &cl_conf);
1c001be0:	56e0e0ef          	jal	ra,1c01014e <pi_open_from_conf>
    if (pi_cluster_open(&cluster_dev))
1c001be4:	1068                	addi	a0,sp,44
1c001be6:	1b10f0ef          	jal	ra,1c011596 <pi_cluster_open>
1c001bea:	c931                	beqz	a0,1c001c3e <start+0x228>
    {
        printf("Cluster open failed !\n");
1c001bec:	1c014537          	lui	a0,0x1c014
1c001bf0:	26850513          	addi	a0,a0,616 # 1c014268 <__clz_tab+0x4d8>
1c001bf4:	617100ef          	jal	ra,1c012a0a <puts>
  return -1;
}

static inline void pmsis_exit(int err)
{
  exit(err);
1c001bf8:	5565                	li	a0,-7
1c001bfa:	6b5100ef          	jal	ra,1c012aae <exit>
        printf("Error Allocating OUTPUTs in L3\n");
1c001bfe:	1c014537          	lui	a0,0x1c014
1c001c02:	22050513          	addi	a0,a0,544 # 1c014220 <__clz_tab+0x490>
1c001c06:	605100ef          	jal	ra,1c012a0a <puts>
1c001c0a:	5565                	li	a0,-7
1c001c0c:	6a3100ef          	jal	ra,1c012aae <exit>
        printf("Failed to allocate Memory for Image (%d bytes)\n", W * H * sizeof(MNIST_IMAGE_IN_T));
1c001c10:	400c                	lw	a1,0(s0)
1c001c12:	409c                	lw	a5,0(s1)
1c001c14:	1c014537          	lui	a0,0x1c014
1c001c18:	1dc50513          	addi	a0,a0,476 # 1c0141dc <__clz_tab+0x44c>
1c001c1c:	02f585b3          	mul	a1,a1,a5
1c001c20:	0586                	slli	a1,a1,0x1
1c001c22:	77f100ef          	jal	ra,1c012ba0 <printf>
1c001c26:	5569                	li	a0,-6
1c001c28:	687100ef          	jal	ra,1c012aae <exit>
        printf("Error ram open !\n");
1c001c2c:	1c014537          	lui	a0,0x1c014
1c001c30:	20c50513          	addi	a0,a0,524 # 1c01420c <__clz_tab+0x47c>
1c001c34:	5d7100ef          	jal	ra,1c012a0a <puts>
1c001c38:	556d                	li	a0,-5
1c001c3a:	675100ef          	jal	ra,1c012aae <exit>
    bbxs.bbs = pmsis_l2_malloc(sizeof(bbox_t)*MAX_BB);
1c001c3e:	650d                	lui	a0,0x3
1c001c40:	ee050513          	addi	a0,a0,-288 # 2ee0 <__rt_stack_size+0x26e0>
1c001c44:	6370e0ef          	jal	ra,1c010a7a <pi_l2_malloc>
1c001c48:	00a92023          	sw	a0,0(s2)
    if(bbxs.bbs==NULL){
1c001c4c:	26050863          	beqz	a0,1c001ebc <start+0x4a6>
    bbxs.num_bb = 0;    
1c001c50:	00091223          	sh	zero,4(s2)
    initAnchorLayer_1();
1c001c54:	0fb030ef          	jal	ra,1c00554e <initAnchorLayer_1>
    initAnchorLayer_2();
1c001c58:	193030ef          	jal	ra,1c0055ea <initAnchorLayer_2>
    initAnchorLayer_3();
1c001c5c:	223030ef          	jal	ra,1c00567e <initAnchorLayer_3>
    initAnchorLayer_4();
1c001c60:	2b5030ef          	jal	ra,1c005714 <initAnchorLayer_4>
    {
        printf("NN Init exited with an error\n");
        pmsis_exit(-6);
    }
    
    PRINTF("Running NN\n");
1c001c64:	1c014537          	lui	a0,0x1c014
1c001c68:	2c450513          	addi	a0,a0,708 # 1c0142c4 <__clz_tab+0x534>
1c001c6c:	59f100ef          	jal	ra,1c012a0a <puts>

    struct pi_cluster_task *task = pmsis_l2_malloc(sizeof(struct pi_cluster_task));
1c001c70:	02c00513          	li	a0,44
1c001c74:	6070e0ef          	jal	ra,1c010a7a <pi_l2_malloc>
1c001c78:	8a2a                	mv	s4,a0
    if(task==NULL) {
1c001c7a:	32050463          	beqz	a0,1c001fa2 <start+0x58c>
1c001c7e:	02faf5b7          	lui	a1,0x2faf
1c001c82:	4601                	li	a2,0
1c001c84:	08058593          	addi	a1,a1,128 # 2faf080 <__L2+0x2f2f080>
1c001c88:	4505                	li	a0,1
1c001c8a:	2420f0ef          	jal	ra,1c010ecc <rt_freq_set_and_get>
        #ifndef FROM_CAMERA
        
            switch (count)
            {
            case 0:
                pic_num = 21; ImageName = "../../../test_samples/21.pgm"; break;
1c001c8e:	47d5                	li	a5,21
1c001c90:	1c014bb7          	lui	s7,0x1c014
1c001c94:	cc3e                	sw	a5,24(sp)
1c001c96:	ea0b8b93          	addi	s7,s7,-352 # 1c013ea0 <__clz_tab+0x110>
    short iter=1;
1c001c9a:	4785                	li	a5,1
    uint16_t count=0;
1c001c9c:	4a81                	li	s5,0
    short iter=1;
1c001c9e:	ce3e                	sw	a5,28(sp)
                pic_num = 21; ImageName = "../../../test_samples/21.pgm"; break;
1c001ca0:	ca5e                	sw	s7,20(sp)
                break;
            }
            count = count + 1;
            // sprintf(ImageName, "../../../test_samples/%d.pgm", pic_num);
            //Reading Image from Bridge
            PRINTF("Loading Image from File\n");
1c001ca2:	1c014637          	lui	a2,0x1c014
1c001ca6:	2e060513          	addi	a0,a2,736 # 1c0142e0 <__clz_tab+0x550>
1c001caa:	561100ef          	jal	ra,1c012a0a <puts>
            if ((ReadImageFromFile(ImageName, &Wi, &Hi, ImageInChar, W * H * sizeof(unsigned char)) == 0) || (Wi != W) || (Hi != H))
1c001cae:	409c                	lw	a5,0(s1)
1c001cb0:	4018                	lw	a4,0(s0)
1c001cb2:	4552                	lw	a0,20(sp)
1c001cb4:	1c0155b7          	lui	a1,0x1c015
1c001cb8:	02f70733          	mul	a4,a4,a5
1c001cbc:	1c0157b7          	lui	a5,0x1c015
            count = count + 1;
1c001cc0:	0a85                	addi	s5,s5,1
            if ((ReadImageFromFile(ImageName, &Wi, &Hi, ImageInChar, W * H * sizeof(unsigned char)) == 0) || (Wi != W) || (Hi != H))
1c001cc2:	a5c58613          	addi	a2,a1,-1444 # 1c014a5c <Hi>
1c001cc6:	86ce                	mv	a3,s3
1c001cc8:	a6478593          	addi	a1,a5,-1436 # 1c014a64 <Wi>
            count = count + 1;
1c001ccc:	100adab3          	p.exthz	s5,s5
            if ((ReadImageFromFile(ImageName, &Wi, &Hi, ImageInChar, W * H * sizeof(unsigned char)) == 0) || (Wi != W) || (Hi != H))
1c001cd0:	21b5                	jal	1c00213c <ReadImageFromFile>
1c001cd2:	2a050263          	beqz	a0,1c001f76 <start+0x560>
1c001cd6:	1c0155b7          	lui	a1,0x1c015
1c001cda:	a6458593          	addi	a1,a1,-1436 # 1c014a64 <Wi>
1c001cde:	4194                	lw	a3,0(a1)
1c001ce0:	4018                	lw	a4,0(s0)
1c001ce2:	1c015637          	lui	a2,0x1c015
1c001ce6:	a5c60613          	addi	a2,a2,-1444 # 1c014a5c <Hi>
1c001cea:	421c                	lw	a5,0(a2)
1c001cec:	4090                	lw	a2,0(s1)
1c001cee:	28e69463          	bne	a3,a4,1c001f76 <start+0x560>
1c001cf2:	28c79263          	bne	a5,a2,1c001f76 <start+0x560>
                pmsis_exit(-6);
            }

            ImageIn = (MNIST_IMAGE_IN_T *)ImageInChar;

            for (int i = W * H - 1; i >= 0; i--)
1c001cf6:	02f686b3          	mul	a3,a3,a5
            ImageIn = (MNIST_IMAGE_IN_T *)ImageInChar;
1c001cfa:	1c015c37          	lui	s8,0x1c015
1c001cfe:	a78c0c13          	addi	s8,s8,-1416 # 1c014a78 <ImageIn>
1c001d02:	013c2023          	sw	s3,0(s8)
1c001d06:	00d98733          	add	a4,s3,a3
1c001d0a:	96ba                	add	a3,a3,a4
            for (int i = W * H - 1; i >= 0; i--)
1c001d0c:	a031                	j	1c001d18 <start+0x302>
            {
                ImageIn[i] = (int16_t)ImageInChar[i] << INPUT_1_Q-8; //Input is naturally Q8
1c001d0e:	00074783          	lbu	a5,0(a4)
1c001d12:	079e                	slli	a5,a5,0x7
1c001d14:	00f69023          	sh	a5,0(a3)
1c001d18:	177d                	addi	a4,a4,-1
            for (int i = W * H - 1; i >= 0; i--)
1c001d1a:	413707b3          	sub	a5,a4,s3
1c001d1e:	16f9                	addi	a3,a3,-2
1c001d20:	fe07d7e3          	bgez	a5,1c001d0e <start+0x2f8>
                    ImageIn[y*W+x] = ((short int)ImageInChar[((y+Yoffset)*Wi)+(x+Xoffset)]) << S0_Op_input_1_Q-8;
                }
            }
        #endif

        if (ret_state=cnn_ssdCNN_Construct())
1c001d24:	591090ef          	jal	ra,1c00bab4 <cnn_ssdCNN_Construct>
1c001d28:	3e051463          	bnez	a0,1c002110 <start+0x6fa>
1c001d2c:	008a0693          	addi	a3,s4,8
        {
            printf("Graph constructor exited with an error code: %d\n",ret_state);
            pmsis_exit(-4);
        }

        memset(task, 0, sizeof(struct pi_cluster_task));
1c001d30:	02400613          	li	a2,36
1c001d34:	4581                	li	a1,0
1c001d36:	8536                	mv	a0,a3
1c001d38:	32d100ef          	jal	ra,1c012864 <memset>
        task->entry = RunNN;
1c001d3c:	1c001637          	lui	a2,0x1c001
1c001d40:	54460613          	addi	a2,a2,1348 # 1c001544 <RunNN>
        task->arg = (void *) NULL;
        task->stack_size = (uint32_t) CLUSTER_STACK_SIZE;
1c001d44:	6d85                	lui	s11,0x1
        task->slave_stack_size = (uint32_t) CLUSTER_SLAVE_STACK_SIZE;
1c001d46:	40000d13          	li	s10,1024
        memset(task, 0, sizeof(struct pi_cluster_task));
1c001d4a:	86aa                	mv	a3,a0
        task->entry = RunNN;
1c001d4c:	00ca2023          	sw	a2,0(s4)
    
        pi_cluster_send_task_to_cl(&cluster_dev, task);
1c001d50:	85d2                	mv	a1,s4
        task->arg = (void *) NULL;
1c001d52:	000a2223          	sw	zero,4(s4)
        task->stack_size = (uint32_t) CLUSTER_STACK_SIZE;
1c001d56:	01ba2623          	sw	s11,12(s4)
        task->slave_stack_size = (uint32_t) CLUSTER_SLAVE_STACK_SIZE;
1c001d5a:	01aa2823          	sw	s10,16(s4)
        pi_cluster_send_task_to_cl(&cluster_dev, task);
1c001d5e:	1068                	addi	a0,sp,44
1c001d60:	c836                	sw	a3,16(sp)
1c001d62:	40d0f0ef          	jal	ra,1c01196e <pi_cluster_send_task_to_cl>
            printf("%45s: Cycles: %10d, Operations: %10d, Operations/Cycle: %f\n", "Total", TotalCycles, TotalOper, ((float) TotalOper)/ TotalCycles);
            printf("\n");
        }
        #endif  /* NN_PERF */

        cnn_ssdCNN_Destruct();
1c001d66:	4e20a0ef          	jal	ra,1c00c248 <cnn_ssdCNN_Destruct>
        // test_hyper_ram(Output_5, 5, 4, 5, 0);
        // test_hyper_ram(Output_5, 5, 4, 5, 1);
        // test_hyper_ram(Output_5, 5, 4, 5, 2);

        //SSD Allocations
        SSDKernels_L1_Memory = pmsis_l1_malloc(_SSDKernels_L1_Memory_SIZE);
1c001d6a:	6ca5                	lui	s9,0x9
1c001d6c:	470c8593          	addi	a1,s9,1136 # 9470 <__rt_stack_size+0x8c70>
1c001d70:	4501                	li	a0,0
1c001d72:	4f70e0ef          	jal	ra,1c010a68 <pi_cl_l1_malloc>
1c001d76:	10000b37          	lui	s6,0x10000
1c001d7a:	00ab2e23          	sw	a0,28(s6) # 1000001c <SSDKernels_L1_Memory>
        SSDKernels_L2_Memory = pmsis_l2_malloc(_SSDKernels_L2_Memory_SIZE);
1c001d7e:	470c8513          	addi	a0,s9,1136
1c001d82:	4f90e0ef          	jal	ra,1c010a7a <pi_l2_malloc>

        if(SSDKernels_L1_Memory==NULL || SSDKernels_L2_Memory==NULL)
1c001d86:	01cb2603          	lw	a2,28(s6)
        SSDKernels_L2_Memory = pmsis_l2_malloc(_SSDKernels_L2_Memory_SIZE);
1c001d8a:	1c015bb7          	lui	s7,0x1c015
1c001d8e:	a6abae23          	sw	a0,-1412(s7) # 1c014a7c <SSDKernels_L2_Memory>
        if(SSDKernels_L1_Memory==NULL || SSDKernels_L2_Memory==NULL)
1c001d92:	46c2                	lw	a3,16(sp)
1c001d94:	2e060463          	beqz	a2,1c00207c <start+0x666>
1c001d98:	2e050263          	beqz	a0,1c00207c <start+0x666>
            printf("SSD L1 and/or L2 allocation error\n");
            pmsis_exit(-3);
        }


        memset(task, 0, sizeof(struct pi_cluster_task));
1c001d9c:	02400613          	li	a2,36
1c001da0:	4581                	li	a1,0
1c001da2:	8536                	mv	a0,a3
1c001da4:	2c1100ef          	jal	ra,1c012864 <memset>
        task->entry = RunSSD;
1c001da8:	1c0016b7          	lui	a3,0x1c001
1c001dac:	6f868693          	addi	a3,a3,1784 # 1c0016f8 <RunSSD>
1c001db0:	00da2023          	sw	a3,0(s4)
        task->arg = (void *) NULL;
        task->stack_size = (uint32_t) CLUSTER_STACK_SIZE;
        task->slave_stack_size = (uint32_t) CLUSTER_SLAVE_STACK_SIZE;
        pi_cluster_send_task_to_cl(&cluster_dev, task);
1c001db4:	85d2                	mv	a1,s4
        task->arg = (void *) NULL;
1c001db6:	000a2223          	sw	zero,4(s4)
        task->stack_size = (uint32_t) CLUSTER_STACK_SIZE;
1c001dba:	01ba2623          	sw	s11,12(s4)
        task->slave_stack_size = (uint32_t) CLUSTER_SLAVE_STACK_SIZE;
1c001dbe:	01aa2823          	sw	s10,16(s4)
        pi_cluster_send_task_to_cl(&cluster_dev, task);
1c001dc2:	1068                	addi	a0,sp,44
1c001dc4:	3ab0f0ef          	jal	ra,1c01196e <pi_cluster_send_task_to_cl>

        pmsis_l1_malloc_free(SSDKernels_L1_Memory,_SSDKernels_L1_Memory_SIZE);
1c001dc8:	01cb2583          	lw	a1,28(s6)
1c001dcc:	470c8613          	addi	a2,s9,1136
1c001dd0:	4501                	li	a0,0
1c001dd2:	49d0e0ef          	jal	ra,1c010a6e <pi_cl_l1_free>
        pmsis_l2_malloc_free(SSDKernels_L2_Memory,_SSDKernels_L2_Memory_SIZE);
1c001dd6:	a7cba503          	lw	a0,-1412(s7)
1c001dda:	470c8593          	addi	a1,s9,1136
1c001dde:	4ab0e0ef          	jal	ra,1c010a88 <pi_l2_free>
        //Draw BBs
        // drawBboxes(&bbxs,ImageInChar);


        // #ifdef FROM_CAMERA
        for(int y=0;y<H;y++){
1c001de2:	4581                	li	a1,0
1c001de4:	409c                	lw	a5,0(s1)
1c001de6:	02f5f863          	bleu	a5,a1,1c001e16 <start+0x400>
            for(int x=0;x<W;x++){
1c001dea:	4018                	lw	a4,0(s0)
1c001dec:	4781                	li	a5,0
1c001dee:	c315                	beqz	a4,1c001e12 <start+0x3fc>
                ImageInChar[y*W+x] = (unsigned char)(ImageIn[(y*W)+(x)] >> INPUT_1_Q-8);
1c001df0:	86be                	mv	a3,a5
1c001df2:	42e586b3          	p.mac	a3,a1,a4
1c001df6:	000c2703          	lw	a4,0(s8)
            for(int x=0;x<W;x++){
1c001dfa:	0785                	addi	a5,a5,1
                ImageInChar[y*W+x] = (unsigned char)(ImageIn[(y*W)+(x)] >> INPUT_1_Q-8);
1c001dfc:	00169613          	slli	a2,a3,0x1
1c001e00:	9732                	add	a4,a4,a2
1c001e02:	00071703          	lh	a4,0(a4)
1c001e06:	871d                	srai	a4,a4,0x7
1c001e08:	00e9c6a3          	p.sb	a4,a3(s3)
            for(int x=0;x<W;x++){
1c001e0c:	4018                	lw	a4,0(s0)
1c001e0e:	fee7e1e3          	bltu	a5,a4,1c001df0 <start+0x3da>
        for(int y=0;y<H;y++){
1c001e12:	0585                	addi	a1,a1,1
1c001e14:	bfc1                	j	1c001de4 <start+0x3ce>
            }
        }
        //Draw BBs
        drawBboxes(&bbxs,ImageInChar);
1c001e16:	1c015737          	lui	a4,0x1c015
1c001e1a:	a8470513          	addi	a0,a4,-1404 # 1c014a84 <bbxs>
1c001e1e:	85ce                	mv	a1,s3
1c001e20:	3ea5                	jal	1c001998 <drawBboxes>
        // Send image to the streamer to see the result
        frame_streamer_send_async(streamer1, &buffer, pi_task_callback(&task1, streamer_handler, (void *)&stream1_done));
        #endif

        #ifndef FROM_CAMERA
            if(SAVE_DET==1) writeDetImg(ImageInChar, pic_num, bbxs.bbs[0].score);
1c001e22:	00092783          	lw	a5,0(s2)
1c001e26:	45e2                	lw	a1,24(sp)
1c001e28:	854e                	mv	a0,s3
1c001e2a:	01079603          	lh	a2,16(a5)
1c001e2e:	fa0ff0ef          	jal	ra,1c0015ce <writeDetImg>
    while(iter){
1c001e32:	47f2                	lw	a5,28(sp)
1c001e34:	2c078263          	beqz	a5,1c0020f8 <start+0x6e2>
            switch (count)
1c001e38:	20caa763          	p.beqimm	s5,12,1c002046 <start+0x630>
1c001e3c:	47b1                	li	a5,12
1c001e3e:	0357ea63          	bltu	a5,s5,1c001e72 <start+0x45c>
1c001e42:	265aa863          	p.beqimm	s5,5,1c0020b2 <start+0x69c>
1c001e46:	4795                	li	a5,5
1c001e48:	0b57fb63          	bleu	s5,a5,1c001efe <start+0x4e8>
1c001e4c:	168aa463          	p.beqimm	s5,8,1c001fb4 <start+0x59e>
1c001e50:	47a1                	li	a5,8
1c001e52:	0d57f763          	bleu	s5,a5,1c001f20 <start+0x50a>
1c001e56:	24aaa563          	p.beqimm	s5,10,1c0020a0 <start+0x68a>
1c001e5a:	47a9                	li	a5,10
1c001e5c:	2357e963          	bltu	a5,s5,1c00208e <start+0x678>
                pic_num = 35; ImageName = "../../../test_samples/35.pgm"; break;
1c001e60:	1c014b37          	lui	s6,0x1c014
1c001e64:	02300793          	li	a5,35
1c001e68:	fc0b0b13          	addi	s6,s6,-64 # 1c013fc0 <__clz_tab+0x230>
1c001e6c:	cc3e                	sw	a5,24(sp)
1c001e6e:	ca5a                	sw	s6,20(sp)
1c001e70:	bd0d                	j	1c001ca2 <start+0x28c>
            switch (count)
1c001e72:	47c9                	li	a5,18
1c001e74:	18fa8563          	beq	s5,a5,1c001ffe <start+0x5e8>
1c001e78:	0757f163          	bleu	s5,a5,1c001eda <start+0x4c4>
1c001e7c:	47d5                	li	a5,21
1c001e7e:	1cfa8d63          	beq	s5,a5,1c002058 <start+0x642>
1c001e82:	0b57fc63          	bleu	s5,a5,1c001f3a <start+0x524>
1c001e86:	47dd                	li	a5,23
1c001e88:	1afa8663          	beq	s5,a5,1c002034 <start+0x61e>
1c001e8c:	18faeb63          	bltu	s5,a5,1c002022 <start+0x60c>
1c001e90:	47e1                	li	a5,24
1c001e92:	e0fa98e3          	bne	s5,a5,1c001ca2 <start+0x28c>
                pic_num = 270; ImageName = "../../../test_samples/270.pgm"; iter = 0; break;
1c001e96:	1c014b37          	lui	s6,0x1c014
1c001e9a:	10e00793          	li	a5,270
1c001e9e:	1a0b0b13          	addi	s6,s6,416 # 1c0141a0 <__clz_tab+0x410>
1c001ea2:	cc3e                	sw	a5,24(sp)
1c001ea4:	ce02                	sw	zero,28(sp)
1c001ea6:	ca5a                	sw	s6,20(sp)
1c001ea8:	bbed                	j	1c001ca2 <start+0x28c>
        printf("Error Allocating SSD Temp buffers in L3\n");
1c001eaa:	1c014537          	lui	a0,0x1c014
1c001eae:	24050513          	addi	a0,a0,576 # 1c014240 <__clz_tab+0x4b0>
1c001eb2:	359100ef          	jal	ra,1c012a0a <puts>
1c001eb6:	5565                	li	a0,-7
1c001eb8:	3f7100ef          	jal	ra,1c012aae <exit>
        printf("Bounding Boxes Allocation Error...\n");
1c001ebc:	1c014537          	lui	a0,0x1c014
1c001ec0:	28050513          	addi	a0,a0,640 # 1c014280 <__clz_tab+0x4f0>
1c001ec4:	347100ef          	jal	ra,1c012a0a <puts>
        printf("NN Init exited with an error\n");
1c001ec8:	1c014537          	lui	a0,0x1c014
1c001ecc:	2a450513          	addi	a0,a0,676 # 1c0142a4 <__clz_tab+0x514>
1c001ed0:	33b100ef          	jal	ra,1c012a0a <puts>
1c001ed4:	5569                	li	a0,-6
1c001ed6:	3d9100ef          	jal	ra,1c012aae <exit>
            switch (count)
1c001eda:	1efaad63          	p.beqimm	s5,15,1c0020d4 <start+0x6be>
1c001ede:	47bd                	li	a5,15
1c001ee0:	0757ec63          	bltu	a5,s5,1c001f58 <start+0x542>
1c001ee4:	1cdaaf63          	p.beqimm	s5,13,1c0020c2 <start+0x6ac>
1c001ee8:	daeabde3          	p.bneimm	s5,14,1c001ca2 <start+0x28c>
                pic_num = 220; ImageName = "../../../test_samples/220.pgm"; break;
1c001eec:	1c014b37          	lui	s6,0x1c014
1c001ef0:	0dc00793          	li	a5,220
1c001ef4:	060b0b13          	addi	s6,s6,96 # 1c014060 <__clz_tab+0x2d0>
1c001ef8:	cc3e                	sw	a5,24(sp)
1c001efa:	ca5a                	sw	s6,20(sp)
1c001efc:	b35d                	j	1c001ca2 <start+0x28c>
            switch (count)
1c001efe:	0e2aa863          	p.beqimm	s5,2,1c001fee <start+0x5d8>
1c001f02:	4789                	li	a5,2
1c001f04:	0d57f963          	bleu	s5,a5,1c001fd6 <start+0x5c0>
1c001f08:	0a3aaf63          	p.beqimm	s5,3,1c001fc6 <start+0x5b0>
1c001f0c:	d84abbe3          	p.bneimm	s5,4,1c001ca2 <start+0x28c>
                pic_num = 25; ImageName = "../../../test_samples/25.pgm"; break;
1c001f10:	1c014b37          	lui	s6,0x1c014
1c001f14:	47e5                	li	a5,25
1c001f16:	f20b0b13          	addi	s6,s6,-224 # 1c013f20 <__clz_tab+0x190>
1c001f1a:	cc3e                	sw	a5,24(sp)
1c001f1c:	ca5a                	sw	s6,20(sp)
1c001f1e:	b351                	j	1c001ca2 <start+0x28c>
            switch (count)
1c001f20:	146aa563          	p.beqimm	s5,6,1c00206a <start+0x654>
1c001f24:	d67abfe3          	p.bneimm	s5,7,1c001ca2 <start+0x28c>
                pic_num = 33; ImageName = "../../../test_samples/33.pgm"; break;
1c001f28:	1c014b37          	lui	s6,0x1c014
1c001f2c:	02100793          	li	a5,33
1c001f30:	f80b0b13          	addi	s6,s6,-128 # 1c013f80 <__clz_tab+0x1f0>
1c001f34:	cc3e                	sw	a5,24(sp)
1c001f36:	ca5a                	sw	s6,20(sp)
1c001f38:	b3ad                	j	1c001ca2 <start+0x28c>
            switch (count)
1c001f3a:	47cd                	li	a5,19
1c001f3c:	1afa8563          	beq	s5,a5,1c0020e6 <start+0x6d0>
1c001f40:	47d1                	li	a5,20
1c001f42:	d6fa90e3          	bne	s5,a5,1c001ca2 <start+0x28c>
                pic_num = 266; ImageName = "../../../test_samples/266.pgm"; break;
1c001f46:	1c014b37          	lui	s6,0x1c014
1c001f4a:	10a00793          	li	a5,266
1c001f4e:	120b0b13          	addi	s6,s6,288 # 1c014120 <__clz_tab+0x390>
1c001f52:	cc3e                	sw	a5,24(sp)
1c001f54:	ca5a                	sw	s6,20(sp)
1c001f56:	b3b1                	j	1c001ca2 <start+0x28c>
            switch (count)
1c001f58:	47c1                	li	a5,16
1c001f5a:	0afa8b63          	beq	s5,a5,1c002010 <start+0x5fa>
1c001f5e:	47c5                	li	a5,17
1c001f60:	d4fa91e3          	bne	s5,a5,1c001ca2 <start+0x28c>
                pic_num = 228; ImageName = "../../../test_samples/228.pgm"; break;
1c001f64:	1c014b37          	lui	s6,0x1c014
1c001f68:	0e400793          	li	a5,228
1c001f6c:	0c0b0b13          	addi	s6,s6,192 # 1c0140c0 <__clz_tab+0x330>
1c001f70:	cc3e                	sw	a5,24(sp)
1c001f72:	ca5a                	sw	s6,20(sp)
1c001f74:	b33d                	j	1c001ca2 <start+0x28c>
                printf("Failed to load image %s or dimension mismatch Expects [%dx%d], Got [%dx%d]\n", ImageName, W, H, Wi, Hi);
1c001f76:	1c0156b7          	lui	a3,0x1c015
1c001f7a:	1c0155b7          	lui	a1,0x1c015
1c001f7e:	a5c68693          	addi	a3,a3,-1444 # 1c014a5c <Hi>
1c001f82:	a6458593          	addi	a1,a1,-1436 # 1c014a64 <Wi>
1c001f86:	429c                	lw	a5,0(a3)
1c001f88:	4198                	lw	a4,0(a1)
1c001f8a:	4094                	lw	a3,0(s1)
1c001f8c:	4010                	lw	a2,0(s0)
1c001f8e:	45d2                	lw	a1,20(sp)
1c001f90:	1c014537          	lui	a0,0x1c014
1c001f94:	2f850513          	addi	a0,a0,760 # 1c0142f8 <__clz_tab+0x568>
1c001f98:	409100ef          	jal	ra,1c012ba0 <printf>
1c001f9c:	5569                	li	a0,-6
1c001f9e:	311100ef          	jal	ra,1c012aae <exit>
        printf("Alloc Error! \n");
1c001fa2:	1c014537          	lui	a0,0x1c014
1c001fa6:	2d050513          	addi	a0,a0,720 # 1c0142d0 <__clz_tab+0x540>
1c001faa:	261100ef          	jal	ra,1c012a0a <puts>
1c001fae:	556d                	li	a0,-5
1c001fb0:	2ff100ef          	jal	ra,1c012aae <exit>
                pic_num = 34; ImageName = "../../../test_samples/34.pgm"; break;
1c001fb4:	1c014b37          	lui	s6,0x1c014
1c001fb8:	02200793          	li	a5,34
1c001fbc:	fa0b0b13          	addi	s6,s6,-96 # 1c013fa0 <__clz_tab+0x210>
1c001fc0:	cc3e                	sw	a5,24(sp)
1c001fc2:	ca5a                	sw	s6,20(sp)
1c001fc4:	b9f9                	j	1c001ca2 <start+0x28c>
                pic_num = 24; ImageName = "../../../test_samples/24.pgm"; break;
1c001fc6:	1c014b37          	lui	s6,0x1c014
1c001fca:	47e1                	li	a5,24
1c001fcc:	f00b0b13          	addi	s6,s6,-256 # 1c013f00 <__clz_tab+0x170>
1c001fd0:	cc3e                	sw	a5,24(sp)
1c001fd2:	ca5a                	sw	s6,20(sp)
1c001fd4:	b1f9                	j	1c001ca2 <start+0x28c>
            switch (count)
1c001fd6:	140a8763          	beqz	s5,1c002124 <start+0x70e>
1c001fda:	cc1ab4e3          	p.bneimm	s5,1,1c001ca2 <start+0x28c>
                pic_num = 22; ImageName = "../../../test_samples/22.pgm"; break;
1c001fde:	1c014b37          	lui	s6,0x1c014
1c001fe2:	47d9                	li	a5,22
1c001fe4:	ec0b0b13          	addi	s6,s6,-320 # 1c013ec0 <__clz_tab+0x130>
1c001fe8:	cc3e                	sw	a5,24(sp)
1c001fea:	ca5a                	sw	s6,20(sp)
1c001fec:	b95d                	j	1c001ca2 <start+0x28c>
                pic_num = 23; ImageName = "../../../test_samples/23.pgm"; break;
1c001fee:	1c014b37          	lui	s6,0x1c014
1c001ff2:	47dd                	li	a5,23
1c001ff4:	ee0b0b13          	addi	s6,s6,-288 # 1c013ee0 <__clz_tab+0x150>
1c001ff8:	cc3e                	sw	a5,24(sp)
1c001ffa:	ca5a                	sw	s6,20(sp)
1c001ffc:	b15d                	j	1c001ca2 <start+0x28c>
                pic_num = 229; ImageName = "../../../test_samples/229.pgm"; break;
1c001ffe:	1c0145b7          	lui	a1,0x1c014
1c002002:	0e500793          	li	a5,229
1c002006:	0e058593          	addi	a1,a1,224 # 1c0140e0 <__clz_tab+0x350>
1c00200a:	cc3e                	sw	a5,24(sp)
1c00200c:	ca2e                	sw	a1,20(sp)
1c00200e:	b951                	j	1c001ca2 <start+0x28c>
                pic_num = 227; ImageName = "../../../test_samples/227.pgm"; break;
1c002010:	1c014b37          	lui	s6,0x1c014
1c002014:	0e300793          	li	a5,227
1c002018:	0a0b0b13          	addi	s6,s6,160 # 1c0140a0 <__clz_tab+0x310>
1c00201c:	cc3e                	sw	a5,24(sp)
1c00201e:	ca5a                	sw	s6,20(sp)
1c002020:	b149                	j	1c001ca2 <start+0x28c>
                pic_num = 268; ImageName = "../../../test_samples/268.pgm"; break;
1c002022:	1c014b37          	lui	s6,0x1c014
1c002026:	10c00793          	li	a5,268
1c00202a:	160b0b13          	addi	s6,s6,352 # 1c014160 <__clz_tab+0x3d0>
1c00202e:	cc3e                	sw	a5,24(sp)
1c002030:	ca5a                	sw	s6,20(sp)
1c002032:	b985                	j	1c001ca2 <start+0x28c>
                pic_num = 269; ImageName = "../../../test_samples/269.pgm"; break;
1c002034:	1c014b37          	lui	s6,0x1c014
1c002038:	10d00793          	li	a5,269
1c00203c:	180b0b13          	addi	s6,s6,384 # 1c014180 <__clz_tab+0x3f0>
1c002040:	cc3e                	sw	a5,24(sp)
1c002042:	ca5a                	sw	s6,20(sp)
1c002044:	b9b9                	j	1c001ca2 <start+0x28c>
                pic_num = 218; ImageName = "../../../test_samples/218.pgm"; break;
1c002046:	1c0145b7          	lui	a1,0x1c014
1c00204a:	0da00793          	li	a5,218
1c00204e:	02058593          	addi	a1,a1,32 # 1c014020 <__clz_tab+0x290>
1c002052:	cc3e                	sw	a5,24(sp)
1c002054:	ca2e                	sw	a1,20(sp)
1c002056:	b1b1                	j	1c001ca2 <start+0x28c>
                pic_num = 267; ImageName = "../../../test_samples/267.pgm"; break;
1c002058:	1c014b37          	lui	s6,0x1c014
1c00205c:	10b00793          	li	a5,267
1c002060:	140b0b13          	addi	s6,s6,320 # 1c014140 <__clz_tab+0x3b0>
1c002064:	cc3e                	sw	a5,24(sp)
1c002066:	ca5a                	sw	s6,20(sp)
1c002068:	b92d                	j	1c001ca2 <start+0x28c>
                pic_num = 32; ImageName = "../../../test_samples/32.pgm"; break;
1c00206a:	1c014b37          	lui	s6,0x1c014
1c00206e:	02000793          	li	a5,32
1c002072:	f60b0b13          	addi	s6,s6,-160 # 1c013f60 <__clz_tab+0x1d0>
1c002076:	cc3e                	sw	a5,24(sp)
1c002078:	ca5a                	sw	s6,20(sp)
1c00207a:	b125                	j	1c001ca2 <start+0x28c>
            printf("SSD L1 and/or L2 allocation error\n");
1c00207c:	1c014537          	lui	a0,0x1c014
1c002080:	37850513          	addi	a0,a0,888 # 1c014378 <__clz_tab+0x5e8>
1c002084:	187100ef          	jal	ra,1c012a0a <puts>
1c002088:	5575                	li	a0,-3
1c00208a:	225100ef          	jal	ra,1c012aae <exit>
                pic_num = 217; ImageName = "../../../test_samples/217.pgm"; break;
1c00208e:	1c014b37          	lui	s6,0x1c014
1c002092:	0d900793          	li	a5,217
1c002096:	000b0b13          	mv	s6,s6
1c00209a:	cc3e                	sw	a5,24(sp)
1c00209c:	ca5a                	sw	s6,20(sp)
1c00209e:	b111                	j	1c001ca2 <start+0x28c>
                pic_num = 216; ImageName = "../../../test_samples/216.pgm"; break;
1c0020a0:	1c014b37          	lui	s6,0x1c014
1c0020a4:	0d800793          	li	a5,216
1c0020a8:	fe0b0b13          	addi	s6,s6,-32 # 1c013fe0 <__clz_tab+0x250>
1c0020ac:	cc3e                	sw	a5,24(sp)
1c0020ae:	ca5a                	sw	s6,20(sp)
1c0020b0:	becd                	j	1c001ca2 <start+0x28c>
                pic_num = 31; ImageName = "../../../test_samples/31.pgm"; break;
1c0020b2:	1c014b37          	lui	s6,0x1c014
1c0020b6:	47fd                	li	a5,31
1c0020b8:	f40b0b13          	addi	s6,s6,-192 # 1c013f40 <__clz_tab+0x1b0>
1c0020bc:	cc3e                	sw	a5,24(sp)
1c0020be:	ca5a                	sw	s6,20(sp)
1c0020c0:	b6cd                	j	1c001ca2 <start+0x28c>
                pic_num = 219; ImageName = "../../../test_samples/219.pgm"; break;
1c0020c2:	1c014b37          	lui	s6,0x1c014
1c0020c6:	0db00793          	li	a5,219
1c0020ca:	040b0b13          	addi	s6,s6,64 # 1c014040 <__clz_tab+0x2b0>
1c0020ce:	cc3e                	sw	a5,24(sp)
1c0020d0:	ca5a                	sw	s6,20(sp)
1c0020d2:	bec1                	j	1c001ca2 <start+0x28c>
                pic_num = 226; ImageName = "../../../test_samples/226.pgm"; break;
1c0020d4:	1c014b37          	lui	s6,0x1c014
1c0020d8:	0e200793          	li	a5,226
1c0020dc:	080b0b13          	addi	s6,s6,128 # 1c014080 <__clz_tab+0x2f0>
1c0020e0:	cc3e                	sw	a5,24(sp)
1c0020e2:	ca5a                	sw	s6,20(sp)
1c0020e4:	be7d                	j	1c001ca2 <start+0x28c>
                pic_num = 230; ImageName = "../../../test_samples/230.pgm"; break;
1c0020e6:	1c014b37          	lui	s6,0x1c014
1c0020ea:	0e600793          	li	a5,230
1c0020ee:	100b0b13          	addi	s6,s6,256 # 1c014100 <__clz_tab+0x370>
1c0020f2:	cc3e                	sw	a5,24(sp)
1c0020f4:	ca5a                	sw	s6,20(sp)
1c0020f6:	b675                	j	1c001ca2 <start+0x28c>
        //Send to Screen
        // pi_display_write(&ili, &buffer, 40, 60, 160, 120);
        // #endif
    }

    pi_cluster_close(&cluster_dev);
1c0020f8:	1068                	addi	a0,sp,44
1c0020fa:	5740f0ef          	jal	ra,1c01166e <pi_cluster_close>


    PRINTF("Ended\n");
1c0020fe:	1c014537          	lui	a0,0x1c014
1c002102:	39c50513          	addi	a0,a0,924 # 1c01439c <__clz_tab+0x60c>
1c002106:	105100ef          	jal	ra,1c012a0a <puts>
1c00210a:	4501                	li	a0,0
1c00210c:	1a3100ef          	jal	ra,1c012aae <exit>
            printf("Graph constructor exited with an error code: %d\n",ret_state);
1c002110:	85aa                	mv	a1,a0
1c002112:	1c014537          	lui	a0,0x1c014
1c002116:	34450513          	addi	a0,a0,836 # 1c014344 <__clz_tab+0x5b4>
1c00211a:	287100ef          	jal	ra,1c012ba0 <printf>
1c00211e:	5571                	li	a0,-4
1c002120:	18f100ef          	jal	ra,1c012aae <exit>
                pic_num = 21; ImageName = "../../../test_samples/21.pgm"; break;
1c002124:	1c0145b7          	lui	a1,0x1c014
1c002128:	47d5                	li	a5,21
1c00212a:	ea058593          	addi	a1,a1,-352 # 1c013ea0 <__clz_tab+0x110>
1c00212e:	cc3e                	sw	a5,24(sp)
1c002130:	ca2e                	sw	a1,20(sp)
1c002132:	be85                	j	1c001ca2 <start+0x28c>

1c002134 <main>:
    return 0;
}


int main(void)
{
1c002134:	1141                	addi	sp,sp,-16
1c002136:	c606                	sw	ra,12(sp)
  ((void (*)())arg)();
1c002138:	8dfff0ef          	jal	ra,1c001a16 <start>

1c00213c <ReadImageFromFile>:
	return Err;
}

unsigned char *ReadImageFromFile(char *ImageName, unsigned int *W, unsigned int *H, unsigned char *InBuffer, unsigned int BuffSize)

{
1c00213c:	7119                	addi	sp,sp,-128
1c00213e:	cede                	sw	s7,92(sp)
1c002140:	8baa                	mv	s7,a0
	unsigned int IsRGB, HeaderSize, Size, AlignedSize, ReadSize=0;
	unsigned char *ImagePtr = 0;
	int Allocated = 0;

	struct pi_fs_conf conf;
	pi_fs_conf_init(&conf);
1c002142:	0828                	addi	a0,sp,24
{
1c002144:	de86                	sw	ra,124(sp)
1c002146:	dca2                	sw	s0,120(sp)
1c002148:	d8ca                	sw	s2,112(sp)
1c00214a:	d2d6                	sw	s5,100(sp)
1c00214c:	cce2                	sw	s8,88(sp)
1c00214e:	cae6                	sw	s9,84(sp)
1c002150:	daa6                	sw	s1,116(sp)
1c002152:	d6ce                	sw	s3,108(sp)
1c002154:	d4d2                	sw	s4,104(sp)
1c002156:	d0da                	sw	s6,96(sp)
1c002158:	c8ea                	sw	s10,80(sp)
1c00215a:	c6ee                	sw	s11,76(sp)
1c00215c:	8c2e                	mv	s8,a1
1c00215e:	8cb2                	mv	s9,a2
1c002160:	8ab6                	mv	s5,a3
1c002162:	893a                	mv	s2,a4
	pi_fs_conf_init(&conf);
1c002164:	03f0b0ef          	jal	ra,1c00d9a2 <pi_fs_conf_init>
  	struct pi_device fs;

	conf.type = PI_FS_HOST;

	pi_open_from_conf(&fs, &conf);
1c002168:	850a                	mv	a0,sp
	conf.type = PI_FS_HOST;
1c00216a:	4405                	li	s0,1
	pi_open_from_conf(&fs, &conf);
1c00216c:	082c                	addi	a1,sp,24
	conf.type = PI_FS_HOST;
1c00216e:	cc22                	sw	s0,24(sp)
	pi_open_from_conf(&fs, &conf);
1c002170:	7df0d0ef          	jal	ra,1c01014e <pi_open_from_conf>

	if (pi_fs_mount(&fs))
1c002174:	850a                	mv	a0,sp
1c002176:	03f0b0ef          	jal	ra,1c00d9b4 <pi_fs_mount>
1c00217a:	16051f63          	bnez	a0,1c0022f8 <ReadImageFromFile+0x1bc>
	pi_fs_conf_init(&conf);
1c00217e:	1068                	addi	a0,sp,44
1c002180:	0230b0ef          	jal	ra,1c00d9a2 <pi_fs_conf_init>
	pi_open_from_conf(&fs, &conf);
1c002184:	0068                	addi	a0,sp,12
1c002186:	106c                	addi	a1,sp,44
	conf.type = PI_FS_HOST;
1c002188:	d622                	sw	s0,44(sp)
	pi_open_from_conf(&fs, &conf);
1c00218a:	7c50d0ef          	jal	ra,1c01014e <pi_open_from_conf>
	if (pi_fs_mount(&fs))
1c00218e:	0068                	addi	a0,sp,12
1c002190:	0250b0ef          	jal	ra,1c00d9b4 <pi_fs_mount>
1c002194:	e531                	bnez	a0,1c0021e0 <ReadImageFromFile+0xa4>
	void *File = pi_fs_open(&fs, Name, PI_FS_FLAGS_READ);
1c002196:	4601                	li	a2,0
1c002198:	85de                	mv	a1,s7
1c00219a:	0068                	addi	a0,sp,12
1c00219c:	04d0b0ef          	jal	ra,1c00d9e8 <pi_fs_open>
	*W = 0; *H = 0; *IsRGB = 0; *HeaderSize = 0;
1c0021a0:	000c2023          	sw	zero,0(s8)
1c0021a4:	000ca023          	sw	zero,0(s9)
	void *File = pi_fs_open(&fs, Name, PI_FS_FLAGS_READ);
1c0021a8:	842a                	mv	s0,a0
	if (File) {
1c0021aa:	c159                	beqz	a0,1c002230 <ReadImageFromFile+0xf4>
		unsigned char *Header = (unsigned char *) pmsis_l2_malloc( 256);
1c0021ac:	10000513          	li	a0,256
1c0021b0:	0cb0e0ef          	jal	ra,1c010a7a <pi_l2_malloc>
		if (pi_fs_read(File,Header, 256) == 256) {
1c0021b4:	85aa                	mv	a1,a0
		unsigned char *Header = (unsigned char *) pmsis_l2_malloc( 256);
1c0021b6:	84aa                	mv	s1,a0
		if (pi_fs_read(File,Header, 256) == 256) {
1c0021b8:	10000613          	li	a2,256
1c0021bc:	8522                	mv	a0,s0
1c0021be:	0430b0ef          	jal	ra,1c00da00 <pi_fs_read>
1c0021c2:	10000793          	li	a5,256
1c0021c6:	04f50463          	beq	a0,a5,1c00220e <ReadImageFromFile+0xd2>
		pmsis_l2_malloc_free( Header,256);
1c0021ca:	10000593          	li	a1,256
1c0021ce:	8526                	mv	a0,s1
1c0021d0:	0b90e0ef          	jal	ra,1c010a88 <pi_l2_free>
		pi_fs_close(File);
1c0021d4:	8522                	mv	a0,s0
1c0021d6:	01b0b0ef          	jal	ra,1c00d9f0 <pi_fs_close>
		pi_fs_unmount(&fs);
1c0021da:	0068                	addi	a0,sp,12
1c0021dc:	0050b0ef          	jal	ra,1c00d9e0 <pi_fs_unmount>
		return NULL;

	if (GetInputImageInfos(ImageName, W, H, &IsRGB, &HeaderSize)) {
		printf("Failed to get input images infos, %s\n", ImageName); goto Fail;
1c0021e0:	1c014537          	lui	a0,0x1c014
1c0021e4:	85de                	mv	a1,s7
1c0021e6:	3e450513          	addi	a0,a0,996 # 1c0143e4 <__clz_tab+0x654>
1c0021ea:	1b7100ef          	jal	ra,1c012ba0 <printf>
	void *File = NULL;
1c0021ee:	4981                	li	s3,0
	printf("Image %s, [W: %d, H: %d], Gray, Size: %d bytes, Loaded sucessfully\n", ImageName, *W, *H, AlignedSize);

	return (ImagePtr);
Fail:
	if (ImagePtr && Allocated) pmsis_l2_malloc_free(ImagePtr, AlignedSize);
	pi_fs_close(File);
1c0021f0:	854e                	mv	a0,s3
1c0021f2:	7fe0b0ef          	jal	ra,1c00d9f0 <pi_fs_close>
	pi_fs_unmount(&fs);
1c0021f6:	850a                	mv	a0,sp
1c0021f8:	7e80b0ef          	jal	ra,1c00d9e0 <pi_fs_unmount>
	printf("Failed to load image %s from flash\n", ImageName);
1c0021fc:	1c014537          	lui	a0,0x1c014
1c002200:	85de                	mv	a1,s7
1c002202:	4e850513          	addi	a0,a0,1256 # 1c0144e8 <__clz_tab+0x758>
1c002206:	19b100ef          	jal	ra,1c012ba0 <printf>
	return 0;
1c00220a:	4a81                	li	s5,0
1c00220c:	a055                	j	1c0022b0 <ReadImageFromFile+0x174>
	if      (ImgIn[0] == 'P' && ImgIn[1] == '5' && ImgIn[2] == '\n') *IsRGB = 0;
1c00220e:	0004c703          	lbu	a4,0(s1)
1c002212:	05000793          	li	a5,80
1c002216:	10f70263          	beq	a4,a5,1c00231a <ReadImageFromFile+0x1de>
		pmsis_l2_malloc_free( Header,256);
1c00221a:	10000593          	li	a1,256
1c00221e:	8526                	mv	a0,s1
1c002220:	0690e0ef          	jal	ra,1c010a88 <pi_l2_free>
		pi_fs_close(File);
1c002224:	8522                	mv	a0,s0
1c002226:	7ca0b0ef          	jal	ra,1c00d9f0 <pi_fs_close>
		pi_fs_unmount(&fs);
1c00222a:	0068                	addi	a0,sp,12
1c00222c:	7b40b0ef          	jal	ra,1c00d9e0 <pi_fs_unmount>
	else return 0;
1c002230:	4b01                	li	s6,0
	File = pi_fs_open(&fs, ImageName, PI_FS_FLAGS_READ);
1c002232:	4601                	li	a2,0
1c002234:	85de                	mv	a1,s7
1c002236:	850a                	mv	a0,sp
1c002238:	7b00b0ef          	jal	ra,1c00d9e8 <pi_fs_open>
1c00223c:	89aa                	mv	s3,a0
	if (File == 0) {
1c00223e:	2e050e63          	beqz	a0,1c00253a <ReadImageFromFile+0x3fe>
	Size = (*W)*(*H)*(IsRGB?3:1);
1c002242:	000c2a03          	lw	s4,0(s8)
1c002246:	000ca783          	lw	a5,0(s9)
1c00224a:	02fa0a33          	mul	s4,s4,a5
	if (InBuffer && (BuffSize >= Size)) {
1c00224e:	080a8163          	beqz	s5,1c0022d0 <ReadImageFromFile+0x194>
1c002252:	07496f63          	bltu	s2,s4,1c0022d0 <ReadImageFromFile+0x194>
	int Allocated = 0;
1c002256:	4d01                	li	s10,0
	pi_fs_seek(File,HeaderSize);
1c002258:	85da                	mv	a1,s6
1c00225a:	854e                	mv	a0,s3
1c00225c:	08f0b0ef          	jal	ra,1c00daea <pi_fs_seek>
		while (RemainSize > 0) {
1c002260:	020a0663          	beqz	s4,1c00228c <ReadImageFromFile+0x150>
1c002264:	84d2                	mv	s1,s4
1c002266:	8956                	mv	s2,s5
	unsigned int IsRGB, HeaderSize, Size, AlignedSize, ReadSize=0;
1c002268:	4d81                	li	s11,0
			unsigned int Chunk = Min(4096, RemainSize);
1c00226a:	6b05                	lui	s6,0x1
1c00226c:	a019                	j	1c002272 <ReadImageFromFile+0x136>
			TargetImg += Chunk; RemainSize -= Chunk;
1c00226e:	9922                	add	s2,s2,s0
		while (RemainSize > 0) {
1c002270:	cc81                	beqz	s1,1c002288 <ReadImageFromFile+0x14c>
			unsigned int Chunk = Min(4096, RemainSize);
1c002272:	0564d433          	p.minu	s0,s1,s6
			unsigned R = pi_fs_read(File,TargetImg, Chunk);
1c002276:	85ca                	mv	a1,s2
1c002278:	8622                	mv	a2,s0
1c00227a:	854e                	mv	a0,s3
1c00227c:	7840b0ef          	jal	ra,1c00da00 <pi_fs_read>
			TargetImg += Chunk; RemainSize -= Chunk;
1c002280:	8c81                	sub	s1,s1,s0
			ReadSize+=R;
1c002282:	9daa                	add	s11,s11,a0
			if (R!=Chunk) break;
1c002284:	fea405e3          	beq	s0,a0,1c00226e <ReadImageFromFile+0x132>
	if (AlignedSize!=ReadSize) {
1c002288:	074d9a63          	bne	s11,s4,1c0022fc <ReadImageFromFile+0x1c0>
	pi_fs_close(File);
1c00228c:	854e                	mv	a0,s3
1c00228e:	7620b0ef          	jal	ra,1c00d9f0 <pi_fs_close>
	pi_fs_unmount(&fs);
1c002292:	850a                	mv	a0,sp
1c002294:	74c0b0ef          	jal	ra,1c00d9e0 <pi_fs_unmount>
	printf("Image %s, [W: %d, H: %d], Gray, Size: %d bytes, Loaded sucessfully\n", ImageName, *W, *H, AlignedSize);
1c002298:	000ca683          	lw	a3,0(s9)
1c00229c:	000c2603          	lw	a2,0(s8)
1c0022a0:	1c014537          	lui	a0,0x1c014
1c0022a4:	8752                	mv	a4,s4
1c0022a6:	85de                	mv	a1,s7
1c0022a8:	4a450513          	addi	a0,a0,1188 # 1c0144a4 <__clz_tab+0x714>
1c0022ac:	0f5100ef          	jal	ra,1c012ba0 <printf>
}
1c0022b0:	50f6                	lw	ra,124(sp)
1c0022b2:	5466                	lw	s0,120(sp)
1c0022b4:	8556                	mv	a0,s5
1c0022b6:	54d6                	lw	s1,116(sp)
1c0022b8:	5946                	lw	s2,112(sp)
1c0022ba:	59b6                	lw	s3,108(sp)
1c0022bc:	5a26                	lw	s4,104(sp)
1c0022be:	5a96                	lw	s5,100(sp)
1c0022c0:	5b06                	lw	s6,96(sp)
1c0022c2:	4bf6                	lw	s7,92(sp)
1c0022c4:	4c66                	lw	s8,88(sp)
1c0022c6:	4cd6                	lw	s9,84(sp)
1c0022c8:	4d46                	lw	s10,80(sp)
1c0022ca:	4db6                	lw	s11,76(sp)
1c0022cc:	6109                	addi	sp,sp,128
1c0022ce:	8082                	ret
		AlignedSize = ALIGN(Size, 2);
1c0022d0:	fa2a37b3          	p.bclr	a5,s4,29,2
1c0022d4:	c781                	beqz	a5,1c0022dc <ReadImageFromFile+0x1a0>
1c0022d6:	c20a3a33          	p.bclr	s4,s4,1,0
1c0022da:	0a11                	addi	s4,s4,4
		ImagePtr = (unsigned char *) pmsis_l2_malloc( AlignedSize);
1c0022dc:	8552                	mv	a0,s4
1c0022de:	79c0e0ef          	jal	ra,1c010a7a <pi_l2_malloc>
1c0022e2:	8aaa                	mv	s5,a0
		Allocated = 1;
1c0022e4:	4d05                	li	s10,1
	if (ImagePtr == 0) {
1c0022e6:	f92d                	bnez	a0,1c002258 <ReadImageFromFile+0x11c>
		printf("Failed to allocate %d bytes for input image\n", AlignedSize); goto Fail;
1c0022e8:	1c014537          	lui	a0,0x1c014
1c0022ec:	85d2                	mv	a1,s4
1c0022ee:	45050513          	addi	a0,a0,1104 # 1c014450 <__clz_tab+0x6c0>
1c0022f2:	0af100ef          	jal	ra,1c012ba0 <printf>
1c0022f6:	bded                	j	1c0021f0 <ReadImageFromFile+0xb4>
		return NULL;
1c0022f8:	4a81                	li	s5,0
1c0022fa:	bf5d                	j	1c0022b0 <ReadImageFromFile+0x174>
		printf("Error, expects %d bytes but got %d\n", AlignedSize, ReadSize); goto Fail;
1c0022fc:	1c014537          	lui	a0,0x1c014
1c002300:	866e                	mv	a2,s11
1c002302:	85d2                	mv	a1,s4
1c002304:	48050513          	addi	a0,a0,1152 # 1c014480 <__clz_tab+0x6f0>
1c002308:	099100ef          	jal	ra,1c012ba0 <printf>
	if (ImagePtr && Allocated) pmsis_l2_malloc_free(ImagePtr, AlignedSize);
1c00230c:	ee0d02e3          	beqz	s10,1c0021f0 <ReadImageFromFile+0xb4>
1c002310:	85d2                	mv	a1,s4
1c002312:	8556                	mv	a0,s5
1c002314:	7740e0ef          	jal	ra,1c010a88 <pi_l2_free>
1c002318:	bde1                	j	1c0021f0 <ReadImageFromFile+0xb4>
	if      (ImgIn[0] == 'P' && ImgIn[1] == '5' && ImgIn[2] == '\n') *IsRGB = 0;
1c00231a:	0014c783          	lbu	a5,1(s1)
1c00231e:	03500713          	li	a4,53
1c002322:	22e78463          	beq	a5,a4,1c00254a <ReadImageFromFile+0x40e>
	else if (ImgIn[0] == 'P' && ImgIn[1] == '6' && ImgIn[2] == '\n') *IsRGB = 1;
1c002326:	03600713          	li	a4,54
1c00232a:	eee798e3          	bne	a5,a4,1c00221a <ReadImageFromFile+0xde>
1c00232e:	0024c783          	lbu	a5,2(s1)
1c002332:	eea7b4e3          	p.bneimm	a5,10,1c00221a <ReadImageFromFile+0xde>
1c002336:	4985                	li	s3,1
1c002338:	0034c603          	lbu	a2,3(s1)
	while (Img[Ind] == '#') {
1c00233c:	02300793          	li	a5,35
		while (Img[Ind] != '\n') {if(Debug) printf("%c", Img[Ind]);Ind++;}
1c002340:	470d                	li	a4,3
	while (Img[Ind] == '#') {
1c002342:	02300593          	li	a1,35
1c002346:	02f61163          	bne	a2,a5,1c002368 <ReadImageFromFile+0x22c>
1c00234a:	00170793          	addi	a5,a4,1
1c00234e:	00f48733          	add	a4,s1,a5
		while (Img[Ind] != '\n') {if(Debug) printf("%c", Img[Ind]);Ind++;}
1c002352:	0017468b          	p.lbu	a3,1(a4!)
1c002356:	0785                	addi	a5,a5,1
1c002358:	fea6bde3          	p.bneimm	a3,10,1c002352 <ReadImageFromFile+0x216>
		Ind++;
1c00235c:	873e                	mv	a4,a5
	while (Img[Ind] == '#') {
1c00235e:	97a6                	add	a5,a5,s1
1c002360:	0007c603          	lbu	a2,0(a5)
1c002364:	feb603e3          	beq	a2,a1,1c00234a <ReadImageFromFile+0x20e>
	while (!IS_DIGIT(ImgIn[Ind])) Ind++;
1c002368:	fd060793          	addi	a5,a2,-48
1c00236c:	0ff7f793          	andi	a5,a5,255
1c002370:	46a5                	li	a3,9
1c002372:	02f6f163          	bleu	a5,a3,1c002394 <ReadImageFromFile+0x258>
1c002376:	00170793          	addi	a5,a4,1
1c00237a:	00f485b3          	add	a1,s1,a5
1c00237e:	4525                	li	a0,9
1c002380:	0015c60b          	p.lbu	a2,1(a1!)
1c002384:	873e                	mv	a4,a5
1c002386:	0785                	addi	a5,a5,1
1c002388:	fd060693          	addi	a3,a2,-48
1c00238c:	0ff6f693          	andi	a3,a3,255
1c002390:	fed568e3          	bltu	a0,a3,1c002380 <ReadImageFromFile+0x244>
1c002394:	00170793          	addi	a5,a4,1
1c002398:	00f48533          	add	a0,s1,a5
    Val = 0;
1c00239c:	4581                	li	a1,0
	while (IS_DIGIT(ImgIn[Ind])) {
1c00239e:	4825                	li	a6,9
		Val = Val*10 + (ImgIn[Ind] - 0x30);
1c0023a0:	00259693          	slli	a3,a1,0x2
1c0023a4:	96ae                	add	a3,a3,a1
1c0023a6:	0686                	slli	a3,a3,0x1
1c0023a8:	96b2                	add	a3,a3,a2
	while (IS_DIGIT(ImgIn[Ind])) {
1c0023aa:	88aa                	mv	a7,a0
1c0023ac:	0015460b          	p.lbu	a2,1(a0!)
		Val = Val*10 + (ImgIn[Ind] - 0x30);
1c0023b0:	fd068593          	addi	a1,a3,-48
		Ind++;
1c0023b4:	873e                	mv	a4,a5
	while (IS_DIGIT(ImgIn[Ind])) {
1c0023b6:	fd060693          	addi	a3,a2,-48
1c0023ba:	0ff6f693          	andi	a3,a3,255
1c0023be:	0785                	addi	a5,a5,1
1c0023c0:	fed870e3          	bleu	a3,a6,1c0023a0 <ReadImageFromFile+0x264>
	*W = Val;
1c0023c4:	00bc2023          	sw	a1,0(s8)
	while (Img[Ind] == '#') {
1c0023c8:	0008c603          	lbu	a2,0(a7)
1c0023cc:	02300793          	li	a5,35
1c0023d0:	02f61663          	bne	a2,a5,1c0023fc <ReadImageFromFile+0x2c0>
1c0023d4:	02300593          	li	a1,35
1c0023d8:	00170793          	addi	a5,a4,1
1c0023dc:	00f486b3          	add	a3,s1,a5
1c0023e0:	a019                	j	1c0023e6 <ReadImageFromFile+0x2aa>
		while (Img[Ind] != '\n') {if(Debug) printf("%c", Img[Ind]);Ind++;}
1c0023e2:	873e                	mv	a4,a5
1c0023e4:	0785                	addi	a5,a5,1
1c0023e6:	0016c60b          	p.lbu	a2,1(a3!)
1c0023ea:	fea63ce3          	p.bneimm	a2,10,1c0023e2 <ReadImageFromFile+0x2a6>
		Ind++;
1c0023ee:	0709                	addi	a4,a4,2
	while (Img[Ind] == '#') {
1c0023f0:	00e487b3          	add	a5,s1,a4
1c0023f4:	0007c603          	lbu	a2,0(a5)
1c0023f8:	feb600e3          	beq	a2,a1,1c0023d8 <ReadImageFromFile+0x29c>
	while (!IS_DIGIT(ImgIn[Ind])) Ind++;
1c0023fc:	fd060793          	addi	a5,a2,-48
1c002400:	0ff7f793          	andi	a5,a5,255
1c002404:	46a5                	li	a3,9
1c002406:	02f6f163          	bleu	a5,a3,1c002428 <ReadImageFromFile+0x2ec>
1c00240a:	00170793          	addi	a5,a4,1
1c00240e:	00f485b3          	add	a1,s1,a5
1c002412:	4525                	li	a0,9
1c002414:	0015c60b          	p.lbu	a2,1(a1!)
1c002418:	873e                	mv	a4,a5
1c00241a:	0785                	addi	a5,a5,1
1c00241c:	fd060693          	addi	a3,a2,-48
1c002420:	0ff6f693          	andi	a3,a3,255
1c002424:	fed568e3          	bltu	a0,a3,1c002414 <ReadImageFromFile+0x2d8>
1c002428:	00170793          	addi	a5,a4,1
1c00242c:	00f48533          	add	a0,s1,a5
    Val = 0;
1c002430:	4581                	li	a1,0
	while (IS_DIGIT(ImgIn[Ind])) {
1c002432:	4825                	li	a6,9
		Val = Val*10 + (ImgIn[Ind] - 0x30);
1c002434:	00259693          	slli	a3,a1,0x2
1c002438:	96ae                	add	a3,a3,a1
1c00243a:	0686                	slli	a3,a3,0x1
1c00243c:	96b2                	add	a3,a3,a2
	while (IS_DIGIT(ImgIn[Ind])) {
1c00243e:	88aa                	mv	a7,a0
1c002440:	0015460b          	p.lbu	a2,1(a0!)
		Val = Val*10 + (ImgIn[Ind] - 0x30);
1c002444:	fd068593          	addi	a1,a3,-48
		Ind++;
1c002448:	873e                	mv	a4,a5
	while (IS_DIGIT(ImgIn[Ind])) {
1c00244a:	fd060693          	addi	a3,a2,-48
1c00244e:	0ff6f693          	andi	a3,a3,255
1c002452:	0785                	addi	a5,a5,1
1c002454:	fed870e3          	bleu	a3,a6,1c002434 <ReadImageFromFile+0x2f8>
	*H = Val;
1c002458:	00bca023          	sw	a1,0(s9)
	while (Img[Ind] == '#') {
1c00245c:	0008c603          	lbu	a2,0(a7)
1c002460:	02300793          	li	a5,35
1c002464:	02f61663          	bne	a2,a5,1c002490 <ReadImageFromFile+0x354>
1c002468:	02300593          	li	a1,35
1c00246c:	00170793          	addi	a5,a4,1
1c002470:	00f486b3          	add	a3,s1,a5
1c002474:	a019                	j	1c00247a <ReadImageFromFile+0x33e>
		while (Img[Ind] != '\n') {if(Debug) printf("%c", Img[Ind]);Ind++;}
1c002476:	873e                	mv	a4,a5
1c002478:	0785                	addi	a5,a5,1
1c00247a:	0016c60b          	p.lbu	a2,1(a3!)
1c00247e:	fea63ce3          	p.bneimm	a2,10,1c002476 <ReadImageFromFile+0x33a>
		Ind++;
1c002482:	0709                	addi	a4,a4,2
	while (Img[Ind] == '#') {
1c002484:	00e487b3          	add	a5,s1,a4
1c002488:	0007c603          	lbu	a2,0(a5)
1c00248c:	feb600e3          	beq	a2,a1,1c00246c <ReadImageFromFile+0x330>
	while (!IS_DIGIT(ImgIn[Ind])) Ind++;
1c002490:	fd060793          	addi	a5,a2,-48
1c002494:	0ff7f793          	andi	a5,a5,255
1c002498:	46a5                	li	a3,9
1c00249a:	02f6f163          	bleu	a5,a3,1c0024bc <ReadImageFromFile+0x380>
1c00249e:	00170793          	addi	a5,a4,1
1c0024a2:	00f485b3          	add	a1,s1,a5
1c0024a6:	4525                	li	a0,9
1c0024a8:	0015c60b          	p.lbu	a2,1(a1!)
1c0024ac:	873e                	mv	a4,a5
1c0024ae:	0785                	addi	a5,a5,1
1c0024b0:	fd060693          	addi	a3,a2,-48
1c0024b4:	0ff6f693          	andi	a3,a3,255
1c0024b8:	fed568e3          	bltu	a0,a3,1c0024a8 <ReadImageFromFile+0x36c>
1c0024bc:	00170793          	addi	a5,a4,1
1c0024c0:	00f48533          	add	a0,s1,a5
    Val = 0;
1c0024c4:	4581                	li	a1,0
	while (IS_DIGIT(ImgIn[Ind])) {
1c0024c6:	48a5                	li	a7,9
1c0024c8:	a019                	j	1c0024ce <ReadImageFromFile+0x392>
		Ind++;
1c0024ca:	873e                	mv	a4,a5
1c0024cc:	0785                	addi	a5,a5,1
		Val = Val*10 + (ImgIn[Ind] - 0x30);
1c0024ce:	00259693          	slli	a3,a1,0x2
1c0024d2:	96ae                	add	a3,a3,a1
1c0024d4:	0686                	slli	a3,a3,0x1
1c0024d6:	96b2                	add	a3,a3,a2
	while (IS_DIGIT(ImgIn[Ind])) {
1c0024d8:	0015460b          	p.lbu	a2,1(a0!)
		Val = Val*10 + (ImgIn[Ind] - 0x30);
1c0024dc:	fd068593          	addi	a1,a3,-48
		Ind++;
1c0024e0:	883e                	mv	a6,a5
	while (IS_DIGIT(ImgIn[Ind])) {
1c0024e2:	fd060693          	addi	a3,a2,-48
1c0024e6:	0ff6f693          	andi	a3,a3,255
1c0024ea:	fed8f0e3          	bleu	a3,a7,1c0024ca <ReadImageFromFile+0x38e>
	if (Val != 255) return 0;
1c0024ee:	0ff00793          	li	a5,255
1c0024f2:	4b01                	li	s6,0
1c0024f4:	00f59e63          	bne	a1,a5,1c002510 <ReadImageFromFile+0x3d4>
	while (ImgIn[Ind] != 0xA) Ind++;
1c0024f8:	00a62a63          	p.beqimm	a2,10,1c00250c <ReadImageFromFile+0x3d0>
1c0024fc:	00270793          	addi	a5,a4,2
1c002500:	97a6                	add	a5,a5,s1
1c002502:	0017c70b          	p.lbu	a4,1(a5!)
1c002506:	0805                	addi	a6,a6,1
1c002508:	fea73de3          	p.bneimm	a4,10,1c002502 <ReadImageFromFile+0x3c6>
	return (Ind+1);
1c00250c:	00180b13          	addi	s6,a6,1
		pmsis_l2_malloc_free( Header,256);
1c002510:	10000593          	li	a1,256
1c002514:	8526                	mv	a0,s1
1c002516:	5720e0ef          	jal	ra,1c010a88 <pi_l2_free>
		pi_fs_close(File);
1c00251a:	8522                	mv	a0,s0
1c00251c:	4d40b0ef          	jal	ra,1c00d9f0 <pi_fs_close>
		pi_fs_unmount(&fs);
1c002520:	0068                	addi	a0,sp,12
1c002522:	4be0b0ef          	jal	ra,1c00d9e0 <pi_fs_unmount>
	if (IsRGB) {
1c002526:	d00986e3          	beqz	s3,1c002232 <ReadImageFromFile+0xf6>
		printf("Only Gray levels supported, found RGB\n"); goto Fail;
1c00252a:	1c014537          	lui	a0,0x1c014
1c00252e:	40c50513          	addi	a0,a0,1036 # 1c01440c <__clz_tab+0x67c>
1c002532:	4d8100ef          	jal	ra,1c012a0a <puts>
	void *File = NULL;
1c002536:	4981                	li	s3,0
1c002538:	b965                	j	1c0021f0 <ReadImageFromFile+0xb4>
		printf("Failed to open file, %s\n", ImageName); goto Fail;
1c00253a:	1c014537          	lui	a0,0x1c014
1c00253e:	85de                	mv	a1,s7
1c002540:	43450513          	addi	a0,a0,1076 # 1c014434 <__clz_tab+0x6a4>
1c002544:	65c100ef          	jal	ra,1c012ba0 <printf>
1c002548:	b165                	j	1c0021f0 <ReadImageFromFile+0xb4>
	if      (ImgIn[0] == 'P' && ImgIn[1] == '5' && ImgIn[2] == '\n') *IsRGB = 0;
1c00254a:	0024c783          	lbu	a5,2(s1)
1c00254e:	4981                	li	s3,0
1c002550:	cca7b5e3          	p.bneimm	a5,10,1c00221a <ReadImageFromFile+0xde>
1c002554:	b3d5                	j	1c002338 <ReadImageFromFile+0x1fc>

1c002556 <WriteImageToFile>:

	pmsis_l2_malloc_free( Buffer, PPM_HEADER*sizeof(unsigned char));

  }
int WriteImageToFile(char *ImageName, unsigned int W, unsigned int H, unsigned char *OutBuffer)
{
1c002556:	7159                	addi	sp,sp,-112
1c002558:	d4a2                	sw	s0,104(sp)
1c00255a:	842a                	mv	s0,a0
	struct pi_fs_conf conf;
	pi_fs_conf_init(&conf);
1c00255c:	0868                	addi	a0,sp,28
{
1c00255e:	d686                	sw	ra,108(sp)
1c002560:	c436                	sw	a3,8(sp)
1c002562:	d0ca                	sw	s2,96(sp)
1c002564:	cece                	sw	s3,92(sp)
1c002566:	8932                	mv	s2,a2
1c002568:	ccd2                	sw	s4,88(sp)
1c00256a:	89ae                	mv	s3,a1
1c00256c:	d2a6                	sw	s1,100(sp)
1c00256e:	cad6                	sw	s5,84(sp)
1c002570:	c8da                	sw	s6,80(sp)
1c002572:	c6de                	sw	s7,76(sp)
1c002574:	c4e2                	sw	s8,72(sp)
1c002576:	c2e6                	sw	s9,68(sp)
1c002578:	c0ea                	sw	s10,64(sp)
1c00257a:	de6e                	sw	s11,60(sp)
	pi_fs_conf_init(&conf);
1c00257c:	4260b0ef          	jal	ra,1c00d9a2 <pi_fs_conf_init>
  	struct pi_device fs;

	conf.type = PI_FS_HOST;
1c002580:	4785                	li	a5,1

	pi_open_from_conf(&fs, &conf);
1c002582:	086c                	addi	a1,sp,28
1c002584:	0808                	addi	a0,sp,16
	conf.type = PI_FS_HOST;
1c002586:	ce3e                	sw	a5,28(sp)
	pi_open_from_conf(&fs, &conf);
1c002588:	3c70d0ef          	jal	ra,1c01014e <pi_open_from_conf>

	if (pi_fs_mount(&fs))
1c00258c:	0808                	addi	a0,sp,16
1c00258e:	4260b0ef          	jal	ra,1c00d9b4 <pi_fs_mount>
		return NULL;
1c002592:	4a01                	li	s4,0
	if (pi_fs_mount(&fs))
1c002594:	c10d                	beqz	a0,1c0025b6 <WriteImageToFile+0x60>

	pi_fs_close(File);
	pi_fs_unmount(&fs);

	return ret;
}
1c002596:	50b6                	lw	ra,108(sp)
1c002598:	5426                	lw	s0,104(sp)
1c00259a:	8552                	mv	a0,s4
1c00259c:	5496                	lw	s1,100(sp)
1c00259e:	5906                	lw	s2,96(sp)
1c0025a0:	49f6                	lw	s3,92(sp)
1c0025a2:	4a66                	lw	s4,88(sp)
1c0025a4:	4ad6                	lw	s5,84(sp)
1c0025a6:	4b46                	lw	s6,80(sp)
1c0025a8:	4bb6                	lw	s7,76(sp)
1c0025aa:	4c26                	lw	s8,72(sp)
1c0025ac:	4c96                	lw	s9,68(sp)
1c0025ae:	4d06                	lw	s10,64(sp)
1c0025b0:	5df2                	lw	s11,60(sp)
1c0025b2:	6165                	addi	sp,sp,112
1c0025b4:	8082                	ret
	void *File = pi_fs_open(&fs, ImageName, PI_FS_FLAGS_WRITE);
1c0025b6:	4605                	li	a2,1
1c0025b8:	85a2                	mv	a1,s0
1c0025ba:	0808                	addi	a0,sp,16
1c0025bc:	42c0b0ef          	jal	ra,1c00d9e8 <pi_fs_open>
1c0025c0:	8aaa                	mv	s5,a0
  	unsigned char *Buffer = (unsigned char *) pmsis_l2_malloc(PPM_HEADER*sizeof(unsigned char));
1c0025c2:	02800513          	li	a0,40
1c0025c6:	4b40e0ef          	jal	ra,1c010a7a <pi_l2_malloc>
  	Buffer[Ind++] = 0x50; Buffer[Ind++] = 0x35; Buffer[Ind++] = 0xA;
1c0025ca:	678d                	lui	a5,0x3
1c0025cc:	55078793          	addi	a5,a5,1360 # 3550 <__rt_stack_size+0x2d50>
1c0025d0:	00f51023          	sh	a5,0(a0)
1c0025d4:	47a9                	li	a5,10
1c0025d6:	00f50123          	sb	a5,2(a0)
  	unsigned char *Buffer = (unsigned char *) pmsis_l2_malloc(PPM_HEADER*sizeof(unsigned char));
1c0025da:	84aa                	mv	s1,a0
  	while (x>0) { x = x/10; L++; }
1c0025dc:	14098e63          	beqz	s3,1c002738 <WriteImageToFile+0x1e2>
1c0025e0:	87ce                	mv	a5,s3
  	x = W; L=0;
1c0025e2:	4681                	li	a3,0
  	while (x>0) { x = x/10; L++; }
1c0025e4:	4629                	li	a2,10
1c0025e6:	a011                	j	1c0025ea <WriteImageToFile+0x94>
1c0025e8:	86ba                	mv	a3,a4
1c0025ea:	02c7d7b3          	divu	a5,a5,a2
1c0025ee:	00168713          	addi	a4,a3,1
1c0025f2:	fbfd                	bnez	a5,1c0025e8 <WriteImageToFile+0x92>
1c0025f4:	00368613          	addi	a2,a3,3
1c0025f8:	9626                	add	a2,a2,s1
1c0025fa:	87ce                	mv	a5,s3
  	while (x>0) { Buffer[Ind+L-i] = 0x30 + (x%10); i++; x=x/10; }
1c0025fc:	45a9                	li	a1,10
1c0025fe:	02b7f733          	remu	a4,a5,a1
1c002602:	02b7d7b3          	divu	a5,a5,a1
1c002606:	03070713          	addi	a4,a4,48
1c00260a:	fee60fab          	p.sb	a4,-1(a2!)
1c00260e:	fbe5                	bnez	a5,1c0025fe <WriteImageToFile+0xa8>
1c002610:	00468793          	addi	a5,a3,4
1c002614:	0695                	addi	a3,a3,5
  	Buffer[Ind++] = 0x20;
1c002616:	02000713          	li	a4,32
1c00261a:	00e4c7a3          	p.sb	a4,a5(s1)
  	while (x>0) { x = x/10; L++; }
1c00261e:	02090863          	beqz	s2,1c00264e <WriteImageToFile+0xf8>
1c002622:	87ca                	mv	a5,s2
  	x = H; L=0;
1c002624:	4701                	li	a4,0
  	while (x>0) { x = x/10; L++; }
1c002626:	4629                	li	a2,10
1c002628:	02c7d7b3          	divu	a5,a5,a2
1c00262c:	0705                	addi	a4,a4,1
1c00262e:	ffed                	bnez	a5,1c002628 <WriteImageToFile+0xd2>
1c002630:	96ba                	add	a3,a3,a4
1c002632:	fff68613          	addi	a2,a3,-1
1c002636:	9626                	add	a2,a2,s1
1c002638:	87ca                	mv	a5,s2
  	while (x>0) { Buffer[Ind+L-i] = 0x30 + (x%10); i++; x=x/10; }
1c00263a:	45a9                	li	a1,10
1c00263c:	02b7f733          	remu	a4,a5,a1
1c002640:	02b7d7b3          	divu	a5,a5,a1
1c002644:	03070713          	addi	a4,a4,48
1c002648:	fee60fab          	p.sb	a4,-1(a2!)
1c00264c:	fbe5                	bnez	a5,1c00263c <WriteImageToFile+0xe6>
  	Buffer[Ind++] = 0xA;
1c00264e:	1c014737          	lui	a4,0x1c014
1c002652:	50c72703          	lw	a4,1292(a4) # 1c01450c <__clz_tab+0x77c>
  	Buffer[Ind++] = 0x32; Buffer[Ind++] = 0x35; Buffer[Ind++] = 0x35; Buffer[Ind++] = 0xA;
1c002656:	00d487b3          	add	a5,s1,a3
  	Buffer[Ind++] = 0xA;
1c00265a:	00e4e6a3          	p.sw	a4,a3(s1)
  	Buffer[Ind++] = 0x32; Buffer[Ind++] = 0x35; Buffer[Ind++] = 0x35; Buffer[Ind++] = 0xA;
1c00265e:	4729                	li	a4,10
1c002660:	00e78223          	sb	a4,4(a5)
  	for (unsigned int a=0; a<Ind; a++){
1c002664:	01b6ae63          	p.beqimm	a3,-5,1c002680 <WriteImageToFile+0x12a>
1c002668:	00548a13          	addi	s4,s1,5
1c00266c:	8426                	mv	s0,s1
1c00266e:	9a36                	add	s4,s4,a3
  		pi_fs_write(FD,&(Buffer[a]), sizeof(unsigned char));
1c002670:	85a2                	mv	a1,s0
1c002672:	4605                	li	a2,1
1c002674:	0405                	addi	s0,s0,1
1c002676:	8556                	mv	a0,s5
1c002678:	3b60b0ef          	jal	ra,1c00da2e <pi_fs_write>
  	for (unsigned int a=0; a<Ind; a++){
1c00267c:	fe8a1ae3          	bne	s4,s0,1c002670 <WriteImageToFile+0x11a>
	int steps = (W*H) / CHUNK_SIZE;
1c002680:	03298933          	mul	s2,s3,s2
	pmsis_l2_malloc_free( Buffer, PPM_HEADER*sizeof(unsigned char));
1c002684:	02800593          	li	a1,40
1c002688:	8526                	mv	a0,s1
	int steps = (W*H) / CHUNK_SIZE;
1c00268a:	c64a                	sw	s2,12(sp)
	pmsis_l2_malloc_free( Buffer, PPM_HEADER*sizeof(unsigned char));
1c00268c:	3fc0e0ef          	jal	ra,1c010a88 <pi_l2_free>
	int steps = (W*H) / CHUNK_SIZE;
1c002690:	4932                	lw	s2,12(sp)
1c002692:	00d95b13          	srli	s6,s2,0xd
	for(int i=0;i<steps;i++){
1c002696:	080b0e63          	beqz	s6,1c002732 <WriteImageToFile+0x1dc>
1c00269a:	004b1b93          	slli	s7,s6,0x4
1c00269e:	49a2                	lw	s3,8(sp)
1c0026a0:	416b8bb3          	sub	s7,s7,s6
1c0026a4:	0b86                	slli	s7,s7,0x1
1c0026a6:	4901                	li	s2,0
	int ret = 0;
1c0026a8:	4a01                	li	s4,0
1c0026aa:	1c014d37          	lui	s10,0x1c014
1c0026ae:	1c014cb7          	lui	s9,0x1c014
1c0026b2:	1c014c37          	lui	s8,0x1c014
	for(int i=0;i<tot_chars;i++){
1c0026b6:	44f9                	li	s1,30
	printf("%s",OutString);
1c0026b8:	510d0593          	addi	a1,s10,1296 # 1c014510 <__clz_tab+0x780>
1c0026bc:	520c8513          	addi	a0,s9,1312 # 1c014520 <__clz_tab+0x790>
1c0026c0:	4e0100ef          	jal	ra,1c012ba0 <printf>
	printf(" [");
1c0026c4:	524c0513          	addi	a0,s8,1316 # 1c014524 <__clz_tab+0x794>
1c0026c8:	4d8100ef          	jal	ra,1c012ba0 <printf>
	int chars = (n*tot_chars)/tot;
1c0026cc:	03694433          	div	s0,s2,s6
	for(int i=0;i<tot_chars;i++){
1c0026d0:	4d81                	li	s11,0
			printf("#");
1c0026d2:	02300513          	li	a0,35
		if(i<=chars)
1c0026d6:	01b45463          	ble	s11,s0,1c0026de <WriteImageToFile+0x188>
		else printf(" ");
1c0026da:	02000513          	li	a0,32
	for(int i=0;i<tot_chars;i++){
1c0026de:	0d85                	addi	s11,s11,1
		else printf(" ");
1c0026e0:	3a0100ef          	jal	ra,1c012a80 <putchar>
	for(int i=0;i<tot_chars;i++){
1c0026e4:	fe9d97e3          	bne	s11,s1,1c0026d2 <WriteImageToFile+0x17c>
	printf("]");
1c0026e8:	05d00513          	li	a0,93
1c0026ec:	394100ef          	jal	ra,1c012a80 <putchar>
	printf("\n");
1c0026f0:	4529                	li	a0,10
1c0026f2:	38e100ef          	jal	ra,1c012a80 <putchar>
		ret+=pi_fs_write(File,OutBuffer +(CHUNK_SIZE*i), CHUNK_SIZE);
1c0026f6:	85ce                	mv	a1,s3
1c0026f8:	6609                	lui	a2,0x2
1c0026fa:	8556                	mv	a0,s5
1c0026fc:	3320b0ef          	jal	ra,1c00da2e <pi_fs_write>
1c002700:	6789                	lui	a5,0x2
1c002702:	0979                	addi	s2,s2,30
1c002704:	9a2a                	add	s4,s4,a0
1c002706:	99be                	add	s3,s3,a5
	for(int i=0;i<steps;i++){
1c002708:	fb7918e3          	bne	s2,s7,1c0026b8 <WriteImageToFile+0x162>
1c00270c:	47b2                	lw	a5,12(sp)
	if(((W*H) % CHUNK_SIZE) != 0)
1c00270e:	e4d7b633          	p.bclr	a2,a5,18,13
1c002712:	ca09                	beqz	a2,1c002724 <WriteImageToFile+0x1ce>
		ret+=pi_fs_write(File,OutBuffer+(CHUNK_SIZE*steps) , ((W*H) % CHUNK_SIZE)*sizeof(unsigned char));
1c002714:	4722                	lw	a4,8(sp)
1c002716:	00db1593          	slli	a1,s6,0xd
1c00271a:	8556                	mv	a0,s5
1c00271c:	95ba                	add	a1,a1,a4
1c00271e:	3100b0ef          	jal	ra,1c00da2e <pi_fs_write>
1c002722:	9a2a                	add	s4,s4,a0
	pi_fs_close(File);
1c002724:	8556                	mv	a0,s5
1c002726:	2ca0b0ef          	jal	ra,1c00d9f0 <pi_fs_close>
	pi_fs_unmount(&fs);
1c00272a:	0808                	addi	a0,sp,16
1c00272c:	2b40b0ef          	jal	ra,1c00d9e0 <pi_fs_unmount>
	return ret;
1c002730:	b59d                	j	1c002596 <WriteImageToFile+0x40>
	int ret = 0;
1c002732:	4a01                	li	s4,0
1c002734:	87ca                	mv	a5,s2
1c002736:	bfe1                	j	1c00270e <WriteImageToFile+0x1b8>
  	while (x>0) { x = x/10; L++; }
1c002738:	4691                	li	a3,4
1c00273a:	478d                	li	a5,3
1c00273c:	bde9                	j	1c002616 <WriteImageToFile+0xc0>

1c00273e <DrawRectangle>:

{
#define Max(a, b) (((a)>(b))?(a):(b))
#define Min(a, b) (((a)<(b))?(a):(b))
        int i;
        int x1 = Min(x+w-1, W-1);
1c00273e:	97b6                	add	a5,a5,a3
1c002740:	fff60e13          	addi	t3,a2,-1 # 1fff <__rt_stack_size+0x17ff>
1c002744:	fff78f13          	addi	t5,a5,-1 # 1fff <__rt_stack_size+0x17ff>
1c002748:	00c7c363          	blt	a5,a2,1c00274e <DrawRectangle+0x10>
1c00274c:	8f72                	mv	t5,t3
1c00274e:	fff58793          	addi	a5,a1,-1
        int y1 = Min(y+h-1, H-1);
1c002752:	983a                	add	a6,a6,a4
1c002754:	833e                	mv	t1,a5
1c002756:	00b85463          	ble	a1,a6,1c00275e <DrawRectangle+0x20>
1c00275a:	fff80313          	addi	t1,a6,-1

        x = Max(Min(x, W-1), 0);
1c00275e:	05c6c6b3          	p.min	a3,a3,t3
        y = Max(Min(y, H-1), 0);
1c002762:	04f747b3          	p.min	a5,a4,a5
        x = Max(Min(x, W-1), 0);
1c002766:	0406e6b3          	p.max	a3,a3,zero
        y = Max(Min(y, H-1), 0);
1c00276a:	0407efb3          	p.max	t6,a5,zero
        for (i=x; i<x1; i++) {Img[y*W + i] = Value; Img[y1*W + i] = Value;}
1c00276e:	17e6d863          	ble	t5,a3,1c0028de <DrawRectangle+0x1a0>
1c002772:	03f602b3          	mul	t0,a2,t6
{
1c002776:	1141                	addi	sp,sp,-16
1c002778:	c622                	sw	s0,12(sp)
1c00277a:	40df0433          	sub	s0,t5,a3
        for (i=x; i<x1; i++) {Img[y*W + i] = Value; Img[y1*W + i] = Value;}
1c00277e:	02c303b3          	mul	t2,t1,a2
1c002782:	00d287b3          	add	a5,t0,a3
1c002786:	00478713          	addi	a4,a5,4
1c00278a:	00d38833          	add	a6,t2,a3
1c00278e:	00480593          	addi	a1,a6,4
1c002792:	04f5a5b3          	p.slet	a1,a1,a5
1c002796:	05072733          	p.slet	a4,a4,a6
1c00279a:	8e2e                	mv	t3,a1
1c00279c:	85ba                	mv	a1,a4
1c00279e:	00be65b3          	or	a1,t3,a1
1c0027a2:	0ff5f593          	andi	a1,a1,255
1c0027a6:	10058e63          	beqz	a1,1c0028c2 <DrawRectangle+0x184>
1c0027aa:	00943713          	sltiu	a4,s0,9
1c0027ae:	00174713          	xori	a4,a4,1
1c0027b2:	0ff77713          	andi	a4,a4,255
1c0027b6:	10070663          	beqz	a4,1c0028c2 <DrawRectangle+0x184>
1c0027ba:	00f50e33          	add	t3,a0,a5
1c0027be:	41c00733          	neg	a4,t3
1c0027c2:	fa273733          	p.bclr	a4,a4,29,2
1c0027c6:	fff6c593          	not	a1,a3
1c0027ca:	95fa                	add	a1,a1,t5
1c0027cc:	00370e93          	addi	t4,a4,3
1c0027d0:	13d5ed63          	bltu	a1,t4,1c00290a <DrawRectangle+0x1cc>
1c0027d4:	8eb6                	mv	t4,a3
1c0027d6:	cb1d                	beqz	a4,1c00280c <DrawRectangle+0xce>
1c0027d8:	011e0023          	sb	a7,0(t3)
1c0027dc:	01154823          	p.sb	a7,a6(a0)
1c0027e0:	00168e93          	addi	t4,a3,1
1c0027e4:	02172463          	p.beqimm	a4,1,1c00280c <DrawRectangle+0xce>
1c0027e8:	00550e33          	add	t3,a0,t0
1c0027ec:	011e4ea3          	p.sb	a7,t4(t3)
1c0027f0:	007505b3          	add	a1,a0,t2
1c0027f4:	0115cea3          	p.sb	a7,t4(a1)
1c0027f8:	00268e93          	addi	t4,a3,2
1c0027fc:	00373863          	p.bneimm	a4,3,1c00280c <DrawRectangle+0xce>
1c002800:	011e4ea3          	p.sb	a7,t4(t3)
1c002804:	0115cea3          	p.sb	a7,t4(a1)
1c002808:	00368e93          	addi	t4,a3,3
1c00280c:	8c19                	sub	s0,s0,a4
1c00280e:	983a                	add	a6,a6,a4
1c002810:	00245593          	srli	a1,s0,0x2
1c002814:	973e                	add	a4,a4,a5
1c002816:	01105e57          	pv.add.sc.b	t3,zero,a7
1c00281a:	982a                	add	a6,a6,a0
1c00281c:	972a                	add	a4,a4,a0
1c00281e:	c9e5                	beqz	a1,1c00290e <DrawRectangle+0x1d0>
1c002820:	0045c0fb          	lp.setup	x1,a1,1c002828 <DrawRectangle+0xea>
1c002824:	01c7222b          	p.sw	t3,4(a4!)
1c002828:	01c8222b          	p.sw	t3,4(a6!)
1c00282c:	c20437b3          	p.bclr	a5,s0,1,0
1c002830:	01d78733          	add	a4,a5,t4
1c002834:	06f40063          	beq	s0,a5,1c002894 <DrawRectangle+0x156>
1c002838:	005505b3          	add	a1,a0,t0
1c00283c:	0115c723          	p.sb	a7,a4(a1)
1c002840:	93aa                	add	t2,t2,a0
1c002842:	0113c723          	p.sb	a7,a4(t2)
1c002846:	00170793          	addi	a5,a4,1
1c00284a:	05e7d563          	ble	t5,a5,1c002894 <DrawRectangle+0x156>
1c00284e:	0115c7a3          	p.sb	a7,a5(a1)
1c002852:	0113c7a3          	p.sb	a7,a5(t2)
1c002856:	00270793          	addi	a5,a4,2
1c00285a:	03e7dd63          	ble	t5,a5,1c002894 <DrawRectangle+0x156>
1c00285e:	0115c7a3          	p.sb	a7,a5(a1)
1c002862:	0113c7a3          	p.sb	a7,a5(t2)
1c002866:	00370793          	addi	a5,a4,3
1c00286a:	03e7d563          	ble	t5,a5,1c002894 <DrawRectangle+0x156>
1c00286e:	0115c7a3          	p.sb	a7,a5(a1)
1c002872:	0113c7a3          	p.sb	a7,a5(t2)
1c002876:	00470793          	addi	a5,a4,4
1c00287a:	01e7dd63          	ble	t5,a5,1c002894 <DrawRectangle+0x156>
1c00287e:	0115c7a3          	p.sb	a7,a5(a1)
1c002882:	0113c7a3          	p.sb	a7,a5(t2)
1c002886:	0715                	addi	a4,a4,5
1c002888:	01e75663          	ble	t5,a4,1c002894 <DrawRectangle+0x156>
1c00288c:	0115c723          	p.sb	a7,a4(a1)
1c002890:	0113c723          	p.sb	a7,a4(t2)
        for (i=y; i<=y1; i++) {Img[i*W + x] = Value; Img[i*W + x1] = Value;}
1c002894:	03f34463          	blt	t1,t6,1c0028bc <DrawRectangle+0x17e>
1c002898:	03f605b3          	mul	a1,a2,t6
1c00289c:	00130793          	addi	a5,t1,1
1c0028a0:	41f787b3          	sub	a5,a5,t6
1c0028a4:	00b68733          	add	a4,a3,a1
1c0028a8:	00bf06b3          	add	a3,t5,a1
1c0028ac:	972a                	add	a4,a4,a0
1c0028ae:	9536                	add	a0,a0,a3
1c0028b0:	0047c0fb          	lp.setup	x1,a5,1c0028b8 <DrawRectangle+0x17a>
1c0028b4:	0117462b          	p.sb	a7,a2(a4!)
1c0028b8:	0115462b          	p.sb	a7,a2(a0!)
#undef Max
#undef Min
}
1c0028bc:	4432                	lw	s0,12(sp)
1c0028be:	0141                	addi	sp,sp,16
1c0028c0:	8082                	ret
1c0028c2:	005505b3          	add	a1,a0,t0
1c0028c6:	00f50733          	add	a4,a0,a5
1c0028ca:	95fa                	add	a1,a1,t5
1c0028cc:	982a                	add	a6,a6,a0
1c0028ce:	8d99                	sub	a1,a1,a4
1c0028d0:	0045c0fb          	lp.setup	x1,a1,1c0028d8 <DrawRectangle+0x19a>
        for (i=x; i<x1; i++) {Img[y*W + i] = Value; Img[y1*W + i] = Value;}
1c0028d4:	011700ab          	p.sb	a7,1(a4!)
1c0028d8:	011800ab          	p.sb	a7,1(a6!)
1c0028dc:	bf65                	j	1c002894 <DrawRectangle+0x156>
        for (i=y; i<=y1; i++) {Img[i*W + x] = Value; Img[i*W + x1] = Value;}
1c0028de:	03f34563          	blt	t1,t6,1c002908 <DrawRectangle+0x1ca>
1c0028e2:	03f605b3          	mul	a1,a2,t6
1c0028e6:	00130793          	addi	a5,t1,1
1c0028ea:	41f787b3          	sub	a5,a5,t6
1c0028ee:	00b68733          	add	a4,a3,a1
1c0028f2:	00bf06b3          	add	a3,t5,a1
1c0028f6:	972a                	add	a4,a4,a0
1c0028f8:	9536                	add	a0,a0,a3
1c0028fa:	0047c0fb          	lp.setup	x1,a5,1c002902 <DrawRectangle+0x1c4>
1c0028fe:	0117462b          	p.sb	a7,a2(a4!)
1c002902:	0115462b          	p.sb	a7,a2(a0!)
1c002906:	8082                	ret
1c002908:	8082                	ret
        for (i=x; i<x1; i++) {Img[y*W + i] = Value; Img[y1*W + i] = Value;}
1c00290a:	8736                	mv	a4,a3
1c00290c:	b735                	j	1c002838 <DrawRectangle+0xfa>
1c00290e:	4585                	li	a1,1
1c002910:	bf01                	j	1c002820 <DrawRectangle+0xe2>

1c002912 <SDD3Dto2DSoftmax_20_16_18>:
		short * In,
		short * Out,
		unsigned char Q,
		unsigned short n_classes)

{
1c002912:	7141                	addi	sp,sp,-496
1c002914:	1d912223          	sw	s9,452(sp)
	KerArg0->Hin = (unsigned int ) (18);
	KerArg0->Wout = (unsigned int ) (18);
	KerArg0->Q = (unsigned char) (Q);
	KerArg0->n_classes = (unsigned short) (n_classes);
	/*================================= Read Tiles Prolog ===============================*/
	AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 9468, 640, 526, 0, &UchanHR1);
1c002918:	1c015cb7          	lui	s9,0x1c015
1c00291c:	a7cc8c93          	addi	s9,s9,-1412 # 1c014a7c <SSDKernels_L2_Memory>
	KerArg0->Q = (unsigned char) (Q);
1c002920:	02c10623          	sb	a2,44(sp)
	AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 9468, 640, 526, 0, &UchanHR1);
1c002924:	000ca603          	lw	a2,0(s9)
	KerArg0->n_classes = (unsigned short) (n_classes);
1c002928:	02d11723          	sh	a3,46(sp)
	AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 9468, 640, 526, 0, &UchanHR1);
1c00292c:	1c015e37          	lui	t3,0x1c015
1c002930:	6689                	lui	a3,0x2
	KerArg0->Hin = (unsigned int ) (18);
1c002932:	4349                	li	t1,18
{
1c002934:	1e912223          	sw	s1,484(sp)
1c002938:	c42e                	sw	a1,8(sp)
	AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 9468, 640, 526, 0, &UchanHR1);
1c00293a:	20e00793          	li	a5,526
1c00293e:	85aa                	mv	a1,a0
{
1c002940:	84aa                	mv	s1,a0
	AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 9468, 640, 526, 0, &UchanHR1);
1c002942:	07010893          	addi	a7,sp,112
1c002946:	4805                	li	a6,1
1c002948:	28000713          	li	a4,640
1c00294c:	4fc68693          	addi	a3,a3,1276 # 24fc <__rt_stack_size+0x1cfc>
1c002950:	fb0e0513          	addi	a0,t3,-80 # 1c014fb0 <HyperRam>
{
1c002954:	1e112623          	sw	ra,492(sp)
1c002958:	1e812423          	sw	s0,488(sp)
1c00295c:	1f212023          	sw	s2,480(sp)
1c002960:	1d312e23          	sw	s3,476(sp)
1c002964:	1d412c23          	sw	s4,472(sp)
1c002968:	1d512a23          	sw	s5,468(sp)
1c00296c:	1d612823          	sw	s6,464(sp)
1c002970:	1d712623          	sw	s7,460(sp)
1c002974:	1d812423          	sw	s8,456(sp)
1c002978:	1da12023          	sw	s10,448(sp)
1c00297c:	1bb12e23          	sw	s11,444(sp)
	KerArg0->Hin = (unsigned int ) (18);
1c002980:	ce1a                	sw	t1,28(sp)
	KerArg0->Wout = (unsigned int ) (18);
1c002982:	d21a                	sw	t1,36(sp)
	AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 9468, 640, 526, 0, &UchanHR1);
1c002984:	6020c0ef          	jal	ra,1c00ef86 <pi_cl_ram_copy_2d>

#ifdef ARCHI_HAS_CLUSTER

static inline void cl_wait_task(unsigned char *done)
{
    while ((*(volatile char *)done) == 0)
1c002988:	10c14783          	lbu	a5,268(sp)
1c00298c:	0ff7f793          	andi	a5,a5,255
1c002990:	ef99                	bnez	a5,1c0029ae <SDD3Dto2DSoftmax_20_16_18+0x9c>
  This is useful when the mask must be updated before waiting for a specific event without modifying the other events (this saves a few instructions)
  \param evtMask Bit mask used to update the event mask. There is 1 bit per event, 1 means the corresponding bit is set in the event mask.
  */
static inline void eu_evt_maskSet(unsigned int evtMask)
{
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002992:	4689                	li	a3,2
1c002994:	00204737          	lui	a4,0x204
1c002998:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00299c:	03c76783          	p.elw	a5,60(a4)
  This is the opposite of eu_evt_maskSet. For each bit at 1 in the new value, the corresponding bit is set to 0 in the event mask and the others remain the same.
  \param evtMask Bit mask used to update the event mask. There is 1 bit per event, 1 means the corresponding bit is cleared in the event mask.
  */
static inline void eu_evt_maskClr(unsigned int evtMask)
{
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0029a0:	00d72223          	sw	a3,4(a4)
1c0029a4:	10c14783          	lbu	a5,268(sp)
1c0029a8:	0ff7f793          	andi	a5,a5,255
1c0029ac:	d7f5                	beqz	a5,1c002998 <SDD3Dto2DSoftmax_20_16_18+0x86>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA read In */
	AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+526), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+9468), 2052, 640, 114, 0, &UchanHR1);
1c0029ae:	000ca603          	lw	a2,0(s9)
1c0029b2:	6c09                	lui	s8,0x2
1c0029b4:	1c015337          	lui	t1,0x1c015
1c0029b8:	4fcc0c13          	addi	s8,s8,1276 # 24fc <__rt_stack_size+0x1cfc>
1c0029bc:	6405                	lui	s0,0x1
1c0029be:	20e48593          	addi	a1,s1,526
1c0029c2:	fb030513          	addi	a0,t1,-80 # 1c014fb0 <HyperRam>
1c0029c6:	07010893          	addi	a7,sp,112
1c0029ca:	4805                	li	a6,1
1c0029cc:	07200793          	li	a5,114
1c0029d0:	28000713          	li	a4,640
1c0029d4:	80440693          	addi	a3,s0,-2044 # 804 <__rt_stack_size+0x4>
1c0029d8:	9662                	add	a2,a2,s8
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+0+0), 9468, 0, &DmaR_Evt1);
1c0029da:	10000db7          	lui	s11,0x10000
	AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+526), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+9468), 2052, 640, 114, 0, &UchanHR1);
1c0029de:	5a80c0ef          	jal	ra,1c00ef86 <pi_cl_ram_copy_2d>
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+0+0), 9468, 0, &DmaR_Evt1);
1c0029e2:	01cd8d93          	addi	s11,s11,28 # 1000001c <SSDKernels_L1_Memory>
1c0029e6:	000ca583          	lw	a1,0(s9)
1c0029ea:	000da503          	lw	a0,0(s11)

#if defined(__OPTIMIZE__) && defined(CORE_PULP_BUILTINS) && !defined(__LLVM__)

static inline unsigned int hal_spr_read_then_clr(unsigned int reg, unsigned int val)
{
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0029ee:	300476f3          	csrrci	a3,mstatus,8
#define DMA_WRITE(value, offset) pulp_write32(ARCHI_DEMUX_PERIPHERALS_ADDR + ARCHI_MCHAN_DEMUX_OFFSET + (offset), (value))
#define DMA_READ(offset) pulp_read32(ARCHI_DEMUX_PERIPHERALS_ADDR + ARCHI_MCHAN_DEMUX_OFFSET + (offset))
#endif

static inline int plp_dma_counter_alloc() {
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0029f2:	002047b7          	lui	a5,0x204
1c0029f6:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  unsigned int res;
  res = __builtin_bitinsert(0,  ext2loc,      1, PLP_DMA_TYPE_BIT);
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
  res = __builtin_bitinsert(res, is2D,        1, PLP_DMA_2D_BIT);
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0029fa:	002b0737          	lui	a4,0x2b0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0029fe:	00ec6733          	or	a4,s8,a4
static inline unsigned int plp_dma_getStrides(unsigned short stride, unsigned short len) {
  return (stride << PLP_DMA_2D_STRIDE_BIT) | (len << PLP_DMA_2D_LEN_BIT);
}

static inline void plp_dma_cmd_push(unsigned int cmd, unsigned int locAddr, mchan_ext_t extAddr) {
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002a02:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002a06:	40a7a023          	sw	a0,1024(a5)
#if defined(ARCHI_HAS_MCHAN_64) && ARCHI_HAS_MCHAN_64 == 1
  DMA_WRITE((int)extAddr, PLP_DMA_QUEUE_OFFSET);
  DMA_WRITE((int)(extAddr>>32), PLP_DMA_QUEUE_OFFSET);
#else
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002a0a:	40b7a023          	sw	a1,1024(a5)
        unsigned int cmd = plp_dma_getCmd(dir, size, PLP_DMA_1D, PLP_DMA_TRIG_EVT, PLP_DMA_NO_TRIG_IRQ, PLP_DMA_SHARED);
        // Prevent the compiler from pushing the transfer before all previous
        // stores are done
        __asm__ __volatile__ ("" : : : "memory");
        plp_dma_cmd_push(cmd, loc, ext);
        if (!merge) copy->id = id;
1c002a0e:	d832                	sw	a2,48(sp)

        copy->length = 0;
1c002a10:	c082                	sw	zero,64(sp)
  return __builtin_pulp_read_then_spr_bit_set(reg, val);
}

static inline void hal_spr_write(unsigned int reg, unsigned int val)
{
  __builtin_pulp_spr_write(reg, val);
1c002a12:	30069073          	csrw	mstatus,a3
	_NN_In=526; _SN_In=2052;
1c002a16:	80440513          	addi	a0,s0,-2044
1c002a1a:	6495                	lui	s1,0x5
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002a1c:	00204437          	lui	s0,0x204
	_C_Out=0; _SC_Out=9468;
	_SPP_Out=0; _SP_Out=0;
1c002a20:	4d01                	li	s10,0
1c002a22:	4601                	li	a2,0
	_C_Out=0; _SC_Out=9468;
1c002a24:	4b81                	li	s7,0
	/*============================= End Read Tiles Prolog ===============================*/
	for (T0Ind=0; T0Ind<2; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c002a26:	4901                	li	s2,0
1c002a28:	01410a93          	addi	s5,sp,20
			AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+_NN_In), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+9468*((T0Ind_Total)%2)),
					_SNN_In, 640, _LNN_In, 0, &UchanHR1);
		}
		AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In */
		if (_SN_In) {
			AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+0+9468*((T0Ind_Total+1)%2)), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+0+9468*((T0Ind_Total+1)%2)),
1c002a2c:	89e2                	mv	s3,s8
1c002a2e:	9f848493          	addi	s1,s1,-1544 # 49f8 <__rt_stack_size+0x41f8>
  return evt_read32(barAddr, EU_HW_BARR_TRIGGER_WAIT_CLEAR);
}

static inline void eu_bar_setup_mask(unsigned int barAddr, unsigned int coreMask, unsigned int targetMask)
{
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c002a32:	20040b13          	addi	s6,s0,512 # 204200 <__L2+0x184200>
1c002a36:	10c14783          	lbu	a5,268(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002a3a:	4709                	li	a4,2
1c002a3c:	0ff7f793          	andi	a5,a5,255
1c002a40:	ef81                	bnez	a5,1c002a58 <SDD3Dto2DSoftmax_20_16_18+0x146>
1c002a42:	00e42423          	sw	a4,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002a46:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002a4a:	00e42223          	sw	a4,4(s0)
1c002a4e:	10c14783          	lbu	a5,268(sp)
1c002a52:	0ff7f793          	andi	a5,a5,255
1c002a56:	d7f5                	beqz	a5,1c002a42 <SDD3Dto2DSoftmax_20_16_18+0x130>
{
#ifdef __RT_USE_PROFILE
  int trace = __rt_pe_trace[rt_core_id()];
  gv_vcd_dump_trace(trace, 5);
#endif
  if (copy->length == 0)
1c002a58:	4786                	lw	a5,64(sp)
1c002a5a:	c7f1                	beqz	a5,1c002b26 <SDD3Dto2DSoftmax_20_16_18+0x214>

    rt_irq_restore(irq);
  }
  else
  {
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002a5c:	4726                	lw	a4,72(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002a5e:	02000793          	li	a5,32
1c002a62:	cb09                	beqz	a4,1c002a74 <SDD3Dto2DSoftmax_20_16_18+0x162>
1c002a64:	00f42423          	sw	a5,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002a68:	03c46703          	p.elw	a4,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002a6c:	00f42223          	sw	a5,4(s0)
1c002a70:	4726                	lw	a4,72(sp)
1c002a72:	fb6d                	bnez	a4,1c002a64 <SDD3Dto2DSoftmax_20_16_18+0x152>
1c002a74:	000da783          	lw	a5,0(s11)
		if (_SN_In) {
1c002a78:	0e051f63          	bnez	a0,1c002b76 <SDD3Dto2DSoftmax_20_16_18+0x264>
					_SN_In, 0, &DmaR_Evt1);
		}
		/*============================= End Read Tiles ======================================*/
		/*====================== Call Kernel LOC_LOOP =========================*/
		KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0+9468*((T0Ind_Total)%2));
1c002a7c:	01778733          	add	a4,a5,s7
1c002a80:	ca3a                	sw	a4,20(sp)
		KerArg0->Win = (unsigned int ) ((T0Ind_Last)?57:263);
1c002a82:	10700693          	li	a3,263
1c002a86:	30192b63          	p.beqimm	s2,1,1c002d9c <SDD3Dto2DSoftmax_20_16_18+0x48a>
1c002a8a:	009b8a33          	add	s4,s7,s1
		KerArg0->Out = (short * __restrict__) (SSDKernels_L1_Memory+18936+9468*((T0Ind_Total)%2));
1c002a8e:	97d2                	add	a5,a5,s4
#endif
}

static inline void eu_dispatch_team_config(unsigned value)
{
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c002a90:	0ff00713          	li	a4,255
		KerArg0->Win = (unsigned int ) ((T0Ind_Last)?57:263);
1c002a94:	cc36                	sw	a3,24(sp)
		KerArg0->Out = (short * __restrict__) (SSDKernels_L1_Memory+18936+9468*((T0Ind_Total)%2));
1c002a96:	d03e                	sw	a5,32(sp)
		KerArg0->Hout = (unsigned int ) (T0Ind_Last?57:263);
1c002a98:	d436                	sw	a3,40(sp)
1c002a9a:	08e42223          	sw	a4,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c002a9e:	00eb2023          	sw	a4,0(s6) # 1000 <__rt_stack_size+0x800>
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c002aa2:	00eb2623          	sw	a4,12(s6)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c002aa6:	1c005537          	lui	a0,0x1c005
1c002aaa:	c2650513          	addi	a0,a0,-986 # 1c004c26 <KerSDD3Dto2DShort>
1c002aae:	08a42023          	sw	a0,128(s0)
1c002ab2:	09542023          	sw	s5,128(s0)
#endif

  if (nb_cores) __rt_team_config(nb_cores);
  eu_dispatch_push((int)entry);
  eu_dispatch_push((int)arg);
  entry(arg);
1c002ab6:	8556                	mv	a0,s5
1c002ab8:	c232                	sw	a2,4(sp)
1c002aba:	16c020ef          	jal	ra,1c004c26 <KerSDD3Dto2DShort>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002abe:	01cb6783          	p.elw	a5,28(s6)
		AT_FORK(gap_ncore(), (void *) KerSDD3Dto2DShort, (void *) KerArg0);
		__CALL(KerSDD3Dto2DShort, KerArg0);
		/*================================= Write Tiles =====================================*/
		if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c002ac2:	4612                	lw	a2,4(sp)
1c002ac4:	1c0d1063          	bnez	s10,1c002c84 <SDD3Dto2DSoftmax_20_16_18+0x372>
		if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2); /* Wait previous uDMA write Out */
1c002ac8:	2c061463          	bnez	a2,1c002d90 <SDD3Dto2DSoftmax_20_16_18+0x47e>
		if (_SP_Out) AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+18936+9468*((T0Ind_Total+-1)%2)),
					_SP_Out, 1, &UchanHR2);
		AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+18936+9468*((T0Ind_Total)%2)), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+18936+9468*((T0Ind_Total)%2)),
1c002acc:	000ca703          	lw	a4,0(s9)
1c002ad0:	000da783          	lw	a5,0(s11)
1c002ad4:	9726                	add	a4,a4,s1
1c002ad6:	975e                	add	a4,a4,s7
1c002ad8:	01478eb3          	add	t4,a5,s4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002adc:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002ae0:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c002ae4:	000207b7          	lui	a5,0x20
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002ae8:	de0c27b3          	p.insert	a5,s8,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c002aec:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c002af0:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002af4:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002af8:	41d42023          	sw	t4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002afc:	40e42023          	sw	a4,1024(s0)
        if (!merge) copy->id = id;
1c002b00:	c8b2                	sw	a2,80(sp)
        copy->length = 0;
1c002b02:	d082                	sw	zero,96(sp)
  __builtin_pulp_spr_write(reg, val);
1c002b04:	30069073          	csrw	mstatus,a3
		_SPP_Out = _SP_Out;
		_P_Out = _C_Out;_SP_Out = _SC_Out;
		/*============================= End Update Arg Pipeline =============================*/
		/*================================= Prepare Tiles ===================================*/
		_SC_Out = 0;
		if (!(T0Ind_Last)) {
1c002b08:	0b3b8563          	beq	s7,s3,1c002bb2 <SDD3Dto2DSoftmax_20_16_18+0x2a0>
			_C_Out = _C_Out + (9468); _SC_Out = ((1)?2052:9468); 
1c002b0c:	1c014e37          	lui	t3,0x1c014
1c002b10:	528e0e13          	addi	t3,t3,1320 # 1c014528 <__clz_tab+0x798>
1c002b14:	866a                	mv	a2,s10
1c002b16:	c65e                	sw	s7,12(sp)
1c002b18:	8d62                	mv	s10,s8
	for (T0Ind=0; T0Ind<2; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c002b1a:	0905                	addi	s2,s2,1
		_SN_In = _SNN_In;_LN_In = _LNN_In;
1c002b1c:	4501                	li	a0,0
			_C_Out = _C_Out + (9468); _SC_Out = ((1)?2052:9468); 
1c002b1e:	000e2c03          	lw	s8,0(t3)
1c002b22:	9bce                	add	s7,s7,s3
1c002b24:	bf09                	j	1c002a36 <SDD3Dto2DSoftmax_20_16_18+0x124>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002b26:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c002b2a:	40442783          	lw	a5,1028(s0)
1c002b2e:	5742                	lw	a4,48(sp)
1c002b30:	40e7d7b3          	sra	a5,a5,a4
1c002b34:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002b38:	c78d                	beqz	a5,1c002b62 <SDD3Dto2DSoftmax_20_16_18+0x250>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002b3a:	10000593          	li	a1,256
  __builtin_pulp_spr_write(reg, val);
1c002b3e:	30069073          	csrw	mstatus,a3
1c002b42:	00b42423          	sw	a1,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002b46:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002b4a:	00b42223          	sw	a1,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002b4e:	300476f3          	csrrci	a3,mstatus,8
1c002b52:	40442783          	lw	a5,1028(s0)
1c002b56:	5742                	lw	a4,48(sp)
1c002b58:	40e7d7b3          	sra	a5,a5,a4
1c002b5c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002b60:	fff9                	bnez	a5,1c002b3e <SDD3Dto2DSoftmax_20_16_18+0x22c>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c002b62:	4785                	li	a5,1
1c002b64:	00e79733          	sll	a4,a5,a4
1c002b68:	40e42223          	sw	a4,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c002b6c:	30069073          	csrw	mstatus,a3
1c002b70:	000da783          	lw	a5,0(s11)
		if (_SN_In) {
1c002b74:	d501                	beqz	a0,1c002a7c <SDD3Dto2DSoftmax_20_16_18+0x16a>
			AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+0+9468*((T0Ind_Total+1)%2)), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+0+9468*((T0Ind_Total+1)%2)),
1c002b76:	00190713          	addi	a4,s2,1
1c002b7a:	fc173733          	p.bclr	a4,a4,30,1
1c002b7e:	03370733          	mul	a4,a4,s3
1c002b82:	000ca683          	lw	a3,0(s9)
1c002b86:	96ba                	add	a3,a3,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002b88:	30047ef3          	csrrci	t4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002b8c:	40042f03          	lw	t5,1024(s0)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c002b90:	002b05b7          	lui	a1,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c002b94:	8d4d                	or	a0,a0,a1
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002b96:	40a42023          	sw	a0,1024(s0)
1c002b9a:	97ba                	add	a5,a5,a4
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002b9c:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002ba0:	40d42023          	sw	a3,1024(s0)
        if (!merge) copy->id = id;
1c002ba4:	d87a                	sw	t5,48(sp)
        copy->length = 0;
1c002ba6:	c082                	sw	zero,64(sp)
  __builtin_pulp_spr_write(reg, val);
1c002ba8:	300e9073          	csrw	mstatus,t4
1c002bac:	000da783          	lw	a5,0(s11)
1c002bb0:	b5f1                	j	1c002a7c <SDD3Dto2DSoftmax_20_16_18+0x16a>
  if (copy->length == 0)
1c002bb2:	5786                	lw	a5,96(sp)
1c002bb4:	14078363          	beqz	a5,1c002cfa <SDD3Dto2DSoftmax_20_16_18+0x3e8>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002bb8:	56a6                	lw	a3,104(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002bba:	02000713          	li	a4,32
1c002bbe:	002047b7          	lui	a5,0x204
1c002bc2:	ca89                	beqz	a3,1c002bd4 <SDD3Dto2DSoftmax_20_16_18+0x2c2>
1c002bc4:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002bc8:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002bcc:	00e7a223          	sw	a4,4(a5)
1c002bd0:	56a6                	lw	a3,104(sp)
1c002bd2:	faed                	bnez	a3,1c002bc4 <SDD3Dto2DSoftmax_20_16_18+0x2b2>
		}
		/*============================= End Prepare Tiles ===================================*/
	} /* End iteration on Tile0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2); /* Wait previous uDMA write Out */
1c002bd4:	020d0563          	beqz	s10,1c002bfe <SDD3Dto2DSoftmax_20_16_18+0x2ec>
1c002bd8:	1ac14783          	lbu	a5,428(sp)
1c002bdc:	0ff7f793          	andi	a5,a5,255
1c002be0:	ef99                	bnez	a5,1c002bfe <SDD3Dto2DSoftmax_20_16_18+0x2ec>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002be2:	4689                	li	a3,2
1c002be4:	00204737          	lui	a4,0x204
1c002be8:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002bec:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002bf0:	00d72223          	sw	a3,4(a4)
1c002bf4:	1ac14783          	lbu	a5,428(sp)
1c002bf8:	0ff7f793          	andi	a5,a5,255
1c002bfc:	d7f5                	beqz	a5,1c002be8 <SDD3Dto2DSoftmax_20_16_18+0x2d6>
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+18936+9468*((T0Ind_Total+-1)%2)), _SP_Out, 1, &UchanHR2);
1c002bfe:	000ca583          	lw	a1,0(s9)
1c002c02:	661d                	lui	a2,0x7
1c002c04:	4322                	lw	t1,8(sp)
1c002c06:	ef460613          	addi	a2,a2,-268 # 6ef4 <__rt_stack_size+0x66f4>
1c002c0a:	962e                	add	a2,a2,a1
1c002c0c:	6589                	lui	a1,0x2
1c002c0e:	1c015837          	lui	a6,0x1c015
1c002c12:	4fc58593          	addi	a1,a1,1276 # 24fc <__rt_stack_size+0x1cfc>
1c002c16:	0a1c                	addi	a5,sp,272
1c002c18:	4701                	li	a4,0
1c002c1a:	86e2                	mv	a3,s8
1c002c1c:	959a                	add	a1,a1,t1
1c002c1e:	fb080513          	addi	a0,a6,-80 # 1c014fb0 <HyperRam>
1c002c22:	3220c0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c002c26:	1ac14783          	lbu	a5,428(sp)
1c002c2a:	0ff7f793          	andi	a5,a5,255
1c002c2e:	ef99                	bnez	a5,1c002c4c <SDD3Dto2DSoftmax_20_16_18+0x33a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002c30:	4689                	li	a3,2
1c002c32:	00204737          	lui	a4,0x204
1c002c36:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002c3a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002c3e:	00d72223          	sw	a3,4(a4)
1c002c42:	1ac14783          	lbu	a5,428(sp)
1c002c46:	0ff7f793          	andi	a5,a5,255
1c002c4a:	d7f5                	beqz	a5,1c002c36 <SDD3Dto2DSoftmax_20_16_18+0x324>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2); /* Wait current uDMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c002c4c:	1ec12083          	lw	ra,492(sp)
1c002c50:	1e812403          	lw	s0,488(sp)
1c002c54:	1e412483          	lw	s1,484(sp)
1c002c58:	1e012903          	lw	s2,480(sp)
1c002c5c:	1dc12983          	lw	s3,476(sp)
1c002c60:	1d812a03          	lw	s4,472(sp)
1c002c64:	1d412a83          	lw	s5,468(sp)
1c002c68:	1d012b03          	lw	s6,464(sp)
1c002c6c:	1cc12b83          	lw	s7,460(sp)
1c002c70:	1c812c03          	lw	s8,456(sp)
1c002c74:	1c412c83          	lw	s9,452(sp)
1c002c78:	1c012d03          	lw	s10,448(sp)
1c002c7c:	1bc12d83          	lw	s11,444(sp)
1c002c80:	617d                	addi	sp,sp,496
1c002c82:	8082                	ret
  if (copy->length == 0)
1c002c84:	5786                	lw	a5,96(sp)
1c002c86:	e7e1                	bnez	a5,1c002d4e <SDD3Dto2DSoftmax_20_16_18+0x43c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002c88:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c002c8c:	40442783          	lw	a5,1028(s0)
1c002c90:	4746                	lw	a4,80(sp)
1c002c92:	40e7d7b3          	sra	a5,a5,a4
1c002c96:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002c9a:	c78d                	beqz	a5,1c002cc4 <SDD3Dto2DSoftmax_20_16_18+0x3b2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002c9c:	10000593          	li	a1,256
  __builtin_pulp_spr_write(reg, val);
1c002ca0:	30069073          	csrw	mstatus,a3
1c002ca4:	00b42423          	sw	a1,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002ca8:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002cac:	00b42223          	sw	a1,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002cb0:	300476f3          	csrrci	a3,mstatus,8
1c002cb4:	40442783          	lw	a5,1028(s0)
1c002cb8:	4746                	lw	a4,80(sp)
1c002cba:	40e7d7b3          	sra	a5,a5,a4
1c002cbe:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002cc2:	fff9                	bnez	a5,1c002ca0 <SDD3Dto2DSoftmax_20_16_18+0x38e>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c002cc4:	4785                	li	a5,1
1c002cc6:	00e79733          	sll	a4,a5,a4
1c002cca:	40e42223          	sw	a4,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c002cce:	30069073          	csrw	mstatus,a3
		if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2); /* Wait previous uDMA write Out */
1c002cd2:	ea59                	bnez	a2,1c002d68 <SDD3Dto2DSoftmax_20_16_18+0x456>
		if (_SP_Out) AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+18936+9468*((T0Ind_Total+-1)%2)),
1c002cd4:	000ca583          	lw	a1,0(s9)
1c002cd8:	4e22                	lw	t3,8(sp)
1c002cda:	4332                	lw	t1,12(sp)
1c002cdc:	013b8633          	add	a2,s7,s3
1c002ce0:	1c015837          	lui	a6,0x1c015
1c002ce4:	962e                	add	a2,a2,a1
1c002ce6:	0a1c                	addi	a5,sp,272
1c002ce8:	4701                	li	a4,0
1c002cea:	86ea                	mv	a3,s10
1c002cec:	006e05b3          	add	a1,t3,t1
1c002cf0:	fb080513          	addi	a0,a6,-80 # 1c014fb0 <HyperRam>
1c002cf4:	2500c0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c002cf8:	bbd1                	j	1c002acc <SDD3Dto2DSoftmax_20_16_18+0x1ba>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002cfa:	30047673          	csrrci	a2,mstatus,8
1c002cfe:	40442783          	lw	a5,1028(s0)
1c002d02:	46c6                	lw	a3,80(sp)
1c002d04:	40d7d7b3          	sra	a5,a5,a3
1c002d08:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002d0c:	c79d                	beqz	a5,1c002d3a <SDD3Dto2DSoftmax_20_16_18+0x428>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002d0e:	10000593          	li	a1,256
1c002d12:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002d16:	30061073          	csrw	mstatus,a2
1c002d1a:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002d1e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002d22:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002d26:	30047673          	csrrci	a2,mstatus,8
1c002d2a:	40472783          	lw	a5,1028(a4)
1c002d2e:	46c6                	lw	a3,80(sp)
1c002d30:	40d7d7b3          	sra	a5,a5,a3
1c002d34:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002d38:	fff9                	bnez	a5,1c002d16 <SDD3Dto2DSoftmax_20_16_18+0x404>
1c002d3a:	4785                	li	a5,1
1c002d3c:	00d796b3          	sll	a3,a5,a3
1c002d40:	002047b7          	lui	a5,0x204
1c002d44:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002d48:	30061073          	csrw	mstatus,a2
1c002d4c:	b561                	j	1c002bd4 <SDD3Dto2DSoftmax_20_16_18+0x2c2>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002d4e:	5726                	lw	a4,104(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002d50:	02000793          	li	a5,32
1c002d54:	df3d                	beqz	a4,1c002cd2 <SDD3Dto2DSoftmax_20_16_18+0x3c0>
1c002d56:	00f42423          	sw	a5,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002d5a:	03c46703          	p.elw	a4,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002d5e:	00f42223          	sw	a5,4(s0)
1c002d62:	5726                	lw	a4,104(sp)
1c002d64:	fb6d                	bnez	a4,1c002d56 <SDD3Dto2DSoftmax_20_16_18+0x444>
		if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2); /* Wait previous uDMA write Out */
1c002d66:	d63d                	beqz	a2,1c002cd4 <SDD3Dto2DSoftmax_20_16_18+0x3c2>
1c002d68:	1ac14783          	lbu	a5,428(sp)
1c002d6c:	0ff7f793          	andi	a5,a5,255
1c002d70:	f3b5                	bnez	a5,1c002cd4 <SDD3Dto2DSoftmax_20_16_18+0x3c2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002d72:	4709                	li	a4,2
1c002d74:	00e42423          	sw	a4,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002d78:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002d7c:	00e42223          	sw	a4,4(s0)
1c002d80:	1ac14783          	lbu	a5,428(sp)
1c002d84:	0ff7f793          	andi	a5,a5,255
1c002d88:	d7f5                	beqz	a5,1c002d74 <SDD3Dto2DSoftmax_20_16_18+0x462>
		if (_SP_Out) AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+18936+9468*((T0Ind_Total+-1)%2)),
1c002d8a:	d40d01e3          	beqz	s10,1c002acc <SDD3Dto2DSoftmax_20_16_18+0x1ba>
1c002d8e:	b799                	j	1c002cd4 <SDD3Dto2DSoftmax_20_16_18+0x3c2>
1c002d90:	1ac14783          	lbu	a5,428(sp)
1c002d94:	0ff7f793          	andi	a5,a5,255
1c002d98:	dfe9                	beqz	a5,1c002d72 <SDD3Dto2DSoftmax_20_16_18+0x460>
1c002d9a:	bb0d                	j	1c002acc <SDD3Dto2DSoftmax_20_16_18+0x1ba>
		KerArg0->Win = (unsigned int ) ((T0Ind_Last)?57:263);
1c002d9c:	03900693          	li	a3,57
1c002da0:	b1ed                	j	1c002a8a <SDD3Dto2DSoftmax_20_16_18+0x178>

1c002da2 <SDD3Dto2D_20_16_24>:
		short * In,
		short * Out,
		unsigned char Q,
		unsigned short n_classes)

{
1c002da2:	7141                	addi	sp,sp,-496
1c002da4:	1d912223          	sw	s9,452(sp)
	KerArg0->Hin = (unsigned int ) (24);
	KerArg0->Wout = (unsigned int ) (24);
	KerArg0->Q = (unsigned char) (Q);
	KerArg0->n_classes = (unsigned short) (n_classes);
	/*================================= Read Tiles Prolog ===============================*/
	AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 9456, 640, 394, 0, &UchanHR1);
1c002da8:	1c015cb7          	lui	s9,0x1c015
1c002dac:	a7cc8c93          	addi	s9,s9,-1412 # 1c014a7c <SSDKernels_L2_Memory>
	KerArg0->Q = (unsigned char) (Q);
1c002db0:	02c10623          	sb	a2,44(sp)
	AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 9456, 640, 394, 0, &UchanHR1);
1c002db4:	000ca603          	lw	a2,0(s9)
	KerArg0->n_classes = (unsigned short) (n_classes);
1c002db8:	02d11723          	sh	a3,46(sp)
	AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 9456, 640, 394, 0, &UchanHR1);
1c002dbc:	1c015e37          	lui	t3,0x1c015
1c002dc0:	6689                	lui	a3,0x2
	KerArg0->Hin = (unsigned int ) (24);
1c002dc2:	4361                	li	t1,24
{
1c002dc4:	1e912223          	sw	s1,484(sp)
1c002dc8:	c42e                	sw	a1,8(sp)
	AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 9456, 640, 394, 0, &UchanHR1);
1c002dca:	18a00793          	li	a5,394
1c002dce:	85aa                	mv	a1,a0
{
1c002dd0:	84aa                	mv	s1,a0
	AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 9456, 640, 394, 0, &UchanHR1);
1c002dd2:	07010893          	addi	a7,sp,112
1c002dd6:	4805                	li	a6,1
1c002dd8:	28000713          	li	a4,640
1c002ddc:	4f068693          	addi	a3,a3,1264 # 24f0 <__rt_stack_size+0x1cf0>
1c002de0:	fb0e0513          	addi	a0,t3,-80 # 1c014fb0 <HyperRam>
{
1c002de4:	1e112623          	sw	ra,492(sp)
1c002de8:	1e812423          	sw	s0,488(sp)
1c002dec:	1f212023          	sw	s2,480(sp)
1c002df0:	1d312e23          	sw	s3,476(sp)
1c002df4:	1d412c23          	sw	s4,472(sp)
1c002df8:	1d512a23          	sw	s5,468(sp)
1c002dfc:	1d612823          	sw	s6,464(sp)
1c002e00:	1d712623          	sw	s7,460(sp)
1c002e04:	1d812423          	sw	s8,456(sp)
1c002e08:	1da12023          	sw	s10,448(sp)
1c002e0c:	1bb12e23          	sw	s11,444(sp)
	KerArg0->Hin = (unsigned int ) (24);
1c002e10:	ce1a                	sw	t1,28(sp)
	KerArg0->Wout = (unsigned int ) (24);
1c002e12:	d21a                	sw	t1,36(sp)
	AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 9456, 640, 394, 0, &UchanHR1);
1c002e14:	1720c0ef          	jal	ra,1c00ef86 <pi_cl_ram_copy_2d>
1c002e18:	10c14783          	lbu	a5,268(sp)
1c002e1c:	0ff7f793          	andi	a5,a5,255
1c002e20:	ef99                	bnez	a5,1c002e3e <SDD3Dto2D_20_16_24+0x9c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002e22:	4689                	li	a3,2
1c002e24:	00204737          	lui	a4,0x204
1c002e28:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002e2c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002e30:	00d72223          	sw	a3,4(a4)
1c002e34:	10c14783          	lbu	a5,268(sp)
1c002e38:	0ff7f793          	andi	a5,a5,255
1c002e3c:	d7f5                	beqz	a5,1c002e28 <SDD3Dto2D_20_16_24+0x86>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA read In */
	AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+394), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+9456), 5904, 640, 246, 0, &UchanHR1);
1c002e3e:	000ca603          	lw	a2,0(s9)
1c002e42:	6c09                	lui	s8,0x2
1c002e44:	1c015337          	lui	t1,0x1c015
1c002e48:	4f0c0c13          	addi	s8,s8,1264 # 24f0 <__rt_stack_size+0x1cf0>
1c002e4c:	6405                	lui	s0,0x1
1c002e4e:	18a48593          	addi	a1,s1,394
1c002e52:	fb030513          	addi	a0,t1,-80 # 1c014fb0 <HyperRam>
1c002e56:	07010893          	addi	a7,sp,112
1c002e5a:	4805                	li	a6,1
1c002e5c:	0f600793          	li	a5,246
1c002e60:	28000713          	li	a4,640
1c002e64:	71040693          	addi	a3,s0,1808 # 1710 <__rt_stack_size+0xf10>
1c002e68:	9662                	add	a2,a2,s8
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+0+0), 9456, 0, &DmaR_Evt1);
1c002e6a:	10000db7          	lui	s11,0x10000
	AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+394), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+9456), 5904, 640, 246, 0, &UchanHR1);
1c002e6e:	1180c0ef          	jal	ra,1c00ef86 <pi_cl_ram_copy_2d>
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+0+0), 9456, 0, &DmaR_Evt1);
1c002e72:	01cd8d93          	addi	s11,s11,28 # 1000001c <SSDKernels_L1_Memory>
1c002e76:	000ca583          	lw	a1,0(s9)
1c002e7a:	000da503          	lw	a0,0(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002e7e:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002e82:	002047b7          	lui	a5,0x204
1c002e86:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c002e8a:	002b0737          	lui	a4,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c002e8e:	00ec6733          	or	a4,s8,a4
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002e92:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002e96:	40a7a023          	sw	a0,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002e9a:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c002e9e:	d832                	sw	a2,48(sp)
        copy->length = 0;
1c002ea0:	c082                	sw	zero,64(sp)
  __builtin_pulp_spr_write(reg, val);
1c002ea2:	30069073          	csrw	mstatus,a3
	_NN_In=394; _SN_In=5904;
1c002ea6:	71040513          	addi	a0,s0,1808
1c002eaa:	6495                	lui	s1,0x5
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002eac:	00204437          	lui	s0,0x204
	_C_Out=0; _SC_Out=9456;
	_SPP_Out=0; _SP_Out=0;
1c002eb0:	4d01                	li	s10,0
1c002eb2:	4601                	li	a2,0
	_C_Out=0; _SC_Out=9456;
1c002eb4:	4b81                	li	s7,0
	/*============================= End Read Tiles Prolog ===============================*/
	for (T0Ind=0; T0Ind<2; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c002eb6:	4901                	li	s2,0
1c002eb8:	01410a93          	addi	s5,sp,20
			AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+_NN_In), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+9456*((T0Ind_Total)%2)),
					_SNN_In, 640, _LNN_In, 0, &UchanHR1);
		}
		AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In */
		if (_SN_In) {
			AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+0+9456*((T0Ind_Total+1)%2)), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+0+9456*((T0Ind_Total+1)%2)),
1c002ebc:	89e2                	mv	s3,s8
1c002ebe:	9e048493          	addi	s1,s1,-1568 # 49e0 <__rt_stack_size+0x41e0>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c002ec2:	20040b13          	addi	s6,s0,512 # 204200 <__L2+0x184200>
1c002ec6:	10c14783          	lbu	a5,268(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002eca:	4709                	li	a4,2
1c002ecc:	0ff7f793          	andi	a5,a5,255
1c002ed0:	ef81                	bnez	a5,1c002ee8 <SDD3Dto2D_20_16_24+0x146>
1c002ed2:	00e42423          	sw	a4,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002ed6:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002eda:	00e42223          	sw	a4,4(s0)
1c002ede:	10c14783          	lbu	a5,268(sp)
1c002ee2:	0ff7f793          	andi	a5,a5,255
1c002ee6:	d7f5                	beqz	a5,1c002ed2 <SDD3Dto2D_20_16_24+0x130>
  if (copy->length == 0)
1c002ee8:	4786                	lw	a5,64(sp)
1c002eea:	c3e9                	beqz	a5,1c002fac <SDD3Dto2D_20_16_24+0x20a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002eec:	4726                	lw	a4,72(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002eee:	02000793          	li	a5,32
1c002ef2:	cb09                	beqz	a4,1c002f04 <SDD3Dto2D_20_16_24+0x162>
1c002ef4:	00f42423          	sw	a5,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002ef8:	03c46703          	p.elw	a4,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002efc:	00f42223          	sw	a5,4(s0)
1c002f00:	4726                	lw	a4,72(sp)
1c002f02:	fb6d                	bnez	a4,1c002ef4 <SDD3Dto2D_20_16_24+0x152>
1c002f04:	000da783          	lw	a5,0(s11)
		if (_SN_In) {
1c002f08:	e975                	bnez	a0,1c002ffc <SDD3Dto2D_20_16_24+0x25a>
					_SN_In, 0, &DmaR_Evt1);
		}
		/*============================= End Read Tiles ======================================*/
		/*====================== Call Kernel LOC_LOOP =========================*/
		KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0+9456*((T0Ind_Total)%2));
1c002f0a:	01778733          	add	a4,a5,s7
1c002f0e:	ca3a                	sw	a4,20(sp)
		KerArg0->Win = (unsigned int ) ((T0Ind_Last)?123:197);
1c002f10:	0c500693          	li	a3,197
1c002f14:	30192763          	p.beqimm	s2,1,1c003222 <SDD3Dto2D_20_16_24+0x480>
1c002f18:	009b8a33          	add	s4,s7,s1
		KerArg0->Out = (short * __restrict__) (SSDKernels_L1_Memory+18912+9456*((T0Ind_Total)%2));
1c002f1c:	97d2                	add	a5,a5,s4
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c002f1e:	0ff00713          	li	a4,255
		KerArg0->Win = (unsigned int ) ((T0Ind_Last)?123:197);
1c002f22:	cc36                	sw	a3,24(sp)
		KerArg0->Out = (short * __restrict__) (SSDKernels_L1_Memory+18912+9456*((T0Ind_Total)%2));
1c002f24:	d03e                	sw	a5,32(sp)
		KerArg0->Hout = (unsigned int ) (T0Ind_Last?123:197);
1c002f26:	d436                	sw	a3,40(sp)
1c002f28:	08e42223          	sw	a4,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c002f2c:	00eb2023          	sw	a4,0(s6)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c002f30:	00eb2623          	sw	a4,12(s6)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c002f34:	1c005537          	lui	a0,0x1c005
1c002f38:	c2650513          	addi	a0,a0,-986 # 1c004c26 <KerSDD3Dto2DShort>
1c002f3c:	08a42023          	sw	a0,128(s0)
1c002f40:	09542023          	sw	s5,128(s0)
1c002f44:	8556                	mv	a0,s5
1c002f46:	c232                	sw	a2,4(sp)
1c002f48:	4df010ef          	jal	ra,1c004c26 <KerSDD3Dto2DShort>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002f4c:	01cb6783          	p.elw	a5,28(s6)
		AT_FORK(gap_ncore(), (void *) KerSDD3Dto2DShort, (void *) KerArg0);
		__CALL(KerSDD3Dto2DShort, KerArg0);
		/*================================= Write Tiles =====================================*/
		if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c002f50:	4612                	lw	a2,4(sp)
1c002f52:	1a0d1c63          	bnez	s10,1c00310a <SDD3Dto2D_20_16_24+0x368>
		if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2); /* Wait previous uDMA write Out */
1c002f56:	2c061063          	bnez	a2,1c003216 <SDD3Dto2D_20_16_24+0x474>
		if (_SP_Out) AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+18912+9456*((T0Ind_Total+-1)%2)),
					_SP_Out, 1, &UchanHR2);
		AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+18912+9456*((T0Ind_Total)%2)), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+18912+9456*((T0Ind_Total)%2)),
1c002f5a:	000ca783          	lw	a5,0(s9)
1c002f5e:	000da703          	lw	a4,0(s11)
1c002f62:	97a6                	add	a5,a5,s1
1c002f64:	97de                	add	a5,a5,s7
1c002f66:	01470eb3          	add	t4,a4,s4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002f6a:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002f6e:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c002f72:	002a0737          	lui	a4,0x2a0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c002f76:	00ec6733          	or	a4,s8,a4
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002f7a:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002f7e:	41d42023          	sw	t4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002f82:	40f42023          	sw	a5,1024(s0)
        if (!merge) copy->id = id;
1c002f86:	c8b2                	sw	a2,80(sp)
        copy->length = 0;
1c002f88:	d082                	sw	zero,96(sp)
  __builtin_pulp_spr_write(reg, val);
1c002f8a:	30069073          	csrw	mstatus,a3
		_SPP_Out = _SP_Out;
		_P_Out = _C_Out;_SP_Out = _SC_Out;
		/*============================= End Update Arg Pipeline =============================*/
		/*================================= Prepare Tiles ===================================*/
		_SC_Out = 0;
		if (!(T0Ind_Last)) {
1c002f8e:	0b3b8563          	beq	s7,s3,1c003038 <SDD3Dto2D_20_16_24+0x296>
			_C_Out = _C_Out + (9456); _SC_Out = ((1)?5904:9456); 
1c002f92:	1c014e37          	lui	t3,0x1c014
1c002f96:	52ce0e13          	addi	t3,t3,1324 # 1c01452c <__clz_tab+0x79c>
1c002f9a:	866a                	mv	a2,s10
1c002f9c:	c65e                	sw	s7,12(sp)
1c002f9e:	8d62                	mv	s10,s8
	for (T0Ind=0; T0Ind<2; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c002fa0:	0905                	addi	s2,s2,1
		_SN_In = _SNN_In;_LN_In = _LNN_In;
1c002fa2:	4501                	li	a0,0
			_C_Out = _C_Out + (9456); _SC_Out = ((1)?5904:9456); 
1c002fa4:	000e2c03          	lw	s8,0(t3)
1c002fa8:	9bce                	add	s7,s7,s3
1c002faa:	bf31                	j	1c002ec6 <SDD3Dto2D_20_16_24+0x124>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002fac:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c002fb0:	40442783          	lw	a5,1028(s0)
1c002fb4:	5742                	lw	a4,48(sp)
1c002fb6:	40e7d7b3          	sra	a5,a5,a4
1c002fba:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002fbe:	c78d                	beqz	a5,1c002fe8 <SDD3Dto2D_20_16_24+0x246>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002fc0:	10000593          	li	a1,256
  __builtin_pulp_spr_write(reg, val);
1c002fc4:	30069073          	csrw	mstatus,a3
1c002fc8:	00b42423          	sw	a1,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002fcc:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002fd0:	00b42223          	sw	a1,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002fd4:	300476f3          	csrrci	a3,mstatus,8
1c002fd8:	40442783          	lw	a5,1028(s0)
1c002fdc:	5742                	lw	a4,48(sp)
1c002fde:	40e7d7b3          	sra	a5,a5,a4
1c002fe2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002fe6:	fff9                	bnez	a5,1c002fc4 <SDD3Dto2D_20_16_24+0x222>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c002fe8:	4785                	li	a5,1
1c002fea:	00e79733          	sll	a4,a5,a4
1c002fee:	40e42223          	sw	a4,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c002ff2:	30069073          	csrw	mstatus,a3
1c002ff6:	000da783          	lw	a5,0(s11)
		if (_SN_In) {
1c002ffa:	d901                	beqz	a0,1c002f0a <SDD3Dto2D_20_16_24+0x168>
			AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+0+9456*((T0Ind_Total+1)%2)), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+0+9456*((T0Ind_Total+1)%2)),
1c002ffc:	00190713          	addi	a4,s2,1
1c003000:	fc173733          	p.bclr	a4,a4,30,1
1c003004:	03370733          	mul	a4,a4,s3
1c003008:	000ca683          	lw	a3,0(s9)
1c00300c:	96ba                	add	a3,a3,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00300e:	30047ef3          	csrrci	t4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003012:	40042f03          	lw	t5,1024(s0)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c003016:	002b05b7          	lui	a1,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00301a:	8d4d                	or	a0,a0,a1
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00301c:	40a42023          	sw	a0,1024(s0)
1c003020:	97ba                	add	a5,a5,a4
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003022:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003026:	40d42023          	sw	a3,1024(s0)
        if (!merge) copy->id = id;
1c00302a:	d87a                	sw	t5,48(sp)
        copy->length = 0;
1c00302c:	c082                	sw	zero,64(sp)
  __builtin_pulp_spr_write(reg, val);
1c00302e:	300e9073          	csrw	mstatus,t4
1c003032:	000da783          	lw	a5,0(s11)
1c003036:	bdd1                	j	1c002f0a <SDD3Dto2D_20_16_24+0x168>
  if (copy->length == 0)
1c003038:	5786                	lw	a5,96(sp)
1c00303a:	14078363          	beqz	a5,1c003180 <SDD3Dto2D_20_16_24+0x3de>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00303e:	56a6                	lw	a3,104(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003040:	02000713          	li	a4,32
1c003044:	002047b7          	lui	a5,0x204
1c003048:	ca89                	beqz	a3,1c00305a <SDD3Dto2D_20_16_24+0x2b8>
1c00304a:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00304e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003052:	00e7a223          	sw	a4,4(a5)
1c003056:	56a6                	lw	a3,104(sp)
1c003058:	faed                	bnez	a3,1c00304a <SDD3Dto2D_20_16_24+0x2a8>
		}
		/*============================= End Prepare Tiles ===================================*/
	} /* End iteration on Tile0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2); /* Wait previous uDMA write Out */
1c00305a:	020d0563          	beqz	s10,1c003084 <SDD3Dto2D_20_16_24+0x2e2>
1c00305e:	1ac14783          	lbu	a5,428(sp)
1c003062:	0ff7f793          	andi	a5,a5,255
1c003066:	ef99                	bnez	a5,1c003084 <SDD3Dto2D_20_16_24+0x2e2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003068:	4689                	li	a3,2
1c00306a:	00204737          	lui	a4,0x204
1c00306e:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003072:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003076:	00d72223          	sw	a3,4(a4)
1c00307a:	1ac14783          	lbu	a5,428(sp)
1c00307e:	0ff7f793          	andi	a5,a5,255
1c003082:	d7f5                	beqz	a5,1c00306e <SDD3Dto2D_20_16_24+0x2cc>
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+18912+9456*((T0Ind_Total+-1)%2)), _SP_Out, 1, &UchanHR2);
1c003084:	000ca583          	lw	a1,0(s9)
1c003088:	661d                	lui	a2,0x7
1c00308a:	4322                	lw	t1,8(sp)
1c00308c:	ed060613          	addi	a2,a2,-304 # 6ed0 <__rt_stack_size+0x66d0>
1c003090:	962e                	add	a2,a2,a1
1c003092:	6589                	lui	a1,0x2
1c003094:	1c015837          	lui	a6,0x1c015
1c003098:	4f058593          	addi	a1,a1,1264 # 24f0 <__rt_stack_size+0x1cf0>
1c00309c:	0a1c                	addi	a5,sp,272
1c00309e:	4701                	li	a4,0
1c0030a0:	86e2                	mv	a3,s8
1c0030a2:	959a                	add	a1,a1,t1
1c0030a4:	fb080513          	addi	a0,a6,-80 # 1c014fb0 <HyperRam>
1c0030a8:	69d0b0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c0030ac:	1ac14783          	lbu	a5,428(sp)
1c0030b0:	0ff7f793          	andi	a5,a5,255
1c0030b4:	ef99                	bnez	a5,1c0030d2 <SDD3Dto2D_20_16_24+0x330>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0030b6:	4689                	li	a3,2
1c0030b8:	00204737          	lui	a4,0x204
1c0030bc:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0030c0:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0030c4:	00d72223          	sw	a3,4(a4)
1c0030c8:	1ac14783          	lbu	a5,428(sp)
1c0030cc:	0ff7f793          	andi	a5,a5,255
1c0030d0:	d7f5                	beqz	a5,1c0030bc <SDD3Dto2D_20_16_24+0x31a>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2); /* Wait current uDMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c0030d2:	1ec12083          	lw	ra,492(sp)
1c0030d6:	1e812403          	lw	s0,488(sp)
1c0030da:	1e412483          	lw	s1,484(sp)
1c0030de:	1e012903          	lw	s2,480(sp)
1c0030e2:	1dc12983          	lw	s3,476(sp)
1c0030e6:	1d812a03          	lw	s4,472(sp)
1c0030ea:	1d412a83          	lw	s5,468(sp)
1c0030ee:	1d012b03          	lw	s6,464(sp)
1c0030f2:	1cc12b83          	lw	s7,460(sp)
1c0030f6:	1c812c03          	lw	s8,456(sp)
1c0030fa:	1c412c83          	lw	s9,452(sp)
1c0030fe:	1c012d03          	lw	s10,448(sp)
1c003102:	1bc12d83          	lw	s11,444(sp)
1c003106:	617d                	addi	sp,sp,496
1c003108:	8082                	ret
  if (copy->length == 0)
1c00310a:	5786                	lw	a5,96(sp)
1c00310c:	e7e1                	bnez	a5,1c0031d4 <SDD3Dto2D_20_16_24+0x432>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00310e:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003112:	40442783          	lw	a5,1028(s0)
1c003116:	4746                	lw	a4,80(sp)
1c003118:	40e7d7b3          	sra	a5,a5,a4
1c00311c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003120:	c78d                	beqz	a5,1c00314a <SDD3Dto2D_20_16_24+0x3a8>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003122:	10000593          	li	a1,256
  __builtin_pulp_spr_write(reg, val);
1c003126:	30069073          	csrw	mstatus,a3
1c00312a:	00b42423          	sw	a1,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00312e:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003132:	00b42223          	sw	a1,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003136:	300476f3          	csrrci	a3,mstatus,8
1c00313a:	40442783          	lw	a5,1028(s0)
1c00313e:	4746                	lw	a4,80(sp)
1c003140:	40e7d7b3          	sra	a5,a5,a4
1c003144:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003148:	fff9                	bnez	a5,1c003126 <SDD3Dto2D_20_16_24+0x384>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00314a:	4785                	li	a5,1
1c00314c:	00e79733          	sll	a4,a5,a4
1c003150:	40e42223          	sw	a4,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c003154:	30069073          	csrw	mstatus,a3
		if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2); /* Wait previous uDMA write Out */
1c003158:	ea59                	bnez	a2,1c0031ee <SDD3Dto2D_20_16_24+0x44c>
		if (_SP_Out) AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+18912+9456*((T0Ind_Total+-1)%2)),
1c00315a:	000ca583          	lw	a1,0(s9)
1c00315e:	4e22                	lw	t3,8(sp)
1c003160:	4332                	lw	t1,12(sp)
1c003162:	013b8633          	add	a2,s7,s3
1c003166:	1c015837          	lui	a6,0x1c015
1c00316a:	962e                	add	a2,a2,a1
1c00316c:	0a1c                	addi	a5,sp,272
1c00316e:	4701                	li	a4,0
1c003170:	86ea                	mv	a3,s10
1c003172:	006e05b3          	add	a1,t3,t1
1c003176:	fb080513          	addi	a0,a6,-80 # 1c014fb0 <HyperRam>
1c00317a:	5cb0b0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c00317e:	bbf1                	j	1c002f5a <SDD3Dto2D_20_16_24+0x1b8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003180:	30047673          	csrrci	a2,mstatus,8
1c003184:	40442783          	lw	a5,1028(s0)
1c003188:	46c6                	lw	a3,80(sp)
1c00318a:	40d7d7b3          	sra	a5,a5,a3
1c00318e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003192:	c79d                	beqz	a5,1c0031c0 <SDD3Dto2D_20_16_24+0x41e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003194:	10000593          	li	a1,256
1c003198:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00319c:	30061073          	csrw	mstatus,a2
1c0031a0:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0031a4:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0031a8:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0031ac:	30047673          	csrrci	a2,mstatus,8
1c0031b0:	40472783          	lw	a5,1028(a4)
1c0031b4:	46c6                	lw	a3,80(sp)
1c0031b6:	40d7d7b3          	sra	a5,a5,a3
1c0031ba:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0031be:	fff9                	bnez	a5,1c00319c <SDD3Dto2D_20_16_24+0x3fa>
1c0031c0:	4785                	li	a5,1
1c0031c2:	00d796b3          	sll	a3,a5,a3
1c0031c6:	002047b7          	lui	a5,0x204
1c0031ca:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0031ce:	30061073          	csrw	mstatus,a2
1c0031d2:	b561                	j	1c00305a <SDD3Dto2D_20_16_24+0x2b8>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0031d4:	5726                	lw	a4,104(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0031d6:	02000793          	li	a5,32
1c0031da:	df3d                	beqz	a4,1c003158 <SDD3Dto2D_20_16_24+0x3b6>
1c0031dc:	00f42423          	sw	a5,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0031e0:	03c46703          	p.elw	a4,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0031e4:	00f42223          	sw	a5,4(s0)
1c0031e8:	5726                	lw	a4,104(sp)
1c0031ea:	fb6d                	bnez	a4,1c0031dc <SDD3Dto2D_20_16_24+0x43a>
		if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2); /* Wait previous uDMA write Out */
1c0031ec:	d63d                	beqz	a2,1c00315a <SDD3Dto2D_20_16_24+0x3b8>
1c0031ee:	1ac14783          	lbu	a5,428(sp)
1c0031f2:	0ff7f793          	andi	a5,a5,255
1c0031f6:	f3b5                	bnez	a5,1c00315a <SDD3Dto2D_20_16_24+0x3b8>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0031f8:	4709                	li	a4,2
1c0031fa:	00e42423          	sw	a4,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0031fe:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003202:	00e42223          	sw	a4,4(s0)
1c003206:	1ac14783          	lbu	a5,428(sp)
1c00320a:	0ff7f793          	andi	a5,a5,255
1c00320e:	d7f5                	beqz	a5,1c0031fa <SDD3Dto2D_20_16_24+0x458>
		if (_SP_Out) AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+18912+9456*((T0Ind_Total+-1)%2)),
1c003210:	d40d05e3          	beqz	s10,1c002f5a <SDD3Dto2D_20_16_24+0x1b8>
1c003214:	b799                	j	1c00315a <SDD3Dto2D_20_16_24+0x3b8>
1c003216:	1ac14783          	lbu	a5,428(sp)
1c00321a:	0ff7f793          	andi	a5,a5,255
1c00321e:	dfe9                	beqz	a5,1c0031f8 <SDD3Dto2D_20_16_24+0x456>
1c003220:	bb2d                	j	1c002f5a <SDD3Dto2D_20_16_24+0x1b8>
		KerArg0->Win = (unsigned int ) ((T0Ind_Last)?123:197);
1c003222:	07b00693          	li	a3,123
1c003226:	b9cd                	j	1c002f18 <SDD3Dto2D_20_16_24+0x176>

1c003228 <Predecoder20_16>:
		short * Boxes,
		void  * Ancor_layer,
		void  * BoundingBoxes,
		int Boxes_Q)

{
1c003228:	7105                	addi	sp,sp,-480
1c00322a:	1d412423          	sw	s4,456(sp)
	KerArg0->Ancor_layer = (void  * __restrict__) (Ancor_layer);
	KerArg0->BoundingBoxes = (void  * __restrict__) (BoundingBoxes);
	KerArg0->Boxes_Q = (int) (Boxes_Q);
	KerArg0->n_classes = (unsigned int ) (3);
	/*================================= Read Tiles Prolog ===============================*/
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 8142, 0, &UchanHR1);
1c00322e:	1c015a37          	lui	s4,0x1c015
1c003232:	a7ca0a13          	addi	s4,s4,-1412 # 1c014a7c <SSDKernels_L2_Memory>
	KerArg0->Ancor_layer = (void  * __restrict__) (Ancor_layer);
1c003236:	d0b2                	sw	a2,96(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 8142, 0, &UchanHR1);
1c003238:	000a2603          	lw	a2,0(s4)
{
1c00323c:	1c812c23          	sw	s0,472(sp)
	KerArg0->BoundingBoxes = (void  * __restrict__) (BoundingBoxes);
1c003240:	d2b6                	sw	a3,100(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 8142, 0, &UchanHR1);
1c003242:	1c015437          	lui	s0,0x1c015
1c003246:	6689                	lui	a3,0x2
	KerArg0->Classes_W = (unsigned int ) (3);
1c003248:	480d                	li	a6,3
{
1c00324a:	1d212823          	sw	s2,464(sp)
1c00324e:	1d312623          	sw	s3,460(sp)
	KerArg0->Boxes_Q = (int) (Boxes_Q);
1c003252:	d4ba                	sw	a4,104(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 8142, 0, &UchanHR1);
1c003254:	189c                	addi	a5,sp,112
	KerArg0->Classes_Std_H = (unsigned int ) (1357);
1c003256:	54d00893          	li	a7,1357
{
1c00325a:	89aa                	mv	s3,a0
1c00325c:	892e                	mv	s2,a1
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 8142, 0, &UchanHR1);
1c00325e:	4705                	li	a4,1
1c003260:	85aa                	mv	a1,a0
1c003262:	fce68693          	addi	a3,a3,-50 # 1fce <__rt_stack_size+0x17ce>
1c003266:	fb040513          	addi	a0,s0,-80 # 1c014fb0 <HyperRam>
{
1c00326a:	1c112e23          	sw	ra,476(sp)
1c00326e:	1c912a23          	sw	s1,468(sp)
1c003272:	1d512223          	sw	s5,452(sp)
1c003276:	1d612023          	sw	s6,448(sp)
1c00327a:	1b712e23          	sw	s7,444(sp)
1c00327e:	1b812c23          	sw	s8,440(sp)
1c003282:	1b912a23          	sw	s9,436(sp)
1c003286:	1ba12823          	sw	s10,432(sp)
	KerArg0->Classes_W = (unsigned int ) (3);
1c00328a:	c8c2                	sw	a6,80(sp)
	KerArg0->Classes_Std_H = (unsigned int ) (1357);
1c00328c:	cec6                	sw	a7,92(sp)
	KerArg0->n_classes = (unsigned int ) (3);
1c00328e:	d6c2                	sw	a6,108(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 8142, 0, &UchanHR1);
1c003290:	4b50b0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c003294:	10c14783          	lbu	a5,268(sp)
1c003298:	0ff7f793          	andi	a5,a5,255
1c00329c:	ef99                	bnez	a5,1c0032ba <Predecoder20_16+0x92>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00329e:	4689                	li	a3,2
1c0032a0:	00204737          	lui	a4,0x204
1c0032a4:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0032a8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0032ac:	00d72223          	sw	a3,4(a4)
1c0032b0:	10c14783          	lbu	a5,268(sp)
1c0032b4:	0ff7f793          	andi	a5,a5,255
1c0032b8:	d7f5                	beqz	a5,1c0032a4 <Predecoder20_16+0x7c>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA read Classes */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+8142), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+8144), 3378, 0, &UchanHR1);
1c0032ba:	000a2583          	lw	a1,0(s4)
1c0032be:	6489                	lui	s1,0x2
1c0032c0:	fd048613          	addi	a2,s1,-48 # 1fd0 <__rt_stack_size+0x17d0>
1c0032c4:	6685                	lui	a3,0x1
1c0032c6:	fce48493          	addi	s1,s1,-50
1c0032ca:	962e                	add	a2,a2,a1
1c0032cc:	fb040513          	addi	a0,s0,-80
1c0032d0:	009985b3          	add	a1,s3,s1
1c0032d4:	189c                	addi	a5,sp,112
1c0032d6:	4705                	li	a4,1
1c0032d8:	d3268693          	addi	a3,a3,-718 # d32 <__rt_stack_size+0x532>
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+0+0), 8142, 0, &DmaR_Evt1);
1c0032dc:	10000ab7          	lui	s5,0x10000
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+8142), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+8144), 3378, 0, &UchanHR1);
1c0032e0:	4650b0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+0+0), 8142, 0, &DmaR_Evt1);
1c0032e4:	01ca8a93          	addi	s5,s5,28 # 1000001c <SSDKernels_L1_Memory>
1c0032e8:	000a2583          	lw	a1,0(s4)
1c0032ec:	000aa503          	lw	a0,0(s5)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0032f0:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0032f4:	00204737          	lui	a4,0x204
1c0032f8:	40072603          	lw	a2,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c0032fc:	000307b7          	lui	a5,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003300:	de04a7b3          	p.insert	a5,s1,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003304:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c003308:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00330c:	40f72023          	sw	a5,1024(a4)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003310:	40a72023          	sw	a0,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003314:	40b72023          	sw	a1,1024(a4)
        if (!merge) copy->id = id;
1c003318:	c432                	sw	a2,8(sp)
        copy->length = 0;
1c00331a:	cc02                	sw	zero,24(sp)
  __builtin_pulp_spr_write(reg, val);
1c00331c:	30069073          	csrw	mstatus,a3
	_NN_Classes=8142; _SN_Classes=3378;
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Boxes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+16288+0), 10856, 0, &UchanHR2);
1c003320:	000a2583          	lw	a1,0(s4)
1c003324:	6611                	lui	a2,0x4
1c003326:	668d                	lui	a3,0x3
1c003328:	fa060613          	addi	a2,a2,-96 # 3fa0 <__rt_stack_size+0x37a0>
1c00332c:	0a1c                	addi	a5,sp,272
1c00332e:	962e                	add	a2,a2,a1
1c003330:	4705                	li	a4,1
1c003332:	a6868693          	addi	a3,a3,-1432 # 2a68 <__rt_stack_size+0x2268>
1c003336:	85ca                	mv	a1,s2
1c003338:	fb040513          	addi	a0,s0,-80
1c00333c:	4090b0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c003340:	1ac14783          	lbu	a5,428(sp)
1c003344:	0ff7f793          	andi	a5,a5,255
1c003348:	ef99                	bnez	a5,1c003366 <Predecoder20_16+0x13e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00334a:	4689                	li	a3,2
1c00334c:	00204737          	lui	a4,0x204
1c003350:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003354:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003358:	00d72223          	sw	a3,4(a4)
1c00335c:	1ac14783          	lbu	a5,428(sp)
1c003360:	0ff7f793          	andi	a5,a5,255
1c003364:	d7f5                	beqz	a5,1c003350 <Predecoder20_16+0x128>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2); /* Wait previous uDMA read Boxes */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Boxes+10856), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+16288+10856), 4504, 0, &UchanHR2);
1c003366:	000a2583          	lw	a1,0(s4)
1c00336a:	648d                	lui	s1,0x3
1c00336c:	661d                	lui	a2,0x7
1c00336e:	a6848493          	addi	s1,s1,-1432 # 2a68 <__rt_stack_size+0x2268>
1c003372:	6985                	lui	s3,0x1
1c003374:	a0860613          	addi	a2,a2,-1528 # 6a08 <__rt_stack_size+0x6208>
1c003378:	19898693          	addi	a3,s3,408 # 1198 <__rt_stack_size+0x998>
1c00337c:	962e                	add	a2,a2,a1
1c00337e:	0a1c                	addi	a5,sp,272
1c003380:	4705                	li	a4,1
1c003382:	009905b3          	add	a1,s2,s1
1c003386:	fb040513          	addi	a0,s0,-80
1c00338a:	3bb0b0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+16288+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+16288+0), 10856, 0, &DmaR_Evt2);
1c00338e:	000a2683          	lw	a3,0(s4)
1c003392:	000aa603          	lw	a2,0(s5)
1c003396:	6b11                	lui	s6,0x4
1c003398:	fa0b0b13          	addi	s6,s6,-96 # 3fa0 <__rt_stack_size+0x37a0>
1c00339c:	96da                	add	a3,a3,s6
1c00339e:	965a                	add	a2,a2,s6
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0033a0:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0033a4:	00204737          	lui	a4,0x204
1c0033a8:	40072503          	lw	a0,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c0033ac:	000307b7          	lui	a5,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0033b0:	de04a7b3          	p.insert	a5,s1,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0033b4:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0033b8:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0033bc:	40f72023          	sw	a5,1024(a4)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0033c0:	40c72023          	sw	a2,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0033c4:	40d72023          	sw	a3,1024(a4)
        if (!merge) copy->id = id;
1c0033c8:	d42a                	sw	a0,40(sp)
        copy->length = 0;
1c0033ca:	dc02                	sw	zero,56(sp)
  __builtin_pulp_spr_write(reg, val);
1c0033cc:	30059073          	csrw	mstatus,a1
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0033d0:	00204437          	lui	s0,0x204
1c0033d4:	1c005d37          	lui	s10,0x1c005
			AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+_NN_Classes), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+8144*((T0Ind_Total)%2)),
					_SNN_Classes, 0, &UchanHR1);
		}
		AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Classes */
		if (_SN_Classes) {
			AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+0+8144*((T0Ind_Total+1)%2)), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+0+8144*((T0Ind_Total+1)%2)),
1c0033d8:	6909                	lui	s2,0x2
	_NN_Boxes=10856; _SN_Boxes=4504;
1c0033da:	19898593          	addi	a1,s3,408
	_NN_Classes=8142; _SN_Classes=3378;
1c0033de:	d3298813          	addi	a6,s3,-718
1c0033e2:	4c01                	li	s8,0
	for (T0Ind=0; T0Ind<2; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c0033e4:	4601                	li	a2,0
1c0033e6:	f3ed0d13          	addi	s10,s10,-194 # 1c004f3e <KerPredecoderShort>
1c0033ea:	04810b93          	addi	s7,sp,72
			AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+0+8144*((T0Ind_Total+1)%2)), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+0+8144*((T0Ind_Total+1)%2)),
1c0033ee:	fd090913          	addi	s2,s2,-48 # 1fd0 <__rt_stack_size+0x17d0>
			AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Boxes+_NN_Boxes), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+16288+10856*((T0Ind_Total)%2)),
					_SNN_Boxes, 0, &UchanHR2);
		}
		AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Boxes */
		if (_SN_Boxes) {
			AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+16288+10856*((T0Ind_Total+1)%2)), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+16288+10856*((T0Ind_Total+1)%2)),
1c0033f2:	89da                	mv	s3,s6
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0033f4:	20040c93          	addi	s9,s0,512 # 204200 <__L2+0x184200>
1c0033f8:	10c14783          	lbu	a5,268(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0033fc:	4709                	li	a4,2
1c0033fe:	0ff7f793          	andi	a5,a5,255
1c003402:	ef81                	bnez	a5,1c00341a <Predecoder20_16+0x1f2>
1c003404:	00e42423          	sw	a4,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003408:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00340c:	00e42223          	sw	a4,4(s0)
1c003410:	10c14783          	lbu	a5,268(sp)
1c003414:	0ff7f793          	andi	a5,a5,255
1c003418:	d7f5                	beqz	a5,1c003404 <Predecoder20_16+0x1dc>
  if (copy->length == 0)
1c00341a:	47e2                	lw	a5,24(sp)
1c00341c:	18078d63          	beqz	a5,1c0035b6 <Predecoder20_16+0x38e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003420:	5702                	lw	a4,32(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003422:	02000793          	li	a5,32
1c003426:	cb09                	beqz	a4,1c003438 <Predecoder20_16+0x210>
1c003428:	00f42423          	sw	a5,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00342c:	03c46703          	p.elw	a4,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003430:	00f42223          	sw	a5,4(s0)
1c003434:	5702                	lw	a4,32(sp)
1c003436:	fb6d                	bnez	a4,1c003428 <Predecoder20_16+0x200>
		if (_SN_Classes) {
1c003438:	1c081663          	bnez	a6,1c003604 <Predecoder20_16+0x3dc>
1c00343c:	1ac14783          	lbu	a5,428(sp)
1c003440:	0ff7f793          	andi	a5,a5,255
1c003444:	ef89                	bnez	a5,1c00345e <Predecoder20_16+0x236>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003446:	4709                	li	a4,2
1c003448:	00e42423          	sw	a4,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00344c:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003450:	00e42223          	sw	a4,4(s0)
1c003454:	1ac14783          	lbu	a5,428(sp)
1c003458:	0ff7f793          	andi	a5,a5,255
1c00345c:	d7f5                	beqz	a5,1c003448 <Predecoder20_16+0x220>
  if (copy->length == 0)
1c00345e:	57e2                	lw	a5,56(sp)
1c003460:	c3b5                	beqz	a5,1c0034c4 <Predecoder20_16+0x29c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003462:	4706                	lw	a4,64(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003464:	02000793          	li	a5,32
1c003468:	cb09                	beqz	a4,1c00347a <Predecoder20_16+0x252>
1c00346a:	00f42423          	sw	a5,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00346e:	03c46703          	p.elw	a4,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003472:	00f42223          	sw	a5,4(s0)
1c003476:	4706                	lw	a4,64(sp)
1c003478:	fb6d                	bnez	a4,1c00346a <Predecoder20_16+0x242>
1c00347a:	000aa783          	lw	a5,0(s5)
		if (_SN_Boxes) {
1c00347e:	e9d9                	bnez	a1,1c003514 <Predecoder20_16+0x2ec>
					_SN_Boxes, 0, &DmaR_Evt2);
		}
		/*============================= End Read Tiles ======================================*/
		/*====================== Call Kernel LOC_LOOP =========================*/
		KerArg0->Classes = (short * __restrict__) (SSDKernels_L1_Memory+0+8144*((T0Ind_Total)%2));
1c003480:	01878733          	add	a4,a5,s8
		KerArg0->Boxes = (short * __restrict__) (SSDKernels_L1_Memory+16288+10856*((T0Ind_Total)%2));
1c003484:	97da                	add	a5,a5,s6
		KerArg0->Classes = (short * __restrict__) (SSDKernels_L1_Memory+0+8144*((T0Ind_Total)%2));
1c003486:	c4ba                	sw	a4,72(sp)
		KerArg0->Boxes = (short * __restrict__) (SSDKernels_L1_Memory+16288+10856*((T0Ind_Total)%2));
1c003488:	c6be                	sw	a5,76(sp)
		KerArg0->Classes_H = (unsigned int ) (T0Ind_Last?563:1357);
1c00348a:	0c162363          	p.beqimm	a2,1,1c003550 <Predecoder20_16+0x328>
1c00348e:	54d00713          	li	a4,1357
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c003492:	0ff00793          	li	a5,255
1c003496:	caba                	sw	a4,84(sp)
		KerArg0->Classes_TileIndex = (unsigned int ) ((T0Ind));
1c003498:	cc82                	sw	zero,88(sp)
1c00349a:	08f42223          	sw	a5,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00349e:	00fca023          	sw	a5,0(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0034a2:	00fca623          	sw	a5,12(s9)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0034a6:	09a42023          	sw	s10,128(s0)
1c0034aa:	09742023          	sw	s7,128(s0)
1c0034ae:	855e                	mv	a0,s7
1c0034b0:	28f010ef          	jal	ra,1c004f3e <KerPredecoderShort>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0034b4:	01cce783          	p.elw	a5,28(s9)
1c0034b8:	4605                	li	a2,1
1c0034ba:	9c4a                	add	s8,s8,s2
1c0034bc:	9b26                	add	s6,s6,s1
		AT_FORK(gap_ncore(), (void *) KerPredecoderShort, (void *) KerArg0);
		__CALL(KerPredecoderShort, KerArg0);
		/*================================= Update Arg Pipeline =============================*/
		_SN_Classes = _SNN_Classes;
1c0034be:	4801                	li	a6,0
		_SN_Boxes = _SNN_Boxes;
1c0034c0:	4581                	li	a1,0
1c0034c2:	bf1d                	j	1c0033f8 <Predecoder20_16+0x1d0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0034c4:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0034c8:	40442783          	lw	a5,1028(s0)
1c0034cc:	5722                	lw	a4,40(sp)
1c0034ce:	40e7d7b3          	sra	a5,a5,a4
1c0034d2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0034d6:	c78d                	beqz	a5,1c003500 <Predecoder20_16+0x2d8>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0034d8:	10000513          	li	a0,256
  __builtin_pulp_spr_write(reg, val);
1c0034dc:	30069073          	csrw	mstatus,a3
1c0034e0:	00a42423          	sw	a0,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0034e4:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0034e8:	00a42223          	sw	a0,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0034ec:	300476f3          	csrrci	a3,mstatus,8
1c0034f0:	40442783          	lw	a5,1028(s0)
1c0034f4:	5722                	lw	a4,40(sp)
1c0034f6:	40e7d7b3          	sra	a5,a5,a4
1c0034fa:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0034fe:	fff9                	bnez	a5,1c0034dc <Predecoder20_16+0x2b4>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003500:	4785                	li	a5,1
1c003502:	00e79733          	sll	a4,a5,a4
1c003506:	40e42223          	sw	a4,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c00350a:	30069073          	csrw	mstatus,a3
1c00350e:	000aa783          	lw	a5,0(s5)
		if (_SN_Boxes) {
1c003512:	d5bd                	beqz	a1,1c003480 <Predecoder20_16+0x258>
			AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+16288+10856*((T0Ind_Total+1)%2)), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+16288+10856*((T0Ind_Total+1)%2)),
1c003514:	00164713          	xori	a4,a2,1
1c003518:	02970733          	mul	a4,a4,s1
1c00351c:	000a2683          	lw	a3,0(s4)
1c003520:	96ce                	add	a3,a3,s3
1c003522:	96ba                	add	a3,a3,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003524:	30047873          	csrrci	a6,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003528:	40042883          	lw	a7,1024(s0)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c00352c:	002b0537          	lui	a0,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c003530:	8dc9                	or	a1,a1,a0
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003532:	40b42023          	sw	a1,1024(s0)
1c003536:	974e                	add	a4,a4,s3
1c003538:	97ba                	add	a5,a5,a4
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00353a:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00353e:	40d42023          	sw	a3,1024(s0)
        if (!merge) copy->id = id;
1c003542:	d446                	sw	a7,40(sp)
        copy->length = 0;
1c003544:	dc02                	sw	zero,56(sp)
  __builtin_pulp_spr_write(reg, val);
1c003546:	30081073          	csrw	mstatus,a6
1c00354a:	000aa783          	lw	a5,0(s5)
1c00354e:	bf0d                	j	1c003480 <Predecoder20_16+0x258>
		KerArg0->Classes_H = (unsigned int ) (T0Ind_Last?563:1357);
1c003550:	23300693          	li	a3,563
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c003554:	0ff00713          	li	a4,255
1c003558:	002047b7          	lui	a5,0x204
1c00355c:	cab6                	sw	a3,84(sp)
		KerArg0->Classes_TileIndex = (unsigned int ) ((T0Ind));
1c00355e:	ccb2                	sw	a2,88(sp)
1c003560:	08e7a223          	sw	a4,132(a5) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c003564:	20078413          	addi	s0,a5,512
1c003568:	00e42023          	sw	a4,0(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00356c:	00e42623          	sw	a4,12(s0)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c003570:	09a7a023          	sw	s10,128(a5)
1c003574:	0977a023          	sw	s7,128(a5)
1c003578:	855e                	mv	a0,s7
1c00357a:	1c5010ef          	jal	ra,1c004f3e <KerPredecoderShort>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00357e:	01c46783          	p.elw	a5,28(s0)
		/*============================= End Update Arg Pipeline =============================*/
	} /* End iteration on Tile0 */
}
1c003582:	1dc12083          	lw	ra,476(sp)
1c003586:	1d812403          	lw	s0,472(sp)
1c00358a:	1d412483          	lw	s1,468(sp)
1c00358e:	1d012903          	lw	s2,464(sp)
1c003592:	1cc12983          	lw	s3,460(sp)
1c003596:	1c812a03          	lw	s4,456(sp)
1c00359a:	1c412a83          	lw	s5,452(sp)
1c00359e:	1c012b03          	lw	s6,448(sp)
1c0035a2:	1bc12b83          	lw	s7,444(sp)
1c0035a6:	1b812c03          	lw	s8,440(sp)
1c0035aa:	1b412c83          	lw	s9,436(sp)
1c0035ae:	1b012d03          	lw	s10,432(sp)
1c0035b2:	613d                	addi	sp,sp,480
1c0035b4:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0035b6:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0035ba:	40442783          	lw	a5,1028(s0)
1c0035be:	4722                	lw	a4,8(sp)
1c0035c0:	40e7d7b3          	sra	a5,a5,a4
1c0035c4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0035c8:	c78d                	beqz	a5,1c0035f2 <Predecoder20_16+0x3ca>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0035ca:	10000513          	li	a0,256
  __builtin_pulp_spr_write(reg, val);
1c0035ce:	30069073          	csrw	mstatus,a3
1c0035d2:	00a42423          	sw	a0,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0035d6:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0035da:	00a42223          	sw	a0,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0035de:	300476f3          	csrrci	a3,mstatus,8
1c0035e2:	40442783          	lw	a5,1028(s0)
1c0035e6:	4722                	lw	a4,8(sp)
1c0035e8:	40e7d7b3          	sra	a5,a5,a4
1c0035ec:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0035f0:	fff9                	bnez	a5,1c0035ce <Predecoder20_16+0x3a6>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0035f2:	4785                	li	a5,1
1c0035f4:	00e79733          	sll	a4,a5,a4
1c0035f8:	40e42223          	sw	a4,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c0035fc:	30069073          	csrw	mstatus,a3
		if (_SN_Classes) {
1c003600:	e2080ee3          	beqz	a6,1c00343c <Predecoder20_16+0x214>
			AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+0+8144*((T0Ind_Total+1)%2)), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+0+8144*((T0Ind_Total+1)%2)),
1c003604:	00164793          	xori	a5,a2,1
1c003608:	032787b3          	mul	a5,a5,s2
1c00360c:	000a2703          	lw	a4,0(s4)
1c003610:	000aa683          	lw	a3,0(s5)
1c003614:	973e                	add	a4,a4,a5
1c003616:	97b6                	add	a5,a5,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003618:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00361c:	40042883          	lw	a7,1024(s0)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c003620:	002b06b7          	lui	a3,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c003624:	00d86833          	or	a6,a6,a3
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003628:	41042023          	sw	a6,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00362c:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003630:	40e42023          	sw	a4,1024(s0)
        if (!merge) copy->id = id;
1c003634:	c446                	sw	a7,8(sp)
        copy->length = 0;
1c003636:	cc02                	sw	zero,24(sp)
  __builtin_pulp_spr_write(reg, val);
1c003638:	30051073          	csrw	mstatus,a0
1c00363c:	b501                	j	1c00343c <Predecoder20_16+0x214>

1c00363e <SDD3Dto2DSoftmax_10_8_18>:
		short * In,
		short * Out,
		unsigned char Q,
		unsigned short n_classes)

{
1c00363e:	7121                	addi	sp,sp,-448
1c003640:	1b412423          	sw	s4,424(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[18x80], 2]
		Tile0: [0, 2880, 2880], Tile1: [0, 2880, 2880], Tile2; [0, 2880, 2880]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c003644:	10000a37          	lui	s4,0x10000
{
1c003648:	1b312623          	sw	s3,428(sp)
	KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c00364c:	01ca0a13          	addi	s4,s4,28 # 1000001c <SSDKernels_L1_Memory>
	KerArg0->Wout = (unsigned int ) (18);
	KerArg0->Hout = (unsigned int ) (80);
	KerArg0->Q = (unsigned char) (Q);
	KerArg0->n_classes = (unsigned short) (n_classes);
	/*================================= Read Tiles Prolog ===============================*/
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 2880, 0, &UchanHR1);
1c003650:	1c0159b7          	lui	s3,0x1c015
	KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c003654:	000a2e03          	lw	t3,0(s4)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 2880, 0, &UchanHR1);
1c003658:	a7c98993          	addi	s3,s3,-1412 # 1c014a7c <SSDKernels_L2_Memory>
	KerArg0->Q = (unsigned char) (Q);
1c00365c:	00c10e23          	sb	a2,28(sp)
	KerArg0->Out = (short * __restrict__) (SSDKernels_L1_Memory+2880);
1c003660:	6805                	lui	a6,0x1
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 2880, 0, &UchanHR1);
1c003662:	0009a603          	lw	a2,0(s3)
	KerArg0->Out = (short * __restrict__) (SSDKernels_L1_Memory+2880);
1c003666:	b4080813          	addi	a6,a6,-1216 # b40 <__rt_stack_size+0x340>
{
1c00366a:	1a912a23          	sw	s1,436(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 2880, 0, &UchanHR1);
1c00366e:	1c0154b7          	lui	s1,0x1c015
	KerArg0->Win = (unsigned int ) (80);
1c003672:	05000893          	li	a7,80
	KerArg0->Hin = (unsigned int ) (18);
1c003676:	4349                	li	t1,18
{
1c003678:	1b212823          	sw	s2,432(sp)
	KerArg0->Out = (short * __restrict__) (SSDKernels_L1_Memory+2880);
1c00367c:	010e0eb3          	add	t4,t3,a6
	KerArg0->n_classes = (unsigned short) (n_classes);
1c003680:	00d11f23          	sh	a3,30(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 2880, 0, &UchanHR1);
1c003684:	109c                	addi	a5,sp,96
{
1c003686:	892e                	mv	s2,a1
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 2880, 0, &UchanHR1);
1c003688:	4705                	li	a4,1
1c00368a:	85aa                	mv	a1,a0
1c00368c:	86c2                	mv	a3,a6
1c00368e:	fb048513          	addi	a0,s1,-80 # 1c014fb0 <HyperRam>
{
1c003692:	1a112e23          	sw	ra,444(sp)
1c003696:	1a812c23          	sw	s0,440(sp)
1c00369a:	1b512223          	sw	s5,420(sp)
	KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c00369e:	c272                	sw	t3,4(sp)
	KerArg0->Win = (unsigned int ) (80);
1c0036a0:	c446                	sw	a7,8(sp)
	KerArg0->Hin = (unsigned int ) (18);
1c0036a2:	c61a                	sw	t1,12(sp)
	KerArg0->Out = (short * __restrict__) (SSDKernels_L1_Memory+2880);
1c0036a4:	c876                	sw	t4,16(sp)
	KerArg0->Wout = (unsigned int ) (18);
1c0036a6:	ca1a                	sw	t1,20(sp)
	KerArg0->Hout = (unsigned int ) (80);
1c0036a8:	cc46                	sw	a7,24(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 2880, 0, &UchanHR1);
1c0036aa:	09b0b0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c0036ae:	0fc14783          	lbu	a5,252(sp)
1c0036b2:	0ff7f793          	andi	a5,a5,255
1c0036b6:	ef99                	bnez	a5,1c0036d4 <SDD3Dto2DSoftmax_10_8_18+0x96>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0036b8:	4689                	li	a3,2
1c0036ba:	00204737          	lui	a4,0x204
1c0036be:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0036c2:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0036c6:	00d72223          	sw	a3,4(a4)
1c0036ca:	0fc14783          	lbu	a5,252(sp)
1c0036ce:	0ff7f793          	andi	a5,a5,255
1c0036d2:	d7f5                	beqz	a5,1c0036be <SDD3Dto2DSoftmax_10_8_18+0x80>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA read In */
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+0), 2880, 0, &DmaR_Evt1);
1c0036d4:	0009a583          	lw	a1,0(s3)
1c0036d8:	000a2503          	lw	a0,0(s4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0036dc:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0036e0:	002047b7          	lui	a5,0x204
1c0036e4:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0036e8:	00031737          	lui	a4,0x31
1c0036ec:	b4070713          	addi	a4,a4,-1216 # 30b40 <__L1Cl+0x20b40>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0036f0:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0036f4:	c1574733          	p.bset	a4,a4,0,21
1c0036f8:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0036fc:	40a7a023          	sw	a0,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003700:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c003704:	d032                	sw	a2,32(sp)
        copy->length = 0;
1c003706:	d802                	sw	zero,48(sp)
  __builtin_pulp_spr_write(reg, val);
1c003708:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c00370c:	5742                	lw	a4,48(sp)
1c00370e:	16070063          	beqz	a4,1c00386e <SDD3Dto2DSoftmax_10_8_18+0x230>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003712:	56e2                	lw	a3,56(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003714:	02000713          	li	a4,32
1c003718:	ca89                	beqz	a3,1c00372a <SDD3Dto2DSoftmax_10_8_18+0xec>
1c00371a:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00371e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003722:	00e7a223          	sw	a4,4(a5)
1c003726:	56e2                	lw	a3,56(sp)
1c003728:	faed                	bnez	a3,1c00371a <SDD3Dto2DSoftmax_10_8_18+0xdc>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00372a:	0ff00793          	li	a5,255
1c00372e:	00204437          	lui	s0,0x204
1c003732:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c003736:	20040a93          	addi	s5,s0,512
1c00373a:	00faa023          	sw	a5,0(s5)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00373e:	00faa623          	sw	a5,12(s5)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c003742:	1c0057b7          	lui	a5,0x1c005
1c003746:	c2678793          	addi	a5,a5,-986 # 1c004c26 <KerSDD3Dto2DShort>
1c00374a:	08f42023          	sw	a5,128(s0)
1c00374e:	0048                	addi	a0,sp,4
1c003750:	08a42023          	sw	a0,128(s0)
1c003754:	4d2010ef          	jal	ra,1c004c26 <KerSDD3Dto2DShort>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003758:	01cae783          	p.elw	a5,28(s5)
		/*====================== Call Kernel LOC_LOOP =========================*/
		AT_FORK(gap_ncore(), (void *) KerSDD3Dto2DShort, (void *) KerArg0);
		__CALL(KerSDD3Dto2DShort, KerArg0);
	} /* End iteration on Tile0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+2880+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+2880), 2880, 1, &DmaW_Evt1);
1c00375c:	6705                	lui	a4,0x1
1c00375e:	0009a683          	lw	a3,0(s3)
1c003762:	000a2603          	lw	a2,0(s4)
1c003766:	b4070713          	addi	a4,a4,-1216 # b40 <__rt_stack_size+0x340>
1c00376a:	96ba                	add	a3,a3,a4
1c00376c:	963a                	add	a2,a2,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00376e:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003772:	40042503          	lw	a0,1024(s0)
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c003776:	000207b7          	lui	a5,0x20
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00377a:	de0727b3          	p.insert	a5,a4,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00377e:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c003782:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003786:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00378a:	40c42023          	sw	a2,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00378e:	40d42023          	sw	a3,1024(s0)
        if (!merge) copy->id = id;
1c003792:	c0aa                	sw	a0,64(sp)
        copy->length = 0;
1c003794:	c882                	sw	zero,80(sp)
  __builtin_pulp_spr_write(reg, val);
1c003796:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c00379a:	47c6                	lw	a5,80(sp)
1c00379c:	cfbd                	beqz	a5,1c00381a <SDD3Dto2DSoftmax_10_8_18+0x1dc>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00379e:	46e6                	lw	a3,88(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0037a0:	02000713          	li	a4,32
1c0037a4:	002047b7          	lui	a5,0x204
1c0037a8:	ca89                	beqz	a3,1c0037ba <SDD3Dto2DSoftmax_10_8_18+0x17c>
1c0037aa:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0037ae:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0037b2:	00e7a223          	sw	a4,4(a5)
1c0037b6:	46e6                	lw	a3,88(sp)
1c0037b8:	faed                	bnez	a3,1c0037aa <SDD3Dto2DSoftmax_10_8_18+0x16c>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+2880+0), 2880, 1, &UchanHR2);
1c0037ba:	0009a603          	lw	a2,0(s3)
1c0037be:	6685                	lui	a3,0x1
1c0037c0:	b4068693          	addi	a3,a3,-1216 # b40 <__rt_stack_size+0x340>
1c0037c4:	021c                	addi	a5,sp,256
1c0037c6:	4701                	li	a4,0
1c0037c8:	9636                	add	a2,a2,a3
1c0037ca:	85ca                	mv	a1,s2
1c0037cc:	fb048513          	addi	a0,s1,-80
1c0037d0:	7740b0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c0037d4:	19c14783          	lbu	a5,412(sp)
1c0037d8:	0ff7f793          	andi	a5,a5,255
1c0037dc:	ef99                	bnez	a5,1c0037fa <SDD3Dto2DSoftmax_10_8_18+0x1bc>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0037de:	4689                	li	a3,2
1c0037e0:	00204737          	lui	a4,0x204
1c0037e4:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0037e8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0037ec:	00d72223          	sw	a3,4(a4)
1c0037f0:	19c14783          	lbu	a5,412(sp)
1c0037f4:	0ff7f793          	andi	a5,a5,255
1c0037f8:	d7f5                	beqz	a5,1c0037e4 <SDD3Dto2DSoftmax_10_8_18+0x1a6>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2); /* Wait previous uDMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c0037fa:	1bc12083          	lw	ra,444(sp)
1c0037fe:	1b812403          	lw	s0,440(sp)
1c003802:	1b412483          	lw	s1,436(sp)
1c003806:	1b012903          	lw	s2,432(sp)
1c00380a:	1ac12983          	lw	s3,428(sp)
1c00380e:	1a812a03          	lw	s4,424(sp)
1c003812:	1a412a83          	lw	s5,420(sp)
1c003816:	6139                	addi	sp,sp,448
1c003818:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00381a:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00381e:	40442403          	lw	s0,1028(s0)
1c003822:	4686                	lw	a3,64(sp)
1c003824:	40d45433          	sra	s0,s0,a3
1c003828:	fc143433          	p.bclr	s0,s0,30,1
1c00382c:	c41d                	beqz	s0,1c00385a <SDD3Dto2DSoftmax_10_8_18+0x21c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00382e:	10000593          	li	a1,256
1c003832:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003836:	30061073          	csrw	mstatus,a2
1c00383a:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00383e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003842:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003846:	30047673          	csrrci	a2,mstatus,8
1c00384a:	40472783          	lw	a5,1028(a4)
1c00384e:	4686                	lw	a3,64(sp)
1c003850:	40d7d7b3          	sra	a5,a5,a3
1c003854:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003858:	fff9                	bnez	a5,1c003836 <SDD3Dto2DSoftmax_10_8_18+0x1f8>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00385a:	4785                	li	a5,1
1c00385c:	00d796b3          	sll	a3,a5,a3
1c003860:	002047b7          	lui	a5,0x204
1c003864:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003868:	30061073          	csrw	mstatus,a2
1c00386c:	b7b9                	j	1c0037ba <SDD3Dto2DSoftmax_10_8_18+0x17c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00386e:	30047673          	csrrci	a2,mstatus,8
1c003872:	4047a783          	lw	a5,1028(a5)
1c003876:	5682                	lw	a3,32(sp)
1c003878:	40d7d7b3          	sra	a5,a5,a3
1c00387c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003880:	c79d                	beqz	a5,1c0038ae <SDD3Dto2DSoftmax_10_8_18+0x270>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003882:	10000593          	li	a1,256
1c003886:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00388a:	30061073          	csrw	mstatus,a2
1c00388e:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003892:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003896:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00389a:	30047673          	csrrci	a2,mstatus,8
1c00389e:	40472783          	lw	a5,1028(a4)
1c0038a2:	5682                	lw	a3,32(sp)
1c0038a4:	40d7d7b3          	sra	a5,a5,a3
1c0038a8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0038ac:	fff9                	bnez	a5,1c00388a <SDD3Dto2DSoftmax_10_8_18+0x24c>
1c0038ae:	4785                	li	a5,1
1c0038b0:	00d796b3          	sll	a3,a5,a3
1c0038b4:	002047b7          	lui	a5,0x204
1c0038b8:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0038bc:	30061073          	csrw	mstatus,a2
1c0038c0:	b5ad                	j	1c00372a <SDD3Dto2DSoftmax_10_8_18+0xec>

1c0038c2 <SDD3Dto2D_10_8_24>:
		short * In,
		short * Out,
		unsigned char Q,
		unsigned short n_classes)

{
1c0038c2:	7121                	addi	sp,sp,-448
1c0038c4:	1b412423          	sw	s4,424(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[24x80], 2]
		Tile0: [0, 3840, 3840], Tile1: [0, 3840, 3840], Tile2; [0, 3840, 3840]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c0038c8:	10000a37          	lui	s4,0x10000
{
1c0038cc:	1b312623          	sw	s3,428(sp)
	KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c0038d0:	01ca0a13          	addi	s4,s4,28 # 1000001c <SSDKernels_L1_Memory>
	KerArg0->Wout = (unsigned int ) (24);
	KerArg0->Hout = (unsigned int ) (80);
	KerArg0->Q = (unsigned char) (Q);
	KerArg0->n_classes = (unsigned short) (n_classes);
	/*================================= Read Tiles Prolog ===============================*/
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 3840, 0, &UchanHR1);
1c0038d4:	1c0159b7          	lui	s3,0x1c015
	KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c0038d8:	000a2e03          	lw	t3,0(s4)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 3840, 0, &UchanHR1);
1c0038dc:	a7c98993          	addi	s3,s3,-1412 # 1c014a7c <SSDKernels_L2_Memory>
	KerArg0->Q = (unsigned char) (Q);
1c0038e0:	00c10e23          	sb	a2,28(sp)
	KerArg0->Out = (short * __restrict__) (SSDKernels_L1_Memory+3840);
1c0038e4:	6805                	lui	a6,0x1
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 3840, 0, &UchanHR1);
1c0038e6:	0009a603          	lw	a2,0(s3)
	KerArg0->Out = (short * __restrict__) (SSDKernels_L1_Memory+3840);
1c0038ea:	f0080813          	addi	a6,a6,-256 # f00 <__rt_stack_size+0x700>
{
1c0038ee:	1a912a23          	sw	s1,436(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 3840, 0, &UchanHR1);
1c0038f2:	1c0154b7          	lui	s1,0x1c015
	KerArg0->Win = (unsigned int ) (80);
1c0038f6:	05000893          	li	a7,80
	KerArg0->Hin = (unsigned int ) (24);
1c0038fa:	4361                	li	t1,24
{
1c0038fc:	1b212823          	sw	s2,432(sp)
	KerArg0->Out = (short * __restrict__) (SSDKernels_L1_Memory+3840);
1c003900:	010e0eb3          	add	t4,t3,a6
	KerArg0->n_classes = (unsigned short) (n_classes);
1c003904:	00d11f23          	sh	a3,30(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 3840, 0, &UchanHR1);
1c003908:	109c                	addi	a5,sp,96
{
1c00390a:	892e                	mv	s2,a1
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 3840, 0, &UchanHR1);
1c00390c:	4705                	li	a4,1
1c00390e:	85aa                	mv	a1,a0
1c003910:	86c2                	mv	a3,a6
1c003912:	fb048513          	addi	a0,s1,-80 # 1c014fb0 <HyperRam>
{
1c003916:	1a112e23          	sw	ra,444(sp)
1c00391a:	1a812c23          	sw	s0,440(sp)
1c00391e:	1b512223          	sw	s5,420(sp)
	KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c003922:	c272                	sw	t3,4(sp)
	KerArg0->Win = (unsigned int ) (80);
1c003924:	c446                	sw	a7,8(sp)
	KerArg0->Hin = (unsigned int ) (24);
1c003926:	c61a                	sw	t1,12(sp)
	KerArg0->Out = (short * __restrict__) (SSDKernels_L1_Memory+3840);
1c003928:	c876                	sw	t4,16(sp)
	KerArg0->Wout = (unsigned int ) (24);
1c00392a:	ca1a                	sw	t1,20(sp)
	KerArg0->Hout = (unsigned int ) (80);
1c00392c:	cc46                	sw	a7,24(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 3840, 0, &UchanHR1);
1c00392e:	6160b0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c003932:	0fc14783          	lbu	a5,252(sp)
1c003936:	0ff7f793          	andi	a5,a5,255
1c00393a:	ef99                	bnez	a5,1c003958 <SDD3Dto2D_10_8_24+0x96>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00393c:	4689                	li	a3,2
1c00393e:	00204737          	lui	a4,0x204
1c003942:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003946:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00394a:	00d72223          	sw	a3,4(a4)
1c00394e:	0fc14783          	lbu	a5,252(sp)
1c003952:	0ff7f793          	andi	a5,a5,255
1c003956:	d7f5                	beqz	a5,1c003942 <SDD3Dto2D_10_8_24+0x80>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA read In */
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+0), 3840, 0, &DmaR_Evt1);
1c003958:	0009a583          	lw	a1,0(s3)
1c00395c:	000a2503          	lw	a0,0(s4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003960:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003964:	002047b7          	lui	a5,0x204
1c003968:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00396c:	000b1737          	lui	a4,0xb1
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003970:	f0070713          	addi	a4,a4,-256 # b0f00 <__L2+0x30f00>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003974:	c1574733          	p.bset	a4,a4,0,21
1c003978:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00397c:	40a7a023          	sw	a0,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003980:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c003984:	d032                	sw	a2,32(sp)
        copy->length = 0;
1c003986:	d802                	sw	zero,48(sp)
  __builtin_pulp_spr_write(reg, val);
1c003988:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c00398c:	5742                	lw	a4,48(sp)
1c00398e:	16070063          	beqz	a4,1c003aee <SDD3Dto2D_10_8_24+0x22c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003992:	56e2                	lw	a3,56(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003994:	02000713          	li	a4,32
1c003998:	ca89                	beqz	a3,1c0039aa <SDD3Dto2D_10_8_24+0xe8>
1c00399a:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00399e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0039a2:	00e7a223          	sw	a4,4(a5)
1c0039a6:	56e2                	lw	a3,56(sp)
1c0039a8:	faed                	bnez	a3,1c00399a <SDD3Dto2D_10_8_24+0xd8>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0039aa:	0ff00793          	li	a5,255
1c0039ae:	00204437          	lui	s0,0x204
1c0039b2:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0039b6:	20040a93          	addi	s5,s0,512
1c0039ba:	00faa023          	sw	a5,0(s5)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0039be:	00faa623          	sw	a5,12(s5)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0039c2:	1c0057b7          	lui	a5,0x1c005
1c0039c6:	c2678793          	addi	a5,a5,-986 # 1c004c26 <KerSDD3Dto2DShort>
1c0039ca:	08f42023          	sw	a5,128(s0)
1c0039ce:	0048                	addi	a0,sp,4
1c0039d0:	08a42023          	sw	a0,128(s0)
1c0039d4:	252010ef          	jal	ra,1c004c26 <KerSDD3Dto2DShort>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0039d8:	01cae783          	p.elw	a5,28(s5)
		/*====================== Call Kernel LOC_LOOP =========================*/
		AT_FORK(gap_ncore(), (void *) KerSDD3Dto2DShort, (void *) KerArg0);
		__CALL(KerSDD3Dto2DShort, KerArg0);
	} /* End iteration on Tile0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+3840+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+3840), 3840, 1, &DmaW_Evt1);
1c0039dc:	6705                	lui	a4,0x1
1c0039de:	0009a683          	lw	a3,0(s3)
1c0039e2:	000a2603          	lw	a2,0(s4)
1c0039e6:	f0070713          	addi	a4,a4,-256 # f00 <__rt_stack_size+0x700>
1c0039ea:	96ba                	add	a3,a3,a4
1c0039ec:	963a                	add	a2,a2,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0039ee:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0039f2:	40042503          	lw	a0,1024(s0)
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c0039f6:	000207b7          	lui	a5,0x20
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0039fa:	de0727b3          	p.insert	a5,a4,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0039fe:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c003a02:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003a06:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003a0a:	40c42023          	sw	a2,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003a0e:	40d42023          	sw	a3,1024(s0)
        if (!merge) copy->id = id;
1c003a12:	c0aa                	sw	a0,64(sp)
        copy->length = 0;
1c003a14:	c882                	sw	zero,80(sp)
  __builtin_pulp_spr_write(reg, val);
1c003a16:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c003a1a:	47c6                	lw	a5,80(sp)
1c003a1c:	cfbd                	beqz	a5,1c003a9a <SDD3Dto2D_10_8_24+0x1d8>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003a1e:	46e6                	lw	a3,88(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003a20:	02000713          	li	a4,32
1c003a24:	002047b7          	lui	a5,0x204
1c003a28:	ca89                	beqz	a3,1c003a3a <SDD3Dto2D_10_8_24+0x178>
1c003a2a:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003a2e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003a32:	00e7a223          	sw	a4,4(a5)
1c003a36:	46e6                	lw	a3,88(sp)
1c003a38:	faed                	bnez	a3,1c003a2a <SDD3Dto2D_10_8_24+0x168>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+3840+0), 3840, 1, &UchanHR2);
1c003a3a:	0009a603          	lw	a2,0(s3)
1c003a3e:	6685                	lui	a3,0x1
1c003a40:	f0068693          	addi	a3,a3,-256 # f00 <__rt_stack_size+0x700>
1c003a44:	021c                	addi	a5,sp,256
1c003a46:	4701                	li	a4,0
1c003a48:	9636                	add	a2,a2,a3
1c003a4a:	85ca                	mv	a1,s2
1c003a4c:	fb048513          	addi	a0,s1,-80
1c003a50:	4f40b0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c003a54:	19c14783          	lbu	a5,412(sp)
1c003a58:	0ff7f793          	andi	a5,a5,255
1c003a5c:	ef99                	bnez	a5,1c003a7a <SDD3Dto2D_10_8_24+0x1b8>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003a5e:	4689                	li	a3,2
1c003a60:	00204737          	lui	a4,0x204
1c003a64:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003a68:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003a6c:	00d72223          	sw	a3,4(a4)
1c003a70:	19c14783          	lbu	a5,412(sp)
1c003a74:	0ff7f793          	andi	a5,a5,255
1c003a78:	d7f5                	beqz	a5,1c003a64 <SDD3Dto2D_10_8_24+0x1a2>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2); /* Wait previous uDMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c003a7a:	1bc12083          	lw	ra,444(sp)
1c003a7e:	1b812403          	lw	s0,440(sp)
1c003a82:	1b412483          	lw	s1,436(sp)
1c003a86:	1b012903          	lw	s2,432(sp)
1c003a8a:	1ac12983          	lw	s3,428(sp)
1c003a8e:	1a812a03          	lw	s4,424(sp)
1c003a92:	1a412a83          	lw	s5,420(sp)
1c003a96:	6139                	addi	sp,sp,448
1c003a98:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003a9a:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003a9e:	40442403          	lw	s0,1028(s0)
1c003aa2:	4686                	lw	a3,64(sp)
1c003aa4:	40d45433          	sra	s0,s0,a3
1c003aa8:	fc143433          	p.bclr	s0,s0,30,1
1c003aac:	c41d                	beqz	s0,1c003ada <SDD3Dto2D_10_8_24+0x218>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003aae:	10000593          	li	a1,256
1c003ab2:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003ab6:	30061073          	csrw	mstatus,a2
1c003aba:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003abe:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003ac2:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003ac6:	30047673          	csrrci	a2,mstatus,8
1c003aca:	40472783          	lw	a5,1028(a4)
1c003ace:	4686                	lw	a3,64(sp)
1c003ad0:	40d7d7b3          	sra	a5,a5,a3
1c003ad4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003ad8:	fff9                	bnez	a5,1c003ab6 <SDD3Dto2D_10_8_24+0x1f4>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003ada:	4785                	li	a5,1
1c003adc:	00d796b3          	sll	a3,a5,a3
1c003ae0:	002047b7          	lui	a5,0x204
1c003ae4:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003ae8:	30061073          	csrw	mstatus,a2
1c003aec:	b7b9                	j	1c003a3a <SDD3Dto2D_10_8_24+0x178>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003aee:	30047673          	csrrci	a2,mstatus,8
1c003af2:	4047a783          	lw	a5,1028(a5)
1c003af6:	5682                	lw	a3,32(sp)
1c003af8:	40d7d7b3          	sra	a5,a5,a3
1c003afc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003b00:	c79d                	beqz	a5,1c003b2e <SDD3Dto2D_10_8_24+0x26c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003b02:	10000593          	li	a1,256
1c003b06:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003b0a:	30061073          	csrw	mstatus,a2
1c003b0e:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003b12:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003b16:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003b1a:	30047673          	csrrci	a2,mstatus,8
1c003b1e:	40472783          	lw	a5,1028(a4)
1c003b22:	5682                	lw	a3,32(sp)
1c003b24:	40d7d7b3          	sra	a5,a5,a3
1c003b28:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003b2c:	fff9                	bnez	a5,1c003b0a <SDD3Dto2D_10_8_24+0x248>
1c003b2e:	4785                	li	a5,1
1c003b30:	00d796b3          	sll	a3,a5,a3
1c003b34:	002047b7          	lui	a5,0x204
1c003b38:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003b3c:	30061073          	csrw	mstatus,a2
1c003b40:	b5ad                	j	1c0039aa <SDD3Dto2D_10_8_24+0xe8>

1c003b42 <Predecoder10_8>:
		short * Boxes,
		void  * Ancor_layer,
		void  * BoundingBoxes,
		int Boxes_Q)

{
1c003b42:	7145                	addi	sp,sp,-464
1c003b44:	1c912223          	sw	s1,452(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[4x480], 2]
		Tile0: [0, 3840, 3840], Tile1: [0, 3840, 3840], Tile2; [0, 3840, 3840]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Classes = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c003b48:	100004b7          	lui	s1,0x10000
{
1c003b4c:	1c812423          	sw	s0,456(sp)
	KerArg0->Classes = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c003b50:	01c48493          	addi	s1,s1,28 # 1000001c <SSDKernels_L1_Memory>
	KerArg0->Ancor_layer = (void  * __restrict__) (Ancor_layer);
	KerArg0->BoundingBoxes = (void  * __restrict__) (BoundingBoxes);
	KerArg0->Boxes_Q = (int) (Boxes_Q);
	KerArg0->n_classes = (unsigned int ) (3);
	/*================================= Read Tiles Prolog ===============================*/
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 2880, 0, &UchanHR1);
1c003b54:	1c015437          	lui	s0,0x1c015
	KerArg0->Classes = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c003b58:	0004ae03          	lw	t3,0(s1)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 2880, 0, &UchanHR1);
1c003b5c:	a7c40413          	addi	s0,s0,-1412 # 1c014a7c <SSDKernels_L2_Memory>
	KerArg0->Ancor_layer = (void  * __restrict__) (Ancor_layer);
1c003b60:	d0b2                	sw	a2,96(sp)
	KerArg0->Boxes = (short * __restrict__) (SSDKernels_L1_Memory+2880);
1c003b62:	6805                	lui	a6,0x1
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 2880, 0, &UchanHR1);
1c003b64:	4010                	lw	a2,0(s0)
	KerArg0->Boxes = (short * __restrict__) (SSDKernels_L1_Memory+2880);
1c003b66:	b4080813          	addi	a6,a6,-1216 # b40 <__rt_stack_size+0x340>
{
1c003b6a:	1d212023          	sw	s2,448(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 2880, 0, &UchanHR1);
1c003b6e:	1c015937          	lui	s2,0x1c015
	KerArg0->Classes_W = (unsigned int ) (3);
1c003b72:	488d                	li	a7,3
	KerArg0->Classes_H = (unsigned int ) (480);
1c003b74:	1e000313          	li	t1,480
{
1c003b78:	1b312e23          	sw	s3,444(sp)
	KerArg0->Boxes = (short * __restrict__) (SSDKernels_L1_Memory+2880);
1c003b7c:	010e0eb3          	add	t4,t3,a6
	KerArg0->BoundingBoxes = (void  * __restrict__) (BoundingBoxes);
1c003b80:	d2b6                	sw	a3,100(sp)
	KerArg0->Boxes_Q = (int) (Boxes_Q);
1c003b82:	d4ba                	sw	a4,104(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 2880, 0, &UchanHR1);
1c003b84:	189c                	addi	a5,sp,112
{
1c003b86:	89ae                	mv	s3,a1
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 2880, 0, &UchanHR1);
1c003b88:	4705                	li	a4,1
1c003b8a:	85aa                	mv	a1,a0
1c003b8c:	86c2                	mv	a3,a6
1c003b8e:	fb090513          	addi	a0,s2,-80 # 1c014fb0 <HyperRam>
{
1c003b92:	1c112623          	sw	ra,460(sp)
	KerArg0->Classes = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c003b96:	c4f2                	sw	t3,72(sp)
	KerArg0->Boxes = (short * __restrict__) (SSDKernels_L1_Memory+2880);
1c003b98:	c6f6                	sw	t4,76(sp)
	KerArg0->Classes_W = (unsigned int ) (3);
1c003b9a:	c8c6                	sw	a7,80(sp)
	KerArg0->Classes_H = (unsigned int ) (480);
1c003b9c:	ca9a                	sw	t1,84(sp)
	KerArg0->Classes_TileIndex = (unsigned int ) ((0));
1c003b9e:	cc82                	sw	zero,88(sp)
	KerArg0->Classes_Std_H = (unsigned int ) (480);
1c003ba0:	ce9a                	sw	t1,92(sp)
	KerArg0->n_classes = (unsigned int ) (3);
1c003ba2:	d6c6                	sw	a7,108(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 2880, 0, &UchanHR1);
1c003ba4:	3a00b0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c003ba8:	10c14783          	lbu	a5,268(sp)
1c003bac:	0ff7f793          	andi	a5,a5,255
1c003bb0:	ef99                	bnez	a5,1c003bce <Predecoder10_8+0x8c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003bb2:	4689                	li	a3,2
1c003bb4:	00204737          	lui	a4,0x204
1c003bb8:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003bbc:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003bc0:	00d72223          	sw	a3,4(a4)
1c003bc4:	10c14783          	lbu	a5,268(sp)
1c003bc8:	0ff7f793          	andi	a5,a5,255
1c003bcc:	d7f5                	beqz	a5,1c003bb8 <Predecoder10_8+0x76>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA read Classes */
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+0), 2880, 0, &DmaR_Evt1);
1c003bce:	400c                	lw	a1,0(s0)
1c003bd0:	4088                	lw	a0,0(s1)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003bd2:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003bd6:	002047b7          	lui	a5,0x204
1c003bda:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003bde:	00031737          	lui	a4,0x31
1c003be2:	b4070713          	addi	a4,a4,-1216 # 30b40 <__L1Cl+0x20b40>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003be6:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003bea:	c1574733          	p.bset	a4,a4,0,21
1c003bee:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003bf2:	40a7a023          	sw	a0,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003bf6:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c003bfa:	c432                	sw	a2,8(sp)
        copy->length = 0;
1c003bfc:	cc02                	sw	zero,24(sp)
  __builtin_pulp_spr_write(reg, val);
1c003bfe:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c003c02:	4762                	lw	a4,24(sp)
1c003c04:	14070963          	beqz	a4,1c003d56 <Predecoder10_8+0x214>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003c08:	5682                	lw	a3,32(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003c0a:	02000713          	li	a4,32
1c003c0e:	ca89                	beqz	a3,1c003c20 <Predecoder10_8+0xde>
1c003c10:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003c14:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003c18:	00e7a223          	sw	a4,4(a5)
1c003c1c:	5682                	lw	a3,32(sp)
1c003c1e:	faed                	bnez	a3,1c003c10 <Predecoder10_8+0xce>
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Classes */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Boxes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+2880+0), 3840, 0, &UchanHR2);
1c003c20:	400c                	lw	a1,0(s0)
1c003c22:	6685                	lui	a3,0x1
1c003c24:	b4068613          	addi	a2,a3,-1216 # b40 <__rt_stack_size+0x340>
1c003c28:	0a1c                	addi	a5,sp,272
1c003c2a:	962e                	add	a2,a2,a1
1c003c2c:	4705                	li	a4,1
1c003c2e:	f0068693          	addi	a3,a3,-256
1c003c32:	85ce                	mv	a1,s3
1c003c34:	fb090513          	addi	a0,s2,-80
1c003c38:	30c0b0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c003c3c:	1ac14783          	lbu	a5,428(sp)
1c003c40:	0ff7f793          	andi	a5,a5,255
1c003c44:	ef99                	bnez	a5,1c003c62 <Predecoder10_8+0x120>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003c46:	4689                	li	a3,2
1c003c48:	00204737          	lui	a4,0x204
1c003c4c:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003c50:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003c54:	00d72223          	sw	a3,4(a4)
1c003c58:	1ac14783          	lbu	a5,428(sp)
1c003c5c:	0ff7f793          	andi	a5,a5,255
1c003c60:	d7f5                	beqz	a5,1c003c4c <Predecoder10_8+0x10a>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2); /* Wait previous uDMA read Boxes */
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+2880+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+2880), 3840, 0, &DmaR_Evt2);
1c003c62:	4014                	lw	a3,0(s0)
1c003c64:	4090                	lw	a2,0(s1)
1c003c66:	6785                	lui	a5,0x1
1c003c68:	b4078793          	addi	a5,a5,-1216 # b40 <__rt_stack_size+0x340>
1c003c6c:	96be                	add	a3,a3,a5
1c003c6e:	963e                	add	a2,a2,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003c70:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003c74:	002047b7          	lui	a5,0x204
1c003c78:	4007a503          	lw	a0,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003c7c:	000b1737          	lui	a4,0xb1
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003c80:	f0070713          	addi	a4,a4,-256 # b0f00 <__L2+0x30f00>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003c84:	c1574733          	p.bset	a4,a4,0,21
1c003c88:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003c8c:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003c90:	40d7a023          	sw	a3,1024(a5)
        if (!merge) copy->id = id;
1c003c94:	d42a                	sw	a0,40(sp)
        copy->length = 0;
1c003c96:	dc02                	sw	zero,56(sp)
  __builtin_pulp_spr_write(reg, val);
1c003c98:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c003c9c:	5762                	lw	a4,56(sp)
1c003c9e:	c335                	beqz	a4,1c003d02 <Predecoder10_8+0x1c0>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003ca0:	4686                	lw	a3,64(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003ca2:	02000713          	li	a4,32
1c003ca6:	ca89                	beqz	a3,1c003cb8 <Predecoder10_8+0x176>
1c003ca8:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003cac:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003cb0:	00e7a223          	sw	a4,4(a5)
1c003cb4:	4686                	lw	a3,64(sp)
1c003cb6:	faed                	bnez	a3,1c003ca8 <Predecoder10_8+0x166>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c003cb8:	0ff00713          	li	a4,255
1c003cbc:	002047b7          	lui	a5,0x204
1c003cc0:	08e7a223          	sw	a4,132(a5) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c003cc4:	20078413          	addi	s0,a5,512
1c003cc8:	00e42023          	sw	a4,0(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c003ccc:	00e42623          	sw	a4,12(s0)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c003cd0:	1c005737          	lui	a4,0x1c005
1c003cd4:	f3e70713          	addi	a4,a4,-194 # 1c004f3e <KerPredecoderShort>
1c003cd8:	08e7a023          	sw	a4,128(a5)
1c003cdc:	00a8                	addi	a0,sp,72
1c003cde:	08a7a023          	sw	a0,128(a5)
1c003ce2:	25c010ef          	jal	ra,1c004f3e <KerPredecoderShort>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003ce6:	01c46783          	p.elw	a5,28(s0)
		int T0Ind_Last = 1;
		/*====================== Call Kernel LOC_LOOP =========================*/
		AT_FORK(gap_ncore(), (void *) KerPredecoderShort, (void *) KerArg0);
		__CALL(KerPredecoderShort, KerArg0);
	} /* End iteration on Tile0 */
}
1c003cea:	1cc12083          	lw	ra,460(sp)
1c003cee:	1c812403          	lw	s0,456(sp)
1c003cf2:	1c412483          	lw	s1,452(sp)
1c003cf6:	1c012903          	lw	s2,448(sp)
1c003cfa:	1bc12983          	lw	s3,444(sp)
1c003cfe:	6179                	addi	sp,sp,464
1c003d00:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003d02:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003d06:	4047a783          	lw	a5,1028(a5)
1c003d0a:	56a2                	lw	a3,40(sp)
1c003d0c:	40d7d7b3          	sra	a5,a5,a3
1c003d10:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003d14:	c79d                	beqz	a5,1c003d42 <Predecoder10_8+0x200>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003d16:	10000593          	li	a1,256
1c003d1a:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003d1e:	30061073          	csrw	mstatus,a2
1c003d22:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003d26:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003d2a:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003d2e:	30047673          	csrrci	a2,mstatus,8
1c003d32:	40472783          	lw	a5,1028(a4)
1c003d36:	56a2                	lw	a3,40(sp)
1c003d38:	40d7d7b3          	sra	a5,a5,a3
1c003d3c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003d40:	fff9                	bnez	a5,1c003d1e <Predecoder10_8+0x1dc>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003d42:	4785                	li	a5,1
1c003d44:	00d796b3          	sll	a3,a5,a3
1c003d48:	002047b7          	lui	a5,0x204
1c003d4c:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003d50:	30061073          	csrw	mstatus,a2
1c003d54:	b795                	j	1c003cb8 <Predecoder10_8+0x176>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003d56:	30047673          	csrrci	a2,mstatus,8
1c003d5a:	4047a783          	lw	a5,1028(a5)
1c003d5e:	46a2                	lw	a3,8(sp)
1c003d60:	40d7d7b3          	sra	a5,a5,a3
1c003d64:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003d68:	c79d                	beqz	a5,1c003d96 <Predecoder10_8+0x254>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003d6a:	10000593          	li	a1,256
1c003d6e:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003d72:	30061073          	csrw	mstatus,a2
1c003d76:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003d7a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003d7e:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003d82:	30047673          	csrrci	a2,mstatus,8
1c003d86:	40472783          	lw	a5,1028(a4)
1c003d8a:	46a2                	lw	a3,8(sp)
1c003d8c:	40d7d7b3          	sra	a5,a5,a3
1c003d90:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003d94:	fff9                	bnez	a5,1c003d72 <Predecoder10_8+0x230>
1c003d96:	4785                	li	a5,1
1c003d98:	00d796b3          	sll	a3,a5,a3
1c003d9c:	002047b7          	lui	a5,0x204
1c003da0:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003da4:	30061073          	csrw	mstatus,a2
1c003da8:	bda5                	j	1c003c20 <Predecoder10_8+0xde>

1c003daa <SDD3Dto2DSoftmax_5_4_18>:
		short * In,
		short * Out,
		unsigned char Q,
		unsigned short n_classes)

{
1c003daa:	7121                	addi	sp,sp,-448
1c003dac:	1b412423          	sw	s4,424(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[18x20], 2]
		Tile0: [0, 720, 720], Tile1: [0, 720, 720], Tile2; [0, 720, 720]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c003db0:	10000a37          	lui	s4,0x10000
{
1c003db4:	1b312623          	sw	s3,428(sp)
	KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c003db8:	01ca0a13          	addi	s4,s4,28 # 1000001c <SSDKernels_L1_Memory>
	KerArg0->Wout = (unsigned int ) (18);
	KerArg0->Hout = (unsigned int ) (20);
	KerArg0->Q = (unsigned char) (Q);
	KerArg0->n_classes = (unsigned short) (n_classes);
	/*================================= Read Tiles Prolog ===============================*/
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 720, 0, &UchanHR1);
1c003dbc:	1c0159b7          	lui	s3,0x1c015
	KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c003dc0:	000a2303          	lw	t1,0(s4)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 720, 0, &UchanHR1);
1c003dc4:	a7c98993          	addi	s3,s3,-1412 # 1c014a7c <SSDKernels_L2_Memory>
	KerArg0->Q = (unsigned char) (Q);
1c003dc8:	00c10e23          	sb	a2,28(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 720, 0, &UchanHR1);
1c003dcc:	0009a603          	lw	a2,0(s3)
{
1c003dd0:	1a912a23          	sw	s1,436(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 720, 0, &UchanHR1);
1c003dd4:	1c0154b7          	lui	s1,0x1c015
	KerArg0->Win = (unsigned int ) (20);
1c003dd8:	4851                	li	a6,20
	KerArg0->Hin = (unsigned int ) (18);
1c003dda:	48c9                	li	a7,18
{
1c003ddc:	1b212823          	sw	s2,432(sp)
	KerArg0->Out = (short * __restrict__) (SSDKernels_L1_Memory+720);
1c003de0:	2d030e13          	addi	t3,t1,720
	KerArg0->n_classes = (unsigned short) (n_classes);
1c003de4:	00d11f23          	sh	a3,30(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 720, 0, &UchanHR1);
1c003de8:	109c                	addi	a5,sp,96
{
1c003dea:	892e                	mv	s2,a1
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 720, 0, &UchanHR1);
1c003dec:	4705                	li	a4,1
1c003dee:	85aa                	mv	a1,a0
1c003df0:	2d000693          	li	a3,720
1c003df4:	fb048513          	addi	a0,s1,-80 # 1c014fb0 <HyperRam>
{
1c003df8:	1a112e23          	sw	ra,444(sp)
1c003dfc:	1a812c23          	sw	s0,440(sp)
1c003e00:	1b512223          	sw	s5,420(sp)
	KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c003e04:	c21a                	sw	t1,4(sp)
	KerArg0->Win = (unsigned int ) (20);
1c003e06:	c442                	sw	a6,8(sp)
	KerArg0->Hin = (unsigned int ) (18);
1c003e08:	c646                	sw	a7,12(sp)
	KerArg0->Out = (short * __restrict__) (SSDKernels_L1_Memory+720);
1c003e0a:	c872                	sw	t3,16(sp)
	KerArg0->Wout = (unsigned int ) (18);
1c003e0c:	ca46                	sw	a7,20(sp)
	KerArg0->Hout = (unsigned int ) (20);
1c003e0e:	cc42                	sw	a6,24(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 720, 0, &UchanHR1);
1c003e10:	1340b0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c003e14:	0fc14783          	lbu	a5,252(sp)
1c003e18:	0ff7f793          	andi	a5,a5,255
1c003e1c:	ef99                	bnez	a5,1c003e3a <SDD3Dto2DSoftmax_5_4_18+0x90>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003e1e:	4689                	li	a3,2
1c003e20:	00204737          	lui	a4,0x204
1c003e24:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003e28:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003e2c:	00d72223          	sw	a3,4(a4)
1c003e30:	0fc14783          	lbu	a5,252(sp)
1c003e34:	0ff7f793          	andi	a5,a5,255
1c003e38:	d7f5                	beqz	a5,1c003e24 <SDD3Dto2DSoftmax_5_4_18+0x7a>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA read In */
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+0), 720, 0, &DmaR_Evt1);
1c003e3a:	0009a583          	lw	a1,0(s3)
1c003e3e:	000a2503          	lw	a0,0(s4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003e42:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003e46:	002047b7          	lui	a5,0x204
1c003e4a:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003e4e:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003e52:	2d070713          	addi	a4,a4,720 # b02d0 <__L2+0x302d0>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003e56:	c1574733          	p.bset	a4,a4,0,21
1c003e5a:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003e5e:	40a7a023          	sw	a0,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003e62:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c003e66:	d032                	sw	a2,32(sp)
        copy->length = 0;
1c003e68:	d802                	sw	zero,48(sp)
  __builtin_pulp_spr_write(reg, val);
1c003e6a:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c003e6e:	5742                	lw	a4,48(sp)
1c003e70:	14070d63          	beqz	a4,1c003fca <SDD3Dto2DSoftmax_5_4_18+0x220>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003e74:	56e2                	lw	a3,56(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003e76:	02000713          	li	a4,32
1c003e7a:	ca89                	beqz	a3,1c003e8c <SDD3Dto2DSoftmax_5_4_18+0xe2>
1c003e7c:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003e80:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003e84:	00e7a223          	sw	a4,4(a5)
1c003e88:	56e2                	lw	a3,56(sp)
1c003e8a:	faed                	bnez	a3,1c003e7c <SDD3Dto2DSoftmax_5_4_18+0xd2>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c003e8c:	0ff00793          	li	a5,255
1c003e90:	00204437          	lui	s0,0x204
1c003e94:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c003e98:	20040a93          	addi	s5,s0,512
1c003e9c:	00faa023          	sw	a5,0(s5)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c003ea0:	00faa623          	sw	a5,12(s5)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c003ea4:	1c0057b7          	lui	a5,0x1c005
1c003ea8:	c2678793          	addi	a5,a5,-986 # 1c004c26 <KerSDD3Dto2DShort>
1c003eac:	08f42023          	sw	a5,128(s0)
1c003eb0:	0048                	addi	a0,sp,4
1c003eb2:	08a42023          	sw	a0,128(s0)
1c003eb6:	571000ef          	jal	ra,1c004c26 <KerSDD3Dto2DShort>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003eba:	01cae783          	p.elw	a5,28(s5)
		/*====================== Call Kernel LOC_LOOP =========================*/
		AT_FORK(gap_ncore(), (void *) KerSDD3Dto2DShort, (void *) KerArg0);
		__CALL(KerSDD3Dto2DShort, KerArg0);
	} /* End iteration on Tile0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+720+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+720), 720, 1, &DmaW_Evt1);
1c003ebe:	0009a703          	lw	a4,0(s3)
1c003ec2:	000a2683          	lw	a3,0(s4)
1c003ec6:	2d070713          	addi	a4,a4,720
1c003eca:	2d068693          	addi	a3,a3,720
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003ece:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003ed2:	40042583          	lw	a1,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003ed6:	000a07b7          	lui	a5,0xa0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003eda:	2d078793          	addi	a5,a5,720 # a02d0 <__L2+0x202d0>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003ede:	c157c7b3          	p.bset	a5,a5,0,21
1c003ee2:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003ee6:	40d42023          	sw	a3,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003eea:	40e42023          	sw	a4,1024(s0)
        if (!merge) copy->id = id;
1c003eee:	c0ae                	sw	a1,64(sp)
        copy->length = 0;
1c003ef0:	c882                	sw	zero,80(sp)
  __builtin_pulp_spr_write(reg, val);
1c003ef2:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c003ef6:	47c6                	lw	a5,80(sp)
1c003ef8:	cfbd                	beqz	a5,1c003f76 <SDD3Dto2DSoftmax_5_4_18+0x1cc>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003efa:	46e6                	lw	a3,88(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003efc:	02000713          	li	a4,32
1c003f00:	002047b7          	lui	a5,0x204
1c003f04:	ca89                	beqz	a3,1c003f16 <SDD3Dto2DSoftmax_5_4_18+0x16c>
1c003f06:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003f0a:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003f0e:	00e7a223          	sw	a4,4(a5)
1c003f12:	46e6                	lw	a3,88(sp)
1c003f14:	faed                	bnez	a3,1c003f06 <SDD3Dto2DSoftmax_5_4_18+0x15c>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+720+0), 720, 1, &UchanHR2);
1c003f16:	0009a603          	lw	a2,0(s3)
1c003f1a:	021c                	addi	a5,sp,256
1c003f1c:	4701                	li	a4,0
1c003f1e:	2d000693          	li	a3,720
1c003f22:	2d060613          	addi	a2,a2,720
1c003f26:	85ca                	mv	a1,s2
1c003f28:	fb048513          	addi	a0,s1,-80
1c003f2c:	0180b0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c003f30:	19c14783          	lbu	a5,412(sp)
1c003f34:	0ff7f793          	andi	a5,a5,255
1c003f38:	ef99                	bnez	a5,1c003f56 <SDD3Dto2DSoftmax_5_4_18+0x1ac>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003f3a:	4689                	li	a3,2
1c003f3c:	00204737          	lui	a4,0x204
1c003f40:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003f44:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003f48:	00d72223          	sw	a3,4(a4)
1c003f4c:	19c14783          	lbu	a5,412(sp)
1c003f50:	0ff7f793          	andi	a5,a5,255
1c003f54:	d7f5                	beqz	a5,1c003f40 <SDD3Dto2DSoftmax_5_4_18+0x196>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2); /* Wait previous uDMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c003f56:	1bc12083          	lw	ra,444(sp)
1c003f5a:	1b812403          	lw	s0,440(sp)
1c003f5e:	1b412483          	lw	s1,436(sp)
1c003f62:	1b012903          	lw	s2,432(sp)
1c003f66:	1ac12983          	lw	s3,428(sp)
1c003f6a:	1a812a03          	lw	s4,424(sp)
1c003f6e:	1a412a83          	lw	s5,420(sp)
1c003f72:	6139                	addi	sp,sp,448
1c003f74:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003f76:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003f7a:	40442403          	lw	s0,1028(s0)
1c003f7e:	4686                	lw	a3,64(sp)
1c003f80:	40d45433          	sra	s0,s0,a3
1c003f84:	fc143433          	p.bclr	s0,s0,30,1
1c003f88:	c41d                	beqz	s0,1c003fb6 <SDD3Dto2DSoftmax_5_4_18+0x20c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003f8a:	10000593          	li	a1,256
1c003f8e:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003f92:	30061073          	csrw	mstatus,a2
1c003f96:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003f9a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003f9e:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003fa2:	30047673          	csrrci	a2,mstatus,8
1c003fa6:	40472783          	lw	a5,1028(a4)
1c003faa:	4686                	lw	a3,64(sp)
1c003fac:	40d7d7b3          	sra	a5,a5,a3
1c003fb0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003fb4:	fff9                	bnez	a5,1c003f92 <SDD3Dto2DSoftmax_5_4_18+0x1e8>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003fb6:	4785                	li	a5,1
1c003fb8:	00d796b3          	sll	a3,a5,a3
1c003fbc:	002047b7          	lui	a5,0x204
1c003fc0:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003fc4:	30061073          	csrw	mstatus,a2
1c003fc8:	b7b9                	j	1c003f16 <SDD3Dto2DSoftmax_5_4_18+0x16c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003fca:	30047673          	csrrci	a2,mstatus,8
1c003fce:	4047a783          	lw	a5,1028(a5)
1c003fd2:	5682                	lw	a3,32(sp)
1c003fd4:	40d7d7b3          	sra	a5,a5,a3
1c003fd8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003fdc:	c79d                	beqz	a5,1c00400a <SDD3Dto2DSoftmax_5_4_18+0x260>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003fde:	10000593          	li	a1,256
1c003fe2:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003fe6:	30061073          	csrw	mstatus,a2
1c003fea:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003fee:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003ff2:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003ff6:	30047673          	csrrci	a2,mstatus,8
1c003ffa:	40472783          	lw	a5,1028(a4)
1c003ffe:	5682                	lw	a3,32(sp)
1c004000:	40d7d7b3          	sra	a5,a5,a3
1c004004:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004008:	fff9                	bnez	a5,1c003fe6 <SDD3Dto2DSoftmax_5_4_18+0x23c>
1c00400a:	4785                	li	a5,1
1c00400c:	00d796b3          	sll	a3,a5,a3
1c004010:	002047b7          	lui	a5,0x204
1c004014:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c004018:	30061073          	csrw	mstatus,a2
1c00401c:	bd85                	j	1c003e8c <SDD3Dto2DSoftmax_5_4_18+0xe2>

1c00401e <SDD3Dto2D_5_4_24>:
		short * In,
		short * Out,
		unsigned char Q,
		unsigned short n_classes)

{
1c00401e:	7121                	addi	sp,sp,-448
1c004020:	1b412423          	sw	s4,424(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[24x20], 2]
		Tile0: [0, 960, 960], Tile1: [0, 960, 960], Tile2; [0, 960, 960]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c004024:	10000a37          	lui	s4,0x10000
{
1c004028:	1b312623          	sw	s3,428(sp)
	KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c00402c:	01ca0a13          	addi	s4,s4,28 # 1000001c <SSDKernels_L1_Memory>
	KerArg0->Wout = (unsigned int ) (24);
	KerArg0->Hout = (unsigned int ) (20);
	KerArg0->Q = (unsigned char) (Q);
	KerArg0->n_classes = (unsigned short) (n_classes);
	/*================================= Read Tiles Prolog ===============================*/
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 960, 0, &UchanHR1);
1c004030:	1c0159b7          	lui	s3,0x1c015
	KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c004034:	000a2303          	lw	t1,0(s4)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 960, 0, &UchanHR1);
1c004038:	a7c98993          	addi	s3,s3,-1412 # 1c014a7c <SSDKernels_L2_Memory>
	KerArg0->Q = (unsigned char) (Q);
1c00403c:	00c10e23          	sb	a2,28(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 960, 0, &UchanHR1);
1c004040:	0009a603          	lw	a2,0(s3)
{
1c004044:	1a912a23          	sw	s1,436(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 960, 0, &UchanHR1);
1c004048:	1c0154b7          	lui	s1,0x1c015
	KerArg0->Win = (unsigned int ) (20);
1c00404c:	4851                	li	a6,20
	KerArg0->Hin = (unsigned int ) (24);
1c00404e:	48e1                	li	a7,24
{
1c004050:	1b212823          	sw	s2,432(sp)
	KerArg0->Out = (short * __restrict__) (SSDKernels_L1_Memory+960);
1c004054:	3c030e13          	addi	t3,t1,960
	KerArg0->n_classes = (unsigned short) (n_classes);
1c004058:	00d11f23          	sh	a3,30(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 960, 0, &UchanHR1);
1c00405c:	109c                	addi	a5,sp,96
{
1c00405e:	892e                	mv	s2,a1
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 960, 0, &UchanHR1);
1c004060:	4705                	li	a4,1
1c004062:	85aa                	mv	a1,a0
1c004064:	3c000693          	li	a3,960
1c004068:	fb048513          	addi	a0,s1,-80 # 1c014fb0 <HyperRam>
{
1c00406c:	1a112e23          	sw	ra,444(sp)
1c004070:	1a812c23          	sw	s0,440(sp)
1c004074:	1b512223          	sw	s5,420(sp)
	KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c004078:	c21a                	sw	t1,4(sp)
	KerArg0->Win = (unsigned int ) (20);
1c00407a:	c442                	sw	a6,8(sp)
	KerArg0->Hin = (unsigned int ) (24);
1c00407c:	c646                	sw	a7,12(sp)
	KerArg0->Out = (short * __restrict__) (SSDKernels_L1_Memory+960);
1c00407e:	c872                	sw	t3,16(sp)
	KerArg0->Wout = (unsigned int ) (24);
1c004080:	ca46                	sw	a7,20(sp)
	KerArg0->Hout = (unsigned int ) (20);
1c004082:	cc42                	sw	a6,24(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 960, 0, &UchanHR1);
1c004084:	6c10a0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c004088:	0fc14783          	lbu	a5,252(sp)
1c00408c:	0ff7f793          	andi	a5,a5,255
1c004090:	ef99                	bnez	a5,1c0040ae <SDD3Dto2D_5_4_24+0x90>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004092:	4689                	li	a3,2
1c004094:	00204737          	lui	a4,0x204
1c004098:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00409c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0040a0:	00d72223          	sw	a3,4(a4)
1c0040a4:	0fc14783          	lbu	a5,252(sp)
1c0040a8:	0ff7f793          	andi	a5,a5,255
1c0040ac:	d7f5                	beqz	a5,1c004098 <SDD3Dto2D_5_4_24+0x7a>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA read In */
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+0), 960, 0, &DmaR_Evt1);
1c0040ae:	0009a583          	lw	a1,0(s3)
1c0040b2:	000a2503          	lw	a0,0(s4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0040b6:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0040ba:	002047b7          	lui	a5,0x204
1c0040be:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0040c2:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0040c6:	3c070713          	addi	a4,a4,960 # b03c0 <__L2+0x303c0>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0040ca:	c1574733          	p.bset	a4,a4,0,21
1c0040ce:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0040d2:	40a7a023          	sw	a0,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0040d6:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c0040da:	d032                	sw	a2,32(sp)
        copy->length = 0;
1c0040dc:	d802                	sw	zero,48(sp)
  __builtin_pulp_spr_write(reg, val);
1c0040de:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c0040e2:	5742                	lw	a4,48(sp)
1c0040e4:	14070d63          	beqz	a4,1c00423e <SDD3Dto2D_5_4_24+0x220>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0040e8:	56e2                	lw	a3,56(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0040ea:	02000713          	li	a4,32
1c0040ee:	ca89                	beqz	a3,1c004100 <SDD3Dto2D_5_4_24+0xe2>
1c0040f0:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0040f4:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0040f8:	00e7a223          	sw	a4,4(a5)
1c0040fc:	56e2                	lw	a3,56(sp)
1c0040fe:	faed                	bnez	a3,1c0040f0 <SDD3Dto2D_5_4_24+0xd2>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c004100:	0ff00793          	li	a5,255
1c004104:	00204437          	lui	s0,0x204
1c004108:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00410c:	20040a93          	addi	s5,s0,512
1c004110:	00faa023          	sw	a5,0(s5)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c004114:	00faa623          	sw	a5,12(s5)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c004118:	1c0057b7          	lui	a5,0x1c005
1c00411c:	c2678793          	addi	a5,a5,-986 # 1c004c26 <KerSDD3Dto2DShort>
1c004120:	08f42023          	sw	a5,128(s0)
1c004124:	0048                	addi	a0,sp,4
1c004126:	08a42023          	sw	a0,128(s0)
1c00412a:	2fd000ef          	jal	ra,1c004c26 <KerSDD3Dto2DShort>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00412e:	01cae783          	p.elw	a5,28(s5)
		/*====================== Call Kernel LOC_LOOP =========================*/
		AT_FORK(gap_ncore(), (void *) KerSDD3Dto2DShort, (void *) KerArg0);
		__CALL(KerSDD3Dto2DShort, KerArg0);
	} /* End iteration on Tile0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+960+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+960), 960, 1, &DmaW_Evt1);
1c004132:	0009a703          	lw	a4,0(s3)
1c004136:	000a2683          	lw	a3,0(s4)
1c00413a:	3c070713          	addi	a4,a4,960
1c00413e:	3c068693          	addi	a3,a3,960
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004142:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004146:	40042583          	lw	a1,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00414a:	000a07b7          	lui	a5,0xa0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00414e:	3c078793          	addi	a5,a5,960 # a03c0 <__L2+0x203c0>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c004152:	c157c7b3          	p.bset	a5,a5,0,21
1c004156:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00415a:	40d42023          	sw	a3,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00415e:	40e42023          	sw	a4,1024(s0)
        if (!merge) copy->id = id;
1c004162:	c0ae                	sw	a1,64(sp)
        copy->length = 0;
1c004164:	c882                	sw	zero,80(sp)
  __builtin_pulp_spr_write(reg, val);
1c004166:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c00416a:	47c6                	lw	a5,80(sp)
1c00416c:	cfbd                	beqz	a5,1c0041ea <SDD3Dto2D_5_4_24+0x1cc>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00416e:	46e6                	lw	a3,88(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004170:	02000713          	li	a4,32
1c004174:	002047b7          	lui	a5,0x204
1c004178:	ca89                	beqz	a3,1c00418a <SDD3Dto2D_5_4_24+0x16c>
1c00417a:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00417e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004182:	00e7a223          	sw	a4,4(a5)
1c004186:	46e6                	lw	a3,88(sp)
1c004188:	faed                	bnez	a3,1c00417a <SDD3Dto2D_5_4_24+0x15c>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+960+0), 960, 1, &UchanHR2);
1c00418a:	0009a603          	lw	a2,0(s3)
1c00418e:	021c                	addi	a5,sp,256
1c004190:	4701                	li	a4,0
1c004192:	3c000693          	li	a3,960
1c004196:	3c060613          	addi	a2,a2,960
1c00419a:	85ca                	mv	a1,s2
1c00419c:	fb048513          	addi	a0,s1,-80
1c0041a0:	5a50a0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c0041a4:	19c14783          	lbu	a5,412(sp)
1c0041a8:	0ff7f793          	andi	a5,a5,255
1c0041ac:	ef99                	bnez	a5,1c0041ca <SDD3Dto2D_5_4_24+0x1ac>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0041ae:	4689                	li	a3,2
1c0041b0:	00204737          	lui	a4,0x204
1c0041b4:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0041b8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0041bc:	00d72223          	sw	a3,4(a4)
1c0041c0:	19c14783          	lbu	a5,412(sp)
1c0041c4:	0ff7f793          	andi	a5,a5,255
1c0041c8:	d7f5                	beqz	a5,1c0041b4 <SDD3Dto2D_5_4_24+0x196>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2); /* Wait previous uDMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c0041ca:	1bc12083          	lw	ra,444(sp)
1c0041ce:	1b812403          	lw	s0,440(sp)
1c0041d2:	1b412483          	lw	s1,436(sp)
1c0041d6:	1b012903          	lw	s2,432(sp)
1c0041da:	1ac12983          	lw	s3,428(sp)
1c0041de:	1a812a03          	lw	s4,424(sp)
1c0041e2:	1a412a83          	lw	s5,420(sp)
1c0041e6:	6139                	addi	sp,sp,448
1c0041e8:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0041ea:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0041ee:	40442403          	lw	s0,1028(s0)
1c0041f2:	4686                	lw	a3,64(sp)
1c0041f4:	40d45433          	sra	s0,s0,a3
1c0041f8:	fc143433          	p.bclr	s0,s0,30,1
1c0041fc:	c41d                	beqz	s0,1c00422a <SDD3Dto2D_5_4_24+0x20c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0041fe:	10000593          	li	a1,256
1c004202:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c004206:	30061073          	csrw	mstatus,a2
1c00420a:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00420e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004212:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004216:	30047673          	csrrci	a2,mstatus,8
1c00421a:	40472783          	lw	a5,1028(a4)
1c00421e:	4686                	lw	a3,64(sp)
1c004220:	40d7d7b3          	sra	a5,a5,a3
1c004224:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004228:	fff9                	bnez	a5,1c004206 <SDD3Dto2D_5_4_24+0x1e8>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00422a:	4785                	li	a5,1
1c00422c:	00d796b3          	sll	a3,a5,a3
1c004230:	002047b7          	lui	a5,0x204
1c004234:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c004238:	30061073          	csrw	mstatus,a2
1c00423c:	b7b9                	j	1c00418a <SDD3Dto2D_5_4_24+0x16c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00423e:	30047673          	csrrci	a2,mstatus,8
1c004242:	4047a783          	lw	a5,1028(a5)
1c004246:	5682                	lw	a3,32(sp)
1c004248:	40d7d7b3          	sra	a5,a5,a3
1c00424c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004250:	c79d                	beqz	a5,1c00427e <SDD3Dto2D_5_4_24+0x260>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004252:	10000593          	li	a1,256
1c004256:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00425a:	30061073          	csrw	mstatus,a2
1c00425e:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004262:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004266:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00426a:	30047673          	csrrci	a2,mstatus,8
1c00426e:	40472783          	lw	a5,1028(a4)
1c004272:	5682                	lw	a3,32(sp)
1c004274:	40d7d7b3          	sra	a5,a5,a3
1c004278:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00427c:	fff9                	bnez	a5,1c00425a <SDD3Dto2D_5_4_24+0x23c>
1c00427e:	4785                	li	a5,1
1c004280:	00d796b3          	sll	a3,a5,a3
1c004284:	002047b7          	lui	a5,0x204
1c004288:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00428c:	30061073          	csrw	mstatus,a2
1c004290:	bd85                	j	1c004100 <SDD3Dto2D_5_4_24+0xe2>

1c004292 <Predecoder5_4>:
		short * Boxes,
		void  * Ancor_layer,
		void  * BoundingBoxes,
		int Boxes_Q)

{
1c004292:	7145                	addi	sp,sp,-464
1c004294:	1c912223          	sw	s1,452(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[4x120], 2]
		Tile0: [0, 960, 960], Tile1: [0, 960, 960], Tile2; [0, 960, 960]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Classes = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c004298:	100004b7          	lui	s1,0x10000
{
1c00429c:	1c812423          	sw	s0,456(sp)
	KerArg0->Classes = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c0042a0:	01c48493          	addi	s1,s1,28 # 1000001c <SSDKernels_L1_Memory>
	KerArg0->Ancor_layer = (void  * __restrict__) (Ancor_layer);
	KerArg0->BoundingBoxes = (void  * __restrict__) (BoundingBoxes);
	KerArg0->Boxes_Q = (int) (Boxes_Q);
	KerArg0->n_classes = (unsigned int ) (3);
	/*================================= Read Tiles Prolog ===============================*/
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 720, 0, &UchanHR1);
1c0042a4:	1c015437          	lui	s0,0x1c015
	KerArg0->Classes = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c0042a8:	0004a303          	lw	t1,0(s1)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 720, 0, &UchanHR1);
1c0042ac:	a7c40413          	addi	s0,s0,-1412 # 1c014a7c <SSDKernels_L2_Memory>
	KerArg0->Ancor_layer = (void  * __restrict__) (Ancor_layer);
1c0042b0:	d0b2                	sw	a2,96(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 720, 0, &UchanHR1);
1c0042b2:	4010                	lw	a2,0(s0)
{
1c0042b4:	1d212023          	sw	s2,448(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 720, 0, &UchanHR1);
1c0042b8:	1c015937          	lui	s2,0x1c015
	KerArg0->Classes_W = (unsigned int ) (3);
1c0042bc:	480d                	li	a6,3
	KerArg0->Classes_H = (unsigned int ) (120);
1c0042be:	07800893          	li	a7,120
{
1c0042c2:	1b312e23          	sw	s3,444(sp)
	KerArg0->Boxes = (short * __restrict__) (SSDKernels_L1_Memory+720);
1c0042c6:	2d030e13          	addi	t3,t1,720
	KerArg0->BoundingBoxes = (void  * __restrict__) (BoundingBoxes);
1c0042ca:	d2b6                	sw	a3,100(sp)
	KerArg0->Boxes_Q = (int) (Boxes_Q);
1c0042cc:	d4ba                	sw	a4,104(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 720, 0, &UchanHR1);
1c0042ce:	189c                	addi	a5,sp,112
{
1c0042d0:	89ae                	mv	s3,a1
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 720, 0, &UchanHR1);
1c0042d2:	4705                	li	a4,1
1c0042d4:	85aa                	mv	a1,a0
1c0042d6:	2d000693          	li	a3,720
1c0042da:	fb090513          	addi	a0,s2,-80 # 1c014fb0 <HyperRam>
{
1c0042de:	1c112623          	sw	ra,460(sp)
	KerArg0->Classes = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c0042e2:	c49a                	sw	t1,72(sp)
	KerArg0->Boxes = (short * __restrict__) (SSDKernels_L1_Memory+720);
1c0042e4:	c6f2                	sw	t3,76(sp)
	KerArg0->Classes_W = (unsigned int ) (3);
1c0042e6:	c8c2                	sw	a6,80(sp)
	KerArg0->Classes_H = (unsigned int ) (120);
1c0042e8:	cac6                	sw	a7,84(sp)
	KerArg0->Classes_TileIndex = (unsigned int ) ((0));
1c0042ea:	cc82                	sw	zero,88(sp)
	KerArg0->Classes_Std_H = (unsigned int ) (120);
1c0042ec:	cec6                	sw	a7,92(sp)
	KerArg0->n_classes = (unsigned int ) (3);
1c0042ee:	d6c2                	sw	a6,108(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 720, 0, &UchanHR1);
1c0042f0:	4550a0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c0042f4:	10c14783          	lbu	a5,268(sp)
1c0042f8:	0ff7f793          	andi	a5,a5,255
1c0042fc:	ef99                	bnez	a5,1c00431a <Predecoder5_4+0x88>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0042fe:	4689                	li	a3,2
1c004300:	00204737          	lui	a4,0x204
1c004304:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004308:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00430c:	00d72223          	sw	a3,4(a4)
1c004310:	10c14783          	lbu	a5,268(sp)
1c004314:	0ff7f793          	andi	a5,a5,255
1c004318:	d7f5                	beqz	a5,1c004304 <Predecoder5_4+0x72>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA read Classes */
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+0), 720, 0, &DmaR_Evt1);
1c00431a:	400c                	lw	a1,0(s0)
1c00431c:	4088                	lw	a0,0(s1)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00431e:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004322:	002047b7          	lui	a5,0x204
1c004326:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00432a:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00432e:	2d070713          	addi	a4,a4,720 # b02d0 <__L2+0x302d0>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c004332:	c1574733          	p.bset	a4,a4,0,21
1c004336:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00433a:	40a7a023          	sw	a0,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00433e:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c004342:	c432                	sw	a2,8(sp)
        copy->length = 0;
1c004344:	cc02                	sw	zero,24(sp)
  __builtin_pulp_spr_write(reg, val);
1c004346:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c00434a:	4762                	lw	a4,24(sp)
1c00434c:	14070663          	beqz	a4,1c004498 <Predecoder5_4+0x206>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c004350:	5682                	lw	a3,32(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004352:	02000713          	li	a4,32
1c004356:	ca89                	beqz	a3,1c004368 <Predecoder5_4+0xd6>
1c004358:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00435c:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004360:	00e7a223          	sw	a4,4(a5)
1c004364:	5682                	lw	a3,32(sp)
1c004366:	faed                	bnez	a3,1c004358 <Predecoder5_4+0xc6>
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Classes */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Boxes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+720+0), 960, 0, &UchanHR2);
1c004368:	4010                	lw	a2,0(s0)
1c00436a:	0a1c                	addi	a5,sp,272
1c00436c:	4705                	li	a4,1
1c00436e:	3c000693          	li	a3,960
1c004372:	2d060613          	addi	a2,a2,720
1c004376:	85ce                	mv	a1,s3
1c004378:	fb090513          	addi	a0,s2,-80
1c00437c:	3c90a0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c004380:	1ac14783          	lbu	a5,428(sp)
1c004384:	0ff7f793          	andi	a5,a5,255
1c004388:	ef99                	bnez	a5,1c0043a6 <Predecoder5_4+0x114>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00438a:	4689                	li	a3,2
1c00438c:	00204737          	lui	a4,0x204
1c004390:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004394:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004398:	00d72223          	sw	a3,4(a4)
1c00439c:	1ac14783          	lbu	a5,428(sp)
1c0043a0:	0ff7f793          	andi	a5,a5,255
1c0043a4:	d7f5                	beqz	a5,1c004390 <Predecoder5_4+0xfe>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2); /* Wait previous uDMA read Boxes */
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+720+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+720), 960, 0, &DmaR_Evt2);
1c0043a6:	4014                	lw	a3,0(s0)
1c0043a8:	4090                	lw	a2,0(s1)
1c0043aa:	2d068693          	addi	a3,a3,720
1c0043ae:	2d060613          	addi	a2,a2,720
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0043b2:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0043b6:	002047b7          	lui	a5,0x204
1c0043ba:	4007a503          	lw	a0,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0043be:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0043c2:	3c070713          	addi	a4,a4,960 # b03c0 <__L2+0x303c0>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0043c6:	c1574733          	p.bset	a4,a4,0,21
1c0043ca:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0043ce:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0043d2:	40d7a023          	sw	a3,1024(a5)
        if (!merge) copy->id = id;
1c0043d6:	d42a                	sw	a0,40(sp)
        copy->length = 0;
1c0043d8:	dc02                	sw	zero,56(sp)
  __builtin_pulp_spr_write(reg, val);
1c0043da:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c0043de:	5762                	lw	a4,56(sp)
1c0043e0:	c335                	beqz	a4,1c004444 <Predecoder5_4+0x1b2>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0043e2:	4686                	lw	a3,64(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0043e4:	02000713          	li	a4,32
1c0043e8:	ca89                	beqz	a3,1c0043fa <Predecoder5_4+0x168>
1c0043ea:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0043ee:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0043f2:	00e7a223          	sw	a4,4(a5)
1c0043f6:	4686                	lw	a3,64(sp)
1c0043f8:	faed                	bnez	a3,1c0043ea <Predecoder5_4+0x158>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0043fa:	0ff00713          	li	a4,255
1c0043fe:	002047b7          	lui	a5,0x204
1c004402:	08e7a223          	sw	a4,132(a5) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c004406:	20078413          	addi	s0,a5,512
1c00440a:	00e42023          	sw	a4,0(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00440e:	00e42623          	sw	a4,12(s0)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c004412:	1c005737          	lui	a4,0x1c005
1c004416:	f3e70713          	addi	a4,a4,-194 # 1c004f3e <KerPredecoderShort>
1c00441a:	08e7a023          	sw	a4,128(a5)
1c00441e:	00a8                	addi	a0,sp,72
1c004420:	08a7a023          	sw	a0,128(a5)
1c004424:	31b000ef          	jal	ra,1c004f3e <KerPredecoderShort>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004428:	01c46783          	p.elw	a5,28(s0)
		int T0Ind_Last = 1;
		/*====================== Call Kernel LOC_LOOP =========================*/
		AT_FORK(gap_ncore(), (void *) KerPredecoderShort, (void *) KerArg0);
		__CALL(KerPredecoderShort, KerArg0);
	} /* End iteration on Tile0 */
}
1c00442c:	1cc12083          	lw	ra,460(sp)
1c004430:	1c812403          	lw	s0,456(sp)
1c004434:	1c412483          	lw	s1,452(sp)
1c004438:	1c012903          	lw	s2,448(sp)
1c00443c:	1bc12983          	lw	s3,444(sp)
1c004440:	6179                	addi	sp,sp,464
1c004442:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004444:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c004448:	4047a783          	lw	a5,1028(a5)
1c00444c:	56a2                	lw	a3,40(sp)
1c00444e:	40d7d7b3          	sra	a5,a5,a3
1c004452:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004456:	c79d                	beqz	a5,1c004484 <Predecoder5_4+0x1f2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004458:	10000593          	li	a1,256
1c00445c:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c004460:	30061073          	csrw	mstatus,a2
1c004464:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004468:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00446c:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004470:	30047673          	csrrci	a2,mstatus,8
1c004474:	40472783          	lw	a5,1028(a4)
1c004478:	56a2                	lw	a3,40(sp)
1c00447a:	40d7d7b3          	sra	a5,a5,a3
1c00447e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004482:	fff9                	bnez	a5,1c004460 <Predecoder5_4+0x1ce>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c004484:	4785                	li	a5,1
1c004486:	00d796b3          	sll	a3,a5,a3
1c00448a:	002047b7          	lui	a5,0x204
1c00448e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c004492:	30061073          	csrw	mstatus,a2
1c004496:	b795                	j	1c0043fa <Predecoder5_4+0x168>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004498:	30047673          	csrrci	a2,mstatus,8
1c00449c:	4047a783          	lw	a5,1028(a5)
1c0044a0:	46a2                	lw	a3,8(sp)
1c0044a2:	40d7d7b3          	sra	a5,a5,a3
1c0044a6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0044aa:	c79d                	beqz	a5,1c0044d8 <Predecoder5_4+0x246>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0044ac:	10000593          	li	a1,256
1c0044b0:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0044b4:	30061073          	csrw	mstatus,a2
1c0044b8:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0044bc:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0044c0:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0044c4:	30047673          	csrrci	a2,mstatus,8
1c0044c8:	40472783          	lw	a5,1028(a4)
1c0044cc:	46a2                	lw	a3,8(sp)
1c0044ce:	40d7d7b3          	sra	a5,a5,a3
1c0044d2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0044d6:	fff9                	bnez	a5,1c0044b4 <Predecoder5_4+0x222>
1c0044d8:	4785                	li	a5,1
1c0044da:	00d796b3          	sll	a3,a5,a3
1c0044de:	002047b7          	lui	a5,0x204
1c0044e2:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0044e6:	30061073          	csrw	mstatus,a2
1c0044ea:	bdbd                	j	1c004368 <Predecoder5_4+0xd6>

1c0044ec <SDD3Dto2DSoftmax_2_2_18>:
		short * In,
		short * Out,
		unsigned char Q,
		unsigned short n_classes)

{
1c0044ec:	7121                	addi	sp,sp,-448
1c0044ee:	1b412423          	sw	s4,424(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[18x4], 2]
		Tile0: [0, 144, 144], Tile1: [0, 144, 144], Tile2; [0, 144, 144]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c0044f2:	10000a37          	lui	s4,0x10000
{
1c0044f6:	1b312623          	sw	s3,428(sp)
	KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c0044fa:	01ca0a13          	addi	s4,s4,28 # 1000001c <SSDKernels_L1_Memory>
	KerArg0->Wout = (unsigned int ) (18);
	KerArg0->Hout = (unsigned int ) (4);
	KerArg0->Q = (unsigned char) (Q);
	KerArg0->n_classes = (unsigned short) (n_classes);
	/*================================= Read Tiles Prolog ===============================*/
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 144, 0, &UchanHR1);
1c0044fe:	1c0159b7          	lui	s3,0x1c015
	KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c004502:	000a2303          	lw	t1,0(s4)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 144, 0, &UchanHR1);
1c004506:	a7c98993          	addi	s3,s3,-1412 # 1c014a7c <SSDKernels_L2_Memory>
	KerArg0->Q = (unsigned char) (Q);
1c00450a:	00c10e23          	sb	a2,28(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 144, 0, &UchanHR1);
1c00450e:	0009a603          	lw	a2,0(s3)
{
1c004512:	1a912a23          	sw	s1,436(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 144, 0, &UchanHR1);
1c004516:	1c0154b7          	lui	s1,0x1c015
	KerArg0->Win = (unsigned int ) (4);
1c00451a:	4811                	li	a6,4
	KerArg0->Hin = (unsigned int ) (18);
1c00451c:	48c9                	li	a7,18
{
1c00451e:	1b212823          	sw	s2,432(sp)
	KerArg0->Out = (short * __restrict__) (SSDKernels_L1_Memory+144);
1c004522:	09030e13          	addi	t3,t1,144
	KerArg0->n_classes = (unsigned short) (n_classes);
1c004526:	00d11f23          	sh	a3,30(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 144, 0, &UchanHR1);
1c00452a:	109c                	addi	a5,sp,96
{
1c00452c:	892e                	mv	s2,a1
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 144, 0, &UchanHR1);
1c00452e:	4705                	li	a4,1
1c004530:	85aa                	mv	a1,a0
1c004532:	09000693          	li	a3,144
1c004536:	fb048513          	addi	a0,s1,-80 # 1c014fb0 <HyperRam>
{
1c00453a:	1a112e23          	sw	ra,444(sp)
1c00453e:	1a812c23          	sw	s0,440(sp)
1c004542:	1b512223          	sw	s5,420(sp)
	KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c004546:	c21a                	sw	t1,4(sp)
	KerArg0->Win = (unsigned int ) (4);
1c004548:	c442                	sw	a6,8(sp)
	KerArg0->Hin = (unsigned int ) (18);
1c00454a:	c646                	sw	a7,12(sp)
	KerArg0->Out = (short * __restrict__) (SSDKernels_L1_Memory+144);
1c00454c:	c872                	sw	t3,16(sp)
	KerArg0->Wout = (unsigned int ) (18);
1c00454e:	ca46                	sw	a7,20(sp)
	KerArg0->Hout = (unsigned int ) (4);
1c004550:	cc42                	sw	a6,24(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 144, 0, &UchanHR1);
1c004552:	1f30a0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c004556:	0fc14783          	lbu	a5,252(sp)
1c00455a:	0ff7f793          	andi	a5,a5,255
1c00455e:	ef99                	bnez	a5,1c00457c <SDD3Dto2DSoftmax_2_2_18+0x90>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004560:	4689                	li	a3,2
1c004562:	00204737          	lui	a4,0x204
1c004566:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00456a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00456e:	00d72223          	sw	a3,4(a4)
1c004572:	0fc14783          	lbu	a5,252(sp)
1c004576:	0ff7f793          	andi	a5,a5,255
1c00457a:	d7f5                	beqz	a5,1c004566 <SDD3Dto2DSoftmax_2_2_18+0x7a>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA read In */
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+0), 144, 0, &DmaR_Evt1);
1c00457c:	0009a583          	lw	a1,0(s3)
1c004580:	000a2503          	lw	a0,0(s4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004584:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004588:	002047b7          	lui	a5,0x204
1c00458c:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c004590:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c004594:	09070713          	addi	a4,a4,144 # b0090 <__L2+0x30090>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c004598:	c1574733          	p.bset	a4,a4,0,21
1c00459c:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0045a0:	40a7a023          	sw	a0,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0045a4:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c0045a8:	d032                	sw	a2,32(sp)
        copy->length = 0;
1c0045aa:	d802                	sw	zero,48(sp)
  __builtin_pulp_spr_write(reg, val);
1c0045ac:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c0045b0:	5742                	lw	a4,48(sp)
1c0045b2:	14070c63          	beqz	a4,1c00470a <SDD3Dto2DSoftmax_2_2_18+0x21e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0045b6:	56e2                	lw	a3,56(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0045b8:	02000713          	li	a4,32
1c0045bc:	ca89                	beqz	a3,1c0045ce <SDD3Dto2DSoftmax_2_2_18+0xe2>
1c0045be:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0045c2:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0045c6:	00e7a223          	sw	a4,4(a5)
1c0045ca:	56e2                	lw	a3,56(sp)
1c0045cc:	faed                	bnez	a3,1c0045be <SDD3Dto2DSoftmax_2_2_18+0xd2>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0045ce:	0ff00793          	li	a5,255
1c0045d2:	00204437          	lui	s0,0x204
1c0045d6:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0045da:	20040a93          	addi	s5,s0,512
1c0045de:	00faa023          	sw	a5,0(s5)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0045e2:	00faa623          	sw	a5,12(s5)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0045e6:	1c0057b7          	lui	a5,0x1c005
1c0045ea:	c2678793          	addi	a5,a5,-986 # 1c004c26 <KerSDD3Dto2DShort>
1c0045ee:	08f42023          	sw	a5,128(s0)
1c0045f2:	0048                	addi	a0,sp,4
1c0045f4:	08a42023          	sw	a0,128(s0)
1c0045f8:	253d                	jal	1c004c26 <KerSDD3Dto2DShort>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0045fa:	01cae783          	p.elw	a5,28(s5)
		/*====================== Call Kernel LOC_LOOP =========================*/
		AT_FORK(gap_ncore(), (void *) KerSDD3Dto2DShort, (void *) KerArg0);
		__CALL(KerSDD3Dto2DShort, KerArg0);
	} /* End iteration on Tile0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+144+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+144), 144, 1, &DmaW_Evt1);
1c0045fe:	0009a703          	lw	a4,0(s3)
1c004602:	000a2683          	lw	a3,0(s4)
1c004606:	09070713          	addi	a4,a4,144
1c00460a:	09068693          	addi	a3,a3,144
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00460e:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004612:	40042583          	lw	a1,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c004616:	000a07b7          	lui	a5,0xa0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00461a:	09078793          	addi	a5,a5,144 # a0090 <__L2+0x20090>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00461e:	c157c7b3          	p.bset	a5,a5,0,21
1c004622:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004626:	40d42023          	sw	a3,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00462a:	40e42023          	sw	a4,1024(s0)
        if (!merge) copy->id = id;
1c00462e:	c0ae                	sw	a1,64(sp)
        copy->length = 0;
1c004630:	c882                	sw	zero,80(sp)
  __builtin_pulp_spr_write(reg, val);
1c004632:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c004636:	47c6                	lw	a5,80(sp)
1c004638:	cfbd                	beqz	a5,1c0046b6 <SDD3Dto2DSoftmax_2_2_18+0x1ca>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00463a:	46e6                	lw	a3,88(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00463c:	02000713          	li	a4,32
1c004640:	002047b7          	lui	a5,0x204
1c004644:	ca89                	beqz	a3,1c004656 <SDD3Dto2DSoftmax_2_2_18+0x16a>
1c004646:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00464a:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00464e:	00e7a223          	sw	a4,4(a5)
1c004652:	46e6                	lw	a3,88(sp)
1c004654:	faed                	bnez	a3,1c004646 <SDD3Dto2DSoftmax_2_2_18+0x15a>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+144+0), 144, 1, &UchanHR2);
1c004656:	0009a603          	lw	a2,0(s3)
1c00465a:	021c                	addi	a5,sp,256
1c00465c:	4701                	li	a4,0
1c00465e:	09000693          	li	a3,144
1c004662:	09060613          	addi	a2,a2,144
1c004666:	85ca                	mv	a1,s2
1c004668:	fb048513          	addi	a0,s1,-80
1c00466c:	0d90a0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c004670:	19c14783          	lbu	a5,412(sp)
1c004674:	0ff7f793          	andi	a5,a5,255
1c004678:	ef99                	bnez	a5,1c004696 <SDD3Dto2DSoftmax_2_2_18+0x1aa>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00467a:	4689                	li	a3,2
1c00467c:	00204737          	lui	a4,0x204
1c004680:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004684:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004688:	00d72223          	sw	a3,4(a4)
1c00468c:	19c14783          	lbu	a5,412(sp)
1c004690:	0ff7f793          	andi	a5,a5,255
1c004694:	d7f5                	beqz	a5,1c004680 <SDD3Dto2DSoftmax_2_2_18+0x194>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2); /* Wait previous uDMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c004696:	1bc12083          	lw	ra,444(sp)
1c00469a:	1b812403          	lw	s0,440(sp)
1c00469e:	1b412483          	lw	s1,436(sp)
1c0046a2:	1b012903          	lw	s2,432(sp)
1c0046a6:	1ac12983          	lw	s3,428(sp)
1c0046aa:	1a812a03          	lw	s4,424(sp)
1c0046ae:	1a412a83          	lw	s5,420(sp)
1c0046b2:	6139                	addi	sp,sp,448
1c0046b4:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0046b6:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0046ba:	40442403          	lw	s0,1028(s0)
1c0046be:	4686                	lw	a3,64(sp)
1c0046c0:	40d45433          	sra	s0,s0,a3
1c0046c4:	fc143433          	p.bclr	s0,s0,30,1
1c0046c8:	c41d                	beqz	s0,1c0046f6 <SDD3Dto2DSoftmax_2_2_18+0x20a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0046ca:	10000593          	li	a1,256
1c0046ce:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0046d2:	30061073          	csrw	mstatus,a2
1c0046d6:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0046da:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0046de:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0046e2:	30047673          	csrrci	a2,mstatus,8
1c0046e6:	40472783          	lw	a5,1028(a4)
1c0046ea:	4686                	lw	a3,64(sp)
1c0046ec:	40d7d7b3          	sra	a5,a5,a3
1c0046f0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0046f4:	fff9                	bnez	a5,1c0046d2 <SDD3Dto2DSoftmax_2_2_18+0x1e6>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0046f6:	4785                	li	a5,1
1c0046f8:	00d796b3          	sll	a3,a5,a3
1c0046fc:	002047b7          	lui	a5,0x204
1c004700:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c004704:	30061073          	csrw	mstatus,a2
1c004708:	b7b9                	j	1c004656 <SDD3Dto2DSoftmax_2_2_18+0x16a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00470a:	30047673          	csrrci	a2,mstatus,8
1c00470e:	4047a783          	lw	a5,1028(a5)
1c004712:	5682                	lw	a3,32(sp)
1c004714:	40d7d7b3          	sra	a5,a5,a3
1c004718:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00471c:	c79d                	beqz	a5,1c00474a <SDD3Dto2DSoftmax_2_2_18+0x25e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00471e:	10000593          	li	a1,256
1c004722:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c004726:	30061073          	csrw	mstatus,a2
1c00472a:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00472e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004732:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004736:	30047673          	csrrci	a2,mstatus,8
1c00473a:	40472783          	lw	a5,1028(a4)
1c00473e:	5682                	lw	a3,32(sp)
1c004740:	40d7d7b3          	sra	a5,a5,a3
1c004744:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004748:	fff9                	bnez	a5,1c004726 <SDD3Dto2DSoftmax_2_2_18+0x23a>
1c00474a:	4785                	li	a5,1
1c00474c:	00d796b3          	sll	a3,a5,a3
1c004750:	002047b7          	lui	a5,0x204
1c004754:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c004758:	30061073          	csrw	mstatus,a2
1c00475c:	bd8d                	j	1c0045ce <SDD3Dto2DSoftmax_2_2_18+0xe2>

1c00475e <SDD3Dto2D_2_2_24>:
		short * In,
		short * Out,
		unsigned char Q,
		unsigned short n_classes)

{
1c00475e:	7121                	addi	sp,sp,-448
1c004760:	1b412423          	sw	s4,424(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[24x4], 2]
		Tile0: [0, 192, 192], Tile1: [0, 192, 192], Tile2; [0, 192, 192]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c004764:	10000a37          	lui	s4,0x10000
{
1c004768:	1b312623          	sw	s3,428(sp)
	KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c00476c:	01ca0a13          	addi	s4,s4,28 # 1000001c <SSDKernels_L1_Memory>
	KerArg0->Wout = (unsigned int ) (24);
	KerArg0->Hout = (unsigned int ) (4);
	KerArg0->Q = (unsigned char) (Q);
	KerArg0->n_classes = (unsigned short) (n_classes);
	/*================================= Read Tiles Prolog ===============================*/
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 192, 0, &UchanHR1);
1c004770:	1c0159b7          	lui	s3,0x1c015
	KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c004774:	000a2303          	lw	t1,0(s4)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 192, 0, &UchanHR1);
1c004778:	a7c98993          	addi	s3,s3,-1412 # 1c014a7c <SSDKernels_L2_Memory>
	KerArg0->Q = (unsigned char) (Q);
1c00477c:	00c10e23          	sb	a2,28(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 192, 0, &UchanHR1);
1c004780:	0009a603          	lw	a2,0(s3)
{
1c004784:	1a912a23          	sw	s1,436(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 192, 0, &UchanHR1);
1c004788:	1c0154b7          	lui	s1,0x1c015
	KerArg0->Win = (unsigned int ) (4);
1c00478c:	4811                	li	a6,4
	KerArg0->Hin = (unsigned int ) (24);
1c00478e:	48e1                	li	a7,24
{
1c004790:	1b212823          	sw	s2,432(sp)
	KerArg0->Out = (short * __restrict__) (SSDKernels_L1_Memory+192);
1c004794:	0c030e13          	addi	t3,t1,192
	KerArg0->n_classes = (unsigned short) (n_classes);
1c004798:	00d11f23          	sh	a3,30(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 192, 0, &UchanHR1);
1c00479c:	109c                	addi	a5,sp,96
{
1c00479e:	892e                	mv	s2,a1
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 192, 0, &UchanHR1);
1c0047a0:	4705                	li	a4,1
1c0047a2:	85aa                	mv	a1,a0
1c0047a4:	0c000693          	li	a3,192
1c0047a8:	fb048513          	addi	a0,s1,-80 # 1c014fb0 <HyperRam>
{
1c0047ac:	1a112e23          	sw	ra,444(sp)
1c0047b0:	1a812c23          	sw	s0,440(sp)
1c0047b4:	1b512223          	sw	s5,420(sp)
	KerArg0->In = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c0047b8:	c21a                	sw	t1,4(sp)
	KerArg0->Win = (unsigned int ) (4);
1c0047ba:	c442                	sw	a6,8(sp)
	KerArg0->Hin = (unsigned int ) (24);
1c0047bc:	c646                	sw	a7,12(sp)
	KerArg0->Out = (short * __restrict__) (SSDKernels_L1_Memory+192);
1c0047be:	c872                	sw	t3,16(sp)
	KerArg0->Wout = (unsigned int ) (24);
1c0047c0:	ca46                	sw	a7,20(sp)
	KerArg0->Hout = (unsigned int ) (4);
1c0047c2:	cc42                	sw	a6,24(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) In+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 192, 0, &UchanHR1);
1c0047c4:	7800a0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c0047c8:	0fc14783          	lbu	a5,252(sp)
1c0047cc:	0ff7f793          	andi	a5,a5,255
1c0047d0:	ef99                	bnez	a5,1c0047ee <SDD3Dto2D_2_2_24+0x90>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0047d2:	4689                	li	a3,2
1c0047d4:	00204737          	lui	a4,0x204
1c0047d8:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0047dc:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0047e0:	00d72223          	sw	a3,4(a4)
1c0047e4:	0fc14783          	lbu	a5,252(sp)
1c0047e8:	0ff7f793          	andi	a5,a5,255
1c0047ec:	d7f5                	beqz	a5,1c0047d8 <SDD3Dto2D_2_2_24+0x7a>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA read In */
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+0), 192, 0, &DmaR_Evt1);
1c0047ee:	0009a583          	lw	a1,0(s3)
1c0047f2:	000a2503          	lw	a0,0(s4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0047f6:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0047fa:	002047b7          	lui	a5,0x204
1c0047fe:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c004802:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c004806:	0c070713          	addi	a4,a4,192 # b00c0 <__L2+0x300c0>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00480a:	c1574733          	p.bset	a4,a4,0,21
1c00480e:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004812:	40a7a023          	sw	a0,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c004816:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c00481a:	d032                	sw	a2,32(sp)
        copy->length = 0;
1c00481c:	d802                	sw	zero,48(sp)
  __builtin_pulp_spr_write(reg, val);
1c00481e:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c004822:	5742                	lw	a4,48(sp)
1c004824:	14070c63          	beqz	a4,1c00497c <SDD3Dto2D_2_2_24+0x21e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c004828:	56e2                	lw	a3,56(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00482a:	02000713          	li	a4,32
1c00482e:	ca89                	beqz	a3,1c004840 <SDD3Dto2D_2_2_24+0xe2>
1c004830:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004834:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004838:	00e7a223          	sw	a4,4(a5)
1c00483c:	56e2                	lw	a3,56(sp)
1c00483e:	faed                	bnez	a3,1c004830 <SDD3Dto2D_2_2_24+0xd2>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c004840:	0ff00793          	li	a5,255
1c004844:	00204437          	lui	s0,0x204
1c004848:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00484c:	20040a93          	addi	s5,s0,512
1c004850:	00faa023          	sw	a5,0(s5)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c004854:	00faa623          	sw	a5,12(s5)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c004858:	1c0057b7          	lui	a5,0x1c005
1c00485c:	c2678793          	addi	a5,a5,-986 # 1c004c26 <KerSDD3Dto2DShort>
1c004860:	08f42023          	sw	a5,128(s0)
1c004864:	0048                	addi	a0,sp,4
1c004866:	08a42023          	sw	a0,128(s0)
1c00486a:	2e75                	jal	1c004c26 <KerSDD3Dto2DShort>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00486c:	01cae783          	p.elw	a5,28(s5)
		/*====================== Call Kernel LOC_LOOP =========================*/
		AT_FORK(gap_ncore(), (void *) KerSDD3Dto2DShort, (void *) KerArg0);
		__CALL(KerSDD3Dto2DShort, KerArg0);
	} /* End iteration on Tile0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+192+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+192), 192, 1, &DmaW_Evt1);
1c004870:	0009a703          	lw	a4,0(s3)
1c004874:	000a2683          	lw	a3,0(s4)
1c004878:	0c070713          	addi	a4,a4,192
1c00487c:	0c068693          	addi	a3,a3,192
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004880:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004884:	40042583          	lw	a1,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c004888:	000a07b7          	lui	a5,0xa0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00488c:	0c078793          	addi	a5,a5,192 # a00c0 <__L2+0x200c0>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c004890:	c157c7b3          	p.bset	a5,a5,0,21
1c004894:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004898:	40d42023          	sw	a3,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00489c:	40e42023          	sw	a4,1024(s0)
        if (!merge) copy->id = id;
1c0048a0:	c0ae                	sw	a1,64(sp)
        copy->length = 0;
1c0048a2:	c882                	sw	zero,80(sp)
  __builtin_pulp_spr_write(reg, val);
1c0048a4:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c0048a8:	47c6                	lw	a5,80(sp)
1c0048aa:	cfbd                	beqz	a5,1c004928 <SDD3Dto2D_2_2_24+0x1ca>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0048ac:	46e6                	lw	a3,88(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0048ae:	02000713          	li	a4,32
1c0048b2:	002047b7          	lui	a5,0x204
1c0048b6:	ca89                	beqz	a3,1c0048c8 <SDD3Dto2D_2_2_24+0x16a>
1c0048b8:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0048bc:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0048c0:	00e7a223          	sw	a4,4(a5)
1c0048c4:	46e6                	lw	a3,88(sp)
1c0048c6:	faed                	bnez	a3,1c0048b8 <SDD3Dto2D_2_2_24+0x15a>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+192+0), 192, 1, &UchanHR2);
1c0048c8:	0009a603          	lw	a2,0(s3)
1c0048cc:	021c                	addi	a5,sp,256
1c0048ce:	4701                	li	a4,0
1c0048d0:	0c000693          	li	a3,192
1c0048d4:	0c060613          	addi	a2,a2,192
1c0048d8:	85ca                	mv	a1,s2
1c0048da:	fb048513          	addi	a0,s1,-80
1c0048de:	6660a0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c0048e2:	19c14783          	lbu	a5,412(sp)
1c0048e6:	0ff7f793          	andi	a5,a5,255
1c0048ea:	ef99                	bnez	a5,1c004908 <SDD3Dto2D_2_2_24+0x1aa>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0048ec:	4689                	li	a3,2
1c0048ee:	00204737          	lui	a4,0x204
1c0048f2:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0048f6:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0048fa:	00d72223          	sw	a3,4(a4)
1c0048fe:	19c14783          	lbu	a5,412(sp)
1c004902:	0ff7f793          	andi	a5,a5,255
1c004906:	d7f5                	beqz	a5,1c0048f2 <SDD3Dto2D_2_2_24+0x194>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2); /* Wait previous uDMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c004908:	1bc12083          	lw	ra,444(sp)
1c00490c:	1b812403          	lw	s0,440(sp)
1c004910:	1b412483          	lw	s1,436(sp)
1c004914:	1b012903          	lw	s2,432(sp)
1c004918:	1ac12983          	lw	s3,428(sp)
1c00491c:	1a812a03          	lw	s4,424(sp)
1c004920:	1a412a83          	lw	s5,420(sp)
1c004924:	6139                	addi	sp,sp,448
1c004926:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004928:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00492c:	40442403          	lw	s0,1028(s0)
1c004930:	4686                	lw	a3,64(sp)
1c004932:	40d45433          	sra	s0,s0,a3
1c004936:	fc143433          	p.bclr	s0,s0,30,1
1c00493a:	c41d                	beqz	s0,1c004968 <SDD3Dto2D_2_2_24+0x20a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00493c:	10000593          	li	a1,256
1c004940:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c004944:	30061073          	csrw	mstatus,a2
1c004948:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00494c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004950:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004954:	30047673          	csrrci	a2,mstatus,8
1c004958:	40472783          	lw	a5,1028(a4)
1c00495c:	4686                	lw	a3,64(sp)
1c00495e:	40d7d7b3          	sra	a5,a5,a3
1c004962:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004966:	fff9                	bnez	a5,1c004944 <SDD3Dto2D_2_2_24+0x1e6>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c004968:	4785                	li	a5,1
1c00496a:	00d796b3          	sll	a3,a5,a3
1c00496e:	002047b7          	lui	a5,0x204
1c004972:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c004976:	30061073          	csrw	mstatus,a2
1c00497a:	b7b9                	j	1c0048c8 <SDD3Dto2D_2_2_24+0x16a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00497c:	30047673          	csrrci	a2,mstatus,8
1c004980:	4047a783          	lw	a5,1028(a5)
1c004984:	5682                	lw	a3,32(sp)
1c004986:	40d7d7b3          	sra	a5,a5,a3
1c00498a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00498e:	c79d                	beqz	a5,1c0049bc <SDD3Dto2D_2_2_24+0x25e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004990:	10000593          	li	a1,256
1c004994:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c004998:	30061073          	csrw	mstatus,a2
1c00499c:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0049a0:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0049a4:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0049a8:	30047673          	csrrci	a2,mstatus,8
1c0049ac:	40472783          	lw	a5,1028(a4)
1c0049b0:	5682                	lw	a3,32(sp)
1c0049b2:	40d7d7b3          	sra	a5,a5,a3
1c0049b6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0049ba:	fff9                	bnez	a5,1c004998 <SDD3Dto2D_2_2_24+0x23a>
1c0049bc:	4785                	li	a5,1
1c0049be:	00d796b3          	sll	a3,a5,a3
1c0049c2:	002047b7          	lui	a5,0x204
1c0049c6:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0049ca:	30061073          	csrw	mstatus,a2
1c0049ce:	bd8d                	j	1c004840 <SDD3Dto2D_2_2_24+0xe2>

1c0049d0 <Predecoder2_2>:
		short * Boxes,
		void  * Ancor_layer,
		void  * BoundingBoxes,
		int Boxes_Q)

{
1c0049d0:	7145                	addi	sp,sp,-464
1c0049d2:	1c912223          	sw	s1,452(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[4x24], 2]
		Tile0: [0, 192, 192], Tile1: [0, 192, 192], Tile2; [0, 192, 192]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Classes = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c0049d6:	100004b7          	lui	s1,0x10000
{
1c0049da:	1c812423          	sw	s0,456(sp)
	KerArg0->Classes = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c0049de:	01c48493          	addi	s1,s1,28 # 1000001c <SSDKernels_L1_Memory>
	KerArg0->Ancor_layer = (void  * __restrict__) (Ancor_layer);
	KerArg0->BoundingBoxes = (void  * __restrict__) (BoundingBoxes);
	KerArg0->Boxes_Q = (int) (Boxes_Q);
	KerArg0->n_classes = (unsigned int ) (3);
	/*================================= Read Tiles Prolog ===============================*/
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 144, 0, &UchanHR1);
1c0049e2:	1c015437          	lui	s0,0x1c015
	KerArg0->Classes = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c0049e6:	0004a303          	lw	t1,0(s1)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 144, 0, &UchanHR1);
1c0049ea:	a7c40413          	addi	s0,s0,-1412 # 1c014a7c <SSDKernels_L2_Memory>
	KerArg0->Ancor_layer = (void  * __restrict__) (Ancor_layer);
1c0049ee:	d0b2                	sw	a2,96(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 144, 0, &UchanHR1);
1c0049f0:	4010                	lw	a2,0(s0)
{
1c0049f2:	1d212023          	sw	s2,448(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 144, 0, &UchanHR1);
1c0049f6:	1c015937          	lui	s2,0x1c015
	KerArg0->Classes_W = (unsigned int ) (3);
1c0049fa:	480d                	li	a6,3
	KerArg0->Classes_H = (unsigned int ) (24);
1c0049fc:	48e1                	li	a7,24
{
1c0049fe:	1b312e23          	sw	s3,444(sp)
	KerArg0->Boxes = (short * __restrict__) (SSDKernels_L1_Memory+144);
1c004a02:	09030e13          	addi	t3,t1,144
	KerArg0->BoundingBoxes = (void  * __restrict__) (BoundingBoxes);
1c004a06:	d2b6                	sw	a3,100(sp)
	KerArg0->Boxes_Q = (int) (Boxes_Q);
1c004a08:	d4ba                	sw	a4,104(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 144, 0, &UchanHR1);
1c004a0a:	189c                	addi	a5,sp,112
{
1c004a0c:	89ae                	mv	s3,a1
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 144, 0, &UchanHR1);
1c004a0e:	4705                	li	a4,1
1c004a10:	85aa                	mv	a1,a0
1c004a12:	09000693          	li	a3,144
1c004a16:	fb090513          	addi	a0,s2,-80 # 1c014fb0 <HyperRam>
{
1c004a1a:	1c112623          	sw	ra,460(sp)
	KerArg0->Classes = (short * __restrict__) (SSDKernels_L1_Memory+0);
1c004a1e:	c49a                	sw	t1,72(sp)
	KerArg0->Boxes = (short * __restrict__) (SSDKernels_L1_Memory+144);
1c004a20:	c6f2                	sw	t3,76(sp)
	KerArg0->Classes_W = (unsigned int ) (3);
1c004a22:	c8c2                	sw	a6,80(sp)
	KerArg0->Classes_H = (unsigned int ) (24);
1c004a24:	cac6                	sw	a7,84(sp)
	KerArg0->Classes_TileIndex = (unsigned int ) ((0));
1c004a26:	cc82                	sw	zero,88(sp)
	KerArg0->Classes_Std_H = (unsigned int ) (24);
1c004a28:	cec6                	sw	a7,92(sp)
	KerArg0->n_classes = (unsigned int ) (3);
1c004a2a:	d6c2                	sw	a6,108(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Classes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), 144, 0, &UchanHR1);
1c004a2c:	5180a0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c004a30:	10c14783          	lbu	a5,268(sp)
1c004a34:	0ff7f793          	andi	a5,a5,255
1c004a38:	ef99                	bnez	a5,1c004a56 <Predecoder2_2+0x86>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004a3a:	4689                	li	a3,2
1c004a3c:	00204737          	lui	a4,0x204
1c004a40:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004a44:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004a48:	00d72223          	sw	a3,4(a4)
1c004a4c:	10c14783          	lbu	a5,268(sp)
1c004a50:	0ff7f793          	andi	a5,a5,255
1c004a54:	d7f5                	beqz	a5,1c004a40 <Predecoder2_2+0x70>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA read Classes */
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+0+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+0), 144, 0, &DmaR_Evt1);
1c004a56:	400c                	lw	a1,0(s0)
1c004a58:	4088                	lw	a0,0(s1)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004a5a:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004a5e:	002047b7          	lui	a5,0x204
1c004a62:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c004a66:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c004a6a:	09070713          	addi	a4,a4,144 # b0090 <__L2+0x30090>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c004a6e:	c1574733          	p.bset	a4,a4,0,21
1c004a72:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004a76:	40a7a023          	sw	a0,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c004a7a:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c004a7e:	c432                	sw	a2,8(sp)
        copy->length = 0;
1c004a80:	cc02                	sw	zero,24(sp)
  __builtin_pulp_spr_write(reg, val);
1c004a82:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c004a86:	4762                	lw	a4,24(sp)
1c004a88:	14070563          	beqz	a4,1c004bd2 <Predecoder2_2+0x202>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c004a8c:	5682                	lw	a3,32(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004a8e:	02000713          	li	a4,32
1c004a92:	ca89                	beqz	a3,1c004aa4 <Predecoder2_2+0xd4>
1c004a94:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004a98:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004a9c:	00e7a223          	sw	a4,4(a5)
1c004aa0:	5682                	lw	a3,32(sp)
1c004aa2:	faed                	bnez	a3,1c004a94 <Predecoder2_2+0xc4>
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Classes */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Boxes+0), ((AT_HYPERRAM_INT_ADDR_TYPE) SSDKernels_L2_Memory+144+0), 192, 0, &UchanHR2);
1c004aa4:	4010                	lw	a2,0(s0)
1c004aa6:	0a1c                	addi	a5,sp,272
1c004aa8:	4705                	li	a4,1
1c004aaa:	0c000693          	li	a3,192
1c004aae:	09060613          	addi	a2,a2,144
1c004ab2:	85ce                	mv	a1,s3
1c004ab4:	fb090513          	addi	a0,s2,-80
1c004ab8:	48c0a0ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c004abc:	1ac14783          	lbu	a5,428(sp)
1c004ac0:	0ff7f793          	andi	a5,a5,255
1c004ac4:	ef99                	bnez	a5,1c004ae2 <Predecoder2_2+0x112>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004ac6:	4689                	li	a3,2
1c004ac8:	00204737          	lui	a4,0x204
1c004acc:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004ad0:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004ad4:	00d72223          	sw	a3,4(a4)
1c004ad8:	1ac14783          	lbu	a5,428(sp)
1c004adc:	0ff7f793          	andi	a5,a5,255
1c004ae0:	d7f5                	beqz	a5,1c004acc <Predecoder2_2+0xfc>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2); /* Wait previous uDMA read Boxes */
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) SSDKernels_L2_Memory+144+0), ((AT_L2_INT_ADDR_TYPE) SSDKernels_L1_Memory+144), 192, 0, &DmaR_Evt2);
1c004ae2:	4014                	lw	a3,0(s0)
1c004ae4:	4090                	lw	a2,0(s1)
1c004ae6:	09068693          	addi	a3,a3,144
1c004aea:	09060613          	addi	a2,a2,144
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004aee:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004af2:	002047b7          	lui	a5,0x204
1c004af6:	4007a503          	lw	a0,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c004afa:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c004afe:	0c070713          	addi	a4,a4,192 # b00c0 <__L2+0x300c0>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c004b02:	c1574733          	p.bset	a4,a4,0,21
1c004b06:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004b0a:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c004b0e:	40d7a023          	sw	a3,1024(a5)
        if (!merge) copy->id = id;
1c004b12:	d42a                	sw	a0,40(sp)
        copy->length = 0;
1c004b14:	dc02                	sw	zero,56(sp)
  __builtin_pulp_spr_write(reg, val);
1c004b16:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c004b1a:	5762                	lw	a4,56(sp)
1c004b1c:	c32d                	beqz	a4,1c004b7e <Predecoder2_2+0x1ae>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c004b1e:	4686                	lw	a3,64(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004b20:	02000713          	li	a4,32
1c004b24:	ca89                	beqz	a3,1c004b36 <Predecoder2_2+0x166>
1c004b26:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004b2a:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004b2e:	00e7a223          	sw	a4,4(a5)
1c004b32:	4686                	lw	a3,64(sp)
1c004b34:	faed                	bnez	a3,1c004b26 <Predecoder2_2+0x156>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c004b36:	0ff00713          	li	a4,255
1c004b3a:	002047b7          	lui	a5,0x204
1c004b3e:	08e7a223          	sw	a4,132(a5) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c004b42:	20078413          	addi	s0,a5,512
1c004b46:	00e42023          	sw	a4,0(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c004b4a:	00e42623          	sw	a4,12(s0)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c004b4e:	1c005737          	lui	a4,0x1c005
1c004b52:	f3e70713          	addi	a4,a4,-194 # 1c004f3e <KerPredecoderShort>
1c004b56:	08e7a023          	sw	a4,128(a5)
1c004b5a:	00a8                	addi	a0,sp,72
1c004b5c:	08a7a023          	sw	a0,128(a5)
1c004b60:	2ef9                	jal	1c004f3e <KerPredecoderShort>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004b62:	01c46783          	p.elw	a5,28(s0)
		int T0Ind_Last = 1;
		/*====================== Call Kernel LOC_LOOP =========================*/
		AT_FORK(gap_ncore(), (void *) KerPredecoderShort, (void *) KerArg0);
		__CALL(KerPredecoderShort, KerArg0);
	} /* End iteration on Tile0 */
}
1c004b66:	1cc12083          	lw	ra,460(sp)
1c004b6a:	1c812403          	lw	s0,456(sp)
1c004b6e:	1c412483          	lw	s1,452(sp)
1c004b72:	1c012903          	lw	s2,448(sp)
1c004b76:	1bc12983          	lw	s3,444(sp)
1c004b7a:	6179                	addi	sp,sp,464
1c004b7c:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004b7e:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c004b82:	4047a783          	lw	a5,1028(a5)
1c004b86:	56a2                	lw	a3,40(sp)
1c004b88:	40d7d7b3          	sra	a5,a5,a3
1c004b8c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004b90:	c79d                	beqz	a5,1c004bbe <Predecoder2_2+0x1ee>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004b92:	10000593          	li	a1,256
1c004b96:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c004b9a:	30061073          	csrw	mstatus,a2
1c004b9e:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004ba2:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004ba6:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004baa:	30047673          	csrrci	a2,mstatus,8
1c004bae:	40472783          	lw	a5,1028(a4)
1c004bb2:	56a2                	lw	a3,40(sp)
1c004bb4:	40d7d7b3          	sra	a5,a5,a3
1c004bb8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004bbc:	fff9                	bnez	a5,1c004b9a <Predecoder2_2+0x1ca>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c004bbe:	4785                	li	a5,1
1c004bc0:	00d796b3          	sll	a3,a5,a3
1c004bc4:	002047b7          	lui	a5,0x204
1c004bc8:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c004bcc:	30061073          	csrw	mstatus,a2
1c004bd0:	b79d                	j	1c004b36 <Predecoder2_2+0x166>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004bd2:	30047673          	csrrci	a2,mstatus,8
1c004bd6:	4047a783          	lw	a5,1028(a5)
1c004bda:	46a2                	lw	a3,8(sp)
1c004bdc:	40d7d7b3          	sra	a5,a5,a3
1c004be0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004be4:	c79d                	beqz	a5,1c004c12 <Predecoder2_2+0x242>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004be6:	10000593          	li	a1,256
1c004bea:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c004bee:	30061073          	csrw	mstatus,a2
1c004bf2:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004bf6:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004bfa:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004bfe:	30047673          	csrrci	a2,mstatus,8
1c004c02:	40472783          	lw	a5,1028(a4)
1c004c06:	46a2                	lw	a3,8(sp)
1c004c08:	40d7d7b3          	sra	a5,a5,a3
1c004c0c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004c10:	fff9                	bnez	a5,1c004bee <Predecoder2_2+0x21e>
1c004c12:	4785                	li	a5,1
1c004c14:	00d796b3          	sll	a3,a5,a3
1c004c18:	002047b7          	lui	a5,0x204
1c004c1c:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c004c20:	30061073          	csrw	mstatus,a2
1c004c24:	b541                	j	1c004aa4 <Predecoder2_2+0xd4>

1c004c26 <KerSDD3Dto2DShort>:
    }
    Result = gap_roundnorm(Result, 15) + ExpCoeffLUT[0];
    unsigned short int U_Res = Result;
    Result = gap_muluRN(U_Res, ScaledFract, 15) + U_Res * ScaledInt;
    if (Result && (X > 0x7FFFFFFF)) 
        Result = ((0x7FFFFFFF / Result) >> 1);      /* negative value */
1c004c26:	7179                	addi	sp,sp,-48
1c004c28:	c662                	sw	s8,12(sp)
1c004c2a:	00452c03          	lw	s8,4(a0) # 2b0004 <__L2+0x230004>
1c004c2e:	d622                	sw	s0,44(sp)
1c004c30:	f1402473          	csrr	s0,mhartid
1c004c34:	f83c37b3          	p.bclr	a5,s8,28,3
1c004c38:	003c5713          	srli	a4,s8,0x3
1c004c3c:	00f037b3          	snez	a5,a5
1c004c40:	97ba                	add	a5,a5,a4
1c004c42:	c8041433          	p.extractu	s0,s0,4,0
1c004c46:	02f40733          	mul	a4,s0,a5
1c004c4a:	cc56                	sw	s5,24(sp)
1c004c4c:	d426                	sw	s1,40(sp)
1c004c4e:	d24a                	sw	s2,36(sp)
1c004c50:	d04e                	sw	s3,32(sp)
1c004c52:	ce52                	sw	s4,28(sp)
1c004c54:	ca5a                	sw	s6,20(sp)
1c004c56:	c85e                	sw	s7,16(sp)
1c004c58:	c466                	sw	s9,8(sp)
1c004c5a:	c26a                	sw	s10,4(sp)
1c004c5c:	97ba                	add	a5,a5,a4
1c004c5e:	c06e                	sw	s11,0(sp)
1c004c60:	0587d7b3          	p.minu	a5,a5,s8
1c004c64:	00052803          	lw	a6,0(a0)
1c004c68:	00852f03          	lw	t5,8(a0)
1c004c6c:	00c52e03          	lw	t3,12(a0)
1c004c70:	01854303          	lbu	t1,24(a0)
1c004c74:	01a55a83          	lhu	s5,26(a0)
1c004c78:	04f77b63          	bleu	a5,a4,1c004cce <KerSDD3Dto2DShort+0xa8>
1c004c7c:	040f0963          	beqz	t5,1c004cce <KerSDD3Dto2DShort+0xa8>
1c004c80:	00179593          	slli	a1,a5,0x1
1c004c84:	001f1e93          	slli	t4,t5,0x1
1c004c88:	00170793          	addi	a5,a4,1
1c004c8c:	8572                	mv	a0,t3
1c004c8e:	88f2                	mv	a7,t3
1c004c90:	43d70533          	p.mac	a0,a4,t4
1c004c94:	00171693          	slli	a3,a4,0x1
1c004c98:	8d95                	sub	a1,a1,a3
1c004c9a:	15f9                	addi	a1,a1,-2
1c004c9c:	8185                	srli	a1,a1,0x1
1c004c9e:	9836                	add	a6,a6,a3
1c004ca0:	001c1f93          	slli	t6,s8,0x1
1c004ca4:	0585                	addi	a1,a1,1
1c004ca6:	43d788b3          	p.mac	a7,a5,t4
1c004caa:	0115c07b          	lp.setup	x0,a1,1c004ccc <KerSDD3Dto2DShort+0xa6>
1c004cae:	40a887b3          	sub	a5,a7,a0
1c004cb2:	17f9                	addi	a5,a5,-2
1c004cb4:	8385                	srli	a5,a5,0x1
1c004cb6:	86aa                	mv	a3,a0
1c004cb8:	8742                	mv	a4,a6
1c004cba:	0785                	addi	a5,a5,1
1c004cbc:	0047c0fb          	lp.setup	x1,a5,1c004cc4 <KerSDD3Dto2DShort+0x9e>
1c004cc0:	11f7760b          	p.lh	a2,t6(a4!)
1c004cc4:	00c6912b          	p.sh	a2,2(a3!)
1c004cc8:	0809                	addi	a6,a6,2
1c004cca:	9576                	add	a0,a0,t4
1c004ccc:	98f6                	add	a7,a7,t4
1c004cce:	0c030963          	beqz	t1,1c004da0 <KerSDD3Dto2DShort+0x17a>
1c004cd2:	035f5733          	divu	a4,t5,s5
1c004cd6:	03870733          	mul	a4,a4,s8
1c004cda:	028a8433          	mul	s0,s5,s0
1c004cde:	f83737b3          	p.bclr	a5,a4,28,3
1c004ce2:	00f037b3          	snez	a5,a5
1c004ce6:	830d                	srli	a4,a4,0x3
1c004ce8:	97ba                	add	a5,a5,a4
1c004cea:	02f40433          	mul	s0,s0,a5
1c004cee:	85a2                	mv	a1,s0
1c004cf0:	03ec0c33          	mul	s8,s8,t5
1c004cf4:	42fa85b3          	p.mac	a1,s5,a5
1c004cf8:	0585dc33          	p.minu	s8,a1,s8
1c004cfc:	0b847263          	bleu	s8,s0,1c004da0 <KerSDD3Dto2DShort+0x17a>
1c004d00:	00141393          	slli	t2,s0,0x1
1c004d04:	001a9b93          	slli	s7,s5,0x1
1c004d08:	93f2                	add	t2,t2,t3
1c004d0a:	6a21                	lui	s4,0x8
1c004d0c:	493d                	li	s2,15
1c004d0e:	01738b33          	add	s6,t2,s7
1c004d12:	40690933          	sub	s2,s2,t1
1c004d16:	4d2d                	li	s10,11
1c004d18:	fffa0c93          	addi	s9,s4,-1 # 7fff <__rt_stack_size+0x77ff>
1c004d1c:	220a8063          	beqz	s5,1c004f3c <KerSDD3Dto2DShort+0x316>
1c004d20:	407b07b3          	sub	a5,s6,t2
1c004d24:	17f9                	addi	a5,a5,-2
1c004d26:	8385                	srli	a5,a5,0x1
1c004d28:	861e                	mv	a2,t2
1c004d2a:	80000337          	lui	t1,0x80000
1c004d2e:	0785                	addi	a5,a5,1
1c004d30:	0047c0fb          	lp.setup	x1,a5,1c004d38 <KerSDD3Dto2DShort+0x112>
1c004d34:	0026170b          	p.lh	a4,2(a2!)
1c004d38:	04e36333          	p.max	t1,t1,a4
1c004d3c:	40760833          	sub	a6,a2,t2
1c004d40:	1879                	addi	a6,a6,-2
1c004d42:	00185813          	srli	a6,a6,0x1
1c004d46:	889e                	mv	a7,t2
1c004d48:	4e81                	li	t4,0
1c004d4a:	0805                	addi	a6,a6,1
1c004d4c:	0028978b          	p.lh	a5,2(a7!)
1c004d50:	406787b3          	sub	a5,a5,t1
1c004d54:	012797b3          	sll	a5,a5,s2
1c004d58:	e7c1                	bnez	a5,1c004de0 <KerSDD3Dto2DShort+0x1ba>
1c004d5a:	9ed2                	add	t4,t4,s4
1c004d5c:	7561                	lui	a0,0xffff8
1c004d5e:	fea89f23          	sh	a0,-2(a7)
1c004d62:	187d                	addi	a6,a6,-1
1c004d64:	fe0814e3          	bnez	a6,1c004d4c <KerSDD3Dto2DShort+0x126>
1c004d68:	3fff87b7          	lui	a5,0x3fff8
1c004d6c:	03d7ceb3          	div	t4,a5,t4
1c004d70:	871e                	mv	a4,t2
1c004d72:	0027178b          	p.lh	a5,2(a4!)
1c004d76:	03d787b3          	mul	a5,a5,t4
1c004d7a:	1e07e7db          	p.mac.zh.zl	a5,a5,zero,a5
1c004d7e:	0207cf63          	bltz	a5,1c004dbc <KerSDD3Dto2DShort+0x196>
1c004d82:	ffe71783          	lh	a5,-2(a4)
1c004d86:	03d787b3          	mul	a5,a5,t4
1c004d8a:	1e07e7db          	p.mac.zh.zl	a5,a5,zero,a5
1c004d8e:	fef71f23          	sh	a5,-2(a4)
1c004d92:	fee610e3          	bne	a2,a4,1c004d72 <KerSDD3Dto2DShort+0x14c>
1c004d96:	9456                	add	s0,s0,s5
1c004d98:	9b5e                	add	s6,s6,s7
1c004d9a:	93de                	add	t2,t2,s7
1c004d9c:	f98460e3          	bltu	s0,s8,1c004d1c <KerSDD3Dto2DShort+0xf6>
1c004da0:	5432                	lw	s0,44(sp)
1c004da2:	54a2                	lw	s1,40(sp)
1c004da4:	5912                	lw	s2,36(sp)
1c004da6:	5982                	lw	s3,32(sp)
1c004da8:	4a72                	lw	s4,28(sp)
1c004daa:	4ae2                	lw	s5,24(sp)
1c004dac:	4b52                	lw	s6,20(sp)
1c004dae:	4bc2                	lw	s7,16(sp)
1c004db0:	4c32                	lw	s8,12(sp)
1c004db2:	4ca2                	lw	s9,8(sp)
1c004db4:	4d12                	lw	s10,4(sp)
1c004db6:	4d82                	lw	s11,0(sp)
1c004db8:	6145                	addi	sp,sp,48
1c004dba:	8082                	ret
1c004dbc:	ffe71783          	lh	a5,-2(a4)
1c004dc0:	03d787b3          	mul	a5,a5,t4
1c004dc4:	1e07e7db          	p.mac.zh.zl	a5,a5,zero,a5
1c004dc8:	40f007b3          	neg	a5,a5
1c004dcc:	fef71f23          	sh	a5,-2(a4)
1c004dd0:	fae611e3          	bne	a2,a4,1c004d72 <KerSDD3Dto2DShort+0x14c>
1c004dd4:	9456                	add	s0,s0,s5
1c004dd6:	9b5e                	add	s6,s6,s7
1c004dd8:	93de                	add	t2,t2,s7
1c004dda:	f58461e3          	bltu	s0,s8,1c004d1c <KerSDD3Dto2DShort+0xf6>
1c004dde:	b7c9                	j	1c004da0 <KerSDD3Dto2DShort+0x17a>
1c004de0:	0e07cc63          	bltz	a5,1c004ed8 <KerSDD3Dto2DShort+0x2b2>
1c004de4:	40f7d713          	srai	a4,a5,0xf
1c004de8:	86be                	mv	a3,a5
1c004dea:	10ed4d63          	blt	s10,a4,1c004f04 <KerSDD3Dto2DShort+0x2de>
1c004dee:	0196f6b3          	and	a3,a3,s9
1c004df2:	01169593          	slli	a1,a3,0x11
1c004df6:	0005d563          	bgez	a1,1c004e00 <KerSDD3Dto2DShort+0x1da>
1c004dfa:	414686b3          	sub	a3,a3,s4
1c004dfe:	0705                	addi	a4,a4,1
1c004e00:	1006cfb3          	p.exths	t6,a3
1c004e04:	9fffc4db          	p.mac.sl.zl	s1,t6,t6,a5
1c004e08:	1c0145b7          	lui	a1,0x1c014
1c004e0c:	00f69293          	slli	t0,a3,0xf
1c004e10:	0706                	slli	a4,a4,0x1
1c004e12:	53058593          	addi	a1,a1,1328 # 1c014530 <FractionExpLUT>
1c004e16:	40d282b3          	sub	t0,t0,a3
1c004e1a:	00e586b3          	add	a3,a1,a4
1c004e1e:	0006de03          	lhu	t3,0(a3)
1c004e22:	1c0146b7          	lui	a3,0x1c014
1c004e26:	54868693          	addi	a3,a3,1352 # 1c014548 <IntegerExpLUT>
1c004e2a:	9736                	add	a4,a4,a3
1c004e2c:	00075f03          	lhu	t5,0(a4)
1c004e30:	1004c733          	p.exths	a4,s1
1c004e34:	9ff744db          	p.mac.sl.zl	s1,a4,t6,a5
1c004e38:	073a                	slli	a4,a4,0xe
1c004e3a:	92ba                	add	t0,t0,a4
1c004e3c:	4501                	li	a0,0
1c004e3e:	1004c4b3          	p.exths	s1,s1
1c004e42:	9ff4c75b          	p.mac.sl.zl	a4,s1,t6,a5
1c004e46:	100745b3          	p.exths	a1,a4
1c004e4a:	9ff5c6db          	p.mac.sl.zl	a3,a1,t6,a5
1c004e4e:	00259713          	slli	a4,a1,0x2
1c004e52:	972e                	add	a4,a4,a1
1c004e54:	070a                	slli	a4,a4,0x2
1c004e56:	972e                	add	a4,a4,a1
1c004e58:	00671593          	slli	a1,a4,0x6
1c004e5c:	95ba                	add	a1,a1,a4
1c004e5e:	1006c6b3          	p.exths	a3,a3
1c004e62:	9ff6c75b          	p.mac.sl.zl	a4,a3,t6,a5
1c004e66:	00469993          	slli	s3,a3,0x4
1c004e6a:	99b6                	add	s3,s3,a3
1c004e6c:	0992                	slli	s3,s3,0x4
1c004e6e:	99b6                	add	s3,s3,a3
1c004e70:	10074733          	p.exths	a4,a4
1c004e74:	9ff74ddb          	p.mac.sl.zl	s11,a4,t6,a5
1c004e78:	00171693          	slli	a3,a4,0x1
1c004e7c:	96ba                	add	a3,a3,a4
1c004e7e:	068e                	slli	a3,a3,0x3
1c004e80:	8e99                	sub	a3,a3,a4
1c004e82:	6705                	lui	a4,0x1
1c004e84:	55570713          	addi	a4,a4,1365 # 1555 <__rt_stack_size+0xd55>
1c004e88:	0686                	slli	a3,a3,0x1
1c004e8a:	42e482b3          	p.mac	t0,s1,a4
1c004e8e:	100dcdb3          	p.exths	s11,s11
1c004e92:	003d9713          	slli	a4,s11,0x3
1c004e96:	41b70733          	sub	a4,a4,s11
1c004e9a:	9ffdcddb          	p.mac.sl.zl	s11,s11,t6,a5
1c004e9e:	92ae                	add	t0,t0,a1
1c004ea0:	9996                	add	s3,s3,t0
1c004ea2:	96ce                	add	a3,a3,s3
1c004ea4:	9736                	add	a4,a4,a3
1c004ea6:	65c1                	lui	a1,0x10
1c004ea8:	15fd                	addi	a1,a1,-1
1c004eaa:	100dcdb3          	p.exths	s11,s11
1c004eae:	1fb7675b          	p.mac.zh.zl	a4,a4,s11,a5
1c004eb2:	9766                	add	a4,a4,s9
1c004eb4:	1fc74e5b          	p.mac.zl.zl	t3,a4,t3,a5
1c004eb8:	8f6d                	and	a4,a4,a1
1c004eba:	43e70e33          	p.mac	t3,a4,t5
1c004ebe:	ea0e00e3          	beqz	t3,1c004d5e <KerSDD3Dto2DShort+0x138>
1c004ec2:	0407cd63          	bltz	a5,1c004f1c <KerSDD3Dto2DShort+0x2f6>
1c004ec6:	100e4533          	p.exths	a0,t3
1c004eca:	fea89f23          	sh	a0,-2(a7)
1c004ece:	9ef2                	add	t4,t4,t3
1c004ed0:	187d                	addi	a6,a6,-1
1c004ed2:	e6081de3          	bnez	a6,1c004d4c <KerSDD3Dto2DShort+0x126>
1c004ed6:	bd49                	j	1c004d68 <KerSDD3Dto2DShort+0x142>
1c004ed8:	40f005b3          	neg	a1,a5
1c004edc:	40f5d713          	srai	a4,a1,0xf
1c004ee0:	86ae                	mv	a3,a1
1c004ee2:	f0ed56e3          	ble	a4,s10,1c004dee <KerSDD3Dto2DShort+0x1c8>
1c004ee6:	4501                	li	a0,0
1c004ee8:	e6b79be3          	bne	a5,a1,1c004d5e <KerSDD3Dto2DShort+0x138>
1c004eec:	800006b7          	lui	a3,0x80000
1c004ef0:	557d                	li	a0,-1
1c004ef2:	fff6c693          	not	a3,a3
1c004ef6:	fea89f23          	sh	a0,-2(a7)
1c004efa:	9eb6                	add	t4,t4,a3
1c004efc:	187d                	addi	a6,a6,-1
1c004efe:	e40817e3          	bnez	a6,1c004d4c <KerSDD3Dto2DShort+0x126>
1c004f02:	b59d                	j	1c004d68 <KerSDD3Dto2DShort+0x142>
1c004f04:	80000737          	lui	a4,0x80000
1c004f08:	557d                	li	a0,-1
1c004f0a:	fff74713          	not	a4,a4
1c004f0e:	fea89f23          	sh	a0,-2(a7)
1c004f12:	9eba                	add	t4,t4,a4
1c004f14:	187d                	addi	a6,a6,-1
1c004f16:	e2081be3          	bnez	a6,1c004d4c <KerSDD3Dto2DShort+0x126>
1c004f1a:	b5b9                	j	1c004d68 <KerSDD3Dto2DShort+0x142>
1c004f1c:	800006b7          	lui	a3,0x80000
1c004f20:	fff6c693          	not	a3,a3
1c004f24:	03c6c7b3          	div	a5,a3,t3
1c004f28:	8785                	srai	a5,a5,0x1
1c004f2a:	1007c533          	p.exths	a0,a5
1c004f2e:	fea89f23          	sh	a0,-2(a7)
1c004f32:	9ebe                	add	t4,t4,a5
1c004f34:	187d                	addi	a6,a6,-1
1c004f36:	e0081be3          	bnez	a6,1c004d4c <KerSDD3Dto2DShort+0x126>
1c004f3a:	b53d                	j	1c004d68 <KerSDD3Dto2DShort+0x142>
1c004f3c:	9002                	ebreak

1c004f3e <KerPredecoderShort>:

void KerPredecoderShort(KerPredecoderShort_ArgT *Arg){


    short * __restrict__ Classes = Arg->Classes;
    short * __restrict__ Boxes   = Arg->Boxes;
1c004f3e:	4150                	lw	a2,4(a0)
void KerPredecoderShort(KerPredecoderShort_ArgT *Arg){
1c004f40:	7119                	addi	sp,sp,-128
    unsigned int W          = Arg->Classes_W;  //Same info as n_classes
    unsigned int H          = Arg->Classes_H;
1c004f42:	4554                	lw	a3,12(a0)
    short * __restrict__ Boxes   = Arg->Boxes;
1c004f44:	d232                	sw	a2,36(sp)
    unsigned int TileIndex  = Arg->Classes_TileIndex;
    unsigned int Std_H      = Arg->Classes_Std_H;
    unsigned int n_classes  = Arg->n_classes;
1c004f46:	5150                	lw	a2,36(a0)

    
    Alps * anch             = (Alps*) Arg->Ancor_layer;
    bboxs_fp_t* bbxs        = (bboxs_fp_t*) Arg->BoundingBoxes;
    
    unsigned int CoreId = gap_coreid();
1c004f48:	f14027f3          	csrr	a5,mhartid
void KerPredecoderShort(KerPredecoderShort_ArgT *Arg){
1c004f4c:	daa6                	sw	s1,116(sp)
    unsigned int n_classes  = Arg->n_classes;
1c004f4e:	de32                	sw	a2,60(sp)
    int Boxes_Q  = Arg->Boxes_Q;
1c004f50:	5110                	lw	a2,32(a0)
void KerPredecoderShort(KerPredecoderShort_ArgT *Arg){
1c004f52:	d0da                	sw	s6,96(sp)
    unsigned int H          = Arg->Classes_H;
1c004f54:	dc36                	sw	a3,56(sp)
void KerPredecoderShort(KerPredecoderShort_ArgT *Arg){
1c004f56:	de86                	sw	ra,124(sp)
1c004f58:	dca2                	sw	s0,120(sp)
1c004f5a:	d8ca                	sw	s2,112(sp)
1c004f5c:	d6ce                	sw	s3,108(sp)
1c004f5e:	d4d2                	sw	s4,104(sp)
1c004f60:	d2d6                	sw	s5,100(sp)
1c004f62:	cede                	sw	s7,92(sp)
1c004f64:	cce2                	sw	s8,88(sp)
1c004f66:	cae6                	sw	s9,84(sp)
1c004f68:	c8ea                	sw	s10,80(sp)
1c004f6a:	c6ee                	sw	s11,76(sp)
    unsigned int CoreId = gap_coreid();
1c004f6c:	c80797b3          	p.extractu	a5,a5,4,0
    int Boxes_Q  = Arg->Boxes_Q;
1c004f70:	da32                	sw	a2,52(sp)
    short * __restrict__ Classes = Arg->Classes;
1c004f72:	00052303          	lw	t1,0(a0) # ffff8000 <pulp__FC+0xffff8001>
    unsigned int W          = Arg->Classes_W;  //Same info as n_classes
1c004f76:	00852e03          	lw	t3,8(a0)
    unsigned int TileIndex  = Arg->Classes_TileIndex;
1c004f7a:	4914                	lw	a3,16(a0)
    unsigned int Std_H      = Arg->Classes_Std_H;
1c004f7c:	4958                	lw	a4,20(a0)
    Alps * anch             = (Alps*) Arg->Ancor_layer;
1c004f7e:	01852b03          	lw	s6,24(a0)
    bboxs_fp_t* bbxs        = (bboxs_fp_t*) Arg->BoundingBoxes;
1c004f82:	4d44                	lw	s1,28(a0)

    if(!CoreId){
1c004f84:	4c079d63          	bnez	a5,1c00545e <KerPredecoderShort+0x520>
        for(unsigned int i=0;i<H;i++){
1c004f88:	57e2                	lw	a5,56(sp)
1c004f8a:	4c078a63          	beqz	a5,1c00545e <KerPredecoderShort+0x520>
            int global_index = TileIndex*Std_H;
1c004f8e:	02e68733          	mul	a4,a3,a4
    int shift = 20-10-Boxes_Q;
1c004f92:	48a9                	li	a7,10
1c004f94:	40c88ab3          	sub	s5,a7,a2
        for(unsigned int i=0;i<H;i++){
1c004f98:	d802                	sw	zero,48(sp)
    int shift = 20-10-Boxes_Q;
1c004f9a:	4881                	li	a7,0
        Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c004f9c:	8856                	mv	a6,s5
            int global_index = TileIndex*Std_H;
1c004f9e:	d03a                	sw	a4,32(sp)
            //     class_2 = FIX2FP(Classes[i*n_classes+2],15);
            //     printf("Num: %d Confidence 0: %f Confidence 1: %f Confidence 2: %f\n", i, class_0, class_1,  class_2);
            // }
            
            //we start from 1 since we skip the Background
            for(uint8_t n=1;n<W;n++){
1c004fa0:	4785                	li	a5,1
1c004fa2:	4bc7f363          	bleu	t3,a5,1c005448 <KerPredecoderShort+0x50a>
1c004fa6:	4405                	li	s0,1
        Result = ((0x7FFFFFFF / Result) >> 1);      /* negative value */
1c004fa8:	8c1a                	mv	s8,t1
1c004faa:	a035                	j	1c004fd6 <KerPredecoderShort+0x98>
1c004fac:	5332                	lw	t1,44(sp)
1c004fae:	00f31513          	slli	a0,t1,0xf
    bbxs->bbs[bbxs->num_bb].alive   = 1;
1c004fb2:	4785                	li	a5,1
    bbxs->bbs[bbxs->num_bb].h       = (Exp * h_fix); //Output Q26
1c004fb4:	00aaa623          	sw	a0,12(s5)
    bbxs->bbs[bbxs->num_bb].class   = class;
1c004fb8:	008a9923          	sh	s0,18(s5)
    bbxs->bbs[bbxs->num_bb].alive   = 1;
1c004fbc:	00fa8a23          	sb	a5,20(s5)
    bbxs->bbs[bbxs->num_bb++].score = confidence;
1c004fc0:	0905                	addi	s2,s2,1
1c004fc2:	01249223          	sh	s2,4(s1)
1c004fc6:	00ea9823          	sh	a4,16(s5)
            for(uint8_t n=1;n<W;n++){
1c004fca:	0405                	addi	s0,s0,1
1c004fcc:	0ff47413          	andi	s0,s0,255
1c004fd0:	87a2                	mv	a5,s0
1c004fd2:	47c47a63          	bleu	t3,s0,1c005446 <KerPredecoderShort+0x508>
                //Here it would be nice to add a different confidence for each class
                if(Classes[i*n_classes+n] > anch->confidence_thr){
1c004fd6:	97c6                	add	a5,a5,a7
1c004fd8:	0786                	slli	a5,a5,0x1
1c004fda:	97e2                	add	a5,a5,s8
1c004fdc:	00079703          	lh	a4,0(a5) # 3fff8000 <__l2_end+0x23fe2f58>
1c004fe0:	038b1783          	lh	a5,56(s6)
1c004fe4:	fee7d3e3          	ble	a4,a5,1c004fca <KerPredecoderShort+0x8c>
                // if(Classes[i*n_classes+n] > anch->confidence_thr && (class_0 + class_1 + class_2) > 0.9 ){
                
                //Here we pass the row index to find the correct row in the boxes
                    //Check if there is still space to store BB
                    if(bbxs->num_bb>=MAX_BB){
1c004fe8:	00449903          	lh	s2,4(s1)
1c004fec:	1f300793          	li	a5,499
1c004ff0:	4d27cc63          	blt	a5,s2,1c0054c8 <KerPredecoderShort+0x58a>
    anchor_location  = global_index/Anchors->n_anchors;
1c004ff4:	02eb4983          	lbu	s3,46(s6)
1c004ff8:	5302                	lw	t1,32(sp)
    cx_offset = Boxes[index*Anchors->anchor_params+0];
1c004ffa:	025b4a03          	lbu	s4,37(s6)
    cx = FP2FIX(((zero_width  + (float)j_loc * Anchors->step_width)/(float)Anchors->img_width)  , 20);
1c004ffe:	006b5503          	lhu	a0,6(s6)
    anchor_location  = global_index/Anchors->n_anchors;
1c005002:	03334db3          	div	s11,t1,s3
    cx_offset = Boxes[index*Anchors->anchor_params+0];
1c005006:	5642                	lw	a2,48(sp)
    i_loc    = anchor_location/Anchors->feature_map_width;
1c005008:	002b4d03          	lbu	s10,2(s6)
    float zero_width  = Anchors->offset_width  * Anchors->step_width;
1c00500c:	014b2a83          	lw	s5,20(s6)
    float zero_height = Anchors->offset_height * Anchors->step_height;
1c005010:	010b2c83          	lw	s9,16(s6)
    cx = FP2FIX(((zero_width  + (float)j_loc * Anchors->step_width)/(float)Anchors->img_width)  , 20);
1c005014:	c63a                	sw	a4,12(sp)
1c005016:	c042                	sw	a6,0(sp)
1c005018:	c246                	sw	a7,4(sp)
1c00501a:	c472                	sw	t3,8(sp)
    cx_offset = Boxes[index*Anchors->anchor_params+0];
1c00501c:	02ca0a33          	mul	s4,s4,a2
    cx = FP2FIX(((zero_width  + (float)j_loc * Anchors->step_width)/(float)Anchors->img_width)  , 20);
1c005020:	c0cfc0ef          	jal	ra,1c00142c <__floatunsisf>
1c005024:	8baa                	mv	s7,a0
    w_offset  = Boxes[index*Anchors->anchor_params+2];
1c005026:	5792                	lw	a5,36(sp)
    cx = FP2FIX(((zero_width  + (float)j_loc * Anchors->step_width)/(float)Anchors->img_width)  , 20);
1c005028:	03ade533          	rem	a0,s11,s10
    cx_offset = Boxes[index*Anchors->anchor_params+0];
1c00502c:	0a06                	slli	s4,s4,0x1
    w_offset  = Boxes[index*Anchors->anchor_params+2];
1c00502e:	014786b3          	add	a3,a5,s4
1c005032:	00469783          	lh	a5,4(a3) # 80000004 <pulp__FC+0x80000005>
    h_offset  = Boxes[index*Anchors->anchor_params+3];
1c005036:	00669603          	lh	a2,6(a3)
    cx = FP2FIX(((zero_width  + (float)j_loc * Anchors->step_width)/(float)Anchors->img_width)  , 20);
1c00503a:	c836                	sw	a3,16(sp)
1c00503c:	cc3e                	sw	a5,24(sp)
1c00503e:	ca32                	sw	a2,20(sp)
1c005040:	b48fc0ef          	jal	ra,1c001388 <__floatsisf>
1c005044:	85d6                	mv	a1,s5
1c005046:	900fc0ef          	jal	ra,1c001146 <__mulsf3>
    float zero_width  = Anchors->offset_width  * Anchors->step_width;
1c00504a:	01cb2583          	lw	a1,28(s6)
    cx = FP2FIX(((zero_width  + (float)j_loc * Anchors->step_width)/(float)Anchors->img_width)  , 20);
1c00504e:	8eaa                	mv	t4,a0
    float zero_width  = Anchors->offset_width  * Anchors->step_width;
1c005050:	8556                	mv	a0,s5
1c005052:	ce76                	sw	t4,28(sp)
1c005054:	8f2fc0ef          	jal	ra,1c001146 <__mulsf3>
    cx = FP2FIX(((zero_width  + (float)j_loc * Anchors->step_width)/(float)Anchors->img_width)  , 20);
1c005058:	4ef2                	lw	t4,28(sp)
1c00505a:	85aa                	mv	a1,a0
1c00505c:	8576                	mv	a0,t4
1c00505e:	c01fb0ef          	jal	ra,1c000c5e <__addsf3>
1c005062:	85de                	mv	a1,s7
1c005064:	ee5fb0ef          	jal	ra,1c000f48 <__divsf3>
1c005068:	1c014337          	lui	t1,0x1c014
1c00506c:	56030313          	addi	t1,t1,1376 # 1c014560 <IntegerExpLUT+0x18>
1c005070:	00032583          	lw	a1,0(t1)
1c005074:	8d2fc0ef          	jal	ra,1c001146 <__mulsf3>
1c005078:	abafc0ef          	jal	ra,1c001332 <__fixsfsi>
1c00507c:	8eaa                	mv	t4,a0
    cy = FP2FIX(((zero_height + (float)i_loc * Anchors->step_height)/(float)Anchors->img_height), 20);
1c00507e:	004b5503          	lhu	a0,4(s6)
1c005082:	ce76                	sw	t4,28(sp)
1c005084:	ba8fc0ef          	jal	ra,1c00142c <__floatunsisf>
1c005088:	8aaa                	mv	s5,a0
1c00508a:	03adc533          	div	a0,s11,s10
1c00508e:	afafc0ef          	jal	ra,1c001388 <__floatsisf>
1c005092:	85e6                	mv	a1,s9
1c005094:	8b2fc0ef          	jal	ra,1c001146 <__mulsf3>
    float zero_height = Anchors->offset_height * Anchors->step_height;
1c005098:	018b2583          	lw	a1,24(s6)
    cy = FP2FIX(((zero_height + (float)i_loc * Anchors->step_height)/(float)Anchors->img_height), 20);
1c00509c:	8d2a                	mv	s10,a0
    float zero_height = Anchors->offset_height * Anchors->step_height;
1c00509e:	8566                	mv	a0,s9
1c0050a0:	8a6fc0ef          	jal	ra,1c001146 <__mulsf3>
    cy = FP2FIX(((zero_height + (float)i_loc * Anchors->step_height)/(float)Anchors->img_height), 20);
1c0050a4:	85aa                	mv	a1,a0
1c0050a6:	856a                	mv	a0,s10
1c0050a8:	bb7fb0ef          	jal	ra,1c000c5e <__addsf3>
1c0050ac:	85d6                	mv	a1,s5
1c0050ae:	e9bfb0ef          	jal	ra,1c000f48 <__divsf3>
1c0050b2:	1c014337          	lui	t1,0x1c014
1c0050b6:	56030313          	addi	t1,t1,1376 # 1c014560 <IntegerExpLUT+0x18>
1c0050ba:	00032583          	lw	a1,0(t1)
1c0050be:	888fc0ef          	jal	ra,1c001146 <__mulsf3>
1c0050c2:	a70fc0ef          	jal	ra,1c001332 <__fixsfsi>
    anchor_id        = global_index%Anchors->n_anchors;
1c0050c6:	5302                	lw	t1,32(sp)
    cy = FP2FIX(((zero_height + (float)i_loc * Anchors->step_height)/(float)Anchors->img_height), 20);
1c0050c8:	8caa                	mv	s9,a0
    anchorWH_t anchorWH = Anchors->anchorsWH[anchor_id];
1c0050ca:	030b2503          	lw	a0,48(s6)
    anchor_id        = global_index%Anchors->n_anchors;
1c0050ce:	033369b3          	rem	s3,t1,s3
    w = anchorWH.w / (float)Anchors->img_width;
1c0050d2:	85de                	mv	a1,s7
    anchorWH_t anchorWH = Anchors->anchorsWH[anchor_id];
1c0050d4:	098e                	slli	s3,s3,0x3
1c0050d6:	99aa                	add	s3,s3,a0
    w = anchorWH.w / (float)Anchors->img_width;
1c0050d8:	0009a503          	lw	a0,0(s3)
1c0050dc:	e6dfb0ef          	jal	ra,1c000f48 <__divsf3>
1c0050e0:	8daa                	mv	s11,a0
    h = anchorWH.h / (float)Anchors->img_height;
1c0050e2:	0049a503          	lw	a0,4(s3)
1c0050e6:	85d6                	mv	a1,s5
1c0050e8:	e61fb0ef          	jal	ra,1c000f48 <__divsf3>
    int16_t var_0_f = FP2FIX(Anchors->variances[0]  * w,10);
1c0050ec:	028b2a83          	lw	s5,40(s6)
    h = anchorWH.h / (float)Anchors->img_height;
1c0050f0:	8baa                	mv	s7,a0
    int16_t var_2_f = FP2FIX(Anchors->variances[2]     ,10);
1c0050f2:	1c014537          	lui	a0,0x1c014
1c0050f6:	56450513          	addi	a0,a0,1380 # 1c014564 <IntegerExpLUT+0x1c>
1c0050fa:	410c                	lw	a1,0(a0)
1c0050fc:	008aa503          	lw	a0,8(s5)
1c005100:	846fc0ef          	jal	ra,1c001146 <__mulsf3>
1c005104:	a2efc0ef          	jal	ra,1c001332 <__fixsfsi>
    int16_t var_3_f = FP2FIX(Anchors->variances[3]     ,10);
1c005108:	1c014337          	lui	t1,0x1c014
1c00510c:	56430313          	addi	t1,t1,1380 # 1c014564 <IntegerExpLUT+0x1c>
1c005110:	00032583          	lw	a1,0(t1)
    int16_t var_2_f = FP2FIX(Anchors->variances[2]     ,10);
1c005114:	10054d33          	p.exths	s10,a0
    int16_t var_3_f = FP2FIX(Anchors->variances[3]     ,10);
1c005118:	00caa503          	lw	a0,12(s5)
1c00511c:	82afc0ef          	jal	ra,1c001146 <__mulsf3>
1c005120:	a12fc0ef          	jal	ra,1c001332 <__fixsfsi>
    uint32_t w_fix = FP2FIX(w,11);
1c005124:	1c014337          	lui	t1,0x1c014
1c005128:	56830313          	addi	t1,t1,1384 # 1c014568 <IntegerExpLUT+0x20>
1c00512c:	00032583          	lw	a1,0(t1)
    int16_t var_3_f = FP2FIX(Anchors->variances[3]     ,10);
1c005130:	100549b3          	p.exths	s3,a0
    uint32_t w_fix = FP2FIX(w,11);
1c005134:	856e                	mv	a0,s11
1c005136:	810fc0ef          	jal	ra,1c001146 <__mulsf3>
1c00513a:	9f8fc0ef          	jal	ra,1c001332 <__fixsfsi>
1c00513e:	d42a                	sw	a0,40(sp)
    uint32_t h_fix = FP2FIX(h,11);
1c005140:	1c014537          	lui	a0,0x1c014
1c005144:	56850513          	addi	a0,a0,1384 # 1c014568 <IntegerExpLUT+0x20>
1c005148:	410c                	lw	a1,0(a0)
1c00514a:	855e                	mv	a0,s7
1c00514c:	ffbfb0ef          	jal	ra,1c001146 <__mulsf3>
1c005150:	9e2fc0ef          	jal	ra,1c001332 <__fixsfsi>
    int16_t var_0_f = FP2FIX(Anchors->variances[0]  * w,10);
1c005154:	000aa583          	lw	a1,0(s5)
    uint32_t h_fix = FP2FIX(h,11);
1c005158:	d62a                	sw	a0,44(sp)
    int16_t var_0_f = FP2FIX(Anchors->variances[0]  * w,10);
1c00515a:	856e                	mv	a0,s11
1c00515c:	febfb0ef          	jal	ra,1c001146 <__mulsf3>
1c005160:	1c014337          	lui	t1,0x1c014
1c005164:	56430313          	addi	t1,t1,1380 # 1c014564 <IntegerExpLUT+0x1c>
1c005168:	00032583          	lw	a1,0(t1)
1c00516c:	fdbfb0ef          	jal	ra,1c001146 <__mulsf3>
1c005170:	9c2fc0ef          	jal	ra,1c001332 <__fixsfsi>
1c005174:	5312                	lw	t1,36(sp)
    int16_t var_1_f = FP2FIX(Anchors->variances[1]  * h,10);
1c005176:	004aa583          	lw	a1,4(s5)
1c00517a:	00191293          	slli	t0,s2,0x1
1c00517e:	51437d83          	p.lhu	s11,s4(t1)
1c005182:	01228ab3          	add	s5,t0,s2
1c005186:	0004aa03          	lw	s4,0(s1)
1c00518a:	80ad8ddb          	p.muls	s11,s11,a0
1c00518e:	855e                	mv	a0,s7
1c005190:	fb7fb0ef          	jal	ra,1c001146 <__mulsf3>
1c005194:	1c014337          	lui	t1,0x1c014
1c005198:	56430313          	addi	t1,t1,1380 # 1c014564 <IntegerExpLUT+0x1c>
1c00519c:	00032583          	lw	a1,0(t1)
1c0051a0:	0a8e                	slli	s5,s5,0x3
1c0051a2:	9ad2                	add	s5,s5,s4
1c0051a4:	fa3fb0ef          	jal	ra,1c001146 <__mulsf3>
1c0051a8:	98afc0ef          	jal	ra,1c001332 <__fixsfsi>
1c0051ac:	46c2                	lw	a3,16(sp)
    if(shift<0){
1c0051ae:	4802                	lw	a6,0(sp)
1c0051b0:	4652                	lw	a2,20(sp)
1c0051b2:	0026d683          	lhu	a3,2(a3)
1c0051b6:	4732                	lw	a4,12(sp)
1c0051b8:	47e2                	lw	a5,24(sp)
1c0051ba:	80a6855b          	p.muls	a0,a3,a0
1c0051be:	4892                	lw	a7,4(sp)
1c0051c0:	4e22                	lw	t3,8(sp)
1c0051c2:	4ef2                	lw	t4,28(sp)
1c0051c4:	14084463          	bltz	a6,1c00530c <KerPredecoderShort+0x3ce>
    Exp = Exp_fp_17_15( (w_offset * var_2_f) >> (Boxes_Q-5));
1c0051c8:	5352                	lw	t1,52(sp)
        bbxs->bbs[bbxs->num_bb].x  = ((cx_offset * var_0_f) << shift) + cx;
1c0051ca:	010d9db3          	sll	s11,s11,a6
        bbxs->bbs[bbxs->num_bb].y  = ((cy_offset * var_1_f) << shift) + cy;
1c0051ce:	01051533          	sll	a0,a0,a6
        bbxs->bbs[bbxs->num_bb].x  = ((cx_offset * var_0_f) << shift) + cx;
1c0051d2:	9eee                	add	t4,t4,s11
        bbxs->bbs[bbxs->num_bb].y  = ((cy_offset * var_1_f) << shift) + cy;
1c0051d4:	01950f33          	add	t5,a0,s9
    Exp = Exp_fp_17_15( (w_offset * var_2_f) >> (Boxes_Q-5));
1c0051d8:	03a787b3          	mul	a5,a5,s10
1c0051dc:	ffb30693          	addi	a3,t1,-5
        bbxs->bbs[bbxs->num_bb].x  = ((cx_offset * var_0_f) << shift) + cx;
1c0051e0:	01daa023          	sw	t4,0(s5)
        bbxs->bbs[bbxs->num_bb].y  = ((cy_offset * var_1_f) << shift) + cy;
1c0051e4:	01eaa223          	sw	t5,4(s5)
    Exp = Exp_fp_17_15( (w_offset * var_2_f) >> (Boxes_Q-5));
1c0051e8:	40d7d7b3          	sra	a5,a5,a3
    if (!X) return 0x8000;
1c0051ec:	14079663          	bnez	a5,1c005338 <KerPredecoderShort+0x3fa>
1c0051f0:	57a2                	lw	a5,40(sp)
1c0051f2:	00f79593          	slli	a1,a5,0xf
    Exp = Exp_fp_17_15( (h_offset * var_3_f) >> (Boxes_Q-5));
1c0051f6:	033609b3          	mul	s3,a2,s3
    bbxs->bbs[bbxs->num_bb].w       = (Exp * w_fix); //Output Q26
1c0051fa:	00baa423          	sw	a1,8(s5)
    Exp = Exp_fp_17_15( (h_offset * var_3_f) >> (Boxes_Q-5));
1c0051fe:	40d9d9b3          	sra	s3,s3,a3
    if (!X) return 0x8000;
1c005202:	da0985e3          	beqz	s3,1c004fac <KerPredecoderShort+0x6e>
    Y = Abs(X);
1c005206:	2609cb63          	bltz	s3,1c00547c <KerPredecoderShort+0x53e>
    IntX = (Y >> 15);
1c00520a:	40f9d793          	srai	a5,s3,0xf
    if (IntX >= (int) ARRAYSIZE (IntegerExpLUT)) {
1c00520e:	462d                	li	a2,11
1c005210:	86ce                	mv	a3,s3
1c005212:	2cf64f63          	blt	a2,a5,1c0054f0 <KerPredecoderShort+0x5b2>
    FractX = (Y & 0x7FFF);
1c005216:	6321                	lui	t1,0x8
1c005218:	137d                	addi	t1,t1,-1
1c00521a:	0066f6b3          	and	a3,a3,t1
    if (gap_bitextractu(FractX, 1, 14)) {
1c00521e:	01169513          	slli	a0,a3,0x11
1c005222:	00055563          	bgez	a0,1c00522c <KerPredecoderShort+0x2ee>
        FractX -= 0x8000; IntX++;
1c005226:	65a1                	lui	a1,0x8
1c005228:	8e8d                	sub	a3,a3,a1
1c00522a:	0785                	addi	a5,a5,1
    FractX_s = FractX; Z_s = FractX; Result = 0;
1c00522c:	1006ceb3          	p.exths	t4,a3
        Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c005230:	9fdec5db          	p.mac.sl.zl	a1,t4,t4,a5
    ScaledInt = IntegerExpLUT[IntX]; ScaledFract = FractionExpLUT[IntX];
1c005234:	1c014337          	lui	t1,0x1c014
1c005238:	1c014537          	lui	a0,0x1c014
        Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c00523c:	00f69613          	slli	a2,a3,0xf
    ScaledInt = IntegerExpLUT[IntX]; ScaledFract = FractionExpLUT[IntX];
1c005240:	0786                	slli	a5,a5,0x1
1c005242:	53030313          	addi	t1,t1,1328 # 1c014530 <FractionExpLUT>
1c005246:	54850513          	addi	a0,a0,1352 # 1c014548 <IntegerExpLUT>
        Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c00524a:	40d606b3          	sub	a3,a2,a3
    ScaledInt = IntegerExpLUT[IntX]; ScaledFract = FractionExpLUT[IntX];
1c00524e:	00f30633          	add	a2,t1,a5
1c005252:	97aa                	add	a5,a5,a0
1c005254:	0007df83          	lhu	t6,0(a5)
        Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c005258:	1005c7b3          	p.exths	a5,a1
1c00525c:	9fd7c2db          	p.mac.sl.zl	t0,a5,t4,a5
        Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c005260:	07ba                	slli	a5,a5,0xe
1c005262:	96be                	add	a3,a3,a5
    ScaledInt = IntegerExpLUT[IntX]; ScaledFract = FractionExpLUT[IntX];
1c005264:	00065f03          	lhu	t5,0(a2)
    Result = gap_roundnorm(Result, 15) + ExpCoeffLUT[0];
1c005268:	6321                	lui	t1,0x8
1c00526a:	137d                	addi	t1,t1,-1
    if (Result && (X > 0x7FFFFFFF)) 
1c00526c:	4501                	li	a0,0
        Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c00526e:	1002c2b3          	p.exths	t0,t0
1c005272:	9fd2c7db          	p.mac.sl.zl	a5,t0,t4,a5
1c005276:	1007c633          	p.exths	a2,a5
1c00527a:	9fd643db          	p.mac.sl.zl	t2,a2,t4,a5
        Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c00527e:	00261793          	slli	a5,a2,0x2
1c005282:	97b2                	add	a5,a5,a2
1c005284:	078a                	slli	a5,a5,0x2
1c005286:	97b2                	add	a5,a5,a2
1c005288:	00679613          	slli	a2,a5,0x6
1c00528c:	963e                	add	a2,a2,a5
        Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c00528e:	1003c933          	p.exths	s2,t2
1c005292:	9fd945db          	p.mac.sl.zl	a1,s2,t4,a5
        Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c005296:	00491393          	slli	t2,s2,0x4
1c00529a:	93ca                	add	t2,t2,s2
1c00529c:	0392                	slli	t2,t2,0x4
1c00529e:	93ca                	add	t2,t2,s2
        Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c0052a0:	1005c7b3          	p.exths	a5,a1
1c0052a4:	9fd7c95b          	p.mac.sl.zl	s2,a5,t4,a5
        Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c0052a8:	00179593          	slli	a1,a5,0x1
1c0052ac:	95be                	add	a1,a1,a5
1c0052ae:	058e                	slli	a1,a1,0x3
1c0052b0:	8d9d                	sub	a1,a1,a5
1c0052b2:	6785                	lui	a5,0x1
1c0052b4:	55578793          	addi	a5,a5,1365 # 1555 <__rt_stack_size+0xd55>
1c0052b8:	0586                	slli	a1,a1,0x1
1c0052ba:	42f286b3          	p.mac	a3,t0,a5
        Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c0052be:	10094933          	p.exths	s2,s2
        Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c0052c2:	00391793          	slli	a5,s2,0x3
1c0052c6:	412787b3          	sub	a5,a5,s2
        Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c0052ca:	9fd9495b          	p.mac.sl.zl	s2,s2,t4,a5
        Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c0052ce:	9636                	add	a2,a2,a3
1c0052d0:	93b2                	add	t2,t2,a2
1c0052d2:	959e                	add	a1,a1,t2
1c0052d4:	97ae                	add	a5,a5,a1
    Result = gap_muluRN(U_Res, ScaledFract, 15) + U_Res * ScaledInt;
1c0052d6:	65c1                	lui	a1,0x10
1c0052d8:	15fd                	addi	a1,a1,-1
        Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c0052da:	10094933          	p.exths	s2,s2
    Result = gap_roundnorm(Result, 15) + ExpCoeffLUT[0];
1c0052de:	1f27e7db          	p.mac.zh.zl	a5,a5,s2,a5
1c0052e2:	979a                	add	a5,a5,t1
    Result = gap_muluRN(U_Res, ScaledFract, 15) + U_Res * ScaledInt;
1c0052e4:	1fe7cf5b          	p.mac.zl.zl	t5,a5,t5,a5
1c0052e8:	8fed                	and	a5,a5,a1
1c0052ea:	43f78f33          	p.mac	t5,a5,t6
    if (Result && (X > 0x7FFFFFFF)) 
1c0052ee:	000f0763          	beqz	t5,1c0052fc <KerPredecoderShort+0x3be>
1c0052f2:	2009c463          	bltz	s3,1c0054fa <KerPredecoderShort+0x5bc>
1c0052f6:	5632                	lw	a2,44(sp)
1c0052f8:	02cf0533          	mul	a0,t5,a2
1c0052fc:	00449903          	lh	s2,4(s1)
1c005300:	00191a93          	slli	s5,s2,0x1
1c005304:	9aca                	add	s5,s5,s2
1c005306:	0a8e                	slli	s5,s5,0x3
1c005308:	9ad2                	add	s5,s5,s4
1c00530a:	b165                	j	1c004fb2 <KerPredecoderShort+0x74>
    Exp = Exp_fp_17_15( (w_offset * var_2_f) >> (Boxes_Q-5));
1c00530c:	03a787b3          	mul	a5,a5,s10
1c005310:	5352                	lw	t1,52(sp)
        bbxs->bbs[bbxs->num_bb].x  = ((cx_offset * var_0_f) >> -shift) + cx;
1c005312:	410006b3          	neg	a3,a6
1c005316:	40ddddb3          	sra	s11,s11,a3
        bbxs->bbs[bbxs->num_bb].y  = ((cy_offset * var_1_f) >> -shift) + cy;
1c00531a:	40d556b3          	sra	a3,a0,a3
1c00531e:	01968f33          	add	t5,a3,s9
        bbxs->bbs[bbxs->num_bb].x  = ((cx_offset * var_0_f) >> -shift) + cx;
1c005322:	9eee                	add	t4,t4,s11
    Exp = Exp_fp_17_15( (w_offset * var_2_f) >> (Boxes_Q-5));
1c005324:	ffb30693          	addi	a3,t1,-5 # 7ffb <__rt_stack_size+0x77fb>
        bbxs->bbs[bbxs->num_bb].x  = ((cx_offset * var_0_f) >> -shift) + cx;
1c005328:	01daa023          	sw	t4,0(s5)
        bbxs->bbs[bbxs->num_bb].y  = ((cy_offset * var_1_f) >> -shift) + cy;
1c00532c:	01eaa223          	sw	t5,4(s5)
    Exp = Exp_fp_17_15( (w_offset * var_2_f) >> (Boxes_Q-5));
1c005330:	40d7d7b3          	sra	a5,a5,a3
    if (!X) return 0x8000;
1c005334:	ea078ee3          	beqz	a5,1c0051f0 <KerPredecoderShort+0x2b2>
    Y = Abs(X);
1c005338:	1607c563          	bltz	a5,1c0054a2 <KerPredecoderShort+0x564>
    IntX = (Y >> 15);
1c00533c:	40f7d513          	srai	a0,a5,0xf
    if (IntX >= (int) ARRAYSIZE (IntegerExpLUT)) {
1c005340:	4ead                	li	t4,11
1c005342:	85be                	mv	a1,a5
1c005344:	1caecd63          	blt	t4,a0,1c00551e <KerPredecoderShort+0x5e0>
    FractX = (Y & 0x7FFF);
1c005348:	6321                	lui	t1,0x8
1c00534a:	137d                	addi	t1,t1,-1
1c00534c:	0065f5b3          	and	a1,a1,t1
    if (gap_bitextractu(FractX, 1, 14)) {
1c005350:	01159313          	slli	t1,a1,0x11
1c005354:	00035663          	bgez	t1,1c005360 <KerPredecoderShort+0x422>
        FractX -= 0x8000; IntX++;
1c005358:	6321                	lui	t1,0x8
1c00535a:	406585b3          	sub	a1,a1,t1
1c00535e:	0505                	addi	a0,a0,1
    FractX_s = FractX; Z_s = FractX; Result = 0;
1c005360:	1005c2b3          	p.exths	t0,a1
        Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c005364:	9e52cedb          	p.mac.sl.zl	t4,t0,t0,a5
        Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c005368:	00f59393          	slli	t2,a1,0xf
    ScaledInt = IntegerExpLUT[IntX]; ScaledFract = FractionExpLUT[IntX];
1c00536c:	1c014337          	lui	t1,0x1c014
        Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c005370:	40b383b3          	sub	t2,t2,a1
    ScaledInt = IntegerExpLUT[IntX]; ScaledFract = FractionExpLUT[IntX];
1c005374:	53030313          	addi	t1,t1,1328 # 1c014530 <FractionExpLUT>
1c005378:	00151593          	slli	a1,a0,0x1
1c00537c:	00b30533          	add	a0,t1,a1
1c005380:	00055903          	lhu	s2,0(a0)
1c005384:	1c014537          	lui	a0,0x1c014
1c005388:	54850513          	addi	a0,a0,1352 # 1c014548 <IntegerExpLUT>
        Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c00538c:	100eceb3          	p.exths	t4,t4
1c005390:	9e5ecbdb          	p.mac.sl.zl	s7,t4,t0,a5
    ScaledInt = IntegerExpLUT[IntX]; ScaledFract = FractionExpLUT[IntX];
1c005394:	95aa                	add	a1,a1,a0
        Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c005396:	0eba                	slli	t4,t4,0xe
1c005398:	93f6                	add	t2,t2,t4
1c00539a:	6305                	lui	t1,0x1
1c00539c:	55530313          	addi	t1,t1,1365 # 1555 <__rt_stack_size+0xd55>
    ScaledInt = IntegerExpLUT[IntX]; ScaledFract = FractionExpLUT[IntX];
1c0053a0:	0005dd83          	lhu	s11,0(a1) # 10000 <__L1Cl>
    if (Result && (X > 0x7FFFFFFF)) 
1c0053a4:	4581                	li	a1,0
        Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c0053a6:	100bcbb3          	p.exths	s7,s7
1c0053aa:	9e5bc55b          	p.mac.sl.zl	a0,s7,t0,a5
1c0053ae:	10054eb3          	p.exths	t4,a0
1c0053b2:	9e5ecfdb          	p.mac.sl.zl	t6,t4,t0,a5
        Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c0053b6:	002e9513          	slli	a0,t4,0x2
1c0053ba:	9576                	add	a0,a0,t4
1c0053bc:	050a                	slli	a0,a0,0x2
1c0053be:	9576                	add	a0,a0,t4
1c0053c0:	00651e93          	slli	t4,a0,0x6
1c0053c4:	9576                	add	a0,a0,t4
        Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c0053c6:	100fcf33          	p.exths	t5,t6
1c0053ca:	9e5f4adb          	p.mac.sl.zl	s5,t5,t0,a5
        Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c0053ce:	004f1f93          	slli	t6,t5,0x4
1c0053d2:	9ffa                	add	t6,t6,t5
1c0053d4:	0f92                	slli	t6,t6,0x4
1c0053d6:	9ffa                	add	t6,t6,t5
        Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c0053d8:	100acab3          	p.exths	s5,s5
1c0053dc:	9e5acf5b          	p.mac.sl.zl	t5,s5,t0,a5
        Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c0053e0:	001a9e93          	slli	t4,s5,0x1
1c0053e4:	9ed6                	add	t4,t4,s5
1c0053e6:	0e8e                	slli	t4,t4,0x3
1c0053e8:	415e8eb3          	sub	t4,t4,s5
1c0053ec:	0e86                	slli	t4,t4,0x1
1c0053ee:	426b83b3          	p.mac	t2,s7,t1
        Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c0053f2:	100f4f33          	p.exths	t5,t5
        Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c0053f6:	003f1b93          	slli	s7,t5,0x3
1c0053fa:	41eb8bb3          	sub	s7,s7,t5
    Result = gap_muluRN(U_Res, ScaledFract, 15) + U_Res * ScaledInt;
1c0053fe:	6341                	lui	t1,0x10
1c005400:	137d                	addi	t1,t1,-1
        Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c005402:	9e5f4f5b          	p.mac.sl.zl	t5,t5,t0,a5
        Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c005406:	93aa                	add	t2,t2,a0
1c005408:	9f9e                	add	t6,t6,t2
1c00540a:	9efe                	add	t4,t4,t6
1c00540c:	9bf6                	add	s7,s7,t4
    Result = gap_roundnorm(Result, 15) + ExpCoeffLUT[0];
1c00540e:	6521                	lui	a0,0x8
1c005410:	157d                	addi	a0,a0,-1
        Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c005412:	100f4f33          	p.exths	t5,t5
    Result = gap_roundnorm(Result, 15) + ExpCoeffLUT[0];
1c005416:	1febef5b          	p.mac.zh.zl	t5,s7,t5,a5
1c00541a:	9f2a                	add	t5,t5,a0
    Result = gap_muluRN(U_Res, ScaledFract, 15) + U_Res * ScaledInt;
1c00541c:	1f2f495b          	p.mac.zl.zl	s2,t5,s2,a5
1c005420:	006f7f33          	and	t5,t5,t1
1c005424:	43bf0933          	p.mac	s2,t5,s11
    if (Result && (X > 0x7FFFFFFF)) 
1c005428:	00090763          	beqz	s2,1c005436 <KerPredecoderShort+0x4f8>
1c00542c:	0e07cf63          	bltz	a5,1c00552a <KerPredecoderShort+0x5ec>
1c005430:	57a2                	lw	a5,40(sp)
1c005432:	02f905b3          	mul	a1,s2,a5
1c005436:	00449903          	lh	s2,4(s1)
1c00543a:	00191a93          	slli	s5,s2,0x1
1c00543e:	9aca                	add	s5,s5,s2
1c005440:	0a8e                	slli	s5,s5,0x3
1c005442:	9ad2                	add	s5,s5,s4
1c005444:	bb4d                	j	1c0051f6 <KerPredecoderShort+0x2b8>
1c005446:	8362                	mv	t1,s8
        for(unsigned int i=0;i<H;i++){
1c005448:	5642                	lw	a2,48(sp)
1c00544a:	5702                	lw	a4,32(sp)
1c00544c:	56f2                	lw	a3,60(sp)
1c00544e:	57e2                	lw	a5,56(sp)
1c005450:	0605                	addi	a2,a2,1
1c005452:	0705                	addi	a4,a4,1
1c005454:	d832                	sw	a2,48(sp)
1c005456:	d03a                	sw	a4,32(sp)
1c005458:	98b6                	add	a7,a7,a3
1c00545a:	b4c793e3          	bne	a5,a2,1c004fa0 <KerPredecoderShort+0x62>
                }
            }
        }
    }

}
1c00545e:	50f6                	lw	ra,124(sp)
1c005460:	5466                	lw	s0,120(sp)
1c005462:	54d6                	lw	s1,116(sp)
1c005464:	5946                	lw	s2,112(sp)
1c005466:	59b6                	lw	s3,108(sp)
1c005468:	5a26                	lw	s4,104(sp)
1c00546a:	5a96                	lw	s5,100(sp)
1c00546c:	5b06                	lw	s6,96(sp)
1c00546e:	4bf6                	lw	s7,92(sp)
1c005470:	4c66                	lw	s8,88(sp)
1c005472:	4cd6                	lw	s9,84(sp)
1c005474:	4d46                	lw	s10,80(sp)
1c005476:	4db6                	lw	s11,76(sp)
1c005478:	6109                	addi	sp,sp,128
1c00547a:	8082                	ret
    Y = Abs(X);
1c00547c:	41300633          	neg	a2,s3
    IntX = (Y >> 15);
1c005480:	40f65793          	srai	a5,a2,0xf
    if (IntX >= (int) ARRAYSIZE (IntegerExpLUT)) {
1c005484:	45ad                	li	a1,11
    Y = Abs(X);
1c005486:	86b2                	mv	a3,a2
    if (IntX >= (int) ARRAYSIZE (IntegerExpLUT)) {
1c005488:	d8f5d7e3          	ble	a5,a1,1c005216 <KerPredecoderShort+0x2d8>
        if (Y==X) return 0x7FFFFFFF; else return 0;
1c00548c:	4501                	li	a0,0
1c00548e:	b2c992e3          	bne	s3,a2,1c004fb2 <KerPredecoderShort+0x74>
1c005492:	5632                	lw	a2,44(sp)
1c005494:	800006b7          	lui	a3,0x80000
1c005498:	fff6c693          	not	a3,a3
1c00549c:	02d60533          	mul	a0,a2,a3
1c0054a0:	be09                	j	1c004fb2 <KerPredecoderShort+0x74>
    Y = Abs(X);
1c0054a2:	40f00eb3          	neg	t4,a5
    IntX = (Y >> 15);
1c0054a6:	40fed513          	srai	a0,t4,0xf
    if (IntX >= (int) ARRAYSIZE (IntegerExpLUT)) {
1c0054aa:	4f2d                	li	t5,11
    Y = Abs(X);
1c0054ac:	85f6                	mv	a1,t4
    if (IntX >= (int) ARRAYSIZE (IntegerExpLUT)) {
1c0054ae:	e8af5de3          	ble	a0,t5,1c005348 <KerPredecoderShort+0x40a>
        if (Y==X) return 0x7FFFFFFF; else return 0;
1c0054b2:	4581                	li	a1,0
1c0054b4:	d5d791e3          	bne	a5,t4,1c0051f6 <KerPredecoderShort+0x2b8>
1c0054b8:	5322                	lw	t1,40(sp)
1c0054ba:	80000537          	lui	a0,0x80000
1c0054be:	fff54513          	not	a0,a0
1c0054c2:	02a305b3          	mul	a1,t1,a0
1c0054c6:	bb05                	j	1c0051f6 <KerPredecoderShort+0x2b8>
}
1c0054c8:	5466                	lw	s0,120(sp)
1c0054ca:	50f6                	lw	ra,124(sp)
1c0054cc:	54d6                	lw	s1,116(sp)
1c0054ce:	5946                	lw	s2,112(sp)
1c0054d0:	59b6                	lw	s3,108(sp)
1c0054d2:	5a26                	lw	s4,104(sp)
1c0054d4:	5a96                	lw	s5,100(sp)
1c0054d6:	5b06                	lw	s6,96(sp)
1c0054d8:	4bf6                	lw	s7,92(sp)
1c0054da:	4c66                	lw	s8,88(sp)
1c0054dc:	4cd6                	lw	s9,84(sp)
1c0054de:	4d46                	lw	s10,80(sp)
1c0054e0:	4db6                	lw	s11,76(sp)
                        printf("Reached Max BB number...\n");
1c0054e2:	1c014537          	lui	a0,0x1c014
1c0054e6:	56c50513          	addi	a0,a0,1388 # 1c01456c <IntegerExpLUT+0x24>
}
1c0054ea:	6109                	addi	sp,sp,128
                        printf("Reached Max BB number...\n");
1c0054ec:	51e0d06f          	j	1c012a0a <puts>
1c0054f0:	5632                	lw	a2,44(sp)
1c0054f2:	01f61513          	slli	a0,a2,0x1f
1c0054f6:	8d11                	sub	a0,a0,a2
1c0054f8:	bc6d                	j	1c004fb2 <KerPredecoderShort+0x74>
        Result = ((0x7FFFFFFF / Result) >> 1);      /* negative value */
1c0054fa:	800006b7          	lui	a3,0x80000
1c0054fe:	fff6c693          	not	a3,a3
1c005502:	03e6c533          	div	a0,a3,t5
1c005506:	00449903          	lh	s2,4(s1)
1c00550a:	57b2                	lw	a5,44(sp)
1c00550c:	00191a93          	slli	s5,s2,0x1
1c005510:	9aca                	add	s5,s5,s2
1c005512:	0a8e                	slli	s5,s5,0x3
1c005514:	9ad2                	add	s5,s5,s4
1c005516:	8505                	srai	a0,a0,0x1
1c005518:	02f50533          	mul	a0,a0,a5
1c00551c:	bc59                	j	1c004fb2 <KerPredecoderShort+0x74>
1c00551e:	5322                	lw	t1,40(sp)
1c005520:	01f31593          	slli	a1,t1,0x1f
1c005524:	406585b3          	sub	a1,a1,t1
1c005528:	b1f9                	j	1c0051f6 <KerPredecoderShort+0x2b8>
1c00552a:	80000337          	lui	t1,0x80000
1c00552e:	fff34313          	not	t1,t1
1c005532:	032345b3          	div	a1,t1,s2
1c005536:	00449903          	lh	s2,4(s1)
1c00553a:	57a2                	lw	a5,40(sp)
1c00553c:	00191a93          	slli	s5,s2,0x1
1c005540:	9aca                	add	s5,s5,s2
1c005542:	0a8e                	slli	s5,s5,0x3
1c005544:	9ad2                	add	s5,s5,s4
1c005546:	8585                	srai	a1,a1,0x1
1c005548:	02f585b3          	mul	a1,a1,a5
1c00554c:	b16d                	j	1c0051f6 <KerPredecoderShort+0x2b8>

1c00554e <initAnchorLayer_1>:
{36.203869,18.101934},
{18.101934,36.203869},
{44.340500,14.780168},
{14.780168,44.340500},
};
int initAnchorLayer_1(){
1c00554e:	1141                	addi	sp,sp,-16
	anchor_layer_1 = (Alps*) pmsis_l2_malloc(sizeof(Alps));
1c005550:	04000513          	li	a0,64
int initAnchorLayer_1(){
1c005554:	c606                	sw	ra,12(sp)
	anchor_layer_1 = (Alps*) pmsis_l2_malloc(sizeof(Alps));
1c005556:	5240b0ef          	jal	ra,1c010a7a <pi_l2_malloc>
1c00555a:	1c015737          	lui	a4,0x1c015
1c00555e:	a9470713          	addi	a4,a4,-1388 # 1c014a94 <anchor_layer_1>
1c005562:	87aa                	mv	a5,a0
1c005564:	c308                	sw	a0,0(a4)
	if(anchor_layer_1==NULL) return 1;
1c005566:	4505                	li	a0,1
1c005568:	cfb5                	beqz	a5,1c0055e4 <initAnchorLayer_1+0x96>
	anchor_layer_1->img_width  = 160;
	anchor_layer_1->img_height = 128;
	anchor_layer_1->this_scale = 0.200000;
	anchor_layer_1->next_scale = 0.350000;
	anchor_layer_1->anchor_params = 4;
	anchor_layer_1->iou_thr = 0.100000;
1c00556a:	1c0146b7          	lui	a3,0x1c014
1c00556e:	5886a683          	lw	a3,1416(a3) # 1c014588 <IntegerExpLUT+0x40>
	anchor_layer_1->next_scale = 0.350000;
1c005572:	410005b7          	lui	a1,0x41000
	anchor_layer_1->step_height= 8.000000;
	anchor_layer_1->step_width = 8.000000;
1c005576:	3f000637          	lui	a2,0x3f000
	anchor_layer_1->iou_thr = 0.100000;
1c00557a:	dfd4                	sw	a3,60(a5)
	anchor_layer_1->n_classes  = 3;
1c00557c:	101406b7          	lui	a3,0x10140
1c005580:	068d                	addi	a3,a3,3
1c005582:	c394                	sw	a3,0(a5)
	anchor_layer_1->feature_map_height = 16;
1c005584:	00a006b7          	lui	a3,0xa00
1c005588:	08068693          	addi	a3,a3,128 # a00080 <__L2+0x980080>
1c00558c:	c3d4                	sw	a3,4(a5)
	anchor_layer_1->img_width  = 160;
1c00558e:	3e4cd6b7          	lui	a3,0x3e4cd
1c005592:	ccd68693          	addi	a3,a3,-819 # 3e4ccccd <__l2_end+0x224b7c25>
1c005596:	c794                	sw	a3,8(a5)
	anchor_layer_1->this_scale = 0.200000;
1c005598:	3eb336b7          	lui	a3,0x3eb33
1c00559c:	33368693          	addi	a3,a3,819 # 3eb33333 <__l2_end+0x22b1e28b>
1c0055a0:	c7d4                	sw	a3,12(a5)
	anchor_layer_1->offset_height = 0.500000;
	anchor_layer_1->offset_width  = 0.500000;
	anchor_layer_1->aspect_ratios = n_aspect_ratios_1;
	anchor_layer_1->variances = n_variances_1;
	anchor_layer_1->two_boxes_for_ar1 = true;
	anchor_layer_1->confidence_thr = 13106;
1c0055a2:	668d                	lui	a3,0x3
1c0055a4:	33268693          	addi	a3,a3,818 # 3332 <__rt_stack_size+0x2b32>
1c0055a8:	02d79c23          	sh	a3,56(a5)
	anchor_layer_1->n_aspect_ratios =  5;
1c0055ac:	40500693          	li	a3,1029
1c0055b0:	02d79223          	sh	a3,36(a5)
	anchor_layer_1->n_anchors   =  6;
1c0055b4:	4699                	li	a3,6
	anchor_layer_1->aspect_ratios = n_aspect_ratios_1;
1c0055b6:	00470893          	addi	a7,a4,4
	anchor_layer_1->variances = n_variances_1;
1c0055ba:	01870813          	addi	a6,a4,24
	anchor_layer_1->n_anchors   =  6;
1c0055be:	02d78723          	sb	a3,46(a5)
	anchor_layer_1->n_variances =  4;
	anchor_layer_1->anchorsWH = anchorWH_1;
1c0055c2:	02870713          	addi	a4,a4,40
	anchor_layer_1->n_variances =  4;
1c0055c6:	4691                	li	a3,4
	anchor_layer_1->two_boxes_for_ar1 = true;
1c0055c8:	02a786a3          	sb	a0,45(a5)
	anchor_layer_1->next_scale = 0.350000;
1c0055cc:	cb8c                	sw	a1,16(a5)
	anchor_layer_1->step_height= 8.000000;
1c0055ce:	cbcc                	sw	a1,20(a5)
	anchor_layer_1->step_width = 8.000000;
1c0055d0:	cf90                	sw	a2,24(a5)
	anchor_layer_1->offset_height = 0.500000;
1c0055d2:	cfd0                	sw	a2,28(a5)
	anchor_layer_1->aspect_ratios = n_aspect_ratios_1;
1c0055d4:	0317a023          	sw	a7,32(a5)
	anchor_layer_1->variances = n_variances_1;
1c0055d8:	0307a423          	sw	a6,40(a5)
	anchor_layer_1->n_variances =  4;
1c0055dc:	02d78623          	sb	a3,44(a5)
	anchor_layer_1->anchorsWH = anchorWH_1;
1c0055e0:	db98                	sw	a4,48(a5)
	return 0;
1c0055e2:	4501                	li	a0,0
}
1c0055e4:	40b2                	lw	ra,12(sp)
1c0055e6:	0141                	addi	sp,sp,16
1c0055e8:	8082                	ret

1c0055ea <initAnchorLayer_2>:
{63.356766,31.678383},
{31.678383,63.356766},
{77.595879,25.865292},
{25.865292,77.595871},
};
int initAnchorLayer_2(){
1c0055ea:	1141                	addi	sp,sp,-16
	anchor_layer_2 = (Alps*) pmsis_l2_malloc(sizeof(Alps));
1c0055ec:	04000513          	li	a0,64
int initAnchorLayer_2(){
1c0055f0:	c606                	sw	ra,12(sp)
	anchor_layer_2 = (Alps*) pmsis_l2_malloc(sizeof(Alps));
1c0055f2:	4880b0ef          	jal	ra,1c010a7a <pi_l2_malloc>
1c0055f6:	1c015737          	lui	a4,0x1c015
1c0055fa:	a9470713          	addi	a4,a4,-1388 # 1c014a94 <anchor_layer_1>
1c0055fe:	87aa                	mv	a5,a0
1c005600:	cf28                	sw	a0,88(a4)
	if(anchor_layer_2==NULL) return 1;
1c005602:	4505                	li	a0,1
1c005604:	cbb5                	beqz	a5,1c005678 <initAnchorLayer_2+0x8e>
	anchor_layer_2->img_width  = 160;
	anchor_layer_2->img_height = 128;
	anchor_layer_2->this_scale = 0.350000;
	anchor_layer_2->next_scale = 0.500000;
	anchor_layer_2->anchor_params = 4;
	anchor_layer_2->iou_thr = 0.100000;
1c005606:	1c014637          	lui	a2,0x1c014
1c00560a:	58862603          	lw	a2,1416(a2) # 1c014588 <IntegerExpLUT+0x40>
	anchor_layer_2->this_scale = 0.350000;
1c00560e:	3f0006b7          	lui	a3,0x3f000
1c005612:	c7d4                	sw	a3,12(a5)
	anchor_layer_2->iou_thr = 0.100000;
1c005614:	dfd0                	sw	a2,60(a5)
	anchor_layer_2->n_classes  = 3;
1c005616:	080a0637          	lui	a2,0x80a0
1c00561a:	060d                	addi	a2,a2,3
	anchor_layer_2->step_height= 16.000000;
	anchor_layer_2->step_width = 16.000000;
1c00561c:	cf94                	sw	a3,24(a5)
	anchor_layer_2->offset_height = 0.500000;
1c00561e:	cfd4                	sw	a3,28(a5)
	anchor_layer_2->offset_width  = 0.500000;
	anchor_layer_2->aspect_ratios = n_aspect_ratios_2;
	anchor_layer_2->variances = n_variances_2;
	anchor_layer_2->two_boxes_for_ar1 = true;
	anchor_layer_2->confidence_thr = 13106;
1c005620:	668d                	lui	a3,0x3
1c005622:	33268693          	addi	a3,a3,818 # 3332 <__rt_stack_size+0x2b32>
	anchor_layer_2->n_classes  = 3;
1c005626:	c390                	sw	a2,0(a5)
	anchor_layer_2->feature_map_height = 8;
1c005628:	00a00637          	lui	a2,0xa00
1c00562c:	08060613          	addi	a2,a2,128 # a00080 <__L2+0x980080>
	anchor_layer_2->confidence_thr = 13106;
1c005630:	02d79c23          	sh	a3,56(a5)
	anchor_layer_2->n_aspect_ratios =  5;
1c005634:	40500693          	li	a3,1029
	anchor_layer_2->feature_map_height = 8;
1c005638:	c3d0                	sw	a2,4(a5)
	anchor_layer_2->n_aspect_ratios =  5;
1c00563a:	02d79223          	sh	a3,36(a5)
	anchor_layer_2->img_width  = 160;
1c00563e:	3eb33637          	lui	a2,0x3eb33
	anchor_layer_2->n_anchors   =  6;
1c005642:	4699                	li	a3,6
	anchor_layer_2->next_scale = 0.500000;
1c005644:	418005b7          	lui	a1,0x41800
	anchor_layer_2->aspect_ratios = n_aspect_ratios_2;
1c005648:	05c70893          	addi	a7,a4,92
	anchor_layer_2->variances = n_variances_2;
1c00564c:	07070813          	addi	a6,a4,112
	anchor_layer_2->img_width  = 160;
1c005650:	33360613          	addi	a2,a2,819 # 3eb33333 <__l2_end+0x22b1e28b>
	anchor_layer_2->n_variances =  4;
	anchor_layer_2->anchorsWH = anchorWH_2;
1c005654:	08070713          	addi	a4,a4,128
	anchor_layer_2->n_anchors   =  6;
1c005658:	02d78723          	sb	a3,46(a5)
	anchor_layer_2->n_variances =  4;
1c00565c:	4691                	li	a3,4
	anchor_layer_2->two_boxes_for_ar1 = true;
1c00565e:	02a786a3          	sb	a0,45(a5)
	anchor_layer_2->img_width  = 160;
1c005662:	c790                	sw	a2,8(a5)
	anchor_layer_2->next_scale = 0.500000;
1c005664:	cb8c                	sw	a1,16(a5)
	anchor_layer_2->step_height= 16.000000;
1c005666:	cbcc                	sw	a1,20(a5)
	anchor_layer_2->aspect_ratios = n_aspect_ratios_2;
1c005668:	0317a023          	sw	a7,32(a5)
	anchor_layer_2->variances = n_variances_2;
1c00566c:	0307a423          	sw	a6,40(a5)
	anchor_layer_2->n_variances =  4;
1c005670:	02d78623          	sb	a3,44(a5)
	anchor_layer_2->anchorsWH = anchorWH_2;
1c005674:	db98                	sw	a4,48(a5)
	return 0;
1c005676:	4501                	li	a0,0
}
1c005678:	40b2                	lw	ra,12(sp)
1c00567a:	0141                	addi	sp,sp,16
1c00567c:	8082                	ret

1c00567e <initAnchorLayer_3>:
{90.509666,45.254833},
{45.254833,90.509666},
{110.851250,36.950417},
{36.950417,110.851250},
};
int initAnchorLayer_3(){
1c00567e:	1141                	addi	sp,sp,-16
	anchor_layer_3 = (Alps*) pmsis_l2_malloc(sizeof(Alps));
1c005680:	04000513          	li	a0,64
int initAnchorLayer_3(){
1c005684:	c606                	sw	ra,12(sp)
	anchor_layer_3 = (Alps*) pmsis_l2_malloc(sizeof(Alps));
1c005686:	3f40b0ef          	jal	ra,1c010a7a <pi_l2_malloc>
1c00568a:	1c015737          	lui	a4,0x1c015
1c00568e:	a9470713          	addi	a4,a4,-1388 # 1c014a94 <anchor_layer_1>
1c005692:	87aa                	mv	a5,a0
1c005694:	0aa72823          	sw	a0,176(a4)
	if(anchor_layer_3==NULL) return 1;
1c005698:	4505                	li	a0,1
1c00569a:	cbb5                	beqz	a5,1c00570e <initAnchorLayer_3+0x90>
	anchor_layer_3->img_width  = 160;
	anchor_layer_3->img_height = 128;
	anchor_layer_3->this_scale = 0.500000;
	anchor_layer_3->next_scale = 0.650000;
	anchor_layer_3->anchor_params = 4;
	anchor_layer_3->iou_thr = 0.100000;
1c00569c:	1c014637          	lui	a2,0x1c014
1c0056a0:	58862603          	lw	a2,1416(a2) # 1c014588 <IntegerExpLUT+0x40>
	anchor_layer_3->img_width  = 160;
1c0056a4:	3f0006b7          	lui	a3,0x3f000
1c0056a8:	c794                	sw	a3,8(a5)
	anchor_layer_3->iou_thr = 0.100000;
1c0056aa:	dfd0                	sw	a2,60(a5)
	anchor_layer_3->n_classes  = 3;
1c0056ac:	04050637          	lui	a2,0x4050
1c0056b0:	060d                	addi	a2,a2,3
	anchor_layer_3->step_height= 32.000000;
	anchor_layer_3->step_width = 32.000000;
1c0056b2:	cf94                	sw	a3,24(a5)
	anchor_layer_3->offset_height = 0.500000;
1c0056b4:	cfd4                	sw	a3,28(a5)
	anchor_layer_3->offset_width  = 0.500000;
	anchor_layer_3->aspect_ratios = n_aspect_ratios_3;
	anchor_layer_3->variances = n_variances_3;
	anchor_layer_3->two_boxes_for_ar1 = true;
	anchor_layer_3->confidence_thr = 13106;
1c0056b6:	668d                	lui	a3,0x3
1c0056b8:	33268693          	addi	a3,a3,818 # 3332 <__rt_stack_size+0x2b32>
	anchor_layer_3->n_classes  = 3;
1c0056bc:	c390                	sw	a2,0(a5)
	anchor_layer_3->feature_map_height = 4;
1c0056be:	00a00637          	lui	a2,0xa00
1c0056c2:	08060613          	addi	a2,a2,128 # a00080 <__L2+0x980080>
	anchor_layer_3->confidence_thr = 13106;
1c0056c6:	02d79c23          	sh	a3,56(a5)
	anchor_layer_3->n_aspect_ratios =  5;
1c0056ca:	40500693          	li	a3,1029
	anchor_layer_3->feature_map_height = 4;
1c0056ce:	c3d0                	sw	a2,4(a5)
	anchor_layer_3->n_aspect_ratios =  5;
1c0056d0:	02d79223          	sh	a3,36(a5)
	anchor_layer_3->this_scale = 0.500000;
1c0056d4:	3f266637          	lui	a2,0x3f266
	anchor_layer_3->n_anchors   =  6;
1c0056d8:	4699                	li	a3,6
	anchor_layer_3->next_scale = 0.650000;
1c0056da:	420005b7          	lui	a1,0x42000
	anchor_layer_3->aspect_ratios = n_aspect_ratios_3;
1c0056de:	0b470893          	addi	a7,a4,180
	anchor_layer_3->variances = n_variances_3;
1c0056e2:	0c870813          	addi	a6,a4,200
	anchor_layer_3->this_scale = 0.500000;
1c0056e6:	66660613          	addi	a2,a2,1638 # 3f266666 <__l2_end+0x232515be>
	anchor_layer_3->n_variances =  4;
	anchor_layer_3->anchorsWH = anchorWH_3;
1c0056ea:	0d870713          	addi	a4,a4,216
	anchor_layer_3->n_anchors   =  6;
1c0056ee:	02d78723          	sb	a3,46(a5)
	anchor_layer_3->n_variances =  4;
1c0056f2:	4691                	li	a3,4
	anchor_layer_3->two_boxes_for_ar1 = true;
1c0056f4:	02a786a3          	sb	a0,45(a5)
	anchor_layer_3->this_scale = 0.500000;
1c0056f8:	c7d0                	sw	a2,12(a5)
	anchor_layer_3->next_scale = 0.650000;
1c0056fa:	cb8c                	sw	a1,16(a5)
	anchor_layer_3->step_height= 32.000000;
1c0056fc:	cbcc                	sw	a1,20(a5)
	anchor_layer_3->aspect_ratios = n_aspect_ratios_3;
1c0056fe:	0317a023          	sw	a7,32(a5)
	anchor_layer_3->variances = n_variances_3;
1c005702:	0307a423          	sw	a6,40(a5)
	anchor_layer_3->n_variances =  4;
1c005706:	02d78623          	sb	a3,44(a5)
	anchor_layer_3->anchorsWH = anchorWH_3;
1c00570a:	db98                	sw	a4,48(a5)
	return 0;
1c00570c:	4501                	li	a0,0
}
1c00570e:	40b2                	lw	ra,12(sp)
1c005710:	0141                	addi	sp,sp,16
1c005712:	8082                	ret

1c005714 <initAnchorLayer_4>:
{117.662567,58.831284},
{58.831284,117.662567},
{144.106628,48.035542},
{48.035542,144.106613},
};
int initAnchorLayer_4(){
1c005714:	1141                	addi	sp,sp,-16
	anchor_layer_4 = (Alps*) pmsis_l2_malloc(sizeof(Alps));
1c005716:	04000513          	li	a0,64
int initAnchorLayer_4(){
1c00571a:	c606                	sw	ra,12(sp)
	anchor_layer_4 = (Alps*) pmsis_l2_malloc(sizeof(Alps));
1c00571c:	35e0b0ef          	jal	ra,1c010a7a <pi_l2_malloc>
1c005720:	1c015737          	lui	a4,0x1c015
1c005724:	a9470713          	addi	a4,a4,-1388 # 1c014a94 <anchor_layer_1>
1c005728:	87aa                	mv	a5,a0
1c00572a:	10a72423          	sw	a0,264(a4)
	if(anchor_layer_4==NULL) return 1;
1c00572e:	4505                	li	a0,1
1c005730:	cfbd                	beqz	a5,1c0057ae <initAnchorLayer_4+0x9a>
	anchor_layer_4->img_width  = 160;
	anchor_layer_4->img_height = 128;
	anchor_layer_4->this_scale = 0.650000;
	anchor_layer_4->next_scale = 0.800000;
	anchor_layer_4->anchor_params = 4;
	anchor_layer_4->iou_thr = 0.100000;
1c005732:	1c0146b7          	lui	a3,0x1c014
1c005736:	5886a683          	lw	a3,1416(a3) # 1c014588 <IntegerExpLUT+0x40>
	anchor_layer_4->step_height= 64.000000;
	anchor_layer_4->step_width = 80.000000;
1c00573a:	3f000637          	lui	a2,0x3f000
	anchor_layer_4->offset_height = 0.500000;
	anchor_layer_4->offset_width  = 0.500000;
	anchor_layer_4->aspect_ratios = n_aspect_ratios_4;
1c00573e:	10c70813          	addi	a6,a4,268
	anchor_layer_4->iou_thr = 0.100000;
1c005742:	dfd4                	sw	a3,60(a5)
	anchor_layer_4->n_classes  = 3;
1c005744:	020206b7          	lui	a3,0x2020
1c005748:	068d                	addi	a3,a3,3
1c00574a:	c394                	sw	a3,0(a5)
	anchor_layer_4->feature_map_height = 2;
1c00574c:	00a006b7          	lui	a3,0xa00
1c005750:	08068693          	addi	a3,a3,128 # a00080 <__L2+0x980080>
1c005754:	c3d4                	sw	a3,4(a5)
	anchor_layer_4->img_width  = 160;
1c005756:	3f2666b7          	lui	a3,0x3f266
1c00575a:	66668693          	addi	a3,a3,1638 # 3f266666 <__l2_end+0x232515be>
1c00575e:	c794                	sw	a3,8(a5)
	anchor_layer_4->this_scale = 0.650000;
1c005760:	3f4cd6b7          	lui	a3,0x3f4cd
1c005764:	ccd68693          	addi	a3,a3,-819 # 3f4ccccd <__l2_end+0x234b7c25>
1c005768:	c7d4                	sw	a3,12(a5)
	anchor_layer_4->next_scale = 0.800000;
1c00576a:	428006b7          	lui	a3,0x42800
1c00576e:	cb94                	sw	a3,16(a5)
	anchor_layer_4->step_height= 64.000000;
1c005770:	42a006b7          	lui	a3,0x42a00
1c005774:	cbd4                	sw	a3,20(a5)
	anchor_layer_4->variances = n_variances_4;
	anchor_layer_4->two_boxes_for_ar1 = true;
	anchor_layer_4->confidence_thr = 13106;
1c005776:	668d                	lui	a3,0x3
1c005778:	33268693          	addi	a3,a3,818 # 3332 <__rt_stack_size+0x2b32>
1c00577c:	02d79c23          	sh	a3,56(a5)
	anchor_layer_4->n_aspect_ratios =  5;
1c005780:	40500693          	li	a3,1029
1c005784:	02d79223          	sh	a3,36(a5)
	anchor_layer_4->n_anchors   =  6;
1c005788:	4699                	li	a3,6
	anchor_layer_4->variances = n_variances_4;
1c00578a:	12070593          	addi	a1,a4,288
	anchor_layer_4->n_anchors   =  6;
1c00578e:	02d78723          	sb	a3,46(a5)
	anchor_layer_4->n_variances =  4;
	anchor_layer_4->anchorsWH = anchorWH_4;
1c005792:	13070713          	addi	a4,a4,304
	anchor_layer_4->n_variances =  4;
1c005796:	4691                	li	a3,4
	anchor_layer_4->two_boxes_for_ar1 = true;
1c005798:	02a786a3          	sb	a0,45(a5)
	anchor_layer_4->step_width = 80.000000;
1c00579c:	cf90                	sw	a2,24(a5)
	anchor_layer_4->offset_height = 0.500000;
1c00579e:	cfd0                	sw	a2,28(a5)
	anchor_layer_4->aspect_ratios = n_aspect_ratios_4;
1c0057a0:	0307a023          	sw	a6,32(a5)
	anchor_layer_4->variances = n_variances_4;
1c0057a4:	d78c                	sw	a1,40(a5)
	anchor_layer_4->n_variances =  4;
1c0057a6:	02d78623          	sb	a3,44(a5)
	anchor_layer_4->anchorsWH = anchorWH_4;
1c0057aa:	db98                	sw	a4,48(a5)
	return 0;
1c0057ac:	4501                	li	a0,0
}
1c0057ae:	40b2                	lw	ra,12(sp)
1c0057b0:	0141                	addi	sp,sp,16
1c0057b2:	8082                	ret

1c0057b4 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c0057b4:	710d                	addi	sp,sp,-352
1c0057b6:	14912a23          	sw	s1,340(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D1, [0 x 655360, 655360]][Tile0, 22:[160x6, 20:160x6, 160x2], 4]
		Tile0: [0, 30720, 3840], Tile1: [0, 30720, 3840], Tile2; [0, 30720, 3840]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+12960);
1c0057ba:	100004b7          	lui	s1,0x10000
1c0057be:	02048493          	addi	s1,s1,32 # 10000020 <cnn_ssd_L1_Memory>
1c0057c2:	4098                	lw	a4,0(s1)
	KerArg0->W = (unsigned short int) (160);
	KerArg0->OutFeatures = (unsigned short int) (8);
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+5120);
1c0057c4:	6785                	lui	a5,0x1
{
1c0057c6:	ce2a                	sw	a0,28(sp)
	KerArg0->NormBias = (signed char) (12);
	KerArg1->W = (unsigned short int) (160);
1c0057c8:	1c014837          	lui	a6,0x1c014
	KerArg1->UsedW = (unsigned short int) (160);
	KerArg1->InFeatures = (unsigned short int) (1);
1c0057cc:	1c0143b7          	lui	t2,0x1c014
	KerArg0->NormBias = (signed char) (12);
1c0057d0:	4531                	li	a0,12
	KerArg1->W = (unsigned short int) (160);
1c0057d2:	5b882e83          	lw	t4,1464(a6) # 1c0145b8 <IntegerExpLUT+0x70>
	KerArg1->OutFeatures = (unsigned short int) (8);
	KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+5136);
1c0057d6:	41078313          	addi	t1,a5,1040 # 1410 <__rt_stack_size+0xc10>
	KerArg0->NormBias = (signed char) (12);
1c0057da:	02a10723          	sb	a0,46(sp)
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+5120);
1c0057de:	40078813          	addi	a6,a5,1024
	KerArg1->InFeatures = (unsigned short int) (1);
1c0057e2:	5bc3a503          	lw	a0,1468(t2) # 1c0145bc <IntegerExpLUT+0x74>
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+12960);
1c0057e6:	678d                	lui	a5,0x3
1c0057e8:	2a078793          	addi	a5,a5,672 # 32a0 <__rt_stack_size+0x2aa0>
1c0057ec:	97ba                	add	a5,a5,a4
	KerArg0->OutFeatures = (unsigned short int) (8);
1c0057ee:	4e21                	li	t3,8
	KerArg0->W = (unsigned short int) (160);
1c0057f0:	0a000f93          	li	t6,160
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+12960);
	KerArg1->Norm = (unsigned char) (15);
1c0057f4:	4f3d                	li	t5,15
	KerArg1->TotalInFeatures = (short int) (1);
1c0057f6:	4285                	li	t0,1
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+5120);
1c0057f8:	983a                	add	a6,a6,a4
	KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+5136);
1c0057fa:	971a                	add	a4,a4,t1
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+12960);
1c0057fc:	d23e                	sw	a5,36(sp)
	KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+5136);
1c0057fe:	d3ba                	sw	a4,228(sp)
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+12960);
1c005800:	d5be                	sw	a5,232(sp)
	KerArg1->Orientation = (unsigned char) (1);
	KerArg2->In = (int * __restrict__) (cnn_ssd_L1_Memory+12960);
1c005802:	da3e                	sw	a5,52(sp)
	KerArg2->W = (unsigned short int) (160);
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+12960);
1c005804:	de3e                	sw	a5,60(sp)
{
1c005806:	14112e23          	sw	ra,348(sp)
1c00580a:	14812c23          	sw	s0,344(sp)
1c00580e:	15212823          	sw	s2,336(sp)
1c005812:	15312623          	sw	s3,332(sp)
1c005816:	15412423          	sw	s4,328(sp)
1c00581a:	15512223          	sw	s5,324(sp)
1c00581e:	15612023          	sw	s6,320(sp)
1c005822:	13712e23          	sw	s7,316(sp)
1c005826:	13812c23          	sw	s8,312(sp)
1c00582a:	13912a23          	sw	s9,308(sp)
1c00582e:	13a12823          	sw	s10,304(sp)
1c005832:	13b12623          	sw	s11,300(sp)
	KerArg0->W = (unsigned short int) (160);
1c005836:	03f11423          	sh	t6,40(sp)
	KerArg0->OutFeatures = (unsigned short int) (8);
1c00583a:	03c11623          	sh	t3,44(sp)
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+5120);
1c00583e:	d842                	sw	a6,48(sp)
	KerArg1->W = (unsigned short int) (160);
1c005840:	cbf6                	sw	t4,212(sp)
	KerArg1->InFeatures = (unsigned short int) (1);
1c005842:	cfaa                	sw	a0,220(sp)
	KerArg1->Norm = (unsigned char) (15);
1c005844:	0fe10823          	sb	t5,240(sp)
	KerArg1->TotalInFeatures = (short int) (1);
1c005848:	0e511023          	sh	t0,224(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c00584c:	0e5109a3          	sb	t0,243(sp)
	KerArg2->W = (unsigned short int) (160);
1c005850:	03f11c23          	sh	t6,56(sp)
	KerArg2->Norm = (unsigned char) (15);
	KerArg2->InFeatures = (unsigned short int) (8);
	KerArg2->LB = (int) (0);
	KerArg2->UB = (int) (32767);
1c005854:	68a1                	lui	a7,0x8
	KerArg2->Norm = (unsigned char) (15);
1c005856:	05e10023          	sb	t5,64(sp)
	KerArg2->UB = (int) (32767);
1c00585a:	18fd                	addi	a7,a7,-1
	KerArg3->In = (short int * __restrict__) (cnn_ssd_L1_Memory+12960);
1c00585c:	ddbe                	sw	a5,248(sp)
	KerArg3->W = (unsigned short int) (160);
	KerArg3->UsedW = (unsigned short int) (160);
	KerArg3->OutFeatures = (unsigned short int) (8);
	KerArg3->Pad = (v4s) 0;
1c00585e:	00007757          	pv.add.sci.b	a4,zero,0
	KerArg3->Orientation = (unsigned char) (1);
1c005862:	10100793          	li	a5,257
	KerArg2->InFeatures = (unsigned short int) (8);
1c005866:	05c11123          	sh	t3,66(sp)
	KerArg2->LB = (int) (0);
1c00586a:	c282                	sw	zero,68(sp)
	KerArg2->UB = (int) (32767);
1c00586c:	c4c6                	sw	a7,72(sp)
	KerArg3->W = (unsigned short int) (160);
1c00586e:	dff6                	sw	t4,252(sp)
	KerArg3->OutFeatures = (unsigned short int) (8);
1c005870:	11c11223          	sh	t3,260(sp)
	KerArg3->Pad = (v4s) 0;
1c005874:	10e12623          	sw	a4,268(sp)
	KerArg3->Orientation = (unsigned char) (1);
1c005878:	10f11923          	sh	a5,274(sp)
	KerArg3->Oper = (unsigned char) (1);
	KerArg3->LB = (int) (0);
1c00587c:	10012c23          	sw	zero,280(sp)
	KerArg3->UB = (int) (32767);
1c005880:	11112e23          	sw	a7,284(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005884:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c005888:	002047b7          	lui	a5,0x204
1c00588c:	4007a883          	lw	a7,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c005890:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c005894:	0741                	addi	a4,a4,16
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c005896:	c1574733          	p.bset	a4,a4,0,21
1c00589a:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00589e:	4107a023          	sw	a6,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0058a2:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c0058a6:	c8c6                	sw	a7,80(sp)
        copy->length = 0;
1c0058a8:	d082                	sw	zero,96(sp)
  __builtin_pulp_spr_write(reg, val);
1c0058aa:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c0058ae:	5706                	lw	a4,96(sp)
1c0058b0:	4c070063          	beqz	a4,1c005d70 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x5bc>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0058b4:	5626                	lw	a2,104(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0058b6:	02000713          	li	a4,32
1c0058ba:	ca09                	beqz	a2,1c0058cc <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x118>
1c0058bc:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0058c0:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0058c4:	00e7a223          	sw	a4,4(a5)
1c0058c8:	5626                	lw	a2,104(sp)
1c0058ca:	fa6d                	bnez	a2,1c0058bc <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x108>
	/*================================= Read Tiles Prolog ===============================*/
	_C_Out=0; _SC_Out=3840; _LC_Out=480;
	_SP_Out=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+5120), 16, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+5136), 144, 0, &DmaR_Evt2);
1c0058cc:	4090                	lw	a2,0(s1)
1c0058ce:	6785                	lui	a5,0x1
1c0058d0:	41078793          	addi	a5,a5,1040 # 1410 <__rt_stack_size+0xc10>
1c0058d4:	963e                	add	a2,a2,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0058d6:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0058da:	002047b7          	lui	a5,0x204
1c0058de:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0058e2:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0058e6:	09070713          	addi	a4,a4,144 # b0090 <__L2+0x30090>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0058ea:	c1574733          	p.bset	a4,a4,0,21
1c0058ee:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0058f2:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0058f6:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c0058fa:	d8c2                	sw	a6,112(sp)
        copy->length = 0;
1c0058fc:	c102                	sw	zero,128(sp)
  __builtin_pulp_spr_write(reg, val);
1c0058fe:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c005902:	470a                	lw	a4,128(sp)
1c005904:	40070c63          	beqz	a4,1c005d1c <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x568>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c005908:	462a                	lw	a2,136(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00590a:	02000713          	li	a4,32
1c00590e:	ca09                	beqz	a2,1c005920 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x16c>
1c005910:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005914:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005918:	00e7a223          	sw	a4,4(a5)
1c00591c:	462a                	lw	a2,136(sp)
1c00591e:	fa6d                	bnez	a2,1c005910 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x15c>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Filter */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+0), 2240, 0, &DmaR_Evt3);
1c005920:	4088                	lw	a0,0(s1)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005922:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c005926:	00204737          	lui	a4,0x204
1c00592a:	40072583          	lw	a1,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00592e:	6905                	lui	s2,0x1
1c005930:	8c090813          	addi	a6,s2,-1856 # 8c0 <__rt_stack_size+0xc0>
1c005934:	000307b7          	lui	a5,0x30
1c005938:	de0827b3          	p.insert	a5,a6,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00593c:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c005940:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c005944:	40f72023          	sw	a5,1024(a4)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c005948:	40a72023          	sw	a0,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00594c:	47f2                	lw	a5,28(sp)
1c00594e:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c005952:	c92e                	sw	a1,144(sp)
        copy->length = 0;
1c005954:	d102                	sw	zero,160(sp)
  __builtin_pulp_spr_write(reg, val);
1c005956:	30061073          	csrw	mstatus,a2
1c00595a:	670d                	lui	a4,0x3
1c00595c:	94070713          	addi	a4,a4,-1728 # 2940 <__rt_stack_size+0x2140>
1c005960:	6d09                	lui	s10,0x2
1c005962:	9736                	add	a4,a4,a3
1c005964:	760d0d13          	addi	s10,s10,1888 # 2760 <__rt_stack_size+0x1f60>
1c005968:	9d36                	add	s10,s10,a3
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00596a:	00204db7          	lui	s11,0x204
1c00596e:	cc3a                	sw	a4,24(sp)
1c005970:	105c                	addi	a5,sp,36
	_C_Out=0; _SC_Out=3840; _LC_Out=480;
1c005972:	1e000713          	li	a4,480
1c005976:	ca6a                	sw	s10,20(sp)
1c005978:	8c36                	mv	s8,a3
1c00597a:	4a01                	li	s4,0
	_N_In=0;
1c00597c:	4981                	li	s3,0
	_C_Out=0; _SC_Out=3840; _LC_Out=480;
1c00597e:	c63a                	sw	a4,12(sp)
1c005980:	f0090913          	addi	s2,s2,-256
	_SP_Out=0;
1c005984:	c802                	sw	zero,16(sp)
1c005986:	c43e                	sw	a5,8(sp)
1c005988:	0d010b93          	addi	s7,sp,208
1c00598c:	03410b13          	addi	s6,sp,52
1c005990:	0f810a93          	addi	s5,sp,248
1c005994:	0ff00c93          	li	s9,255
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c005998:	200d8d13          	addi	s10,s11,512 # 204200 <__L2+0x184200>
	/*============================= End Read Tiles Prolog ===============================*/
	{ /* Single iteration on D1 */
		int D1Ind_Last = 1;
		for (T0Ind=0; T0Ind<22; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
			int T0Ind_Last = (T0Ind==21), T0Ind_NextLast = ((T0Ind+1)==21);
1c00599c:	feba0893          	addi	a7,s4,-21
1c0059a0:	0018b893          	seqz	a7,a7
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			KerArg0->H = (unsigned short int) (T0Ind_Last?2:6);
1c0059a4:	4755                	li	a4,21
1c0059a6:	42ea0f63          	beq	s4,a4,1c005de4 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x630>
1c0059aa:	4799                	li	a5,6
1c0059ac:	02f11523          	sh	a5,42(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0059b0:	099da223          	sw	s9,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0059b4:	019d2023          	sw	s9,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0059b8:	019d2623          	sw	s9,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0059bc:	1c00d7b7          	lui	a5,0x1c00d
1c0059c0:	92a78793          	addi	a5,a5,-1750 # 1c00c92a <KerParSetBias_DP_fp>
1c0059c4:	08fda023          	sw	a5,128(s11)
1c0059c8:	4722                	lw	a4,8(sp)
1c0059ca:	08eda023          	sw	a4,128(s11)
1c0059ce:	1048                	addi	a0,sp,36
1c0059d0:	c246                	sw	a7,4(sp)
1c0059d2:	759060ef          	jal	ra,1c00c92a <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0059d6:	01cd6783          	p.elw	a5,28(s10)
			{ /* Single iteration on D0 */
				int D0Ind_Last = 1, D0Ind_NextLast = 1;
				/*================================= Prepare Tiles ===================================*/
				_SN_In = 0;
				if (!(T0Ind_Last)) {
					_N_In = _N_In + (1920-(320*(T0Ind==0))); _SN_In = (1*((T0Ind_NextLast)?960:2560)); 
1c0059da:	4892                	lw	a7,4(sp)
1c0059dc:	3e0a0463          	beqz	s4,1c005dc4 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x610>
1c0059e0:	1c014737          	lui	a4,0x1c014
1c0059e4:	5c070713          	addi	a4,a4,1472 # 1c0145c0 <IntegerExpLUT+0x78>
1c0059e8:	47d1                	li	a5,20
1c0059ea:	78098993          	addi	s3,s3,1920
			KerArg0->H = (unsigned short int) (T0Ind_Last?2:6);
1c0059ee:	4419                	li	s0,6
					_N_In = _N_In + (1920-(320*(T0Ind==0))); _SN_In = (1*((T0Ind_NextLast)?960:2560)); 
1c0059f0:	00072e03          	lw	t3,0(a4)
1c0059f4:	42fa0663          	beq	s4,a5,1c005e20 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x66c>
  if (copy->length == 0)
1c0059f8:	578a                	lw	a5,160(sp)
1c0059fa:	1c078363          	beqz	a5,1c005bc0 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x40c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0059fe:	56aa                	lw	a3,168(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005a00:	02000793          	li	a5,32
1c005a04:	ca89                	beqz	a3,1c005a16 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x262>
1c005a06:	00fda423          	sw	a5,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005a0a:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005a0e:	00fda223          	sw	a5,4(s11)
1c005a12:	572a                	lw	a4,168(sp)
1c005a14:	fb6d                	bnez	a4,1c005a06 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x252>
1c005a16:	409c                	lw	a5,0(s1)
1c005a18:	001a0313          	addi	t1,s4,1
					_N_In = _N_In + (-40000); _SN_In = (1*(2240)); 
				}
				/*============================= End Prepare Tiles ===================================*/
				/*================================= Read Tiles ======================================*/
				AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read In */
				if (_SN_In) {
1c005a1c:	1e0e1c63          	bnez	t3,1c005c14 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x460>
					AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+2560*((D0Ind_Total+1)%2)),
							_SN_In, 0, &DmaR_Evt3);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+2560*((D0Ind_Total)%2));
1c005a20:	fc1a3e33          	p.bclr	t3,s4,30,1
1c005a24:	002e1693          	slli	a3,t3,0x2
1c005a28:	96f2                	add	a3,a3,t3
1c005a2a:	06a6                	slli	a3,a3,0x9
1c005a2c:	96be                	add	a3,a3,a5
1c005a2e:	c9b6                	sw	a3,208(sp)
				KerArg1->H = (unsigned short int) (((T0Ind_Last)?3:8)-1*(T0Ind==0));
1c005a30:	47d5                	li	a5,21
1c005a32:	46a1                	li	a3,8
1c005a34:	3efa0463          	beq	s4,a5,1c005e1c <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x668>
1c005a38:	001a3793          	seqz	a5,s4
1c005a3c:	0ff7f513          	andi	a0,a5,255
				KerArg1->UsedH = (unsigned short int) (((T0Ind_Last)?3:8)-1*(T0Ind==0));
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c005a40:	4605                	li	a2,1
				KerArg1->H = (unsigned short int) (((T0Ind_Last)?3:8)-1*(T0Ind==0));
1c005a42:	8e89                	sub	a3,a3,a0
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c005a44:	e0c61657          	pv.packlo.b	a2,a2,a2
				KerArg1->H = (unsigned short int) (((T0Ind_Last)?3:8)-1*(T0Ind==0));
1c005a48:	1006d6b3          	p.exthz	a3,a3
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c005a4c:	d8f89657          	pv.packhi.b	a2,a7,a5
				KerArg1->H = (unsigned short int) (((T0Ind_Last)?3:8)-1*(T0Ind==0));
1c005a50:	0cd11c23          	sh	a3,216(sp)
				KerArg1->UsedH = (unsigned short int) (((T0Ind_Last)?3:8)-1*(T0Ind==0));
1c005a54:	0cd11d23          	sh	a3,218(sp)
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c005a58:	d7b2                	sw	a2,236(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c005a5a:	099da223          	sw	s9,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c005a5e:	019d2023          	sw	s9,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c005a62:	019d2623          	sw	s9,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c005a66:	1c00d737          	lui	a4,0x1c00d
1c005a6a:	f4270713          	addi	a4,a4,-190 # 1c00cf42 <KerParConv3x3Stride1_DP_fp>
1c005a6e:	08eda023          	sw	a4,128(s11)
1c005a72:	097da023          	sw	s7,128(s11)
1c005a76:	855e                	mv	a0,s7
1c005a78:	c01a                	sw	t1,0(sp)
1c005a7a:	c272                	sw	t3,4(sp)
1c005a7c:	4c6070ef          	jal	ra,1c00cf42 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005a80:	01cd6783          	p.elw	a5,28(s10)
				/*================================= Update Arg Pipeline =============================*/
				/*============================= End Update Arg Pipeline =============================*/
				D0Ind_Total++;
			} /* End iteration on D0 */
			/*====================== Call Kernel LOC_D0_EPILOG =========================*/
			KerArg2->H = (unsigned short int) (T0Ind_Last?2:6);
1c005a84:	02811d23          	sh	s0,58(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c005a88:	099da223          	sw	s9,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c005a8c:	019d2023          	sw	s9,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c005a90:	019d2623          	sw	s9,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c005a94:	1c00d7b7          	lui	a5,0x1c00d
1c005a98:	ab478793          	addi	a5,a5,-1356 # 1c00cab4 <KerDP_IO_fp>
1c005a9c:	08fda023          	sw	a5,128(s11)
1c005aa0:	096da023          	sw	s6,128(s11)
1c005aa4:	855a                	mv	a0,s6
1c005aa6:	00e070ef          	jal	ra,1c00cab4 <KerDP_IO_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005aaa:	01cd6783          	p.elw	a5,28(s10)
			AT_FORK(gap_ncore(), (void *) KerDP_IO_fp, (void *) KerArg2);
			__CALL(KerDP_IO_fp, KerArg2);
			KerArg3->H = (unsigned short int) (T0Ind_Last?2:6);
			KerArg3->UsedH = (unsigned short int) (T0Ind_Last?2:6);
			KerArg3->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+5280+3840*((T0Ind_Total)%2));
1c005aae:	6705                	lui	a4,0x1
1c005ab0:	4e12                	lw	t3,4(sp)
1c005ab2:	4094                	lw	a3,0(s1)
1c005ab4:	4a070713          	addi	a4,a4,1184 # 14a0 <__rt_stack_size+0xca0>
1c005ab8:	004e1793          	slli	a5,t3,0x4
1c005abc:	41c787b3          	sub	a5,a5,t3
1c005ac0:	07a2                	slli	a5,a5,0x8
1c005ac2:	97ba                	add	a5,a5,a4
1c005ac4:	96be                	add	a3,a3,a5
1c005ac6:	10d12423          	sw	a3,264(sp)
			KerArg3->H = (unsigned short int) (T0Ind_Last?2:6);
1c005aca:	10811023          	sh	s0,256(sp)
			KerArg3->UsedH = (unsigned short int) (T0Ind_Last?2:6);
1c005ace:	10811123          	sh	s0,258(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c005ad2:	099da223          	sw	s9,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c005ad6:	019d2023          	sw	s9,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c005ada:	019d2623          	sw	s9,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c005ade:	1c00d737          	lui	a4,0x1c00d
1c005ae2:	73a70713          	addi	a4,a4,1850 # 1c00d73a <KerParPool2x2Stride2_fp>
1c005ae6:	08eda023          	sw	a4,128(s11)
1c005aea:	095da023          	sw	s5,128(s11)
1c005aee:	8556                	mv	a0,s5
1c005af0:	c23e                	sw	a5,4(sp)
1c005af2:	449070ef          	jal	ra,1c00d73a <KerParPool2x2Stride2_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005af6:	01cd6683          	p.elw	a3,28(s10)
			AT_FORK(gap_ncore(), (void *) KerParPool2x2Stride2_fp, (void *) KerArg3);
			__CALL(KerParPool2x2Stride2_fp, KerArg3);
			/*================================= Write Tiles =====================================*/
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c005afa:	4742                	lw	a4,16(sp)
1c005afc:	4302                	lw	t1,0(sp)
1c005afe:	4792                	lw	a5,4(sp)
1c005b00:	14071c63          	bnez	a4,1c005c58 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x4a4>
			AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) Out+_C_Out), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+5280+3840*((T0Ind_Total)%2)),
1c005b04:	4094                	lw	a3,0(s1)
1c005b06:	97b6                	add	a5,a5,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005b08:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c005b0c:	400da503          	lw	a0,1024(s11)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c005b10:	100956b3          	p.exthz	a3,s2
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c005b14:	c516c6b3          	p.bset	a3,a3,2,17
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c005b18:	c156c6b3          	p.bset	a3,a3,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c005b1c:	40dda023          	sw	a3,1024(s11)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c005b20:	40fda023          	sw	a5,1024(s11)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c005b24:	418da023          	sw	s8,1024(s11)
  return (stride << PLP_DMA_2D_STRIDE_BIT) | (len << PLP_DMA_2D_LEN_BIT);
1c005b28:	4732                	lw	a4,12(sp)
1c005b2a:	280007b7          	lui	a5,0x28000
1c005b2e:	00f76433          	or	s0,a4,a5
#endif
}

static inline void plp_dma_cmd_push_2d(unsigned int cmd, unsigned int locAddr, mchan_ext_t extAddr, unsigned int stride, unsigned int length) {
  plp_dma_cmd_push(cmd, locAddr, extAddr);
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c005b32:	408da023          	sw	s0,1024(s11)
        if (!merge) copy->id = id;
1c005b36:	d92a                	sw	a0,176(sp)
        copy->length = 0;
1c005b38:	c182                	sw	zero,192(sp)
  __builtin_pulp_spr_write(reg, val);
1c005b3a:	30061073          	csrw	mstatus,a2
			/*================================= Update Arg Pipeline =============================*/
			_SP_Out = _SC_Out;_LP_Out = _LC_Out;
			/*============================= End Update Arg Pipeline =============================*/
			/*================================= Prepare Tiles ===================================*/
			_SC_Out = 0;
			if (!(T0Ind_Last)) {
1c005b3e:	47d2                	lw	a5,20(sp)
1c005b40:	02fc0363          	beq	s8,a5,1c005b66 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x3b2>
				_C_Out = _C_Out + (480); _LC_Out = ((T0Ind_NextLast)?160:480); _SC_Out = (8*_LC_Out); 
1c005b44:	47d1                	li	a5,20
1c005b46:	28fa0963          	beq	s4,a5,1c005dd8 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x624>
1c005b4a:	6705                	lui	a4,0x1
1c005b4c:	f0070793          	addi	a5,a4,-256 # f00 <__rt_stack_size+0x700>
1c005b50:	1e000713          	li	a4,480
1c005b54:	c63a                	sw	a4,12(sp)
1c005b56:	c84a                	sw	s2,16(sp)
1c005b58:	893e                	mv	s2,a5
		for (T0Ind=0; T0Ind<22; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c005b5a:	47e2                	lw	a5,24(sp)
1c005b5c:	1e0c0c13          	addi	s8,s8,480
1c005b60:	8a1a                	mv	s4,t1
1c005b62:	e2fc1de3          	bne	s8,a5,1c00599c <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x1e8>
  if (copy->length == 0)
1c005b66:	478e                	lw	a5,192(sp)
1c005b68:	14078e63          	beqz	a5,1c005cc4 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x510>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c005b6c:	46ae                	lw	a3,200(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005b6e:	02000713          	li	a4,32
1c005b72:	002047b7          	lui	a5,0x204
1c005b76:	ca89                	beqz	a3,1c005b88 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x3d4>
1c005b78:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005b7c:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005b80:	00e7a223          	sw	a4,4(a5)
1c005b84:	46ae                	lw	a3,200(sp)
1c005b86:	faed                	bnez	a3,1c005b78 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x3c4>
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c005b88:	15c12083          	lw	ra,348(sp)
1c005b8c:	15812403          	lw	s0,344(sp)
1c005b90:	15412483          	lw	s1,340(sp)
1c005b94:	15012903          	lw	s2,336(sp)
1c005b98:	14c12983          	lw	s3,332(sp)
1c005b9c:	14812a03          	lw	s4,328(sp)
1c005ba0:	14412a83          	lw	s5,324(sp)
1c005ba4:	14012b03          	lw	s6,320(sp)
1c005ba8:	13c12b83          	lw	s7,316(sp)
1c005bac:	13812c03          	lw	s8,312(sp)
1c005bb0:	13412c83          	lw	s9,308(sp)
1c005bb4:	13012d03          	lw	s10,304(sp)
1c005bb8:	12c12d83          	lw	s11,300(sp)
1c005bbc:	6135                	addi	sp,sp,352
1c005bbe:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005bc0:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c005bc4:	404da783          	lw	a5,1028(s11)
1c005bc8:	46ca                	lw	a3,144(sp)
1c005bca:	40d7d7b3          	sra	a5,a5,a3
1c005bce:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005bd2:	c78d                	beqz	a5,1c005bfc <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x448>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005bd4:	10000513          	li	a0,256
  __builtin_pulp_spr_write(reg, val);
1c005bd8:	30061073          	csrw	mstatus,a2
1c005bdc:	00ada423          	sw	a0,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005be0:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005be4:	00ada223          	sw	a0,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005be8:	30047673          	csrrci	a2,mstatus,8
1c005bec:	404da783          	lw	a5,1028(s11)
1c005bf0:	46ca                	lw	a3,144(sp)
1c005bf2:	40d7d7b3          	sra	a5,a5,a3
1c005bf6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005bfa:	fff9                	bnez	a5,1c005bd8 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x424>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c005bfc:	4785                	li	a5,1
1c005bfe:	00d796b3          	sll	a3,a5,a3
1c005c02:	40dda223          	sw	a3,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c005c06:	30061073          	csrw	mstatus,a2
1c005c0a:	409c                	lw	a5,0(s1)
1c005c0c:	001a0313          	addi	t1,s4,1
				if (_SN_In) {
1c005c10:	e00e08e3          	beqz	t3,1c005a20 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x26c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005c14:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c005c18:	400da503          	lw	a0,1024(s11)
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c005c1c:	000306b7          	lui	a3,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c005c20:	de0e26b3          	p.insert	a3,t3,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c005c24:	c136c6b3          	p.bset	a3,a3,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c005c28:	c156c6b3          	p.bset	a3,a3,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c005c2c:	40dda023          	sw	a3,1024(s11)
					AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+2560*((D0Ind_Total+1)%2)),
1c005c30:	fc133e33          	p.bclr	t3,t1,30,1
1c005c34:	002e1693          	slli	a3,t3,0x2
1c005c38:	96f2                	add	a3,a3,t3
1c005c3a:	06a6                	slli	a3,a3,0x9
1c005c3c:	97b6                	add	a5,a5,a3
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c005c3e:	40fda023          	sw	a5,1024(s11)
1c005c42:	4772                	lw	a4,28(sp)
1c005c44:	013707b3          	add	a5,a4,s3
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c005c48:	40fda023          	sw	a5,1024(s11)
        if (!merge) copy->id = id;
1c005c4c:	c92a                	sw	a0,144(sp)
        copy->length = 0;
1c005c4e:	d102                	sw	zero,160(sp)
  __builtin_pulp_spr_write(reg, val);
1c005c50:	30061073          	csrw	mstatus,a2
1c005c54:	409c                	lw	a5,0(s1)
1c005c56:	b3e9                	j	1c005a20 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x26c>
  if (copy->length == 0)
1c005c58:	468e                	lw	a3,192(sp)
1c005c5a:	ce99                	beqz	a3,1c005c78 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x4c4>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c005c5c:	462e                	lw	a2,200(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005c5e:	02000693          	li	a3,32
1c005c62:	ea0601e3          	beqz	a2,1c005b04 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x350>
1c005c66:	00dda423          	sw	a3,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005c6a:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005c6e:	00dda223          	sw	a3,4(s11)
1c005c72:	472e                	lw	a4,200(sp)
1c005c74:	fb6d                	bnez	a4,1c005c66 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x4b2>
1c005c76:	b579                	j	1c005b04 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x350>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005c78:	30047573          	csrrci	a0,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c005c7c:	404da683          	lw	a3,1028(s11)
1c005c80:	564a                	lw	a2,176(sp)
1c005c82:	40c6d6b3          	sra	a3,a3,a2
1c005c86:	fc16b6b3          	p.bclr	a3,a3,30,1
1c005c8a:	c68d                	beqz	a3,1c005cb4 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x500>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005c8c:	10000813          	li	a6,256
  __builtin_pulp_spr_write(reg, val);
1c005c90:	30051073          	csrw	mstatus,a0
1c005c94:	010da423          	sw	a6,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005c98:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005c9c:	010da223          	sw	a6,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005ca0:	30047573          	csrrci	a0,mstatus,8
1c005ca4:	404da703          	lw	a4,1028(s11)
1c005ca8:	564a                	lw	a2,176(sp)
1c005caa:	40c75733          	sra	a4,a4,a2
1c005cae:	fc173733          	p.bclr	a4,a4,30,1
1c005cb2:	ff79                	bnez	a4,1c005c90 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x4dc>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c005cb4:	4685                	li	a3,1
1c005cb6:	00c69633          	sll	a2,a3,a2
1c005cba:	40cda223          	sw	a2,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c005cbe:	30051073          	csrw	mstatus,a0
1c005cc2:	b589                	j	1c005b04 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x350>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005cc4:	30047673          	csrrci	a2,mstatus,8
1c005cc8:	002047b7          	lui	a5,0x204
1c005ccc:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c005cd0:	56ca                	lw	a3,176(sp)
1c005cd2:	40d7d7b3          	sra	a5,a5,a3
1c005cd6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005cda:	c79d                	beqz	a5,1c005d08 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x554>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005cdc:	10000593          	li	a1,256
1c005ce0:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c005ce4:	30061073          	csrw	mstatus,a2
1c005ce8:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005cec:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005cf0:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005cf4:	30047673          	csrrci	a2,mstatus,8
1c005cf8:	40472783          	lw	a5,1028(a4)
1c005cfc:	56ca                	lw	a3,176(sp)
1c005cfe:	40d7d7b3          	sra	a5,a5,a3
1c005d02:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005d06:	fff9                	bnez	a5,1c005ce4 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x530>
1c005d08:	4785                	li	a5,1
1c005d0a:	00d796b3          	sll	a3,a5,a3
1c005d0e:	002047b7          	lui	a5,0x204
1c005d12:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c005d16:	30061073          	csrw	mstatus,a2
1c005d1a:	b5bd                	j	1c005b88 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x3d4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005d1c:	300475f3          	csrrci	a1,mstatus,8
1c005d20:	4047a783          	lw	a5,1028(a5)
1c005d24:	5646                	lw	a2,112(sp)
1c005d26:	40c7d7b3          	sra	a5,a5,a2
1c005d2a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005d2e:	c79d                	beqz	a5,1c005d5c <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x5a8>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005d30:	10000513          	li	a0,256
1c005d34:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c005d38:	30059073          	csrw	mstatus,a1
1c005d3c:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005d40:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005d44:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005d48:	300475f3          	csrrci	a1,mstatus,8
1c005d4c:	40472783          	lw	a5,1028(a4)
1c005d50:	5646                	lw	a2,112(sp)
1c005d52:	40c7d7b3          	sra	a5,a5,a2
1c005d56:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005d5a:	fff9                	bnez	a5,1c005d38 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x584>
1c005d5c:	4785                	li	a5,1
1c005d5e:	00c79633          	sll	a2,a5,a2
1c005d62:	002047b7          	lui	a5,0x204
1c005d66:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c005d6a:	30059073          	csrw	mstatus,a1
1c005d6e:	be4d                	j	1c005920 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x16c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005d70:	30047573          	csrrci	a0,mstatus,8
1c005d74:	4047a783          	lw	a5,1028(a5)
1c005d78:	4646                	lw	a2,80(sp)
1c005d7a:	40c7d7b3          	sra	a5,a5,a2
1c005d7e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005d82:	c79d                	beqz	a5,1c005db0 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x5fc>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005d84:	10000813          	li	a6,256
1c005d88:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c005d8c:	30051073          	csrw	mstatus,a0
1c005d90:	01072423          	sw	a6,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005d94:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005d98:	01072223          	sw	a6,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005d9c:	30047573          	csrrci	a0,mstatus,8
1c005da0:	40472783          	lw	a5,1028(a4)
1c005da4:	4646                	lw	a2,80(sp)
1c005da6:	40c7d7b3          	sra	a5,a5,a2
1c005daa:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005dae:	fff9                	bnez	a5,1c005d8c <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x5d8>
1c005db0:	4785                	li	a5,1
1c005db2:	00c79633          	sll	a2,a5,a2
1c005db6:	002047b7          	lui	a5,0x204
1c005dba:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c005dbe:	30051073          	csrw	mstatus,a0
1c005dc2:	b629                	j	1c0058cc <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x118>
					_N_In = _N_In + (1920-(320*(T0Ind==0))); _SN_In = (1*((T0Ind_NextLast)?960:2560)); 
1c005dc4:	1c014737          	lui	a4,0x1c014
1c005dc8:	5c070713          	addi	a4,a4,1472 # 1c0145c0 <IntegerExpLUT+0x78>
1c005dcc:	64098993          	addi	s3,s3,1600
			KerArg0->H = (unsigned short int) (T0Ind_Last?2:6);
1c005dd0:	4419                	li	s0,6
					_N_In = _N_In + (1920-(320*(T0Ind==0))); _SN_In = (1*((T0Ind_NextLast)?960:2560)); 
1c005dd2:	00072e03          	lw	t3,0(a4)
1c005dd6:	b10d                	j	1c0059f8 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x244>
				_C_Out = _C_Out + (480); _LC_Out = ((T0Ind_NextLast)?160:480); _SC_Out = (8*_LC_Out); 
1c005dd8:	0a000713          	li	a4,160
1c005ddc:	50000793          	li	a5,1280
1c005de0:	c63a                	sw	a4,12(sp)
1c005de2:	bb95                	j	1c005b56 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x3a2>
			KerArg0->H = (unsigned short int) (T0Ind_Last?2:6);
1c005de4:	4789                	li	a5,2
1c005de6:	02f11523          	sh	a5,42(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c005dea:	099da223          	sw	s9,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c005dee:	019d2023          	sw	s9,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c005df2:	019d2623          	sw	s9,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c005df6:	1c00d737          	lui	a4,0x1c00d
1c005dfa:	92a70713          	addi	a4,a4,-1750 # 1c00c92a <KerParSetBias_DP_fp>
1c005dfe:	08eda023          	sw	a4,128(s11)
1c005e02:	47a2                	lw	a5,8(sp)
1c005e04:	08fda023          	sw	a5,128(s11)
1c005e08:	1048                	addi	a0,sp,36
1c005e0a:	c246                	sw	a7,4(sp)
1c005e0c:	31f060ef          	jal	ra,1c00c92a <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005e10:	01cd6783          	p.elw	a5,28(s10)
1c005e14:	4409                	li	s0,2
				_SN_In = 0;
1c005e16:	4e01                	li	t3,0
1c005e18:	4892                	lw	a7,4(sp)
1c005e1a:	bef9                	j	1c0059f8 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x244>
				KerArg1->H = (unsigned short int) (((T0Ind_Last)?3:8)-1*(T0Ind==0));
1c005e1c:	468d                	li	a3,3
1c005e1e:	b929                	j	1c005a38 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x284>
					_N_In = _N_In + (1920-(320*(T0Ind==0))); _SN_In = (1*((T0Ind_NextLast)?960:2560)); 
1c005e20:	3c000e13          	li	t3,960
1c005e24:	bed1                	j	1c0059f8 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu+0x244>

1c005e26 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c005e26:	7149                	addi	sp,sp,-368
1c005e28:	17212023          	sw	s2,352(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D1, [0 x 327680, 327680]][Tile0, 11:[80x6, 9:80x6, 80x4], 4]
		Tile0: [0, 30720, 1920], Tile1: [0, 30720, 1920], Tile2; [0, 30720, 1920]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+15136);
1c005e2c:	10000937          	lui	s2,0x10000
1c005e30:	02090913          	addi	s2,s2,32 # 10000020 <cnn_ssd_L1_Memory>
1c005e34:	00092703          	lw	a4,0(s2)
	KerArg0->W = (unsigned short int) (80);
	KerArg0->OutFeatures = (unsigned short int) (16);
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+5120);
1c005e38:	6785                	lui	a5,0x1
	KerArg0->NormBias = (signed char) (10);
	KerArg1->W = (unsigned short int) (80);
1c005e3a:	1c014837          	lui	a6,0x1c014
1c005e3e:	5d482e83          	lw	t4,1492(a6) # 1c0145d4 <IntegerExpLUT+0x8c>
	KerArg1->UsedW = (unsigned short int) (80);
	KerArg1->InFeatures = (unsigned short int) (2);
	KerArg1->OutFeatures = (unsigned short int) (16);
	KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+5152);
1c005e42:	42078313          	addi	t1,a5,1056 # 1420 <__rt_stack_size+0xc20>
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+5120);
1c005e46:	40078813          	addi	a6,a5,1024
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+15136);
1c005e4a:	6791                	lui	a5,0x4
{
1c005e4c:	d42a                	sw	a0,40(sp)
	KerArg1->InFeatures = (unsigned short int) (2);
1c005e4e:	1c0142b7          	lui	t0,0x1c014
	KerArg0->NormBias = (signed char) (10);
1c005e52:	4529                	li	a0,10
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+15136);
1c005e54:	b2078793          	addi	a5,a5,-1248 # 3b20 <__rt_stack_size+0x3320>
1c005e58:	97ba                	add	a5,a5,a4
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+5120);
1c005e5a:	983a                	add	a6,a6,a4
	KerArg0->NormBias = (signed char) (10);
1c005e5c:	02a10f23          	sb	a0,62(sp)
	KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+5152);
1c005e60:	971a                	add	a4,a4,t1
	KerArg1->InFeatures = (unsigned short int) (2);
1c005e62:	5d82a503          	lw	a0,1496(t0) # 1c0145d8 <IntegerExpLUT+0x90>
	KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+5152);
1c005e66:	dbba                	sw	a4,244(sp)
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+15136);
	KerArg1->Norm = (unsigned char) (13);
	KerArg1->TotalInFeatures = (short int) (8);
1c005e68:	4721                	li	a4,8
	KerArg0->OutFeatures = (unsigned short int) (16);
1c005e6a:	4e41                	li	t3,16
	KerArg0->W = (unsigned short int) (80);
1c005e6c:	05000f93          	li	t6,80
	KerArg1->Norm = (unsigned char) (13);
1c005e70:	4f35                	li	t5,13
	KerArg1->TotalInFeatures = (short int) (8);
1c005e72:	0ee11823          	sh	a4,240(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c005e76:	4705                	li	a4,1
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+15136);
1c005e78:	da3e                	sw	a5,52(sp)
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+15136);
1c005e7a:	ddbe                	sw	a5,248(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c005e7c:	10e101a3          	sb	a4,259(sp)
	KerArg2->In = (int * __restrict__) (cnn_ssd_L1_Memory+15136);
1c005e80:	c2be                	sw	a5,68(sp)
	KerArg2->W = (unsigned short int) (80);
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+15136);
1c005e82:	c6be                	sw	a5,76(sp)
{
1c005e84:	16112623          	sw	ra,364(sp)
1c005e88:	16812423          	sw	s0,360(sp)
1c005e8c:	16912223          	sw	s1,356(sp)
1c005e90:	15312e23          	sw	s3,348(sp)
1c005e94:	15412c23          	sw	s4,344(sp)
1c005e98:	15512a23          	sw	s5,340(sp)
1c005e9c:	15612823          	sw	s6,336(sp)
1c005ea0:	15712623          	sw	s7,332(sp)
1c005ea4:	15812423          	sw	s8,328(sp)
1c005ea8:	15912223          	sw	s9,324(sp)
1c005eac:	15a12023          	sw	s10,320(sp)
1c005eb0:	13b12e23          	sw	s11,316(sp)
	KerArg0->W = (unsigned short int) (80);
1c005eb4:	03f11c23          	sh	t6,56(sp)
	KerArg0->OutFeatures = (unsigned short int) (16);
1c005eb8:	03c11e23          	sh	t3,60(sp)
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+5120);
1c005ebc:	c0c2                	sw	a6,64(sp)
	KerArg1->W = (unsigned short int) (80);
1c005ebe:	d3f6                	sw	t4,228(sp)
	KerArg1->InFeatures = (unsigned short int) (2);
1c005ec0:	d7aa                	sw	a0,236(sp)
	KerArg1->Norm = (unsigned char) (13);
1c005ec2:	11e10023          	sb	t5,256(sp)
	KerArg2->W = (unsigned short int) (80);
1c005ec6:	05f11423          	sh	t6,72(sp)
	KerArg2->Norm = (unsigned char) (13);
	KerArg2->InFeatures = (unsigned short int) (16);
	KerArg2->LB = (int) (0);
	KerArg2->UB = (int) (32767);
1c005eca:	68a1                	lui	a7,0x8
	KerArg2->Norm = (unsigned char) (13);
1c005ecc:	05e10823          	sb	t5,80(sp)
	KerArg2->UB = (int) (32767);
1c005ed0:	18fd                	addi	a7,a7,-1
	KerArg3->In = (short int * __restrict__) (cnn_ssd_L1_Memory+15136);
1c005ed2:	10f12423          	sw	a5,264(sp)
	KerArg3->W = (unsigned short int) (80);
	KerArg3->UsedW = (unsigned short int) (80);
	KerArg3->OutFeatures = (unsigned short int) (16);
	KerArg3->Pad = (v4s) 0;
1c005ed6:	00007757          	pv.add.sci.b	a4,zero,0
	KerArg3->Orientation = (unsigned char) (1);
1c005eda:	10100793          	li	a5,257
	KerArg2->InFeatures = (unsigned short int) (16);
1c005ede:	05c11923          	sh	t3,82(sp)
	KerArg2->LB = (int) (0);
1c005ee2:	ca82                	sw	zero,84(sp)
	KerArg2->UB = (int) (32767);
1c005ee4:	ccc6                	sw	a7,88(sp)
	KerArg3->W = (unsigned short int) (80);
1c005ee6:	11d12623          	sw	t4,268(sp)
	KerArg3->OutFeatures = (unsigned short int) (16);
1c005eea:	11c11a23          	sh	t3,276(sp)
	KerArg3->Pad = (v4s) 0;
1c005eee:	10e12e23          	sw	a4,284(sp)
	KerArg3->Orientation = (unsigned char) (1);
1c005ef2:	12f11123          	sh	a5,290(sp)
	KerArg3->Oper = (unsigned char) (1);
	KerArg3->LB = (int) (0);
1c005ef6:	12012423          	sw	zero,296(sp)
	KerArg3->UB = (int) (32767);
1c005efa:	13112623          	sw	a7,300(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005efe:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c005f02:	002047b7          	lui	a5,0x204
1c005f06:	4007a883          	lw	a7,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c005f0a:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c005f0e:	02070713          	addi	a4,a4,32 # b0020 <__L2+0x30020>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c005f12:	c1574733          	p.bset	a4,a4,0,21
1c005f16:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c005f1a:	4107a023          	sw	a6,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c005f1e:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c005f22:	d0c6                	sw	a7,96(sp)
        copy->length = 0;
1c005f24:	d882                	sw	zero,112(sp)
  __builtin_pulp_spr_write(reg, val);
1c005f26:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c005f2a:	5746                	lw	a4,112(sp)
1c005f2c:	52070563          	beqz	a4,1c006456 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x630>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c005f30:	5666                	lw	a2,120(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005f32:	02000713          	li	a4,32
1c005f36:	ca09                	beqz	a2,1c005f48 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x122>
1c005f38:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005f3c:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005f40:	00e7a223          	sw	a4,4(a5)
1c005f44:	5666                	lw	a2,120(sp)
1c005f46:	fa6d                	bnez	a2,1c005f38 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x112>
	/*================================= Read Tiles Prolog ===============================*/
	_C_Out=0; _SC_Out=3840; _LC_Out=240;
	_SP_Out=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+5120), 32, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+5152), 2304, 0, &DmaR_Evt2);
1c005f48:	00092503          	lw	a0,0(s2)
1c005f4c:	6705                	lui	a4,0x1
1c005f4e:	42070793          	addi	a5,a4,1056 # 1420 <__rt_stack_size+0xc20>
1c005f52:	953e                	add	a0,a0,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005f54:	30047873          	csrrci	a6,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c005f58:	002047b7          	lui	a5,0x204
1c005f5c:	4007a883          	lw	a7,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c005f60:	90070613          	addi	a2,a4,-1792
1c005f64:	00030737          	lui	a4,0x30
1c005f68:	de062733          	p.insert	a4,a2,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c005f6c:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c005f70:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c005f74:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c005f78:	40a7a023          	sw	a0,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c005f7c:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c005f80:	c146                	sw	a7,128(sp)
        copy->length = 0;
1c005f82:	c902                	sw	zero,144(sp)
  __builtin_pulp_spr_write(reg, val);
1c005f84:	30081073          	csrw	mstatus,a6
  if (copy->length == 0)
1c005f88:	474a                	lw	a4,144(sp)
1c005f8a:	46070c63          	beqz	a4,1c006402 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x5dc>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c005f8e:	466a                	lw	a2,152(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005f90:	02000713          	li	a4,32
1c005f94:	ca09                	beqz	a2,1c005fa6 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x180>
1c005f96:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005f9a:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005f9e:	00e7a223          	sw	a4,4(a5)
1c005fa2:	466a                	lw	a2,152(sp)
1c005fa4:	fa6d                	bnez	a2,1c005f96 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x170>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Filter */
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+0), 2240, 10240, 1120, 0, &DmaR_Evt3);
1c005fa6:	00092503          	lw	a0,0(s2)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005faa:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c005fae:	00204737          	lui	a4,0x204
1c005fb2:	40072583          	lw	a1,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c005fb6:	6805                	lui	a6,0x1
1c005fb8:	8c080813          	addi	a6,a6,-1856 # 8c0 <__rt_stack_size+0xc0>
1c005fbc:	000707b7          	lui	a5,0x70
1c005fc0:	de0827b3          	p.insert	a5,a6,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c005fc4:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c005fc8:	6d05                	lui	s10,0x1
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c005fca:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c005fce:	40f72023          	sw	a5,1024(a4)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c005fd2:	40a72023          	sw	a0,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c005fd6:	57a2                	lw	a5,40(sp)
1c005fd8:	40f72023          	sw	a5,1024(a4)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c005fdc:	280007b7          	lui	a5,0x28000
1c005fe0:	46078793          	addi	a5,a5,1120 # 28000460 <__l2_end+0xbfeb3b8>
1c005fe4:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c005fe8:	d12e                	sw	a1,160(sp)
        copy->length = 0;
1c005fea:	d902                	sw	zero,176(sp)
  __builtin_pulp_spr_write(reg, val);
1c005fec:	30061073          	csrw	mstatus,a2
1c005ff0:	ca36                	sw	a3,20(sp)
1c005ff2:	4852                	lw	a6,20(sp)
1c005ff4:	960d0693          	addi	a3,s10,-1696 # 960 <__rt_stack_size+0x160>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c005ff8:	00204db7          	lui	s11,0x204
1c005ffc:	96c2                	add	a3,a3,a6
	_C_Out=0; _SC_Out=3840; _LC_Out=240;
1c005ffe:	f00d0d13          	addi	s10,s10,-256
1c006002:	d636                	sw	a3,44(sp)
1c006004:	0f000593          	li	a1,240
1c006008:	1850                	addi	a2,sp,52
1c00600a:	00d4                	addi	a3,sp,68
1c00600c:	023c                	addi	a5,sp,264
1c00600e:	cc6a                	sw	s10,24(sp)
	_N_In=0;
1c006010:	4401                	li	s0,0
	_C_Out=0; _SC_Out=3840; _LC_Out=240;
1c006012:	ce2e                	sw	a1,28(sp)
	_SP_Out=0;
1c006014:	d202                	sw	zero,36(sp)
	/*============================= End Read Tiles Prolog ===============================*/
	{ /* Single iteration on D1 */
		int D1Ind_Last = 1;
		for (T0Ind=0; T0Ind<11; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c006016:	4b81                	li	s7,0
			int T0Ind_Last = (T0Ind==10), T0Ind_NextLast = ((T0Ind+1)==10);
1c006018:	4a81                	li	s5,0
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			KerArg0->H = (unsigned short int) (T0Ind_Last?4:6);
1c00601a:	4a19                	li	s4,6
1c00601c:	c632                	sw	a2,12(sp)
1c00601e:	1184                	addi	s1,sp,224
1c006020:	c436                	sw	a3,8(sp)
1c006022:	c83e                	sw	a5,16(sp)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c006024:	200d8d13          	addi	s10,s11,512 # 204200 <__L2+0x184200>
1c006028:	002b9713          	slli	a4,s7,0x2
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00602c:	0ff00793          	li	a5,255
1c006030:	03411d23          	sh	s4,58(sp)
1c006034:	08fda223          	sw	a5,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c006038:	00fd2023          	sw	a5,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00603c:	00fd2623          	sw	a5,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c006040:	1c00d637          	lui	a2,0x1c00d
1c006044:	92a60613          	addi	a2,a2,-1750 # 1c00c92a <KerParSetBias_DP_fp>
1c006048:	08cda023          	sw	a2,128(s11)
1c00604c:	46b2                	lw	a3,12(sp)
1c00604e:	08dda023          	sw	a3,128(s11)
1c006052:	1848                	addi	a0,sp,52
1c006054:	c23a                	sw	a4,4(sp)
1c006056:	0d5060ef          	jal	ra,1c00c92a <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00605a:	01cd6783          	p.elw	a5,28(s10)
							_SN_In, 10240, _LN_In, 0, &DmaR_Evt3);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+2560*((D0Ind_Total)%2));
				KerArg1->H = (unsigned short int) (((T0Ind_Last)?5:8)-1*(T0Ind==0));
1c00605e:	4821                	li	a6,8
1c006060:	001bb793          	seqz	a5,s7
1c006064:	0ff7f613          	andi	a2,a5,255
1c006068:	4712                	lw	a4,4(sp)
1c00606a:	000a8363          	beqz	s5,1c006070 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x24a>
1c00606e:	4815                	li	a6,5
1c006070:	40c80833          	sub	a6,a6,a2
1c006074:	10085b33          	p.exthz	s6,a6
1c006078:	1c014837          	lui	a6,0x1c014
1c00607c:	5dc80813          	addi	a6,a6,1500 # 1c0145dc <IntegerExpLUT+0x94>
1c006080:	00082583          	lw	a1,0(a6)
1c006084:	6605                	lui	a2,0x1
1c006086:	42060c13          	addi	s8,a2,1056 # 1420 <__rt_stack_size+0xc20>
1c00608a:	d8fa95d7          	pv.packhi.b	a1,s5,a5
1c00608e:	8aae                	mv	s5,a1
			for (D0Ind=0; D0Ind<4; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c006090:	4c81                	li	s9,0
					_N_In = _N_In + (960-(160*(T0Ind==0)))+(-61440); _LN_In = ((T0Ind_NextLast)?800:1280); _SN_In = (2*_LN_In); 
1c006092:	d052                	sw	s4,32(sp)
				if (!(D0Ind_Last)) {
1c006094:	403cab63          	p.beqimm	s9,3,1c0064aa <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x684>
					_N_In = _N_In + (20480); _LN_In = ((T0Ind_Last)?800:(1280-160*(T0Ind==0))); _SN_In = (2*_LN_In); 
1c006098:	6795                	lui	a5,0x5
1c00609a:	943e                	add	s0,s0,a5
1c00609c:	42aba863          	p.beqimm	s7,10,1c0064cc <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x6a6>
1c0060a0:	2e0b8f63          	beqz	s7,1c00639e <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x578>
1c0060a4:	1c0146b7          	lui	a3,0x1c014
1c0060a8:	5c068693          	addi	a3,a3,1472 # 1c0145c0 <IntegerExpLUT+0x78>
1c0060ac:	4288                	lw	a0,0(a3)
1c0060ae:	50000993          	li	s3,1280
  if (copy->length == 0)
1c0060b2:	57ca                	lw	a5,176(sp)
1c0060b4:	16078f63          	beqz	a5,1c006232 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x40c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0060b8:	57ea                	lw	a5,184(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0060ba:	02000693          	li	a3,32
1c0060be:	cb89                	beqz	a5,1c0060d0 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x2aa>
1c0060c0:	00dda423          	sw	a3,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0060c4:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0060c8:	00dda223          	sw	a3,4(s11)
1c0060cc:	57ea                	lw	a5,184(sp)
1c0060ce:	fbed                	bnez	a5,1c0060c0 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x29a>
1c0060d0:	00092683          	lw	a3,0(s2)
1c0060d4:	00170a13          	addi	s4,a4,1
				if (_SN_In) {
1c0060d8:	1a051863          	bnez	a0,1c006288 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x462>
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+2560*((D0Ind_Total)%2));
1c0060dc:	fc173733          	p.bclr	a4,a4,30,1
1c0060e0:	00271793          	slli	a5,a4,0x2
1c0060e4:	97ba                	add	a5,a5,a4
1c0060e6:	07a6                	slli	a5,a5,0x9
1c0060e8:	97b6                	add	a5,a5,a3
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0060ea:	0ff00713          	li	a4,255
				KerArg1->UsedH = (unsigned short int) (((T0Ind_Last)?5:8)-1*(T0Ind==0));
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+5152+((D0Ind)*36));
1c0060ee:	96e2                	add	a3,a3,s8
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+2560*((D0Ind_Total)%2));
1c0060f0:	d1be                	sw	a5,224(sp)
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+5152+((D0Ind)*36));
1c0060f2:	dbb6                	sw	a3,244(sp)
				KerArg1->H = (unsigned short int) (((T0Ind_Last)?5:8)-1*(T0Ind==0));
1c0060f4:	0f611423          	sh	s6,232(sp)
				KerArg1->UsedH = (unsigned short int) (((T0Ind_Last)?5:8)-1*(T0Ind==0));
1c0060f8:	0f611523          	sh	s6,234(sp)
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c0060fc:	dfd6                	sw	s5,252(sp)
1c0060fe:	08eda223          	sw	a4,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c006102:	00ed2023          	sw	a4,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c006106:	00ed2623          	sw	a4,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00610a:	1c00d6b7          	lui	a3,0x1c00d
1c00610e:	f4268693          	addi	a3,a3,-190 # 1c00cf42 <KerParConv3x3Stride1_DP_fp>
1c006112:	08dda023          	sw	a3,128(s11)
1c006116:	089da023          	sw	s1,128(s11)
1c00611a:	8526                	mv	a0,s1
1c00611c:	627060ef          	jal	ra,1c00cf42 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006120:	01cd6783          	p.elw	a5,28(s10)
			for (D0Ind=0; D0Ind<4; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c006124:	0c85                	addi	s9,s9,1
1c006126:	024c0c13          	addi	s8,s8,36
1c00612a:	8752                	mv	a4,s4
1c00612c:	f64cb4e3          	p.bneimm	s9,4,1c006094 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x26e>
1c006130:	5a02                	lw	s4,32(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c006132:	0ff00c93          	li	s9,255
				__CALL(KerParConv3x3Stride1_DP_fp, KerArg1);
				/*================================= Update Arg Pipeline =============================*/
				/*============================= End Update Arg Pipeline =============================*/
			} /* End iteration on D0 */
			/*====================== Call Kernel LOC_D0_EPILOG =========================*/
			KerArg2->H = (unsigned short int) (T0Ind_Last?4:6);
1c006136:	05411523          	sh	s4,74(sp)
1c00613a:	099da223          	sw	s9,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00613e:	019d2023          	sw	s9,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c006142:	019d2623          	sw	s9,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c006146:	1c00d737          	lui	a4,0x1c00d
1c00614a:	ab470713          	addi	a4,a4,-1356 # 1c00cab4 <KerDP_IO_fp>
1c00614e:	08eda023          	sw	a4,128(s11)
1c006152:	47a2                	lw	a5,8(sp)
1c006154:	08fda023          	sw	a5,128(s11)
1c006158:	00c8                	addi	a0,sp,68
1c00615a:	15b060ef          	jal	ra,1c00cab4 <KerDP_IO_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00615e:	01cd6703          	p.elw	a4,28(s10)
			AT_FORK(gap_ncore(), (void *) KerDP_IO_fp, (void *) KerArg2);
			__CALL(KerDP_IO_fp, KerArg2);
			KerArg3->H = (unsigned short int) (T0Ind_Last?4:6);
			KerArg3->UsedH = (unsigned short int) (T0Ind_Last?4:6);
			KerArg3->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+7456+3840*((T0Ind_Total)%2));
1c006162:	6689                	lui	a3,0x2
1c006164:	fc1bb733          	p.bclr	a4,s7,30,1
1c006168:	00471a93          	slli	s5,a4,0x4
1c00616c:	40ea8ab3          	sub	s5,s5,a4
1c006170:	00092703          	lw	a4,0(s2)
1c006174:	d2068693          	addi	a3,a3,-736 # 1d20 <__rt_stack_size+0x1520>
1c006178:	0aa2                	slli	s5,s5,0x8
1c00617a:	9ab6                	add	s5,s5,a3
1c00617c:	9756                	add	a4,a4,s5
1c00617e:	10e12c23          	sw	a4,280(sp)
			KerArg3->H = (unsigned short int) (T0Ind_Last?4:6);
1c006182:	11411823          	sh	s4,272(sp)
			KerArg3->UsedH = (unsigned short int) (T0Ind_Last?4:6);
1c006186:	11411923          	sh	s4,274(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00618a:	099da223          	sw	s9,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00618e:	019d2023          	sw	s9,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c006192:	019d2623          	sw	s9,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c006196:	1c00d837          	lui	a6,0x1c00d
1c00619a:	73a80813          	addi	a6,a6,1850 # 1c00d73a <KerParPool2x2Stride2_fp>
1c00619e:	090da023          	sw	a6,128(s11)
1c0061a2:	45c2                	lw	a1,16(sp)
1c0061a4:	08bda023          	sw	a1,128(s11)
1c0061a8:	0228                	addi	a0,sp,264
1c0061aa:	590070ef          	jal	ra,1c00d73a <KerParPool2x2Stride2_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0061ae:	01cd6783          	p.elw	a5,28(s10)
			AT_FORK(gap_ncore(), (void *) KerParPool2x2Stride2_fp, (void *) KerArg3);
			__CALL(KerParPool2x2Stride2_fp, KerArg3);
			/*================================= Write Tiles =====================================*/
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c0061b2:	5612                	lw	a2,36(sp)
1c0061b4:	12061363          	bnez	a2,1c0062da <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x4b4>
			AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) Out+_C_Out), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+7456+3840*((T0Ind_Total)%2)),
1c0061b8:	00092783          	lw	a5,0(s2)
1c0061bc:	9abe                	add	s5,s5,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0061be:	30047773          	csrrci	a4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0061c2:	400da683          	lw	a3,1024(s11)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0061c6:	4862                	lw	a6,24(sp)
1c0061c8:	100857b3          	p.exthz	a5,a6
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0061cc:	c517c7b3          	p.bset	a5,a5,2,17
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0061d0:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0061d4:	40fda023          	sw	a5,1024(s11)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0061d8:	415da023          	sw	s5,1024(s11)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0061dc:	45d2                	lw	a1,20(sp)
1c0061de:	40bda023          	sw	a1,1024(s11)
  return (stride << PLP_DMA_2D_STRIDE_BIT) | (len << PLP_DMA_2D_LEN_BIT);
1c0061e2:	4672                	lw	a2,28(sp)
1c0061e4:	0a0007b7          	lui	a5,0xa000
1c0061e8:	00f66cb3          	or	s9,a2,a5
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0061ec:	419da023          	sw	s9,1024(s11)
        if (!merge) copy->id = id;
1c0061f0:	c1b6                	sw	a3,192(sp)
        copy->length = 0;
1c0061f2:	c982                	sw	zero,208(sp)
  __builtin_pulp_spr_write(reg, val);
1c0061f4:	30071073          	csrw	mstatus,a4
			/*================================= Update Arg Pipeline =============================*/
			_SP_Out = _SC_Out;_LP_Out = _LC_Out;
			/*============================= End Update Arg Pipeline =============================*/
			/*================================= Prepare Tiles ===================================*/
			_SC_Out = 0;
			if (!(T0Ind_Last)) {
1c0061f8:	56b2                	lw	a3,44(sp)
1c0061fa:	14d58663          	beq	a1,a3,1c006346 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x520>
				_C_Out = _C_Out + (240); _LC_Out = ((T0Ind_NextLast)?160:240); _SC_Out = (16*_LC_Out); 
1c0061fe:	0f000813          	li	a6,240
1c006202:	6705                	lui	a4,0x1
1c006204:	ce42                	sw	a6,28(sp)
1c006206:	f0070793          	addi	a5,a4,-256 # f00 <__rt_stack_size+0x700>
1c00620a:	2c9ba863          	p.beqimm	s7,9,1c0064da <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x6b4>
		for (T0Ind=0; T0Ind<11; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c00620e:	0b85                	addi	s7,s7,1
			int T0Ind_Last = (T0Ind==10), T0Ind_NextLast = ((T0Ind+1)==10);
1c006210:	ff6b8a93          	addi	s5,s7,-10
1c006214:	001aba93          	seqz	s5,s5
1c006218:	0ffafa93          	andi	s5,s5,255
			KerArg0->H = (unsigned short int) (T0Ind_Last?4:6);
1c00621c:	2aabad63          	p.beqimm	s7,10,1c0064d6 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x6b0>
1c006220:	4a19                	li	s4,6
1c006222:	45d2                	lw	a1,20(sp)
1c006224:	4862                	lw	a6,24(sp)
				_C_Out = _C_Out + (240); _LC_Out = ((T0Ind_NextLast)?160:240); _SC_Out = (16*_LC_Out); 
1c006226:	cc3e                	sw	a5,24(sp)
1c006228:	0f058593          	addi	a1,a1,240 # 420000f0 <__l2_end+0x25feb048>
1c00622c:	d242                	sw	a6,36(sp)
1c00622e:	ca2e                	sw	a1,20(sp)
1c006230:	bbe5                	j	1c006028 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x202>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006232:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c006236:	404da783          	lw	a5,1028(s11)
1c00623a:	568a                	lw	a3,160(sp)
1c00623c:	40d7d7b3          	sra	a5,a5,a3
1c006240:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006244:	c78d                	beqz	a5,1c00626e <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x448>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006246:	10000593          	li	a1,256
  __builtin_pulp_spr_write(reg, val);
1c00624a:	30061073          	csrw	mstatus,a2
1c00624e:	00bda423          	sw	a1,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006252:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006256:	00bda223          	sw	a1,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00625a:	30047673          	csrrci	a2,mstatus,8
1c00625e:	404da783          	lw	a5,1028(s11)
1c006262:	568a                	lw	a3,160(sp)
1c006264:	40d7d7b3          	sra	a5,a5,a3
1c006268:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00626c:	fff9                	bnez	a5,1c00624a <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x424>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00626e:	4785                	li	a5,1
1c006270:	00d796b3          	sll	a3,a5,a3
1c006274:	40dda223          	sw	a3,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c006278:	30061073          	csrw	mstatus,a2
1c00627c:	00092683          	lw	a3,0(s2)
1c006280:	00170a13          	addi	s4,a4,1
				if (_SN_In) {
1c006284:	e4050ce3          	beqz	a0,1c0060dc <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x2b6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006288:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00628c:	400da803          	lw	a6,1024(s11)
  res = __builtin_bitinsert(res, is2D,        1, PLP_DMA_2D_BIT);
1c006290:	000707b7          	lui	a5,0x70
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c006294:	de0527b3          	p.insert	a5,a0,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c006298:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00629c:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0062a0:	40fda023          	sw	a5,1024(s11)
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+2560*((D0Ind_Total+1)%2)),
1c0062a4:	fc1a3533          	p.bclr	a0,s4,30,1
1c0062a8:	00251793          	slli	a5,a0,0x2
1c0062ac:	97aa                	add	a5,a5,a0
1c0062ae:	07a6                	slli	a5,a5,0x9
1c0062b0:	96be                	add	a3,a3,a5
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0062b2:	40dda023          	sw	a3,1024(s11)
1c0062b6:	5622                	lw	a2,40(sp)
1c0062b8:	008607b3          	add	a5,a2,s0
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0062bc:	40fda023          	sw	a5,1024(s11)
  return (stride << PLP_DMA_2D_STRIDE_BIT) | (len << PLP_DMA_2D_LEN_BIT);
1c0062c0:	280007b7          	lui	a5,0x28000
1c0062c4:	00f9e7b3          	or	a5,s3,a5
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0062c8:	40fda023          	sw	a5,1024(s11)
        if (!merge) copy->id = id;
1c0062cc:	d142                	sw	a6,160(sp)
        copy->length = 0;
1c0062ce:	d902                	sw	zero,176(sp)
  __builtin_pulp_spr_write(reg, val);
1c0062d0:	30059073          	csrw	mstatus,a1
1c0062d4:	00092683          	lw	a3,0(s2)
1c0062d8:	b511                	j	1c0060dc <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x2b6>
  if (copy->length == 0)
1c0062da:	47ce                	lw	a5,208(sp)
1c0062dc:	cf99                	beqz	a5,1c0062fa <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x4d4>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0062de:	476e                	lw	a4,216(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0062e0:	02000793          	li	a5,32
1c0062e4:	ec070ae3          	beqz	a4,1c0061b8 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x392>
1c0062e8:	00fda423          	sw	a5,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0062ec:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0062f0:	00fda223          	sw	a5,4(s11)
1c0062f4:	476e                	lw	a4,216(sp)
1c0062f6:	fb6d                	bnez	a4,1c0062e8 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x4c2>
1c0062f8:	b5c1                	j	1c0061b8 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x392>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0062fa:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0062fe:	404da783          	lw	a5,1028(s11)
1c006302:	470e                	lw	a4,192(sp)
1c006304:	40e7d7b3          	sra	a5,a5,a4
1c006308:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00630c:	c78d                	beqz	a5,1c006336 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x510>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00630e:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c006312:	30069073          	csrw	mstatus,a3
1c006316:	00cda423          	sw	a2,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00631a:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00631e:	00cda223          	sw	a2,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006322:	300476f3          	csrrci	a3,mstatus,8
1c006326:	404da783          	lw	a5,1028(s11)
1c00632a:	470e                	lw	a4,192(sp)
1c00632c:	40e7d7b3          	sra	a5,a5,a4
1c006330:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006334:	fff9                	bnez	a5,1c006312 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x4ec>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c006336:	4785                	li	a5,1
1c006338:	00e79733          	sll	a4,a5,a4
1c00633c:	40eda223          	sw	a4,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c006340:	30069073          	csrw	mstatus,a3
1c006344:	bd95                	j	1c0061b8 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x392>
  if (copy->length == 0)
1c006346:	474e                	lw	a4,208(sp)
1c006348:	c33d                	beqz	a4,1c0063ae <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x588>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00634a:	46ee                	lw	a3,216(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00634c:	02000713          	li	a4,32
1c006350:	002047b7          	lui	a5,0x204
1c006354:	ca89                	beqz	a3,1c006366 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x540>
1c006356:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00635a:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00635e:	00e7a223          	sw	a4,4(a5)
1c006362:	46ee                	lw	a3,216(sp)
1c006364:	faed                	bnez	a3,1c006356 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x530>
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c006366:	16c12083          	lw	ra,364(sp)
1c00636a:	16812403          	lw	s0,360(sp)
1c00636e:	16412483          	lw	s1,356(sp)
1c006372:	16012903          	lw	s2,352(sp)
1c006376:	15c12983          	lw	s3,348(sp)
1c00637a:	15812a03          	lw	s4,344(sp)
1c00637e:	15412a83          	lw	s5,340(sp)
1c006382:	15012b03          	lw	s6,336(sp)
1c006386:	14c12b83          	lw	s7,332(sp)
1c00638a:	14812c03          	lw	s8,328(sp)
1c00638e:	14412c83          	lw	s9,324(sp)
1c006392:	14012d03          	lw	s10,320(sp)
1c006396:	13c12d83          	lw	s11,316(sp)
1c00639a:	6175                	addi	sp,sp,368
1c00639c:	8082                	ret
1c00639e:	1c0147b7          	lui	a5,0x1c014
1c0063a2:	5e078793          	addi	a5,a5,1504 # 1c0145e0 <IntegerExpLUT+0x98>
1c0063a6:	4388                	lw	a0,0(a5)
					_N_In = _N_In + (20480); _LN_In = ((T0Ind_Last)?800:(1280-160*(T0Ind==0))); _SN_In = (2*_LN_In); 
1c0063a8:	46000993          	li	s3,1120
1c0063ac:	b319                	j	1c0060b2 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x28c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0063ae:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0063b2:	404da783          	lw	a5,1028(s11)
1c0063b6:	468e                	lw	a3,192(sp)
1c0063b8:	40d7d7b3          	sra	a5,a5,a3
1c0063bc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0063c0:	c79d                	beqz	a5,1c0063ee <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x5c8>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0063c2:	10000593          	li	a1,256
1c0063c6:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0063ca:	30061073          	csrw	mstatus,a2
1c0063ce:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0063d2:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0063d6:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0063da:	30047673          	csrrci	a2,mstatus,8
1c0063de:	40472783          	lw	a5,1028(a4)
1c0063e2:	468e                	lw	a3,192(sp)
1c0063e4:	40d7d7b3          	sra	a5,a5,a3
1c0063e8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0063ec:	fff9                	bnez	a5,1c0063ca <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x5a4>
1c0063ee:	4785                	li	a5,1
1c0063f0:	00d796b3          	sll	a3,a5,a3
1c0063f4:	002047b7          	lui	a5,0x204
1c0063f8:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0063fc:	30061073          	csrw	mstatus,a2
1c006400:	b79d                	j	1c006366 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x540>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006402:	300475f3          	csrrci	a1,mstatus,8
1c006406:	4047a783          	lw	a5,1028(a5)
1c00640a:	460a                	lw	a2,128(sp)
1c00640c:	40c7d7b3          	sra	a5,a5,a2
1c006410:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006414:	c79d                	beqz	a5,1c006442 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x61c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006416:	10000513          	li	a0,256
1c00641a:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00641e:	30059073          	csrw	mstatus,a1
1c006422:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006426:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00642a:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00642e:	300475f3          	csrrci	a1,mstatus,8
1c006432:	40472783          	lw	a5,1028(a4)
1c006436:	460a                	lw	a2,128(sp)
1c006438:	40c7d7b3          	sra	a5,a5,a2
1c00643c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006440:	fff9                	bnez	a5,1c00641e <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x5f8>
1c006442:	4785                	li	a5,1
1c006444:	00c79633          	sll	a2,a5,a2
1c006448:	002047b7          	lui	a5,0x204
1c00644c:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c006450:	30059073          	csrw	mstatus,a1
1c006454:	be89                	j	1c005fa6 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x180>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006456:	30047573          	csrrci	a0,mstatus,8
1c00645a:	4047a783          	lw	a5,1028(a5)
1c00645e:	5606                	lw	a2,96(sp)
1c006460:	40c7d7b3          	sra	a5,a5,a2
1c006464:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006468:	c79d                	beqz	a5,1c006496 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x670>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00646a:	10000813          	li	a6,256
1c00646e:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c006472:	30051073          	csrw	mstatus,a0
1c006476:	01072423          	sw	a6,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00647a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00647e:	01072223          	sw	a6,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006482:	30047573          	csrrci	a0,mstatus,8
1c006486:	40472783          	lw	a5,1028(a4)
1c00648a:	5606                	lw	a2,96(sp)
1c00648c:	40c7d7b3          	sra	a5,a5,a2
1c006490:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006494:	fff9                	bnez	a5,1c006472 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x64c>
1c006496:	4785                	li	a5,1
1c006498:	00c79633          	sll	a2,a5,a2
1c00649c:	002047b7          	lui	a5,0x204
1c0064a0:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0064a4:	30051073          	csrw	mstatus,a0
1c0064a8:	b445                	j	1c005f48 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x122>
				} else if (!(T0Ind_Last)) {
1c0064aa:	04abad63          	p.beqimm	s7,10,1c006504 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x6de>
					_N_In = _N_In + (960-(160*(T0Ind==0)))+(-61440); _LN_In = ((T0Ind_NextLast)?800:1280); _SN_In = (2*_LN_In); 
1c0064ae:	020b8f63          	beqz	s7,1c0064ec <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x6c6>
1c0064b2:	7845                	lui	a6,0xffff1
1c0064b4:	1c0145b7          	lui	a1,0x1c014
1c0064b8:	3c080813          	addi	a6,a6,960 # ffff13c0 <pulp__FC+0xffff13c1>
1c0064bc:	5c058593          	addi	a1,a1,1472 # 1c0145c0 <IntegerExpLUT+0x78>
1c0064c0:	9442                	add	s0,s0,a6
1c0064c2:	4188                	lw	a0,0(a1)
1c0064c4:	50000993          	li	s3,1280
1c0064c8:	be9bb5e3          	p.bneimm	s7,9,1c0060b2 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x28c>
1c0064cc:	64000513          	li	a0,1600
1c0064d0:	32000993          	li	s3,800
1c0064d4:	bef9                	j	1c0060b2 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x28c>
			KerArg0->H = (unsigned short int) (T0Ind_Last?4:6);
1c0064d6:	4a11                	li	s4,4
1c0064d8:	b3a9                	j	1c006222 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x3fc>
				_C_Out = _C_Out + (240); _LC_Out = ((T0Ind_NextLast)?160:240); _SC_Out = (16*_LC_Out); 
1c0064da:	1c0145b7          	lui	a1,0x1c014
1c0064de:	5c058593          	addi	a1,a1,1472 # 1c0145c0 <IntegerExpLUT+0x78>
1c0064e2:	0a000613          	li	a2,160
1c0064e6:	419c                	lw	a5,0(a1)
1c0064e8:	ce32                	sw	a2,28(sp)
1c0064ea:	b315                	j	1c00620e <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x3e8>
					_N_In = _N_In + (960-(160*(T0Ind==0)))+(-61440); _LN_In = ((T0Ind_NextLast)?800:1280); _SN_In = (2*_LN_In); 
1c0064ec:	76c5                	lui	a3,0xffff1
1c0064ee:	1c0147b7          	lui	a5,0x1c014
1c0064f2:	32068693          	addi	a3,a3,800 # ffff1320 <pulp__FC+0xffff1321>
1c0064f6:	5c078793          	addi	a5,a5,1472 # 1c0145c0 <IntegerExpLUT+0x78>
1c0064fa:	9436                	add	s0,s0,a3
1c0064fc:	4388                	lw	a0,0(a5)
1c0064fe:	50000993          	li	s3,1280
1c006502:	be45                	j	1c0060b2 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x28c>
				_SN_In = 0;
1c006504:	4501                	li	a0,0
1c006506:	b675                	j	1c0060b2 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu+0x28c>

1c006508 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c006508:	7149                	addi	sp,sp,-368
1c00650a:	15312e23          	sw	s3,348(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D1, [0 x 81920, 81920]][Tile0, 3:[40x12, 1:40x12, 40x8], 4]
		Tile0: [0, 30720, 1920], Tile1: [0, 30720, 1920], Tile2; [0, 30720, 1920]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+16800);
1c00650e:	100009b7          	lui	s3,0x10000
1c006512:	02098993          	addi	s3,s3,32 # 10000020 <cnn_ssd_L1_Memory>
1c006516:	0009a703          	lw	a4,0(s3)
	KerArg0->W = (unsigned short int) (40);
	KerArg0->OutFeatures = (unsigned short int) (16);
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+4480);
1c00651a:	6785                	lui	a5,0x1
	KerArg0->NormBias = (signed char) (13);
	KerArg1->W = (unsigned short int) (40);
1c00651c:	1c014837          	lui	a6,0x1c014
1c006520:	5e482e83          	lw	t4,1508(a6) # 1c0145e4 <IntegerExpLUT+0x9c>
	KerArg1->UsedW = (unsigned short int) (40);
	KerArg1->InFeatures = (unsigned short int) (2);
	KerArg1->OutFeatures = (unsigned short int) (16);
	KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+4512);
1c006524:	1a078e13          	addi	t3,a5,416 # 11a0 <__rt_stack_size+0x9a0>
{
1c006528:	ce2a                	sw	a0,28(sp)
	KerArg1->InFeatures = (unsigned short int) (2);
1c00652a:	1c0142b7          	lui	t0,0x1c014
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+4480);
1c00652e:	18078813          	addi	a6,a5,384
	KerArg0->NormBias = (signed char) (13);
1c006532:	4535                	li	a0,13
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+16800);
1c006534:	6791                	lui	a5,0x4
	KerArg0->NormBias = (signed char) (13);
1c006536:	02a10f23          	sb	a0,62(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+16800);
1c00653a:	1a078793          	addi	a5,a5,416 # 41a0 <__rt_stack_size+0x39a0>
	KerArg1->InFeatures = (unsigned short int) (2);
1c00653e:	5d82a503          	lw	a0,1496(t0) # 1c0145d8 <IntegerExpLUT+0x90>
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+16800);
1c006542:	97ba                	add	a5,a5,a4
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+4480);
1c006544:	983a                	add	a6,a6,a4
	KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+4512);
1c006546:	9772                	add	a4,a4,t3
	KerArg0->OutFeatures = (unsigned short int) (16);
1c006548:	4341                	li	t1,16
	KerArg0->W = (unsigned short int) (40);
1c00654a:	02800f93          	li	t6,40
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+16800);
	KerArg1->Norm = (unsigned char) (14);
1c00654e:	4f39                	li	t5,14
	KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+4512);
1c006550:	dbba                	sw	a4,244(sp)
	KerArg1->TotalInFeatures = (short int) (16);
	KerArg1->Orientation = (unsigned char) (1);
1c006552:	4705                	li	a4,1
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+16800);
1c006554:	da3e                	sw	a5,52(sp)
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+16800);
1c006556:	ddbe                	sw	a5,248(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c006558:	10e101a3          	sb	a4,259(sp)
	KerArg2->In = (int * __restrict__) (cnn_ssd_L1_Memory+16800);
1c00655c:	c2be                	sw	a5,68(sp)
	KerArg2->W = (unsigned short int) (40);
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+16800);
1c00655e:	c6be                	sw	a5,76(sp)
{
1c006560:	16112623          	sw	ra,364(sp)
1c006564:	16812423          	sw	s0,360(sp)
1c006568:	16912223          	sw	s1,356(sp)
1c00656c:	17212023          	sw	s2,352(sp)
1c006570:	15412c23          	sw	s4,344(sp)
1c006574:	15512a23          	sw	s5,340(sp)
1c006578:	15612823          	sw	s6,336(sp)
1c00657c:	15712623          	sw	s7,332(sp)
1c006580:	15812423          	sw	s8,328(sp)
1c006584:	15912223          	sw	s9,324(sp)
1c006588:	15a12023          	sw	s10,320(sp)
1c00658c:	13b12e23          	sw	s11,316(sp)
	KerArg0->W = (unsigned short int) (40);
1c006590:	03f11c23          	sh	t6,56(sp)
	KerArg0->OutFeatures = (unsigned short int) (16);
1c006594:	02611e23          	sh	t1,60(sp)
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+4480);
1c006598:	c0c2                	sw	a6,64(sp)
	KerArg1->W = (unsigned short int) (40);
1c00659a:	d3f6                	sw	t4,228(sp)
	KerArg1->InFeatures = (unsigned short int) (2);
1c00659c:	d7aa                	sw	a0,236(sp)
	KerArg1->Norm = (unsigned char) (14);
1c00659e:	11e10023          	sb	t5,256(sp)
	KerArg1->TotalInFeatures = (short int) (16);
1c0065a2:	0e611823          	sh	t1,240(sp)
	KerArg2->W = (unsigned short int) (40);
1c0065a6:	05f11423          	sh	t6,72(sp)
	KerArg2->Norm = (unsigned char) (14);
	KerArg2->InFeatures = (unsigned short int) (16);
	KerArg2->LB = (int) (0);
	KerArg2->UB = (int) (32767);
1c0065aa:	68a1                	lui	a7,0x8
	KerArg2->Norm = (unsigned char) (14);
1c0065ac:	05e10823          	sb	t5,80(sp)
	KerArg2->UB = (int) (32767);
1c0065b0:	18fd                	addi	a7,a7,-1
	KerArg3->In = (short int * __restrict__) (cnn_ssd_L1_Memory+16800);
1c0065b2:	10f12423          	sw	a5,264(sp)
	KerArg3->W = (unsigned short int) (40);
	KerArg3->UsedW = (unsigned short int) (40);
	KerArg3->OutFeatures = (unsigned short int) (16);
	KerArg3->Pad = (v4s) 0;
1c0065b6:	00007757          	pv.add.sci.b	a4,zero,0
	KerArg3->Orientation = (unsigned char) (1);
1c0065ba:	10100793          	li	a5,257
	KerArg2->InFeatures = (unsigned short int) (16);
1c0065be:	04611923          	sh	t1,82(sp)
	KerArg2->LB = (int) (0);
1c0065c2:	ca82                	sw	zero,84(sp)
	KerArg2->UB = (int) (32767);
1c0065c4:	ccc6                	sw	a7,88(sp)
	KerArg3->W = (unsigned short int) (40);
1c0065c6:	11d12623          	sw	t4,268(sp)
	KerArg3->OutFeatures = (unsigned short int) (16);
1c0065ca:	10611a23          	sh	t1,276(sp)
	KerArg3->Pad = (v4s) 0;
1c0065ce:	10e12e23          	sw	a4,284(sp)
	KerArg3->Orientation = (unsigned char) (1);
1c0065d2:	12f11123          	sh	a5,290(sp)
	KerArg3->Oper = (unsigned char) (1);
	KerArg3->LB = (int) (0);
1c0065d6:	12012423          	sw	zero,296(sp)
	KerArg3->UB = (int) (32767);
1c0065da:	13112623          	sw	a7,300(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0065de:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0065e2:	002047b7          	lui	a5,0x204
1c0065e6:	4007a883          	lw	a7,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0065ea:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0065ee:	02070713          	addi	a4,a4,32 # b0020 <__L2+0x30020>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0065f2:	c1574733          	p.bset	a4,a4,0,21
1c0065f6:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0065fa:	4107a023          	sw	a6,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0065fe:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c006602:	d0c6                	sw	a7,96(sp)
        copy->length = 0;
1c006604:	d882                	sw	zero,112(sp)
  __builtin_pulp_spr_write(reg, val);
1c006606:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c00660a:	5746                	lw	a4,112(sp)
1c00660c:	52070563          	beqz	a4,1c006b36 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x62e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c006610:	5666                	lw	a2,120(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006612:	02000713          	li	a4,32
1c006616:	ca09                	beqz	a2,1c006628 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x120>
1c006618:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00661c:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006620:	00e7a223          	sw	a4,4(a5)
1c006624:	5666                	lw	a2,120(sp)
1c006626:	fa6d                	bnez	a2,1c006618 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x110>
	/*================================= Read Tiles Prolog ===============================*/
	_C_Out=0; _SC_Out=3840; _LC_Out=240;
	_SP_Out=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+4480), 32, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+4512), 4608, 0, &DmaR_Evt2);
1c006628:	0009a603          	lw	a2,0(s3)
1c00662c:	6705                	lui	a4,0x1
1c00662e:	1a070793          	addi	a5,a4,416 # 11a0 <__rt_stack_size+0x9a0>
1c006632:	963e                	add	a2,a2,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006634:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c006638:	002047b7          	lui	a5,0x204
1c00663c:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c006640:	002b08b7          	lui	a7,0x2b0
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c006644:	20070713          	addi	a4,a4,512
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c006648:	01176733          	or	a4,a4,a7
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00664c:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c006650:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c006654:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c006658:	c142                	sw	a6,128(sp)
        copy->length = 0;
1c00665a:	c902                	sw	zero,144(sp)
  __builtin_pulp_spr_write(reg, val);
1c00665c:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c006660:	474a                	lw	a4,144(sp)
1c006662:	48070063          	beqz	a4,1c006ae2 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x5da>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c006666:	466a                	lw	a2,152(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006668:	02000713          	li	a4,32
1c00666c:	ca09                	beqz	a2,1c00667e <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x176>
1c00666e:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006672:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006676:	00e7a223          	sw	a4,4(a5)
1c00667a:	466a                	lw	a2,152(sp)
1c00667c:	fa6d                	bnez	a2,1c00666e <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x166>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Filter */
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+0), 2080, 2560, 1040, 0, &DmaR_Evt3);
1c00667e:	0009a803          	lw	a6,0(s3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006682:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c006686:	00204737          	lui	a4,0x204
1c00668a:	40072503          	lw	a0,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00668e:	6605                	lui	a2,0x1
1c006690:	82060893          	addi	a7,a2,-2016 # 820 <__rt_stack_size+0x20>
1c006694:	000707b7          	lui	a5,0x70
1c006698:	de08a7b3          	p.insert	a5,a7,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00669c:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0066a0:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0066a4:	40f72023          	sw	a5,1024(a4)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0066a8:	41072023          	sw	a6,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0066ac:	47f2                	lw	a5,28(sp)
1c0066ae:	40f72023          	sw	a5,1024(a4)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0066b2:	0a0007b7          	lui	a5,0xa000
1c0066b6:	41078793          	addi	a5,a5,1040 # a000410 <__L2+0x9f80410>
1c0066ba:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c0066be:	d12a                	sw	a0,160(sp)
        copy->length = 0;
1c0066c0:	d902                	sw	zero,176(sp)
  __builtin_pulp_spr_write(reg, val);
1c0066c2:	30059073          	csrw	mstatus,a1
1c0066c6:	1e068593          	addi	a1,a3,480
	_C_Out=0; _SC_Out=3840; _LC_Out=240;
1c0066ca:	f0060613          	addi	a2,a2,-256
1c0066ce:	cc36                	sw	a3,24(sp)
1c0066d0:	0f000693          	li	a3,240
	{ /* Single iteration on D1 */
		int D1Ind_Last = 1;
		for (T0Ind=0; T0Ind<3; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
			int T0Ind_Last = (T0Ind==2), T0Ind_NextLast = ((T0Ind+1)==2);
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			KerArg0->H = (unsigned short int) (T0Ind_Last?8:12);
1c0066d4:	47b1                	li	a5,12
				/*================================= Prepare Tiles ===================================*/
				_SN_In = 0;
				if (!(D0Ind_Last)) {
					_N_In = _N_In + (5120); _LN_In = ((T0Ind_Last)?720:(1120-80*(T0Ind==0))); _SN_In = (2*_LN_In); 
				} else if (!(T0Ind_Last)) {
					_N_In = _N_In + (960-(80*(T0Ind==0)))+(-35840); _LN_In = ((T0Ind_NextLast)?720:1120); _SN_In = (2*_LN_In); 
1c0066d6:	6705                	lui	a4,0x1
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0066d8:	00204db7          	lui	s11,0x204
1c0066dc:	d62e                	sw	a1,44(sp)
	_C_Out=0; _SC_Out=3840; _LC_Out=240;
1c0066de:	d236                	sw	a3,36(sp)
1c0066e0:	d032                	sw	a2,32(sp)
1c0066e2:	184c                	addi	a1,sp,52
1c0066e4:	00d0                	addi	a2,sp,68
1c0066e6:	0234                	addi	a3,sp,264
					_N_In = _N_In + (960-(80*(T0Ind==0)))+(-35840); _LN_In = ((T0Ind_NextLast)?720:1120); _SN_In = (2*_LN_In); 
1c0066e8:	8c070493          	addi	s1,a4,-1856 # 8c0 <__rt_stack_size+0xc0>
	_N_In=0;
1c0066ec:	4401                	li	s0,0
	_SP_Out=0;
1c0066ee:	d402                	sw	zero,40(sp)
		for (T0Ind=0; T0Ind<3; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c0066f0:	4c01                	li	s8,0
			int T0Ind_Last = (T0Ind==2), T0Ind_NextLast = ((T0Ind+1)==2);
1c0066f2:	4a81                	li	s5,0
			KerArg0->H = (unsigned short int) (T0Ind_Last?8:12);
1c0066f4:	ca3e                	sw	a5,20(sp)
1c0066f6:	c42e                	sw	a1,8(sp)
1c0066f8:	0e010913          	addi	s2,sp,224
1c0066fc:	c232                	sw	a2,4(sp)
1c0066fe:	c636                	sw	a3,12(sp)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c006700:	200d8c93          	addi	s9,s11,512 # 204200 <__L2+0x184200>
1c006704:	873e                	mv	a4,a5
1c006706:	003c1613          	slli	a2,s8,0x3
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00670a:	0ff00793          	li	a5,255
1c00670e:	02e11d23          	sh	a4,58(sp)
1c006712:	08fda223          	sw	a5,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c006716:	00fca023          	sw	a5,0(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00671a:	00fca623          	sw	a5,12(s9)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00671e:	1c00d7b7          	lui	a5,0x1c00d
1c006722:	92a78793          	addi	a5,a5,-1750 # 1c00c92a <KerParSetBias_DP_fp>
1c006726:	08fda023          	sw	a5,128(s11)
1c00672a:	45a2                	lw	a1,8(sp)
1c00672c:	08bda023          	sw	a1,128(s11)
1c006730:	1848                	addi	a0,sp,52
1c006732:	c032                	sw	a2,0(sp)
1c006734:	1f6060ef          	jal	ra,1c00c92a <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006738:	01cce783          	p.elw	a5,28(s9)
							_SN_In, 2560, _LN_In, 0, &DmaR_Evt3);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+2240*((D0Ind_Total)%2));
				KerArg1->H = (unsigned short int) (((T0Ind_Last)?9:14)-1*(T0Ind==0));
1c00673c:	4339                	li	t1,14
1c00673e:	001c3793          	seqz	a5,s8
1c006742:	0ff7f693          	andi	a3,a5,255
1c006746:	4602                	lw	a2,0(sp)
1c006748:	000a8363          	beqz	s5,1c00674e <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x246>
1c00674c:	4325                	li	t1,9
1c00674e:	40d30333          	sub	t1,t1,a3
1c006752:	1c0146b7          	lui	a3,0x1c014
1c006756:	5dc68693          	addi	a3,a3,1500 # 1c0145dc <IntegerExpLUT+0x94>
1c00675a:	428c                	lw	a1,0(a3)
1c00675c:	10035b33          	p.exthz	s6,t1
1c006760:	6685                	lui	a3,0x1
1c006762:	d8fa95d7          	pv.packhi.b	a1,s5,a5
					_N_In = _N_In + (960-(80*(T0Ind==0)))+(-35840); _LN_In = ((T0Ind_NextLast)?720:1120); _SN_In = (2*_LN_In); 
1c006766:	87e2                	mv	a5,s8
1c006768:	c82e                	sw	a1,16(sp)
1c00676a:	8c5a                	mv	s8,s6
				KerArg1->H = (unsigned short int) (((T0Ind_Last)?9:14)-1*(T0Ind==0));
1c00676c:	1a068b93          	addi	s7,a3,416 # 11a0 <__rt_stack_size+0x9a0>
			for (D0Ind=0; D0Ind<8; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c006770:	4d01                	li	s10,0
					_N_In = _N_In + (960-(80*(T0Ind==0)))+(-35840); _LN_In = ((T0Ind_NextLast)?720:1120); _SN_In = (2*_LN_In); 
1c006772:	8b3e                	mv	s6,a5
				if (!(D0Ind_Last)) {
1c006774:	427d2163          	p.beqimm	s10,7,1c006b96 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x68e>
					_N_In = _N_In + (5120); _LN_In = ((T0Ind_Last)?720:(1120-80*(T0Ind==0))); _SN_In = (2*_LN_In); 
1c006778:	6705                	lui	a4,0x1
1c00677a:	40070713          	addi	a4,a4,1024 # 1400 <__rt_stack_size+0xc00>
1c00677e:	943a                	add	s0,s0,a4
1c006780:	422b2863          	p.beqimm	s6,2,1c006bb0 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x6a8>
1c006784:	400b0363          	beqz	s6,1c006b8a <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x682>
					_N_In = _N_In + (960-(80*(T0Ind==0)))+(-35840); _LN_In = ((T0Ind_NextLast)?720:1120); _SN_In = (2*_LN_In); 
1c006788:	8526                	mv	a0,s1
1c00678a:	46000a13          	li	s4,1120
  if (copy->length == 0)
1c00678e:	57ca                	lw	a5,176(sp)
1c006790:	18078363          	beqz	a5,1c006916 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x40e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c006794:	576a                	lw	a4,184(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006796:	02000793          	li	a5,32
1c00679a:	cb09                	beqz	a4,1c0067ac <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x2a4>
1c00679c:	00fda423          	sw	a5,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0067a0:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0067a4:	00fda223          	sw	a5,4(s11)
1c0067a8:	576a                	lw	a4,184(sp)
1c0067aa:	fb6d                	bnez	a4,1c00679c <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x294>
1c0067ac:	0009a783          	lw	a5,0(s3)
1c0067b0:	00160a93          	addi	s5,a2,1
				if (_SN_In) {
1c0067b4:	1a051c63          	bnez	a0,1c00696c <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x464>
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+2240*((D0Ind_Total)%2));
1c0067b8:	fc163633          	p.bclr	a2,a2,30,1
1c0067bc:	85be                	mv	a1,a5
1c0067be:	429605b3          	p.mac	a1,a2,s1
				KerArg1->UsedH = (unsigned short int) (((T0Ind_Last)?9:14)-1*(T0Ind==0));
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+4512+((D0Ind)*36));
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c0067c2:	46c2                	lw	a3,16(sp)
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+4512+((D0Ind)*36));
1c0067c4:	97de                	add	a5,a5,s7
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0067c6:	0ff00713          	li	a4,255
1c0067ca:	dbbe                	sw	a5,244(sp)
				KerArg1->H = (unsigned short int) (((T0Ind_Last)?9:14)-1*(T0Ind==0));
1c0067cc:	0f811423          	sh	s8,232(sp)
				KerArg1->UsedH = (unsigned short int) (((T0Ind_Last)?9:14)-1*(T0Ind==0));
1c0067d0:	0f811523          	sh	s8,234(sp)
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c0067d4:	dfb6                	sw	a3,252(sp)
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+2240*((D0Ind_Total)%2));
1c0067d6:	d1ae                	sw	a1,224(sp)
1c0067d8:	08eda223          	sw	a4,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0067dc:	00eca023          	sw	a4,0(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0067e0:	00eca623          	sw	a4,12(s9)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0067e4:	1c00d737          	lui	a4,0x1c00d
1c0067e8:	f4270713          	addi	a4,a4,-190 # 1c00cf42 <KerParConv3x3Stride1_DP_fp>
1c0067ec:	08eda023          	sw	a4,128(s11)
1c0067f0:	092da023          	sw	s2,128(s11)
1c0067f4:	854a                	mv	a0,s2
1c0067f6:	74c060ef          	jal	ra,1c00cf42 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0067fa:	01cce783          	p.elw	a5,28(s9)
			for (D0Ind=0; D0Ind<8; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c0067fe:	0d05                	addi	s10,s10,1
1c006800:	024b8b93          	addi	s7,s7,36
1c006804:	8656                	mv	a2,s5
1c006806:	f68d37e3          	p.bneimm	s10,8,1c006774 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x26c>
				__CALL(KerParConv3x3Stride1_DP_fp, KerArg1);
				/*================================= Update Arg Pipeline =============================*/
				/*============================= End Update Arg Pipeline =============================*/
			} /* End iteration on D0 */
			/*====================== Call Kernel LOC_D0_EPILOG =========================*/
			KerArg2->H = (unsigned short int) (T0Ind_Last?8:12);
1c00680a:	45d2                	lw	a1,20(sp)
1c00680c:	8c5a                	mv	s8,s6
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00680e:	0ff00793          	li	a5,255
1c006812:	04b11523          	sh	a1,74(sp)
1c006816:	08fda223          	sw	a5,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00681a:	00fca023          	sw	a5,0(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00681e:	00fca623          	sw	a5,12(s9)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c006822:	1c00d637          	lui	a2,0x1c00d
1c006826:	ab460613          	addi	a2,a2,-1356 # 1c00cab4 <KerDP_IO_fp>
1c00682a:	08cda023          	sw	a2,128(s11)
1c00682e:	4692                	lw	a3,4(sp)
1c006830:	08dda023          	sw	a3,128(s11)
1c006834:	00c8                	addi	a0,sp,68
1c006836:	c03e                	sw	a5,0(sp)
1c006838:	27c060ef          	jal	ra,1c00cab4 <KerDP_IO_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00683c:	01cce703          	p.elw	a4,28(s9)
			AT_FORK(gap_ncore(), (void *) KerDP_IO_fp, (void *) KerArg2);
			__CALL(KerDP_IO_fp, KerArg2);
			KerArg3->H = (unsigned short int) (T0Ind_Last?8:12);
			KerArg3->UsedH = (unsigned short int) (T0Ind_Last?8:12);
			KerArg3->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+9120+3840*((T0Ind_Total)%2));
1c006840:	6689                	lui	a3,0x2
1c006842:	fc1b3733          	p.bclr	a4,s6,30,1
1c006846:	00471a93          	slli	s5,a4,0x4
1c00684a:	40ea8ab3          	sub	s5,s5,a4
1c00684e:	0009a703          	lw	a4,0(s3)
1c006852:	3a068693          	addi	a3,a3,928 # 23a0 <__rt_stack_size+0x1ba0>
1c006856:	0aa2                	slli	s5,s5,0x8
1c006858:	9ab6                	add	s5,s5,a3
1c00685a:	9756                	add	a4,a4,s5
1c00685c:	10e12c23          	sw	a4,280(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c006860:	4782                	lw	a5,0(sp)
			KerArg3->H = (unsigned short int) (T0Ind_Last?8:12);
1c006862:	4752                	lw	a4,20(sp)
1c006864:	10e11823          	sh	a4,272(sp)
			KerArg3->UsedH = (unsigned short int) (T0Ind_Last?8:12);
1c006868:	10e11923          	sh	a4,274(sp)
1c00686c:	08fda223          	sw	a5,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c006870:	00fca023          	sw	a5,0(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c006874:	00fca623          	sw	a5,12(s9)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c006878:	1c00d7b7          	lui	a5,0x1c00d
1c00687c:	73a78793          	addi	a5,a5,1850 # 1c00d73a <KerParPool2x2Stride2_fp>
1c006880:	08fda023          	sw	a5,128(s11)
1c006884:	45b2                	lw	a1,12(sp)
1c006886:	08bda023          	sw	a1,128(s11)
1c00688a:	0228                	addi	a0,sp,264
1c00688c:	6af060ef          	jal	ra,1c00d73a <KerParPool2x2Stride2_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006890:	01cce783          	p.elw	a5,28(s9)
			AT_FORK(gap_ncore(), (void *) KerParPool2x2Stride2_fp, (void *) KerArg3);
			__CALL(KerParPool2x2Stride2_fp, KerArg3);
			/*================================= Write Tiles =====================================*/
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c006894:	5622                	lw	a2,40(sp)
1c006896:	16061d63          	bnez	a2,1c006a10 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x508>
			AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) Out+_C_Out), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+9120+3840*((T0Ind_Total)%2)),
1c00689a:	0009a783          	lw	a5,0(s3)
1c00689e:	9abe                	add	s5,s5,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0068a0:	30047773          	csrrci	a4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0068a4:	400da683          	lw	a3,1024(s11)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0068a8:	5582                	lw	a1,32(sp)
1c0068aa:	1005d7b3          	p.exthz	a5,a1
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0068ae:	c517c7b3          	p.bset	a5,a5,2,17
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0068b2:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0068b6:	40fda023          	sw	a5,1024(s11)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0068ba:	415da023          	sw	s5,1024(s11)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0068be:	4662                	lw	a2,24(sp)
1c0068c0:	40cda023          	sw	a2,1024(s11)
  return (stride << PLP_DMA_2D_STRIDE_BIT) | (len << PLP_DMA_2D_LEN_BIT);
1c0068c4:	5592                	lw	a1,36(sp)
1c0068c6:	028007b7          	lui	a5,0x2800
1c0068ca:	8fcd                	or	a5,a5,a1
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0068cc:	40fda023          	sw	a5,1024(s11)
        if (!merge) copy->id = id;
1c0068d0:	c1b6                	sw	a3,192(sp)
        copy->length = 0;
1c0068d2:	c982                	sw	zero,208(sp)
  __builtin_pulp_spr_write(reg, val);
1c0068d4:	30071073          	csrw	mstatus,a4
			/*================================= Update Arg Pipeline =============================*/
			_SP_Out = _SC_Out;_LP_Out = _LC_Out;
			/*============================= End Update Arg Pipeline =============================*/
			/*================================= Prepare Tiles ===================================*/
			_SC_Out = 0;
			if (!(T0Ind_Last)) {
1c0068d8:	56b2                	lw	a3,44(sp)
1c0068da:	0cd60f63          	beq	a2,a3,1c0069b8 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x4b0>
				_C_Out = _C_Out + (240); _LC_Out = ((T0Ind_NextLast)?160:240); _SC_Out = (16*_LC_Out); 
1c0068de:	0f000593          	li	a1,240
1c0068e2:	6705                	lui	a4,0x1
1c0068e4:	d22e                	sw	a1,36(sp)
1c0068e6:	f0070793          	addi	a5,a4,-256 # f00 <__rt_stack_size+0x700>
1c0068ea:	2c1c2b63          	p.beqimm	s8,1,1c006bc0 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x6b8>
		for (T0Ind=0; T0Ind<3; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c0068ee:	0c05                	addi	s8,s8,1
			int T0Ind_Last = (T0Ind==2), T0Ind_NextLast = ((T0Ind+1)==2);
1c0068f0:	ffec0a93          	addi	s5,s8,-2
1c0068f4:	001aba93          	seqz	s5,s5
1c0068f8:	0ffafa93          	andi	s5,s5,255
			KerArg0->H = (unsigned short int) (T0Ind_Last?8:12);
1c0068fc:	2a2c2f63          	p.beqimm	s8,2,1c006bba <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x6b2>
1c006900:	46b1                	li	a3,12
1c006902:	ca36                	sw	a3,20(sp)
1c006904:	46e2                	lw	a3,24(sp)
1c006906:	5602                	lw	a2,32(sp)
1c006908:	4752                	lw	a4,20(sp)
1c00690a:	0f068693          	addi	a3,a3,240
1c00690e:	d432                	sw	a2,40(sp)
1c006910:	cc36                	sw	a3,24(sp)
				_C_Out = _C_Out + (240); _LC_Out = ((T0Ind_NextLast)?160:240); _SC_Out = (16*_LC_Out); 
1c006912:	d03e                	sw	a5,32(sp)
1c006914:	bbcd                	j	1c006706 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x1fe>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006916:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00691a:	404da783          	lw	a5,1028(s11)
1c00691e:	570a                	lw	a4,160(sp)
1c006920:	40e7d7b3          	sra	a5,a5,a4
1c006924:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006928:	c78d                	beqz	a5,1c006952 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x44a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00692a:	10000593          	li	a1,256
  __builtin_pulp_spr_write(reg, val);
1c00692e:	30069073          	csrw	mstatus,a3
1c006932:	00bda423          	sw	a1,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006936:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00693a:	00bda223          	sw	a1,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00693e:	300476f3          	csrrci	a3,mstatus,8
1c006942:	404da783          	lw	a5,1028(s11)
1c006946:	570a                	lw	a4,160(sp)
1c006948:	40e7d7b3          	sra	a5,a5,a4
1c00694c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006950:	fff9                	bnez	a5,1c00692e <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x426>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c006952:	4785                	li	a5,1
1c006954:	00e79733          	sll	a4,a5,a4
1c006958:	40eda223          	sw	a4,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c00695c:	30069073          	csrw	mstatus,a3
1c006960:	0009a783          	lw	a5,0(s3)
1c006964:	00160a93          	addi	s5,a2,1
				if (_SN_In) {
1c006968:	e40508e3          	beqz	a0,1c0067b8 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x2b0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00696c:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c006970:	400da883          	lw	a7,1024(s11)
  res = __builtin_bitinsert(res, is2D,        1, PLP_DMA_2D_BIT);
1c006974:	00070737          	lui	a4,0x70
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c006978:	de052733          	p.insert	a4,a0,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c00697c:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c006980:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c006984:	40eda023          	sw	a4,1024(s11)
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+2240*((D0Ind_Total+1)%2)),
1c006988:	fc1ab733          	p.bclr	a4,s5,30,1
1c00698c:	429707b3          	p.mac	a5,a4,s1
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c006990:	40fda023          	sw	a5,1024(s11)
1c006994:	4772                	lw	a4,28(sp)
1c006996:	008707b3          	add	a5,a4,s0
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00699a:	40fda023          	sw	a5,1024(s11)
  return (stride << PLP_DMA_2D_STRIDE_BIT) | (len << PLP_DMA_2D_LEN_BIT);
1c00699e:	0a0007b7          	lui	a5,0xa000
1c0069a2:	00fa67b3          	or	a5,s4,a5
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0069a6:	40fda023          	sw	a5,1024(s11)
        if (!merge) copy->id = id;
1c0069aa:	d146                	sw	a7,160(sp)
        copy->length = 0;
1c0069ac:	d902                	sw	zero,176(sp)
  __builtin_pulp_spr_write(reg, val);
1c0069ae:	30059073          	csrw	mstatus,a1
1c0069b2:	0009a783          	lw	a5,0(s3)
1c0069b6:	b509                	j	1c0067b8 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x2b0>
  if (copy->length == 0)
1c0069b8:	474e                	lw	a4,208(sp)
1c0069ba:	cb71                	beqz	a4,1c006a8e <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x586>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0069bc:	46ee                	lw	a3,216(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0069be:	02000713          	li	a4,32
1c0069c2:	002047b7          	lui	a5,0x204
1c0069c6:	ca89                	beqz	a3,1c0069d8 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x4d0>
1c0069c8:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0069cc:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0069d0:	00e7a223          	sw	a4,4(a5)
1c0069d4:	46ee                	lw	a3,216(sp)
1c0069d6:	faed                	bnez	a3,1c0069c8 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x4c0>
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c0069d8:	16c12083          	lw	ra,364(sp)
1c0069dc:	16812403          	lw	s0,360(sp)
1c0069e0:	16412483          	lw	s1,356(sp)
1c0069e4:	16012903          	lw	s2,352(sp)
1c0069e8:	15c12983          	lw	s3,348(sp)
1c0069ec:	15812a03          	lw	s4,344(sp)
1c0069f0:	15412a83          	lw	s5,340(sp)
1c0069f4:	15012b03          	lw	s6,336(sp)
1c0069f8:	14c12b83          	lw	s7,332(sp)
1c0069fc:	14812c03          	lw	s8,328(sp)
1c006a00:	14412c83          	lw	s9,324(sp)
1c006a04:	14012d03          	lw	s10,320(sp)
1c006a08:	13c12d83          	lw	s11,316(sp)
1c006a0c:	6175                	addi	sp,sp,368
1c006a0e:	8082                	ret
  if (copy->length == 0)
1c006a10:	47ce                	lw	a5,208(sp)
1c006a12:	cb85                	beqz	a5,1c006a42 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x53a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c006a14:	476e                	lw	a4,216(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006a16:	02000793          	li	a5,32
1c006a1a:	e80700e3          	beqz	a4,1c00689a <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x392>
1c006a1e:	00fda423          	sw	a5,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006a22:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006a26:	00fda223          	sw	a5,4(s11)
1c006a2a:	476e                	lw	a4,216(sp)
1c006a2c:	e60707e3          	beqz	a4,1c00689a <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x392>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006a30:	00fda423          	sw	a5,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006a34:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006a38:	00fda223          	sw	a5,4(s11)
1c006a3c:	476e                	lw	a4,216(sp)
1c006a3e:	f365                	bnez	a4,1c006a1e <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x516>
1c006a40:	bda9                	j	1c00689a <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x392>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006a42:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c006a46:	404da783          	lw	a5,1028(s11)
1c006a4a:	470e                	lw	a4,192(sp)
1c006a4c:	40e7d7b3          	sra	a5,a5,a4
1c006a50:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006a54:	c78d                	beqz	a5,1c006a7e <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x576>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006a56:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c006a5a:	30069073          	csrw	mstatus,a3
1c006a5e:	00cda423          	sw	a2,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006a62:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006a66:	00cda223          	sw	a2,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006a6a:	300476f3          	csrrci	a3,mstatus,8
1c006a6e:	404da783          	lw	a5,1028(s11)
1c006a72:	470e                	lw	a4,192(sp)
1c006a74:	40e7d7b3          	sra	a5,a5,a4
1c006a78:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006a7c:	fff9                	bnez	a5,1c006a5a <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x552>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c006a7e:	4785                	li	a5,1
1c006a80:	00e79733          	sll	a4,a5,a4
1c006a84:	40eda223          	sw	a4,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c006a88:	30069073          	csrw	mstatus,a3
1c006a8c:	b539                	j	1c00689a <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x392>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006a8e:	30047673          	csrrci	a2,mstatus,8
1c006a92:	404da783          	lw	a5,1028(s11)
1c006a96:	468e                	lw	a3,192(sp)
1c006a98:	40d7d7b3          	sra	a5,a5,a3
1c006a9c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006aa0:	c79d                	beqz	a5,1c006ace <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x5c6>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006aa2:	10000593          	li	a1,256
1c006aa6:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c006aaa:	30061073          	csrw	mstatus,a2
1c006aae:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006ab2:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006ab6:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006aba:	30047673          	csrrci	a2,mstatus,8
1c006abe:	40472783          	lw	a5,1028(a4)
1c006ac2:	468e                	lw	a3,192(sp)
1c006ac4:	40d7d7b3          	sra	a5,a5,a3
1c006ac8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006acc:	fff9                	bnez	a5,1c006aaa <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x5a2>
1c006ace:	4785                	li	a5,1
1c006ad0:	00d796b3          	sll	a3,a5,a3
1c006ad4:	002047b7          	lui	a5,0x204
1c006ad8:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c006adc:	30061073          	csrw	mstatus,a2
1c006ae0:	bde5                	j	1c0069d8 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x4d0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006ae2:	300475f3          	csrrci	a1,mstatus,8
1c006ae6:	4047a783          	lw	a5,1028(a5)
1c006aea:	460a                	lw	a2,128(sp)
1c006aec:	40c7d7b3          	sra	a5,a5,a2
1c006af0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006af4:	c79d                	beqz	a5,1c006b22 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x61a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006af6:	10000513          	li	a0,256
1c006afa:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c006afe:	30059073          	csrw	mstatus,a1
1c006b02:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006b06:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006b0a:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006b0e:	300475f3          	csrrci	a1,mstatus,8
1c006b12:	40472783          	lw	a5,1028(a4)
1c006b16:	460a                	lw	a2,128(sp)
1c006b18:	40c7d7b3          	sra	a5,a5,a2
1c006b1c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006b20:	fff9                	bnez	a5,1c006afe <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x5f6>
1c006b22:	4785                	li	a5,1
1c006b24:	00c79633          	sll	a2,a5,a2
1c006b28:	002047b7          	lui	a5,0x204
1c006b2c:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c006b30:	30059073          	csrw	mstatus,a1
1c006b34:	b6a9                	j	1c00667e <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x176>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006b36:	30047573          	csrrci	a0,mstatus,8
1c006b3a:	4047a783          	lw	a5,1028(a5)
1c006b3e:	5606                	lw	a2,96(sp)
1c006b40:	40c7d7b3          	sra	a5,a5,a2
1c006b44:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006b48:	c79d                	beqz	a5,1c006b76 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x66e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006b4a:	10000813          	li	a6,256
1c006b4e:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c006b52:	30051073          	csrw	mstatus,a0
1c006b56:	01072423          	sw	a6,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006b5a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006b5e:	01072223          	sw	a6,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006b62:	30047573          	csrrci	a0,mstatus,8
1c006b66:	40472783          	lw	a5,1028(a4)
1c006b6a:	5606                	lw	a2,96(sp)
1c006b6c:	40c7d7b3          	sra	a5,a5,a2
1c006b70:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006b74:	fff9                	bnez	a5,1c006b52 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x64a>
1c006b76:	4785                	li	a5,1
1c006b78:	00c79633          	sll	a2,a5,a2
1c006b7c:	002047b7          	lui	a5,0x204
1c006b80:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c006b84:	30051073          	csrw	mstatus,a0
1c006b88:	b445                	j	1c006628 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x120>
1c006b8a:	6785                	lui	a5,0x1
1c006b8c:	82078513          	addi	a0,a5,-2016 # 820 <__rt_stack_size+0x20>
					_N_In = _N_In + (5120); _LN_In = ((T0Ind_Last)?720:(1120-80*(T0Ind==0))); _SN_In = (2*_LN_In); 
1c006b90:	41000a13          	li	s4,1040
1c006b94:	beed                	j	1c00678e <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x286>
				} else if (!(T0Ind_Last)) {
1c006b96:	042b2063          	p.beqimm	s6,2,1c006bd6 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x6ce>
					_N_In = _N_In + (960-(80*(T0Ind==0)))+(-35840); _LN_In = ((T0Ind_NextLast)?720:1120); _SN_In = (2*_LN_In); 
1c006b9a:	020b0963          	beqz	s6,1c006bcc <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x6c4>
1c006b9e:	75dd                	lui	a1,0xffff7
1c006ba0:	7c058593          	addi	a1,a1,1984 # ffff77c0 <pulp__FC+0xffff77c1>
1c006ba4:	942e                	add	s0,s0,a1
1c006ba6:	8526                	mv	a0,s1
1c006ba8:	46000a13          	li	s4,1120
1c006bac:	be1b31e3          	p.bneimm	s6,1,1c00678e <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x286>
1c006bb0:	5a000513          	li	a0,1440
1c006bb4:	2d000a13          	li	s4,720
1c006bb8:	bed9                	j	1c00678e <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x286>
			KerArg0->H = (unsigned short int) (T0Ind_Last?8:12);
1c006bba:	45a1                	li	a1,8
1c006bbc:	ca2e                	sw	a1,20(sp)
1c006bbe:	b399                	j	1c006904 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x3fc>
				_C_Out = _C_Out + (240); _LC_Out = ((T0Ind_NextLast)?160:240); _SC_Out = (16*_LC_Out); 
1c006bc0:	0a000613          	li	a2,160
1c006bc4:	a0070793          	addi	a5,a4,-1536
1c006bc8:	d232                	sw	a2,36(sp)
1c006bca:	b315                	j	1c0068ee <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x3e6>
					_N_In = _N_In + (960-(80*(T0Ind==0)))+(-35840); _LN_In = ((T0Ind_NextLast)?720:1120); _SN_In = (2*_LN_In); 
1c006bcc:	775d                	lui	a4,0xffff7
1c006bce:	77070713          	addi	a4,a4,1904 # ffff7770 <pulp__FC+0xffff7771>
1c006bd2:	943a                	add	s0,s0,a4
1c006bd4:	be55                	j	1c006788 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x280>
				_SN_In = 0;
1c006bd6:	4501                	li	a0,0
1c006bd8:	be5d                	j	1c00678e <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu+0x286>

1c006bda <S12_Conv2d_32x16x3x3_Relu>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c006bda:	714d                	addi	sp,sp,-336
		KerArgItSpace (User Kernel Iter Order):
			[D1, [0 x 40960, 40960]][Tile0, 3:[20x6, 1:20x6, 20x4], 4]
		Tile0: [0, 15360, 480], Tile1: [0, 15360, 480], Tile2; [0, 15360, 480]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+32320);
1c006bdc:	100008b7          	lui	a7,0x10000
{
1c006be0:	13512a23          	sw	s5,308(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+32320);
1c006be4:	02088a93          	addi	s5,a7,32 # 10000020 <cnn_ssd_L1_Memory>
1c006be8:	000aa803          	lw	a6,0(s5)
	KerArg0->W = (unsigned short int) (20);
	KerArg0->OutFeatures = (unsigned short int) (32);
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+7680);
1c006bec:	6789                	lui	a5,0x2
1c006bee:	e0078e13          	addi	t3,a5,-512 # 1e00 <__rt_stack_size+0x1600>
	KerArg0->NormBias = (signed char) (13);
	KerArg1->W = (unsigned short int) (20);
	KerArg1->UsedW = (unsigned short int) (20);
	KerArg1->OutFeatures = (unsigned short int) (32);
	KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+7744);
1c006bf2:	e4078793          	addi	a5,a5,-448
1c006bf6:	97c2                	add	a5,a5,a6
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+32320);
1c006bf8:	6321                	lui	t1,0x8
	KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+7744);
1c006bfa:	dfbe                	sw	a5,252(sp)
	KerArg1->OutFeatures = (unsigned short int) (32);
1c006bfc:	001007b7          	lui	a5,0x100
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+32320);
1c006c00:	e4030713          	addi	a4,t1,-448 # 7e40 <__rt_stack_size+0x7640>
{
1c006c04:	d62a                	sw	a0,44(sp)
	KerArg1->OutFeatures = (unsigned short int) (32);
1c006c06:	02078793          	addi	a5,a5,32 # 100020 <__L2+0x80020>
	KerArg0->NormBias = (signed char) (13);
1c006c0a:	4535                	li	a0,13
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+32320);
1c006c0c:	9742                	add	a4,a4,a6
	KerArg0->W = (unsigned short int) (20);
1c006c0e:	4fd1                	li	t6,20
	KerArg0->OutFeatures = (unsigned short int) (32);
1c006c10:	02000e93          	li	t4,32
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+32320);
	KerArg1->Norm = (unsigned char) (14);
1c006c14:	4f39                	li	t5,14
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+7680);
1c006c16:	01c802b3          	add	t0,a6,t3
	KerArg2->In = (int * __restrict__) (cnn_ssd_L1_Memory+32320);
	KerArg2->W = (unsigned short int) (20);
	KerArg2->Norm = (unsigned char) (14);
	KerArg2->InFeatures = (unsigned short int) (32);
	KerArg2->LB = (int) (0);
	KerArg2->UB = (int) (32767);
1c006c1a:	137d                	addi	t1,t1,-1
	KerArg0->NormBias = (signed char) (13);
1c006c1c:	04a10323          	sb	a0,70(sp)
	KerArg1->OutFeatures = (unsigned short int) (32);
1c006c20:	0ef12b23          	sw	a5,246(sp)
	KerArg1->W = (unsigned short int) (20);
1c006c24:	00a06557          	pv.add.sci.h	a0,zero,20
	KerArg1->Orientation = (unsigned char) (1);
1c006c28:	4785                	li	a5,1
{
1c006c2a:	14112623          	sw	ra,332(sp)
1c006c2e:	14812423          	sw	s0,328(sp)
1c006c32:	14912223          	sw	s1,324(sp)
1c006c36:	15212023          	sw	s2,320(sp)
1c006c3a:	13312e23          	sw	s3,316(sp)
1c006c3e:	13412c23          	sw	s4,312(sp)
1c006c42:	13612823          	sw	s6,304(sp)
1c006c46:	13712623          	sw	s7,300(sp)
1c006c4a:	13812423          	sw	s8,296(sp)
1c006c4e:	13912223          	sw	s9,292(sp)
1c006c52:	13a12023          	sw	s10,288(sp)
1c006c56:	11b12e23          	sw	s11,284(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+32320);
1c006c5a:	de3a                	sw	a4,60(sp)
	KerArg0->W = (unsigned short int) (20);
1c006c5c:	05f11023          	sh	t6,64(sp)
	KerArg0->OutFeatures = (unsigned short int) (32);
1c006c60:	05d11223          	sh	t4,68(sp)
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+7680);
1c006c64:	c496                	sw	t0,72(sp)
	KerArg1->W = (unsigned short int) (20);
1c006c66:	d7aa                	sw	a0,236(sp)
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+32320);
1c006c68:	10e12023          	sw	a4,256(sp)
	KerArg1->Norm = (unsigned char) (14);
1c006c6c:	11e10423          	sb	t5,264(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c006c70:	10f105a3          	sb	a5,267(sp)
	KerArg2->In = (int * __restrict__) (cnn_ssd_L1_Memory+32320);
1c006c74:	c6ba                	sw	a4,76(sp)
	KerArg2->W = (unsigned short int) (20);
1c006c76:	05f11823          	sh	t6,80(sp)
	KerArg2->Norm = (unsigned char) (14);
1c006c7a:	05e10c23          	sb	t5,88(sp)
	KerArg2->InFeatures = (unsigned short int) (32);
1c006c7e:	05d11d23          	sh	t4,90(sp)
	KerArg2->LB = (int) (0);
1c006c82:	ce82                	sw	zero,92(sp)
	KerArg2->UB = (int) (32767);
1c006c84:	d09a                	sw	t1,96(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006c86:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c006c8a:	002047b7          	lui	a5,0x204
1c006c8e:	4007a303          	lw	t1,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c006c92:	00071737          	lui	a4,0x71
1c006c96:	d2070713          	addi	a4,a4,-736 # 70d20 <__L1Cl+0x60d20>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c006c9a:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c006c9e:	c1574733          	p.bset	a4,a4,0,21
1c006ca2:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c006ca6:	4107a023          	sw	a6,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c006caa:	5732                	lw	a4,44(sp)
1c006cac:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c006cb0:	02800737          	lui	a4,0x2800
1c006cb4:	11870713          	addi	a4,a4,280 # 2800118 <__L2+0x2780118>
1c006cb8:	40e7a023          	sw	a4,1024(a5)
        if (!merge) copy->id = id;
1c006cbc:	d49a                	sw	t1,104(sp)
        copy->length = 0;
1c006cbe:	dc82                	sw	zero,120(sp)
  __builtin_pulp_spr_write(reg, val);
1c006cc0:	30051073          	csrw	mstatus,a0
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+0), 3360, 640, 280, 0, &DmaR_Evt1);
	_N_In=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+7680), 64, 0, &DmaR_Evt2);
1c006cc4:	000aa503          	lw	a0,0(s5)
1c006cc8:	9572                	add	a0,a0,t3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006cca:	30047873          	csrrci	a6,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c006cce:	4007a303          	lw	t1,1024(a5)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c006cd2:	00030737          	lui	a4,0x30
1c006cd6:	c0674733          	p.bset	a4,a4,0,6
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c006cda:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c006cde:	c1574733          	p.bset	a4,a4,0,21
1c006ce2:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c006ce6:	40a7a023          	sw	a0,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c006cea:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c006cee:	c51a                	sw	t1,136(sp)
        copy->length = 0;
1c006cf0:	cd02                	sw	zero,152(sp)
  __builtin_pulp_spr_write(reg, val);
1c006cf2:	30081073          	csrw	mstatus,a6
  if (copy->length == 0)
1c006cf6:	476a                	lw	a4,152(sp)
1c006cf8:	48070f63          	beqz	a4,1c007196 <S12_Conv2d_32x16x3x3_Relu+0x5bc>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c006cfc:	560a                	lw	a2,160(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006cfe:	02000713          	li	a4,32
1c006d02:	ca09                	beqz	a2,1c006d14 <S12_Conv2d_32x16x3x3_Relu+0x13a>
1c006d04:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006d08:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006d0c:	00e7a223          	sw	a4,4(a5)
1c006d10:	560a                	lw	a2,160(sp)
1c006d12:	fa6d                	bnez	a2,1c006d04 <S12_Conv2d_32x16x3x3_Relu+0x12a>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+7744), 9216, 0, &DmaR_Evt3);
1c006d14:	000aa603          	lw	a2,0(s5)
1c006d18:	6709                	lui	a4,0x2
1c006d1a:	e4070793          	addi	a5,a4,-448 # 1e40 <__rt_stack_size+0x1640>
1c006d1e:	963e                	add	a2,a2,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006d20:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c006d24:	002047b7          	lui	a5,0x204
1c006d28:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c006d2c:	002b0337          	lui	t1,0x2b0
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c006d30:	40070713          	addi	a4,a4,1024
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c006d34:	00676733          	or	a4,a4,t1
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c006d38:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c006d3c:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c006d40:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c006d44:	d542                	sw	a6,168(sp)
        copy->length = 0;
1c006d46:	dd02                	sw	zero,184(sp)
  __builtin_pulp_spr_write(reg, val);
1c006d48:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c006d4c:	576a                	lw	a4,184(sp)
1c006d4e:	3e070a63          	beqz	a4,1c007142 <S12_Conv2d_32x16x3x3_Relu+0x568>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c006d52:	460e                	lw	a2,192(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006d54:	02000713          	li	a4,32
1c006d58:	ca09                	beqz	a2,1c006d6a <S12_Conv2d_32x16x3x3_Relu+0x190>
1c006d5a:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006d5e:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006d62:	00e7a223          	sw	a4,4(a5)
1c006d66:	460e                	lw	a2,192(sp)
1c006d68:	fa6d                	bnez	a2,1c006d5a <S12_Conv2d_32x16x3x3_Relu+0x180>
	{ /* Single iteration on D1 */
		int D1Ind_Last = 1;
		for (T0Ind=0; T0Ind<3; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
			int T0Ind_Last = (T0Ind==2), T0Ind_NextLast = ((T0Ind+1)==2);
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			KerArg0->H = (unsigned short int) (T0Ind_Last?4:6);
1c006d6a:	6489                	lui	s1,0x2
1c006d6c:	0f000793          	li	a5,240
1c006d70:	4619                	li	a2,6
1c006d72:	e0048493          	addi	s1,s1,-512 # 1e00 <__rt_stack_size+0x1600>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c006d76:	00204db7          	lui	s11,0x204
1c006d7a:	d23e                	sw	a5,36(sp)
1c006d7c:	cc26                	sw	s1,24(sp)
1c006d7e:	ce36                	sw	a3,28(sp)
1c006d80:	d402                	sw	zero,40(sp)
1c006d82:	c802                	sw	zero,16(sp)
1c006d84:	4d01                	li	s10,0
			int T0Ind_Last = (T0Ind==2), T0Ind_NextLast = ((T0Ind+1)==2);
1c006d86:	4a01                	li	s4,0
			KerArg0->H = (unsigned short int) (T0Ind_Last?4:6);
1c006d88:	c632                	sw	a2,12(sp)
1c006d8a:	03c10b93          	addi	s7,sp,60
1c006d8e:	11a0                	addi	s0,sp,232
1c006d90:	04c10b13          	addi	s6,sp,76
1c006d94:	0ff00c13          	li	s8,255
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c006d98:	200d8c93          	addi	s9,s11,512 # 204200 <__L2+0x184200>
1c006d9c:	87b2                	mv	a5,a2
1c006d9e:	001d1713          	slli	a4,s10,0x1
1c006da2:	04f11123          	sh	a5,66(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c006da6:	098da223          	sw	s8,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c006daa:	018ca023          	sw	s8,0(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c006dae:	018ca623          	sw	s8,12(s9)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c006db2:	1c00d637          	lui	a2,0x1c00d
1c006db6:	92a60613          	addi	a2,a2,-1750 # 1c00c92a <KerParSetBias_DP_fp>
1c006dba:	08cda023          	sw	a2,128(s11)
1c006dbe:	097da023          	sw	s7,128(s11)
1c006dc2:	855e                	mv	a0,s7
1c006dc4:	c43a                	sw	a4,8(sp)
1c006dc6:	365050ef          	jal	ra,1c00c92a <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006dca:	01cce783          	p.elw	a5,28(s9)
							_SN_In, 640, _LN_In, 0, &DmaR_Evt1);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+3840*((D0Ind_Total)%2));
				KerArg1->H = (unsigned short int) (((T0Ind_Last)?5:8)-1*(T0Ind==0));
1c006dce:	45a1                	li	a1,8
1c006dd0:	001d3793          	seqz	a5,s10
1c006dd4:	0ff7f693          	andi	a3,a5,255
1c006dd8:	4722                	lw	a4,8(sp)
1c006dda:	000a0363          	beqz	s4,1c006de0 <S12_Conv2d_32x16x3x3_Relu+0x206>
1c006dde:	4595                	li	a1,5
1c006de0:	8d95                	sub	a1,a1,a3
1c006de2:	1c0146b7          	lui	a3,0x1c014
1c006de6:	5dc68693          	addi	a3,a3,1500 # 1c0145dc <IntegerExpLUT+0x94>
1c006dea:	4290                	lw	a2,0(a3)
1c006dec:	6689                	lui	a3,0x2
1c006dee:	1005d933          	p.exthz	s2,a1
1c006df2:	d8fa1657          	pv.packhi.b	a2,s4,a5
					_N_In = _N_In + (7680); _LN_In = ((T0Ind_Last)?200:(320-40*(T0Ind==0))); _SN_In = (((1)?4:12)*_LN_In); 
1c006df6:	47c2                	lw	a5,16(sp)
1c006df8:	ca32                	sw	a2,20(sp)
1c006dfa:	6609                	lui	a2,0x2
1c006dfc:	e0060613          	addi	a2,a2,-512 # 1e00 <__rt_stack_size+0x1600>
1c006e00:	97b2                	add	a5,a5,a2
1c006e02:	c83e                	sw	a5,16(sp)
				KerArg1->H = (unsigned short int) (((T0Ind_Last)?5:8)-1*(T0Ind==0));
1c006e04:	e4068a13          	addi	s4,a3,-448 # 1e40 <__rt_stack_size+0x1640>
			for (D0Ind=0; D0Ind<2; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c006e08:	4981                	li	s3,0
					_N_In = _N_In + (7680); _LN_In = ((T0Ind_Last)?200:(320-40*(T0Ind==0))); _SN_In = (((1)?4:12)*_LN_In); 
1c006e0a:	402d2663          	p.beqimm	s10,2,1c007216 <S12_Conv2d_32x16x3x3_Relu+0x63c>
1c006e0e:	3e0d0c63          	beqz	s10,1c007206 <S12_Conv2d_32x16x3x3_Relu+0x62c>
1c006e12:	14000693          	li	a3,320
1c006e16:	50000e13          	li	t3,1280
1c006e1a:	d036                	sw	a3,32(sp)
  if (copy->length == 0)
1c006e1c:	57e6                	lw	a5,120(sp)
1c006e1e:	14078163          	beqz	a5,1c006f60 <S12_Conv2d_32x16x3x3_Relu+0x386>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c006e22:	478a                	lw	a5,128(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006e24:	02000693          	li	a3,32
1c006e28:	cb89                	beqz	a5,1c006e3a <S12_Conv2d_32x16x3x3_Relu+0x260>
1c006e2a:	00dda423          	sw	a3,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006e2e:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006e32:	00dda223          	sw	a3,4(s11)
1c006e36:	478a                	lw	a5,128(sp)
1c006e38:	fbed                	bnez	a5,1c006e2a <S12_Conv2d_32x16x3x3_Relu+0x250>
1c006e3a:	000aa683          	lw	a3,0(s5)
1c006e3e:	00170493          	addi	s1,a4,1
				if (_SN_In) {
1c006e42:	160e1a63          	bnez	t3,1c006fb6 <S12_Conv2d_32x16x3x3_Relu+0x3dc>
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+3840*((D0Ind_Total)%2));
1c006e46:	fc173733          	p.bclr	a4,a4,30,1
1c006e4a:	00471793          	slli	a5,a4,0x4
1c006e4e:	8f99                	sub	a5,a5,a4
1c006e50:	07a2                	slli	a5,a5,0x8
1c006e52:	97b6                	add	a5,a5,a3
1c006e54:	d5be                	sw	a5,232(sp)
				KerArg1->H = (unsigned short int) (((T0Ind_Last)?5:8)-1*(T0Ind==0));
1c006e56:	0f211823          	sh	s2,240(sp)
				KerArg1->UsedH = (unsigned short int) (((T0Ind_Last)?5:8)-1*(T0Ind==0));
1c006e5a:	0f211923          	sh	s2,242(sp)
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?4:12);
1c006e5e:	47b1                	li	a5,12
1c006e60:	3a19a963          	p.beqimm	s3,1,1c007212 <S12_Conv2d_32x16x3x3_Relu+0x638>
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+7744+((D0Ind)*216));
1c006e64:	96d2                	add	a3,a3,s4
1c006e66:	dfb6                	sw	a3,252(sp)
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c006e68:	46d2                	lw	a3,20(sp)
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?4:12);
1c006e6a:	0ef11a23          	sh	a5,244(sp)
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c006e6e:	10d12223          	sw	a3,260(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c006e72:	098da223          	sw	s8,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c006e76:	018ca023          	sw	s8,0(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c006e7a:	018ca623          	sw	s8,12(s9)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c006e7e:	1c00d737          	lui	a4,0x1c00d
1c006e82:	f4270713          	addi	a4,a4,-190 # 1c00cf42 <KerParConv3x3Stride1_DP_fp>
1c006e86:	08eda023          	sw	a4,128(s11)
1c006e8a:	088da023          	sw	s0,128(s11)
1c006e8e:	8522                	mv	a0,s0
1c006e90:	0b2060ef          	jal	ra,1c00cf42 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006e94:	01cce783          	p.elw	a5,28(s9)
1c006e98:	0d8a0a13          	addi	s4,s4,216
1c006e9c:	8726                	mv	a4,s1
			for (D0Ind=0; D0Ind<2; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c006e9e:	1619b663          	p.bneimm	s3,1,1c00700a <S12_Conv2d_32x16x3x3_Relu+0x430>
				/*================================= Update Arg Pipeline =============================*/
				/*============================= End Update Arg Pipeline =============================*/
			} /* End iteration on D0 */
			/*====================== Call Kernel LOC_D0_EPILOG =========================*/
			KerArg2->H = (unsigned short int) (T0Ind_Last?4:6);
			KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+16960+7680*((T0Ind_Total)%2));
1c006ea2:	fc1d37b3          	p.bclr	a5,s10,30,1
1c006ea6:	00479493          	slli	s1,a5,0x4
1c006eaa:	8c9d                	sub	s1,s1,a5
1c006eac:	6711                	lui	a4,0x4
1c006eae:	000aa783          	lw	a5,0(s5)
1c006eb2:	24070713          	addi	a4,a4,576 # 4240 <__rt_stack_size+0x3a40>
1c006eb6:	04a6                	slli	s1,s1,0x9
1c006eb8:	94ba                	add	s1,s1,a4
1c006eba:	97a6                	add	a5,a5,s1
1c006ebc:	cabe                	sw	a5,84(sp)
			KerArg2->H = (unsigned short int) (T0Ind_Last?4:6);
1c006ebe:	47b2                	lw	a5,12(sp)
1c006ec0:	04f11923          	sh	a5,82(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c006ec4:	098da223          	sw	s8,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c006ec8:	018ca023          	sw	s8,0(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c006ecc:	018ca623          	sw	s8,12(s9)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c006ed0:	1c00d637          	lui	a2,0x1c00d
1c006ed4:	9de60613          	addi	a2,a2,-1570 # 1c00c9de <KerDP_fp>
1c006ed8:	08cda023          	sw	a2,128(s11)
1c006edc:	096da023          	sw	s6,128(s11)
1c006ee0:	855a                	mv	a0,s6
1c006ee2:	2fd050ef          	jal	ra,1c00c9de <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006ee6:	01cce783          	p.elw	a5,28(s9)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
			/*================================= Write Tiles =====================================*/
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c006eea:	56a2                	lw	a3,40(sp)
1c006eec:	1a069863          	bnez	a3,1c00709c <S12_Conv2d_32x16x3x3_Relu+0x4c2>
			AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) Out+_C_Out), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+16960+7680*((T0Ind_Total)%2)),
1c006ef0:	000aa783          	lw	a5,0(s5)
1c006ef4:	94be                	add	s1,s1,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006ef6:	30047773          	csrrci	a4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c006efa:	400da683          	lw	a3,1024(s11)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c006efe:	4662                	lw	a2,24(sp)
1c006f00:	100657b3          	p.exthz	a5,a2
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c006f04:	c517c7b3          	p.bset	a5,a5,2,17
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c006f08:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c006f0c:	40fda023          	sw	a5,1024(s11)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c006f10:	409da023          	sw	s1,1024(s11)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c006f14:	47f2                	lw	a5,28(sp)
1c006f16:	40fda023          	sw	a5,1024(s11)
  return (stride << PLP_DMA_2D_STRIDE_BIT) | (len << PLP_DMA_2D_LEN_BIT);
1c006f1a:	5612                	lw	a2,36(sp)
1c006f1c:	028007b7          	lui	a5,0x2800
1c006f20:	8fd1                	or	a5,a5,a2
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c006f22:	40fda023          	sw	a5,1024(s11)
        if (!merge) copy->id = id;
1c006f26:	c5b6                	sw	a3,200(sp)
        copy->length = 0;
1c006f28:	cd82                	sw	zero,216(sp)
  __builtin_pulp_spr_write(reg, val);
1c006f2a:	30071073          	csrw	mstatus,a4
			/*================================= Update Arg Pipeline =============================*/
			_SP_Out = _SC_Out;_LP_Out = _LC_Out;
			/*============================= End Update Arg Pipeline =============================*/
			/*================================= Prepare Tiles ===================================*/
			_SC_Out = 0;
			if (!(T0Ind_Last)) {
1c006f2e:	102d2b63          	p.beqimm	s10,2,1c007044 <S12_Conv2d_32x16x3x3_Relu+0x46a>
				_C_Out = _C_Out + (240); _LC_Out = ((T0Ind_NextLast)?160:240); _SC_Out = (32*_LC_Out); 
1c006f32:	301d2863          	p.beqimm	s10,1,1c007242 <S12_Conv2d_32x16x3x3_Relu+0x668>
1c006f36:	1c014737          	lui	a4,0x1c014
1c006f3a:	59070713          	addi	a4,a4,1424 # 1c014590 <IntegerExpLUT+0x48>
1c006f3e:	431c                	lw	a5,0(a4)
1c006f40:	0f000693          	li	a3,240
			KerArg0->H = (unsigned short int) (T0Ind_Last?4:6);
1c006f44:	4619                	li	a2,6
				_C_Out = _C_Out + (240); _LC_Out = ((T0Ind_NextLast)?160:240); _SC_Out = (32*_LC_Out); 
1c006f46:	d236                	sw	a3,36(sp)
			int T0Ind_Last = (T0Ind==2), T0Ind_NextLast = ((T0Ind+1)==2);
1c006f48:	4a01                	li	s4,0
			KerArg0->H = (unsigned short int) (T0Ind_Last?4:6);
1c006f4a:	c632                	sw	a2,12(sp)
1c006f4c:	46f2                	lw	a3,28(sp)
1c006f4e:	4662                	lw	a2,24(sp)
1c006f50:	8d4e                	mv	s10,s3
1c006f52:	0f068693          	addi	a3,a3,240
1c006f56:	cc3e                	sw	a5,24(sp)
1c006f58:	d432                	sw	a2,40(sp)
1c006f5a:	ce36                	sw	a3,28(sp)
1c006f5c:	47b2                	lw	a5,12(sp)
1c006f5e:	b581                	j	1c006d9e <S12_Conv2d_32x16x3x3_Relu+0x1c4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006f60:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c006f64:	404da783          	lw	a5,1028(s11)
1c006f68:	56a6                	lw	a3,104(sp)
1c006f6a:	40d7d7b3          	sra	a5,a5,a3
1c006f6e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006f72:	c78d                	beqz	a5,1c006f9c <S12_Conv2d_32x16x3x3_Relu+0x3c2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006f74:	10000593          	li	a1,256
  __builtin_pulp_spr_write(reg, val);
1c006f78:	30061073          	csrw	mstatus,a2
1c006f7c:	00bda423          	sw	a1,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006f80:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006f84:	00bda223          	sw	a1,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006f88:	30047673          	csrrci	a2,mstatus,8
1c006f8c:	404da783          	lw	a5,1028(s11)
1c006f90:	56a6                	lw	a3,104(sp)
1c006f92:	40d7d7b3          	sra	a5,a5,a3
1c006f96:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006f9a:	fff9                	bnez	a5,1c006f78 <S12_Conv2d_32x16x3x3_Relu+0x39e>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c006f9c:	4785                	li	a5,1
1c006f9e:	00d796b3          	sll	a3,a5,a3
1c006fa2:	40dda223          	sw	a3,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c006fa6:	30061073          	csrw	mstatus,a2
1c006faa:	000aa683          	lw	a3,0(s5)
1c006fae:	00170493          	addi	s1,a4,1
				if (_SN_In) {
1c006fb2:	e80e0ae3          	beqz	t3,1c006e46 <S12_Conv2d_32x16x3x3_Relu+0x26c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006fb6:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c006fba:	400da503          	lw	a0,1024(s11)
  res = __builtin_bitinsert(res, is2D,        1, PLP_DMA_2D_BIT);
1c006fbe:	000707b7          	lui	a5,0x70
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c006fc2:	de0e27b3          	p.insert	a5,t3,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c006fc6:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c006fca:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c006fce:	40fda023          	sw	a5,1024(s11)
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+3840*((D0Ind_Total+1)%2)),
1c006fd2:	fc14b633          	p.bclr	a2,s1,30,1
1c006fd6:	00461793          	slli	a5,a2,0x4
1c006fda:	8f91                	sub	a5,a5,a2
1c006fdc:	07a2                	slli	a5,a5,0x8
1c006fde:	96be                	add	a3,a3,a5
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c006fe0:	40dda023          	sw	a3,1024(s11)
1c006fe4:	5632                	lw	a2,44(sp)
1c006fe6:	46c2                	lw	a3,16(sp)
1c006fe8:	00d607b3          	add	a5,a2,a3
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c006fec:	40fda023          	sw	a5,1024(s11)
  return (stride << PLP_DMA_2D_STRIDE_BIT) | (len << PLP_DMA_2D_LEN_BIT);
1c006ff0:	5602                	lw	a2,32(sp)
1c006ff2:	028007b7          	lui	a5,0x2800
1c006ff6:	8fd1                	or	a5,a5,a2
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c006ff8:	40fda023          	sw	a5,1024(s11)
        if (!merge) copy->id = id;
1c006ffc:	d4aa                	sw	a0,104(sp)
        copy->length = 0;
1c006ffe:	dc82                	sw	zero,120(sp)
  __builtin_pulp_spr_write(reg, val);
1c007000:	30059073          	csrw	mstatus,a1
1c007004:	000aa683          	lw	a3,0(s5)
1c007008:	bd3d                	j	1c006e46 <S12_Conv2d_32x16x3x3_Relu+0x26c>
1c00700a:	4985                	li	s3,1
				} else if (!(T0Ind_Last)) {
1c00700c:	242d2663          	p.beqimm	s10,2,1c007258 <S12_Conv2d_32x16x3x3_Relu+0x67e>
					_N_In = _N_In + (240-(40*(T0Ind==0)))+(-7680); _LN_In = ((T0Ind_NextLast)?200:320); _SN_In = (12*_LN_In); 
1c007010:	200d0963          	beqz	s10,1c007222 <S12_Conv2d_32x16x3x3_Relu+0x648>
1c007014:	4642                	lw	a2,16(sp)
1c007016:	76f9                	lui	a3,0xffffe
1c007018:	2f068793          	addi	a5,a3,752 # ffffe2f0 <pulp__FC+0xffffe2f1>
1c00701c:	963e                	add	a2,a2,a5
1c00701e:	1c0146b7          	lui	a3,0x1c014
1c007022:	14000793          	li	a5,320
1c007026:	58c68693          	addi	a3,a3,1420 # 1c01458c <IntegerExpLUT+0x44>
1c00702a:	c832                	sw	a2,16(sp)
1c00702c:	d03e                	sw	a5,32(sp)
1c00702e:	0006ae03          	lw	t3,0(a3)
1c007032:	de1d35e3          	p.bneimm	s10,1,1c006e1c <S12_Conv2d_32x16x3x3_Relu+0x242>
1c007036:	6605                	lui	a2,0x1
1c007038:	0c800693          	li	a3,200
1c00703c:	96060e13          	addi	t3,a2,-1696 # 960 <__rt_stack_size+0x160>
1c007040:	d036                	sw	a3,32(sp)
1c007042:	bbe9                	j	1c006e1c <S12_Conv2d_32x16x3x3_Relu+0x242>
  if (copy->length == 0)
1c007044:	476e                	lw	a4,216(sp)
1c007046:	c745                	beqz	a4,1c0070ee <S12_Conv2d_32x16x3x3_Relu+0x514>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c007048:	568e                	lw	a3,224(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00704a:	02000713          	li	a4,32
1c00704e:	002047b7          	lui	a5,0x204
1c007052:	ca89                	beqz	a3,1c007064 <S12_Conv2d_32x16x3x3_Relu+0x48a>
1c007054:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007058:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00705c:	00e7a223          	sw	a4,4(a5)
1c007060:	568e                	lw	a3,224(sp)
1c007062:	faed                	bnez	a3,1c007054 <S12_Conv2d_32x16x3x3_Relu+0x47a>
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c007064:	14c12083          	lw	ra,332(sp)
1c007068:	14812403          	lw	s0,328(sp)
1c00706c:	14412483          	lw	s1,324(sp)
1c007070:	14012903          	lw	s2,320(sp)
1c007074:	13c12983          	lw	s3,316(sp)
1c007078:	13812a03          	lw	s4,312(sp)
1c00707c:	13412a83          	lw	s5,308(sp)
1c007080:	13012b03          	lw	s6,304(sp)
1c007084:	12c12b83          	lw	s7,300(sp)
1c007088:	12812c03          	lw	s8,296(sp)
1c00708c:	12412c83          	lw	s9,292(sp)
1c007090:	12012d03          	lw	s10,288(sp)
1c007094:	11c12d83          	lw	s11,284(sp)
1c007098:	6171                	addi	sp,sp,336
1c00709a:	8082                	ret
  if (copy->length == 0)
1c00709c:	47ee                	lw	a5,216(sp)
1c00709e:	14079663          	bnez	a5,1c0071ea <S12_Conv2d_32x16x3x3_Relu+0x610>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0070a2:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0070a6:	404da783          	lw	a5,1028(s11)
1c0070aa:	472e                	lw	a4,200(sp)
1c0070ac:	40e7d7b3          	sra	a5,a5,a4
1c0070b0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0070b4:	c78d                	beqz	a5,1c0070de <S12_Conv2d_32x16x3x3_Relu+0x504>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0070b6:	10000593          	li	a1,256
  __builtin_pulp_spr_write(reg, val);
1c0070ba:	30069073          	csrw	mstatus,a3
1c0070be:	00bda423          	sw	a1,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0070c2:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0070c6:	00bda223          	sw	a1,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0070ca:	300476f3          	csrrci	a3,mstatus,8
1c0070ce:	404da783          	lw	a5,1028(s11)
1c0070d2:	472e                	lw	a4,200(sp)
1c0070d4:	40e7d7b3          	sra	a5,a5,a4
1c0070d8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0070dc:	fff9                	bnez	a5,1c0070ba <S12_Conv2d_32x16x3x3_Relu+0x4e0>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0070de:	4785                	li	a5,1
1c0070e0:	00e79733          	sll	a4,a5,a4
1c0070e4:	40eda223          	sw	a4,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c0070e8:	30069073          	csrw	mstatus,a3
1c0070ec:	b511                	j	1c006ef0 <S12_Conv2d_32x16x3x3_Relu+0x316>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0070ee:	30047673          	csrrci	a2,mstatus,8
1c0070f2:	404da783          	lw	a5,1028(s11)
1c0070f6:	46ae                	lw	a3,200(sp)
1c0070f8:	40d7d7b3          	sra	a5,a5,a3
1c0070fc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c007100:	c79d                	beqz	a5,1c00712e <S12_Conv2d_32x16x3x3_Relu+0x554>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007102:	10000593          	li	a1,256
1c007106:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00710a:	30061073          	csrw	mstatus,a2
1c00710e:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007112:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007116:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00711a:	30047673          	csrrci	a2,mstatus,8
1c00711e:	40472783          	lw	a5,1028(a4)
1c007122:	46ae                	lw	a3,200(sp)
1c007124:	40d7d7b3          	sra	a5,a5,a3
1c007128:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00712c:	fff9                	bnez	a5,1c00710a <S12_Conv2d_32x16x3x3_Relu+0x530>
1c00712e:	4785                	li	a5,1
1c007130:	00d796b3          	sll	a3,a5,a3
1c007134:	002047b7          	lui	a5,0x204
1c007138:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00713c:	30061073          	csrw	mstatus,a2
1c007140:	b715                	j	1c007064 <S12_Conv2d_32x16x3x3_Relu+0x48a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007142:	300475f3          	csrrci	a1,mstatus,8
1c007146:	4047a783          	lw	a5,1028(a5)
1c00714a:	562a                	lw	a2,168(sp)
1c00714c:	40c7d7b3          	sra	a5,a5,a2
1c007150:	fc17b7b3          	p.bclr	a5,a5,30,1
1c007154:	c79d                	beqz	a5,1c007182 <S12_Conv2d_32x16x3x3_Relu+0x5a8>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007156:	10000513          	li	a0,256
1c00715a:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00715e:	30059073          	csrw	mstatus,a1
1c007162:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007166:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00716a:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00716e:	300475f3          	csrrci	a1,mstatus,8
1c007172:	40472783          	lw	a5,1028(a4)
1c007176:	562a                	lw	a2,168(sp)
1c007178:	40c7d7b3          	sra	a5,a5,a2
1c00717c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c007180:	fff9                	bnez	a5,1c00715e <S12_Conv2d_32x16x3x3_Relu+0x584>
1c007182:	4785                	li	a5,1
1c007184:	00c79633          	sll	a2,a5,a2
1c007188:	002047b7          	lui	a5,0x204
1c00718c:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c007190:	30059073          	csrw	mstatus,a1
1c007194:	bed9                	j	1c006d6a <S12_Conv2d_32x16x3x3_Relu+0x190>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007196:	30047573          	csrrci	a0,mstatus,8
1c00719a:	4047a783          	lw	a5,1028(a5)
1c00719e:	462a                	lw	a2,136(sp)
1c0071a0:	40c7d7b3          	sra	a5,a5,a2
1c0071a4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0071a8:	c79d                	beqz	a5,1c0071d6 <S12_Conv2d_32x16x3x3_Relu+0x5fc>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0071aa:	10000813          	li	a6,256
1c0071ae:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0071b2:	30051073          	csrw	mstatus,a0
1c0071b6:	01072423          	sw	a6,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0071ba:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0071be:	01072223          	sw	a6,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0071c2:	30047573          	csrrci	a0,mstatus,8
1c0071c6:	40472783          	lw	a5,1028(a4)
1c0071ca:	462a                	lw	a2,136(sp)
1c0071cc:	40c7d7b3          	sra	a5,a5,a2
1c0071d0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0071d4:	fff9                	bnez	a5,1c0071b2 <S12_Conv2d_32x16x3x3_Relu+0x5d8>
1c0071d6:	4785                	li	a5,1
1c0071d8:	00c79633          	sll	a2,a5,a2
1c0071dc:	002047b7          	lui	a5,0x204
1c0071e0:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0071e4:	30051073          	csrw	mstatus,a0
1c0071e8:	b635                	j	1c006d14 <S12_Conv2d_32x16x3x3_Relu+0x13a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0071ea:	570e                	lw	a4,224(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0071ec:	02000793          	li	a5,32
1c0071f0:	d00700e3          	beqz	a4,1c006ef0 <S12_Conv2d_32x16x3x3_Relu+0x316>
1c0071f4:	00fda423          	sw	a5,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0071f8:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0071fc:	00fda223          	sw	a5,4(s11)
1c007200:	570e                	lw	a4,224(sp)
1c007202:	fb6d                	bnez	a4,1c0071f4 <S12_Conv2d_32x16x3x3_Relu+0x61a>
1c007204:	b1f5                	j	1c006ef0 <S12_Conv2d_32x16x3x3_Relu+0x316>
					_N_In = _N_In + (7680); _LN_In = ((T0Ind_Last)?200:(320-40*(T0Ind==0))); _SN_In = (((1)?4:12)*_LN_In); 
1c007206:	11800613          	li	a2,280
1c00720a:	46000e13          	li	t3,1120
1c00720e:	d032                	sw	a2,32(sp)
1c007210:	b131                	j	1c006e1c <S12_Conv2d_32x16x3x3_Relu+0x242>
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?4:12);
1c007212:	4791                	li	a5,4
1c007214:	b981                	j	1c006e64 <S12_Conv2d_32x16x3x3_Relu+0x28a>
					_N_In = _N_In + (7680); _LN_In = ((T0Ind_Last)?200:(320-40*(T0Ind==0))); _SN_In = (((1)?4:12)*_LN_In); 
1c007216:	0c800793          	li	a5,200
1c00721a:	32000e13          	li	t3,800
1c00721e:	d03e                	sw	a5,32(sp)
1c007220:	bef5                	j	1c006e1c <S12_Conv2d_32x16x3x3_Relu+0x242>
					_N_In = _N_In + (240-(40*(T0Ind==0)))+(-7680); _LN_In = ((T0Ind_NextLast)?200:320); _SN_In = (12*_LN_In); 
1c007222:	46c2                	lw	a3,16(sp)
1c007224:	77f9                	lui	a5,0xffffe
1c007226:	2c878793          	addi	a5,a5,712 # ffffe2c8 <pulp__FC+0xffffe2c9>
1c00722a:	96be                	add	a3,a3,a5
1c00722c:	1c014637          	lui	a2,0x1c014
1c007230:	c836                	sw	a3,16(sp)
1c007232:	58c60613          	addi	a2,a2,1420 # 1c01458c <IntegerExpLUT+0x44>
1c007236:	14000693          	li	a3,320
1c00723a:	00062e03          	lw	t3,0(a2)
1c00723e:	d036                	sw	a3,32(sp)
1c007240:	bef1                	j	1c006e1c <S12_Conv2d_32x16x3x3_Relu+0x242>
				_C_Out = _C_Out + (240); _LC_Out = ((T0Ind_NextLast)?160:240); _SC_Out = (32*_LC_Out); 
1c007242:	0a000693          	li	a3,160
1c007246:	6785                	lui	a5,0x1
			KerArg0->H = (unsigned short int) (T0Ind_Last?4:6);
1c007248:	4711                	li	a4,4
				_C_Out = _C_Out + (240); _LC_Out = ((T0Ind_NextLast)?160:240); _SC_Out = (32*_LC_Out); 
1c00724a:	d236                	sw	a3,36(sp)
		for (T0Ind=0; T0Ind<3; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c00724c:	4989                	li	s3,2
				_C_Out = _C_Out + (240); _LC_Out = ((T0Ind_NextLast)?160:240); _SC_Out = (32*_LC_Out); 
1c00724e:	40078793          	addi	a5,a5,1024 # 1400 <__rt_stack_size+0xc00>
			int T0Ind_Last = (T0Ind==2), T0Ind_NextLast = ((T0Ind+1)==2);
1c007252:	4a05                	li	s4,1
			KerArg0->H = (unsigned short int) (T0Ind_Last?4:6);
1c007254:	c63a                	sw	a4,12(sp)
1c007256:	b9dd                	j	1c006f4c <S12_Conv2d_32x16x3x3_Relu+0x372>
				_SN_In = 0;
1c007258:	4e01                	li	t3,0
1c00725a:	b6c9                	j	1c006e1c <S12_Conv2d_32x16x3x3_Relu+0x242>

1c00725c <S13_MaxPool_2x2>:
void S13_MaxPool_2x2(
		short int * __restrict__ In,
		short int * __restrict__ Out)

{
1c00725c:	7175                	addi	sp,sp,-144
1c00725e:	c326                	sw	s1,132(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D0, [0 x 5120, 5120]][Tile0, 1:[10x8], 2]
		Tile0: [0, 5120, 5120], Tile1: [0, 5120, 5120], Tile2; [0, 5120, 5120]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0);
1c007260:	100004b7          	lui	s1,0x10000
1c007264:	02048493          	addi	s1,s1,32 # 10000020 <cnn_ssd_L1_Memory>
1c007268:	4098                	lw	a4,0(s1)
	KerArg0->W = (unsigned short int) (20);
	KerArg0->UsedW = (unsigned short int) (20);
	KerArg0->H = (unsigned short int) (16);
	KerArg0->OutFeatures = (unsigned short int) (32);
	KerArg0->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+20480);
1c00726a:	6795                	lui	a5,0x5
	KerArg0->W = (unsigned short int) (20);
1c00726c:	00a066d7          	pv.add.sci.h	a3,zero,20
	KerArg0->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+20480);
1c007270:	97ba                	add	a5,a5,a4
1c007272:	ccbe                	sw	a5,88(sp)
	KerArg0->Pad = (v4s) 0;
1c007274:	000077d7          	pv.add.sci.b	a5,zero,0
1c007278:	cebe                	sw	a5,92(sp)
	KerArg0->Orientation = (unsigned char) (1);
1c00727a:	4785                	li	a5,1
1c00727c:	06f11123          	sh	a5,98(sp)
	KerArg0->Oper = (unsigned char) (0);
	KerArg0->LB = (int) (-32768);
1c007280:	77e1                	lui	a5,0xffff8
	KerArg0->W = (unsigned short int) (20);
1c007282:	c6b6                	sw	a3,76(sp)
	KerArg0->LB = (int) (-32768);
1c007284:	d4be                	sw	a5,104(sp)
	KerArg0->H = (unsigned short int) (16);
1c007286:	46c1                	li	a3,16
	KerArg0->UB = (int) (32767);
1c007288:	67a1                	lui	a5,0x8
{
1c00728a:	dece                	sw	s3,124(sp)
	KerArg0->H = (unsigned short int) (16);
1c00728c:	04d11823          	sh	a3,80(sp)
	KerArg0->UB = (int) (32767);
1c007290:	17fd                	addi	a5,a5,-1
	KerArg0->OutFeatures = (unsigned short int) (32);
1c007292:	02000693          	li	a3,32
{
1c007296:	89ae                	mv	s3,a1
1c007298:	c706                	sw	ra,140(sp)
1c00729a:	c522                	sw	s0,136(sp)
1c00729c:	c14a                	sw	s2,128(sp)
	KerArg0->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0);
1c00729e:	c4ba                	sw	a4,72(sp)
	KerArg0->OutFeatures = (unsigned short int) (32);
1c0072a0:	04d11a23          	sh	a3,84(sp)
	KerArg0->UB = (int) (32767);
1c0072a4:	d6be                	sw	a5,108(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0072a6:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0072aa:	002047b7          	lui	a5,0x204
1c0072ae:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0072b2:	002b55b7          	lui	a1,0x2b5
1c0072b6:	40b7a023          	sw	a1,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0072ba:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0072be:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c0072c2:	c432                	sw	a2,8(sp)
        copy->length = 0;
1c0072c4:	cc02                	sw	zero,24(sp)
  __builtin_pulp_spr_write(reg, val);
1c0072c6:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c0072ca:	4762                	lw	a4,24(sp)
1c0072cc:	10070a63          	beqz	a4,1c0073e0 <S13_MaxPool_2x2+0x184>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0072d0:	5682                	lw	a3,32(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0072d2:	02000713          	li	a4,32
1c0072d6:	ca89                	beqz	a3,1c0072e8 <S13_MaxPool_2x2+0x8c>
1c0072d8:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0072dc:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0072e0:	00e7a223          	sw	a4,4(a5)
1c0072e4:	5682                	lw	a3,32(sp)
1c0072e6:	faed                	bnez	a3,1c0072d8 <S13_MaxPool_2x2+0x7c>
	{ /* Single iteration on D0 */
		int D0Ind_Last = 1;
		{ /* Single iteration on Tile0 */
			int T0Ind_Last = 1;
			/*====================== Call Kernel LOC_LOOP =========================*/
			KerArg0->UsedH = (unsigned short int) (16);
1c0072e8:	4741                	li	a4,16
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0072ea:	0ff00793          	li	a5,255
1c0072ee:	00204437          	lui	s0,0x204
1c0072f2:	04e11923          	sh	a4,82(sp)
1c0072f6:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0072fa:	20040913          	addi	s2,s0,512
1c0072fe:	00f92023          	sw	a5,0(s2)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c007302:	00f92623          	sw	a5,12(s2)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c007306:	1c00d7b7          	lui	a5,0x1c00d
1c00730a:	73a78793          	addi	a5,a5,1850 # 1c00d73a <KerParPool2x2Stride2_fp>
1c00730e:	08f42023          	sw	a5,128(s0)
1c007312:	00a8                	addi	a0,sp,72
1c007314:	08a42023          	sw	a0,128(s0)
1c007318:	422060ef          	jal	ra,1c00d73a <KerParPool2x2Stride2_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00731c:	01c96783          	p.elw	a5,28(s2)
			AT_FORK(gap_ncore(), (void *) KerParPool2x2Stride2_fp, (void *) KerArg0);
			__CALL(KerParPool2x2Stride2_fp, KerArg0);
		} /* End iteration on Tile0 */
	} /* End iteration on D0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+20480), 5120, 1, &DmaW_Evt1);
1c007320:	6795                	lui	a5,0x5
1c007322:	4098                	lw	a4,0(s1)
1c007324:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007326:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00732a:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00732e:	000217b7          	lui	a5,0x21
1c007332:	40078793          	addi	a5,a5,1024 # 21400 <__L1Cl+0x11400>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c007336:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00733a:	c157c7b3          	p.bset	a5,a5,0,21
1c00733e:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c007342:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c007346:	41342023          	sw	s3,1024(s0)
        if (!merge) copy->id = id;
1c00734a:	d432                	sw	a2,40(sp)
        copy->length = 0;
1c00734c:	dc02                	sw	zero,56(sp)
  __builtin_pulp_spr_write(reg, val);
1c00734e:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c007352:	57e2                	lw	a5,56(sp)
1c007354:	c795                	beqz	a5,1c007380 <S13_MaxPool_2x2+0x124>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c007356:	4686                	lw	a3,64(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007358:	02000713          	li	a4,32
1c00735c:	002047b7          	lui	a5,0x204
1c007360:	ca89                	beqz	a3,1c007372 <S13_MaxPool_2x2+0x116>
1c007362:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007366:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00736a:	00e7a223          	sw	a4,4(a5)
1c00736e:	4686                	lw	a3,64(sp)
1c007370:	faed                	bnez	a3,1c007362 <S13_MaxPool_2x2+0x106>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c007372:	40ba                	lw	ra,140(sp)
1c007374:	442a                	lw	s0,136(sp)
1c007376:	449a                	lw	s1,132(sp)
1c007378:	490a                	lw	s2,128(sp)
1c00737a:	59f6                	lw	s3,124(sp)
1c00737c:	6149                	addi	sp,sp,144
1c00737e:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007380:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c007384:	40442403          	lw	s0,1028(s0)
1c007388:	56a2                	lw	a3,40(sp)
1c00738a:	40d45433          	sra	s0,s0,a3
1c00738e:	fc143433          	p.bclr	s0,s0,30,1
1c007392:	c41d                	beqz	s0,1c0073c0 <S13_MaxPool_2x2+0x164>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007394:	10000593          	li	a1,256
1c007398:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00739c:	30061073          	csrw	mstatus,a2
1c0073a0:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0073a4:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0073a8:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0073ac:	30047673          	csrrci	a2,mstatus,8
1c0073b0:	40472783          	lw	a5,1028(a4)
1c0073b4:	56a2                	lw	a3,40(sp)
1c0073b6:	40d7d7b3          	sra	a5,a5,a3
1c0073ba:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0073be:	fff9                	bnez	a5,1c00739c <S13_MaxPool_2x2+0x140>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0073c0:	4785                	li	a5,1
1c0073c2:	00d796b3          	sll	a3,a5,a3
1c0073c6:	002047b7          	lui	a5,0x204
1c0073ca:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0073ce:	30061073          	csrw	mstatus,a2
1c0073d2:	40ba                	lw	ra,140(sp)
1c0073d4:	442a                	lw	s0,136(sp)
1c0073d6:	449a                	lw	s1,132(sp)
1c0073d8:	490a                	lw	s2,128(sp)
1c0073da:	59f6                	lw	s3,124(sp)
1c0073dc:	6149                	addi	sp,sp,144
1c0073de:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0073e0:	30047673          	csrrci	a2,mstatus,8
1c0073e4:	4047a783          	lw	a5,1028(a5)
1c0073e8:	46a2                	lw	a3,8(sp)
1c0073ea:	40d7d7b3          	sra	a5,a5,a3
1c0073ee:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0073f2:	c79d                	beqz	a5,1c007420 <S13_MaxPool_2x2+0x1c4>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0073f4:	10000513          	li	a0,256
1c0073f8:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0073fc:	30061073          	csrw	mstatus,a2
1c007400:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007404:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007408:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00740c:	30047673          	csrrci	a2,mstatus,8
1c007410:	40472783          	lw	a5,1028(a4)
1c007414:	46a2                	lw	a3,8(sp)
1c007416:	40d7d7b3          	sra	a5,a5,a3
1c00741a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00741e:	fff9                	bnez	a5,1c0073fc <S13_MaxPool_2x2+0x1a0>
1c007420:	4785                	li	a5,1
1c007422:	00d796b3          	sll	a3,a5,a3
1c007426:	002047b7          	lui	a5,0x204
1c00742a:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00742e:	30061073          	csrw	mstatus,a2
1c007432:	bd5d                	j	1c0072e8 <S13_MaxPool_2x2+0x8c>

1c007434 <S16_Conv2d_18x32x3x3>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c007434:	7101                	addi	sp,sp,-512
		KerArgItSpace (User Kernel Iter Order):
			[D1, [1 x 20480, 2560]][Tile0, 1:[20x16], 4]
		Tile0: [0, 20480, 1280], Tile1: [0, 20480, 1280], Tile2; [0, 20480, 1280]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+24228);
1c007436:	10000fb7          	lui	t6,0x10000
{
1c00743a:	1f512223          	sw	s5,484(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+24228);
1c00743e:	020f8a93          	addi	s5,t6,32 # 10000020 <cnn_ssd_L1_Memory>
1c007442:	000aa803          	lw	a6,0(s5)
	KerArg0->W = (unsigned short int) (20);
1c007446:	1c0147b7          	lui	a5,0x1c014
1c00744a:	5947a883          	lw	a7,1428(a5) # 1c014594 <IntegerExpLUT+0x4c>
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+24228);
1c00744e:	6799                	lui	a5,0x6
{
1c007450:	da36                	sw	a3,52(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+24228);
1c007452:	ea478793          	addi	a5,a5,-348 # 5ea4 <__rt_stack_size+0x56a4>
	KerArg0->H = (unsigned short int) (16);
	KerArg0->NormBias = (signed char) (12);
1c007456:	46b1                	li	a3,12
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+24228);
1c007458:	97c2                	add	a5,a5,a6
	KerArg0->NormBias = (signed char) (12);
1c00745a:	04d10b23          	sb	a3,86(sp)
	KerArg1->W = (unsigned short int) (20);
1c00745e:	00a066d7          	pv.add.sci.h	a3,zero,20
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+24228);
1c007462:	c6be                	sw	a5,76(sp)
	KerArg1->W = (unsigned short int) (20);
1c007464:	dfb6                	sw	a3,252(sp)
	KerArg1->UsedW = (unsigned short int) (20);
	KerArg1->InFeatures = (unsigned short int) (2);
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+24228);
1c007466:	10f12823          	sw	a5,272(sp)
	KerArg1->Norm = (unsigned char) (16);
	KerArg1->TotalInFeatures = (short int) (2);
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
	KerArg1->Orientation = (unsigned char) (1);
	KerArg2->In = (int * __restrict__) (cnn_ssd_L1_Memory+24228);
1c00746a:	cebe                	sw	a5,92(sp)
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c00746c:	020076d7          	pv.add.sci.b	a3,zero,1
	KerArg2->W = (unsigned short int) (20);
	KerArg2->H = (unsigned short int) (16);
	KerArg2->Norm = (unsigned char) (16);
	KerArg2->LB = (int) (-32768);
1c007470:	77e1                	lui	a5,0xffff8
	KerArg1->InFeatures = (unsigned short int) (2);
1c007472:	4309                	li	t1,2
	KerArg1->Norm = (unsigned char) (16);
1c007474:	4741                	li	a4,16
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c007476:	10d12a23          	sw	a3,276(sp)
	KerArg2->LB = (int) (-32768);
1c00747a:	d6be                	sw	a5,108(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c00747c:	4685                	li	a3,1
	KerArg2->UB = (int) (32767);
1c00747e:	67a1                	lui	a5,0x8
{
1c007480:	1e112e23          	sw	ra,508(sp)
1c007484:	1e812c23          	sw	s0,504(sp)
1c007488:	1e912a23          	sw	s1,500(sp)
1c00748c:	1f212823          	sw	s2,496(sp)
1c007490:	1f312623          	sw	s3,492(sp)
1c007494:	1f412423          	sw	s4,488(sp)
1c007498:	1f612023          	sw	s6,480(sp)
1c00749c:	1d712e23          	sw	s7,476(sp)
1c0074a0:	1d812c23          	sw	s8,472(sp)
1c0074a4:	1d912a23          	sw	s9,468(sp)
1c0074a8:	1da12823          	sw	s10,464(sp)
1c0074ac:	1db12623          	sw	s11,460(sp)
1c0074b0:	cc2a                	sw	a0,24(sp)
1c0074b2:	ce2e                	sw	a1,28(sp)
	KerArg0->W = (unsigned short int) (20);
1c0074b4:	c8c6                	sw	a7,80(sp)
	KerArg1->InFeatures = (unsigned short int) (2);
1c0074b6:	10611223          	sh	t1,260(sp)
	KerArg1->Norm = (unsigned char) (16);
1c0074ba:	10e10c23          	sb	a4,280(sp)
	KerArg1->TotalInFeatures = (short int) (2);
1c0074be:	10611423          	sh	t1,264(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c0074c2:	10d10da3          	sb	a3,283(sp)
	KerArg2->W = (unsigned short int) (20);
1c0074c6:	d0c6                	sw	a7,96(sp)
	KerArg2->Norm = (unsigned char) (16);
1c0074c8:	06e10423          	sb	a4,104(sp)
	KerArg2->UB = (int) (32767);
1c0074cc:	17fd                	addi	a5,a5,-1
1c0074ce:	d8be                	sw	a5,112(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0074d0:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0074d4:	002047b7          	lui	a5,0x204
1c0074d8:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0074dc:	002f0737          	lui	a4,0x2f0
1c0074e0:	50070713          	addi	a4,a4,1280 # 2f0500 <__L2+0x270500>
1c0074e4:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0074e8:	4107a023          	sw	a6,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0074ec:	40a7a023          	sw	a0,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0074f0:	02800737          	lui	a4,0x2800
1c0074f4:	28070713          	addi	a4,a4,640 # 2800280 <__L2+0x2780280>
1c0074f8:	40e7a023          	sw	a4,1024(a5)
        if (!merge) copy->id = id;
1c0074fc:	dcae                	sw	a1,120(sp)
        copy->length = 0;
1c0074fe:	c502                	sw	zero,136(sp)
  __builtin_pulp_spr_write(reg, val);
1c007500:	30069073          	csrw	mstatus,a3
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+0), 1280, 640, 640, 0, &DmaR_Evt1);
	_N_In=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+2560), 36, 0, &DmaR_Evt2);
1c007504:	000aa683          	lw	a3,0(s5)
1c007508:	6705                	lui	a4,0x1
1c00750a:	a0070713          	addi	a4,a4,-1536 # a00 <__rt_stack_size+0x200>
1c00750e:	96ba                	add	a3,a3,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007510:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c007514:	4007a503          	lw	a0,1024(a5)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c007518:	00030737          	lui	a4,0x30
1c00751c:	02476713          	ori	a4,a4,36
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c007520:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c007524:	c1574733          	p.bset	a4,a4,0,21
1c007528:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00752c:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c007530:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c007534:	cd2a                	sw	a0,152(sp)
        copy->length = 0;
1c007536:	d502                	sw	zero,168(sp)
  __builtin_pulp_spr_write(reg, val);
1c007538:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c00753c:	572a                	lw	a4,168(sp)
1c00753e:	50070c63          	beqz	a4,1c007a56 <S16_Conv2d_18x32x3x3+0x622>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c007542:	56ca                	lw	a3,176(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007544:	02000713          	li	a4,32
1c007548:	ca89                	beqz	a3,1c00755a <S16_Conv2d_18x32x3x3+0x126>
1c00754a:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00754e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007552:	00e7a223          	sw	a4,4(a5)
1c007556:	56ca                	lw	a3,176(sp)
1c007558:	faed                	bnez	a3,1c00754a <S16_Conv2d_18x32x3x3+0x116>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+2596+0), 576, 0, &DmaR_Evt3);
1c00755a:	000aa683          	lw	a3,0(s5)
1c00755e:	6485                	lui	s1,0x1
1c007560:	a2448493          	addi	s1,s1,-1500 # a24 <__rt_stack_size+0x224>
1c007564:	96a6                	add	a3,a3,s1
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007566:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00756a:	00204737          	lui	a4,0x204
1c00756e:	40072583          	lw	a1,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c007572:	000b07b7          	lui	a5,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c007576:	24078793          	addi	a5,a5,576 # b0240 <__L2+0x30240>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00757a:	c157c7b3          	p.bset	a5,a5,0,21
1c00757e:	40f72023          	sw	a5,1024(a4)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c007582:	40d72023          	sw	a3,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c007586:	4372                	lw	t1,28(sp)
1c007588:	40672023          	sw	t1,1024(a4)
        if (!merge) copy->id = id;
1c00758c:	dd2e                	sw	a1,184(sp)
        copy->length = 0;
1c00758e:	c582                	sw	zero,200(sp)
  __builtin_pulp_spr_write(reg, val);
1c007590:	30061073          	csrw	mstatus,a2
1c007594:	04c10313          	addi	t1,sp,76
	_N_Filter=0;
	_C_Out=0; _SC_Out=10240; _LC_Out=640;
1c007598:	678d                	lui	a5,0x3
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00759a:	00204cb7          	lui	s9,0x204
1c00759e:	80078793          	addi	a5,a5,-2048 # 2800 <__rt_stack_size+0x2000>
1c0075a2:	ca1a                	sw	t1,20(sp)
1c0075a4:	1c00d9b7          	lui	s3,0x1c00d
1c0075a8:	05c10313          	addi	t1,sp,92
	_N_Filter=0;
1c0075ac:	4b81                	li	s7,0
	_N_In=0;
1c0075ae:	4c01                	li	s8,0
	_SPP_Out=0; _SP_Out=0;
	/*============================= End Read Tiles Prolog ===============================*/
	for (D1Ind=0; D1Ind<2; D1Ind++) { /* Iteration on D1 */
1c0075b0:	d002                	sw	zero,32(sp)
	_SPP_Out=0; _SP_Out=0;
1c0075b2:	d402                	sw	zero,40(sp)
	_C_Out=0; _SC_Out=10240; _LC_Out=640;
1c0075b4:	d63e                	sw	a5,44(sp)
	_SPP_Out=0; _SP_Out=0;
1c0075b6:	d802                	sw	zero,48(sp)
	_C_Out=0; _SC_Out=10240; _LC_Out=640;
1c0075b8:	d202                	sw	zero,36(sp)
		int D1Ind_Last = (D1Ind==1), D1Ind_NextLast = ((D1Ind+1)==1);
		{ /* Single iteration on Tile0 */
			int T0Ind_Last = 1, T0Ind_NextLast = 1;
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			KerArg0->OutFeatures = (unsigned short int) (D1Ind_Last?2:16);
1c0075ba:	4941                	li	s2,16
1c0075bc:	f4298993          	addi	s3,s3,-190 # 1c00cf42 <KerParConv3x3Stride1_DP_fp>
1c0075c0:	19a0                	addi	s0,sp,248
1c0075c2:	c81a                	sw	t1,16(sp)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0075c4:	200c8d13          	addi	s10,s9,512 # 204200 <__L2+0x184200>
			KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+2560+((D1Ind)*32));
1c0075c8:	5302                	lw	t1,32(sp)
1c0075ca:	000aa683          	lw	a3,0(s5)
			KerArg0->OutFeatures = (unsigned short int) (D1Ind_Last?2:16);
1c0075ce:	05211a23          	sh	s2,84(sp)
			KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+2560+((D1Ind)*32));
1c0075d2:	05030793          	addi	a5,t1,80 # 2b0050 <__L2+0x230050>
1c0075d6:	0796                	slli	a5,a5,0x5
1c0075d8:	96be                	add	a3,a3,a5
1c0075da:	00431713          	slli	a4,t1,0x4
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0075de:	0ff00793          	li	a5,255
1c0075e2:	ccb6                	sw	a3,88(sp)
1c0075e4:	08fca223          	sw	a5,132(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0075e8:	00fd2023          	sw	a5,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0075ec:	00fd2623          	sw	a5,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0075f0:	1c00d537          	lui	a0,0x1c00d
1c0075f4:	92a50513          	addi	a0,a0,-1750 # 1c00c92a <KerParSetBias_DP_fp>
1c0075f8:	08aca023          	sw	a0,128(s9)
1c0075fc:	4352                	lw	t1,20(sp)
1c0075fe:	086ca023          	sw	t1,128(s9)
1c007602:	00e8                	addi	a0,sp,76
1c007604:	c63a                	sw	a4,12(sp)
1c007606:	324050ef          	jal	ra,1c00c92a <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00760a:	01cd6783          	p.elw	a5,28(s10)
1c00760e:	5302                	lw	t1,32(sp)
1c007610:	4732                	lw	a4,12(sp)
1c007612:	3a132163          	p.beqimm	t1,1,1c0079b4 <S16_Conv2d_18x32x3x3+0x580>
1c007616:	50000593          	li	a1,1280
1c00761a:	dc2e                	sw	a1,56(sp)
1c00761c:	24000a13          	li	s4,576
			AT_FORK(gap_ncore(), (void *) KerParSetBias_DP_fp, (void *) KerArg0);
			__CALL(KerParSetBias_DP_fp, KerArg0);
			for (D0Ind=0; D0Ind<16; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c007620:	4d81                	li	s11,0
				int D0Ind_Last = (D0Ind==15), D0Ind_NextLast = ((D0Ind+1)==15);
				/*================================= Prepare Tiles ===================================*/
				_SN_In = 0;
				if (!(D0Ind_Last)) {
1c007622:	52fda963          	p.beqimm	s11,15,1c007b54 <S16_Conv2d_18x32x3x3+0x720>
					_N_In = _N_In + (1280); _LN_In = (640); _SN_In = (2*_LN_In); 
1c007626:	500b8b93          	addi	s7,s7,1280
				} else if (!(D1Ind_Last)) {
					_N_In = _N_In + (-19200); _LN_In = (640); _SN_In = (2*_LN_In); 
				}
				_SN_Filter = 0;
				if (!(D0Ind_Last)) {
					_N_Filter = _N_Filter + (((D1Ind_Last)?(72):(576))); _SN_Filter = (((D1Ind_Last)?(72):(576))); 
1c00762a:	9c52                	add	s8,s8,s4
1c00762c:	8852                	mv	a6,s4
1c00762e:	50000893          	li	a7,1280
  if (copy->length == 0)
1c007632:	47aa                	lw	a5,136(sp)
1c007634:	1e078e63          	beqz	a5,1c007830 <S16_Conv2d_18x32x3x3+0x3fc>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c007638:	464a                	lw	a2,144(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00763a:	02000793          	li	a5,32
1c00763e:	ca09                	beqz	a2,1c007650 <S16_Conv2d_18x32x3x3+0x21c>
1c007640:	00fca423          	sw	a5,8(s9)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007644:	03cce683          	p.elw	a3,60(s9)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007648:	00fca223          	sw	a5,4(s9)
1c00764c:	46ca                	lw	a3,144(sp)
1c00764e:	faed                	bnez	a3,1c007640 <S16_Conv2d_18x32x3x3+0x20c>
1c007650:	00170b13          	addi	s6,a4,1
					_N_Filter = _N_Filter + (9216)+(((D1Ind_Last)?(-1080):(-8640))); _SN_Filter = (((1)?(72):(576))); 
				}
				/*============================= End Prepare Tiles ===================================*/
				/*================================= Read Tiles ======================================*/
				AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In */
				if (_SN_In) {
1c007654:	22089763          	bnez	a7,1c007882 <S16_Conv2d_18x32x3x3+0x44e>
  if (copy->length == 0)
1c007658:	47ae                	lw	a5,200(sp)
1c00765a:	12078e63          	beqz	a5,1c007796 <S16_Conv2d_18x32x3x3+0x362>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00765e:	45ce                	lw	a1,208(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007660:	02000793          	li	a5,32
1c007664:	c989                	beqz	a1,1c007676 <S16_Conv2d_18x32x3x3+0x242>
1c007666:	00fca423          	sw	a5,8(s9)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00766a:	03cce683          	p.elw	a3,60(s9)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00766e:	00fca223          	sw	a5,4(s9)
1c007672:	46ce                	lw	a3,208(sp)
1c007674:	faed                	bnez	a3,1c007666 <S16_Conv2d_18x32x3x3+0x232>
1c007676:	000aa583          	lw	a1,0(s5)
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+1280*((D0Ind_Total+1)%2)),
							_SN_In, 640, _LN_In, 0, &DmaR_Evt1);
				}
				AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read Filter */
				if (_SN_Filter) {
1c00767a:	16081763          	bnez	a6,1c0077e8 <S16_Conv2d_18x32x3x3+0x3b4>
					AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+2596+576*((D0Ind_Total+1)%2)),
							_SN_Filter, 0, &DmaR_Evt3);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+1280*((D0Ind_Total)%2));
1c00767e:	fc173533          	p.bclr	a0,a4,30,1
				KerArg1->H = (unsigned short int) (18-1*(1)-1*(1));
				KerArg1->UsedH = (unsigned short int) (18-1*(1)-1*(1));
				KerArg1->OutFeatures = (unsigned short int) (D1Ind_Last?2:16);
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+2596+576*((D0Ind_Total)%2));
1c007682:	00351793          	slli	a5,a0,0x3
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+1280*((D0Ind_Total)%2));
1c007686:	00251713          	slli	a4,a0,0x2
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+2596+576*((D0Ind_Total)%2));
1c00768a:	97aa                	add	a5,a5,a0
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+1280*((D0Ind_Total)%2));
1c00768c:	972a                	add	a4,a4,a0
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+2596+576*((D0Ind_Total)%2));
1c00768e:	079a                	slli	a5,a5,0x6
1c007690:	97a6                	add	a5,a5,s1
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+1280*((D0Ind_Total)%2));
1c007692:	0722                	slli	a4,a4,0x8
1c007694:	972e                	add	a4,a4,a1
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+2596+576*((D0Ind_Total)%2));
1c007696:	97ae                	add	a5,a5,a1
				KerArg1->H = (unsigned short int) (18-1*(1)-1*(1));
1c007698:	00806557          	pv.add.sci.h	a0,zero,16
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00769c:	0ff00593          	li	a1,255
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+1280*((D0Ind_Total)%2));
1c0076a0:	ddba                	sw	a4,248(sp)
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+2596+576*((D0Ind_Total)%2));
1c0076a2:	10f12623          	sw	a5,268(sp)
				KerArg1->H = (unsigned short int) (18-1*(1)-1*(1));
1c0076a6:	10a12023          	sw	a0,256(sp)
				KerArg1->OutFeatures = (unsigned short int) (D1Ind_Last?2:16);
1c0076aa:	11211323          	sh	s2,262(sp)
1c0076ae:	08bca223          	sw	a1,132(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0076b2:	00bd2023          	sw	a1,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0076b6:	00bd2623          	sw	a1,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0076ba:	093ca023          	sw	s3,128(s9)
1c0076be:	088ca023          	sw	s0,128(s9)
1c0076c2:	8522                	mv	a0,s0
1c0076c4:	07f050ef          	jal	ra,1c00cf42 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0076c8:	01cd6783          	p.elw	a5,28(s10)
			for (D0Ind=0; D0Ind<16; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c0076cc:	47c1                	li	a5,16
1c0076ce:	0d85                	addi	s11,s11,1
1c0076d0:	875a                	mv	a4,s6
1c0076d2:	f4fd98e3          	bne	s11,a5,1c007622 <S16_Conv2d_18x32x3x3+0x1ee>
1c0076d6:	5312                	lw	t1,36(sp)
				__CALL(KerParConv3x3Stride1_DP_fp, KerArg1);
				/*================================= Update Arg Pipeline =============================*/
				/*============================= End Update Arg Pipeline =============================*/
			} /* End iteration on D0 */
			/*====================== Call Kernel LOC_D0_EPILOG =========================*/
			KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+3748+10240*((T0Ind_Total)%2));
1c0076d8:	000aa703          	lw	a4,0(s5)
1c0076dc:	6585                	lui	a1,0x1
1c0076de:	ea458e93          	addi	t4,a1,-348 # ea4 <__rt_stack_size+0x6a4>
1c0076e2:	9e9a                	add	t4,t4,t1
1c0076e4:	9776                	add	a4,a4,t4
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0076e6:	0ff00793          	li	a5,255
1c0076ea:	d2ba                	sw	a4,100(sp)
			KerArg2->InFeatures = (unsigned short int) (D1Ind_Last?2:16);
1c0076ec:	07211523          	sh	s2,106(sp)
1c0076f0:	08fca223          	sw	a5,132(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0076f4:	00fd2023          	sw	a5,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0076f8:	00fd2623          	sw	a5,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0076fc:	1c00d537          	lui	a0,0x1c00d
1c007700:	9de50513          	addi	a0,a0,-1570 # 1c00c9de <KerDP_fp>
1c007704:	08aca023          	sw	a0,128(s9)
1c007708:	4342                	lw	t1,16(sp)
1c00770a:	086ca023          	sw	t1,128(s9)
1c00770e:	08e8                	addi	a0,sp,92
1c007710:	c676                	sw	t4,12(sp)
1c007712:	2cc050ef          	jal	ra,1c00c9de <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007716:	01cd6783          	p.elw	a5,28(s10)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
			/*================================= Write Tiles =====================================*/
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c00771a:	5322                	lw	t1,40(sp)
1c00771c:	4eb2                	lw	t4,12(sp)
1c00771e:	2a031063          	bnez	t1,1c0079be <S16_Conv2d_18x32x3x3+0x58a>
			if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
1c007722:	55c2                	lw	a1,48(sp)
1c007724:	42059263          	bnez	a1,1c007b48 <S16_Conv2d_18x32x3x3+0x714>
			if (_SP_Out) AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) cnn_ssd_L2_Memory+89584+10240*((T0Ind_Total+-1)%2)),
						_SP_Out, 640, _LP_Out, 1, &UchanHR1);
			AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) cnn_ssd_L2_Memory+89584+10240*((T0Ind_Total)%2)), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+3748+10240*((T0Ind_Total)%2)),
1c007728:	1c015537          	lui	a0,0x1c015
1c00772c:	a8050513          	addi	a0,a0,-1408 # 1c014a80 <cnn_ssd_L2_Memory>
1c007730:	411c                	lw	a5,0(a0)
1c007732:	000aa703          	lw	a4,0(s5)
1c007736:	5312                	lw	t1,36(sp)
1c007738:	66d9                	lui	a3,0x16
1c00773a:	df068693          	addi	a3,a3,-528 # 15df0 <__L1Cl+0x5df0>
1c00773e:	97b6                	add	a5,a5,a3
1c007740:	979a                	add	a5,a5,t1
1c007742:	9eba                	add	t4,t4,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007744:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c007748:	400ca603          	lw	a2,1024(s9)
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00774c:	5332                	lw	t1,44(sp)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c00774e:	002a0737          	lui	a4,0x2a0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c007752:	00e36733          	or	a4,t1,a4
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c007756:	40eca023          	sw	a4,1024(s9)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00775a:	41dca023          	sw	t4,1024(s9)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00775e:	40fca023          	sw	a5,1024(s9)
        if (!merge) copy->id = id;
1c007762:	cdb2                	sw	a2,216(sp)
        copy->length = 0;
1c007764:	d582                	sw	zero,232(sp)
  __builtin_pulp_spr_write(reg, val);
1c007766:	30069073          	csrw	mstatus,a3
			_SPP_Out = _SP_Out;_LPP_Out = _LP_Out;
			_P_Out = _C_Out;_SP_Out = _SC_Out;_LP_Out = _LC_Out;
			/*============================= End Update Arg Pipeline =============================*/
			/*================================= Prepare Tiles ===================================*/
			_SC_Out = 0;
			if (!(D1Ind_Last)) {
1c00776a:	5302                	lw	t1,32(sp)
1c00776c:	16132263          	p.beqimm	t1,1,1c0078d0 <S16_Conv2d_18x32x3x3+0x49c>
				_C_Out = _C_Out + (10240); _LC_Out = (640); _SC_Out = (((1)?2:16)*_LC_Out); 
1c007770:	5312                	lw	t1,36(sp)
1c007772:	678d                	lui	a5,0x3
1c007774:	80078793          	addi	a5,a5,-2048 # 2800 <__rt_stack_size+0x2000>
1c007778:	de1a                	sw	t1,60(sp)
1c00777a:	5322                	lw	t1,40(sp)
1c00777c:	4909                	li	s2,2
1c00777e:	d81a                	sw	t1,48(sp)
1c007780:	5332                	lw	t1,44(sp)
1c007782:	d41a                	sw	t1,40(sp)
1c007784:	4305                	li	t1,1
1c007786:	d01a                	sw	t1,32(sp)
1c007788:	50000313          	li	t1,1280
1c00778c:	d61a                	sw	t1,44(sp)
1c00778e:	5312                	lw	t1,36(sp)
1c007790:	933e                	add	t1,t1,a5
1c007792:	d21a                	sw	t1,36(sp)
1c007794:	bd15                	j	1c0075c8 <S16_Conv2d_18x32x3x3+0x194>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007796:	30047573          	csrrci	a0,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00779a:	404ca783          	lw	a5,1028(s9)
1c00779e:	55ea                	lw	a1,184(sp)
1c0077a0:	40b7d7b3          	sra	a5,a5,a1
1c0077a4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0077a8:	c78d                	beqz	a5,1c0077d2 <S16_Conv2d_18x32x3x3+0x39e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0077aa:	10000893          	li	a7,256
  __builtin_pulp_spr_write(reg, val);
1c0077ae:	30051073          	csrw	mstatus,a0
1c0077b2:	011ca423          	sw	a7,8(s9)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0077b6:	03cce783          	p.elw	a5,60(s9)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0077ba:	011ca223          	sw	a7,4(s9)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0077be:	30047573          	csrrci	a0,mstatus,8
1c0077c2:	404ca783          	lw	a5,1028(s9)
1c0077c6:	55ea                	lw	a1,184(sp)
1c0077c8:	40b7d7b3          	sra	a5,a5,a1
1c0077cc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0077d0:	fff9                	bnez	a5,1c0077ae <S16_Conv2d_18x32x3x3+0x37a>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0077d2:	4785                	li	a5,1
1c0077d4:	00b795b3          	sll	a1,a5,a1
1c0077d8:	40bca223          	sw	a1,1028(s9)
  __builtin_pulp_spr_write(reg, val);
1c0077dc:	30051073          	csrw	mstatus,a0
1c0077e0:	000aa583          	lw	a1,0(s5)
				if (_SN_Filter) {
1c0077e4:	e8080de3          	beqz	a6,1c00767e <S16_Conv2d_18x32x3x3+0x24a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0077e8:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0077ec:	400ca883          	lw	a7,1024(s9)
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c0077f0:	000307b7          	lui	a5,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0077f4:	de0827b3          	p.insert	a5,a6,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0077f8:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0077fc:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c007800:	40fca023          	sw	a5,1024(s9)
					AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+2596+576*((D0Ind_Total+1)%2)),
1c007804:	fc1b3833          	p.bclr	a6,s6,30,1
1c007808:	00381793          	slli	a5,a6,0x3
1c00780c:	97c2                	add	a5,a5,a6
1c00780e:	079a                	slli	a5,a5,0x6
1c007810:	97a6                	add	a5,a5,s1
1c007812:	95be                	add	a1,a1,a5
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c007814:	40bca023          	sw	a1,1024(s9)
1c007818:	4372                	lw	t1,28(sp)
1c00781a:	018307b3          	add	a5,t1,s8
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00781e:	40fca023          	sw	a5,1024(s9)
        if (!merge) copy->id = id;
1c007822:	dd46                	sw	a7,184(sp)
        copy->length = 0;
1c007824:	c582                	sw	zero,200(sp)
  __builtin_pulp_spr_write(reg, val);
1c007826:	30051073          	csrw	mstatus,a0
1c00782a:	000aa583          	lw	a1,0(s5)
1c00782e:	bd81                	j	1c00767e <S16_Conv2d_18x32x3x3+0x24a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007830:	300475f3          	csrrci	a1,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c007834:	404ca783          	lw	a5,1028(s9)
1c007838:	5666                	lw	a2,120(sp)
1c00783a:	40c7d7b3          	sra	a5,a5,a2
1c00783e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c007842:	c78d                	beqz	a5,1c00786c <S16_Conv2d_18x32x3x3+0x438>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007844:	10000513          	li	a0,256
  __builtin_pulp_spr_write(reg, val);
1c007848:	30059073          	csrw	mstatus,a1
1c00784c:	00aca423          	sw	a0,8(s9)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007850:	03cce783          	p.elw	a5,60(s9)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007854:	00aca223          	sw	a0,4(s9)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007858:	300475f3          	csrrci	a1,mstatus,8
1c00785c:	404ca783          	lw	a5,1028(s9)
1c007860:	5666                	lw	a2,120(sp)
1c007862:	40c7d7b3          	sra	a5,a5,a2
1c007866:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00786a:	fff9                	bnez	a5,1c007848 <S16_Conv2d_18x32x3x3+0x414>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00786c:	4785                	li	a5,1
1c00786e:	00c79633          	sll	a2,a5,a2
1c007872:	40cca223          	sw	a2,1028(s9)
  __builtin_pulp_spr_write(reg, val);
1c007876:	30059073          	csrw	mstatus,a1
1c00787a:	00170b13          	addi	s6,a4,1 # 2a0001 <__L2+0x220001>
				if (_SN_In) {
1c00787e:	dc088de3          	beqz	a7,1c007658 <S16_Conv2d_18x32x3x3+0x224>
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+1280*((D0Ind_Total+1)%2)),
1c007882:	fc1b3533          	p.bclr	a0,s6,30,1
1c007886:	00251793          	slli	a5,a0,0x2
1c00788a:	000aa583          	lw	a1,0(s5)
1c00788e:	97aa                	add	a5,a5,a0
1c007890:	07a2                	slli	a5,a5,0x8
1c007892:	97ae                	add	a5,a5,a1
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007894:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c007898:	400ca503          	lw	a0,1024(s9)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00789c:	1008d8b3          	p.exthz	a7,a7
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0078a0:	c708c8b3          	p.bset	a7,a7,3,16
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0078a4:	c158c8b3          	p.bset	a7,a7,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0078a8:	411ca023          	sw	a7,1024(s9)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0078ac:	40fca023          	sw	a5,1024(s9)
1c0078b0:	4362                	lw	t1,24(sp)
1c0078b2:	017307b3          	add	a5,t1,s7
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0078b6:	40fca023          	sw	a5,1024(s9)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0078ba:	028007b7          	lui	a5,0x2800
1c0078be:	28078793          	addi	a5,a5,640 # 2800280 <__L2+0x2780280>
1c0078c2:	40fca023          	sw	a5,1024(s9)
        if (!merge) copy->id = id;
1c0078c6:	dcaa                	sw	a0,120(sp)
        copy->length = 0;
1c0078c8:	c502                	sw	zero,136(sp)
  __builtin_pulp_spr_write(reg, val);
1c0078ca:	30059073          	csrw	mstatus,a1
1c0078ce:	b369                	j	1c007658 <S16_Conv2d_18x32x3x3+0x224>
  if (copy->length == 0)
1c0078d0:	57ae                	lw	a5,232(sp)
1c0078d2:	1c078c63          	beqz	a5,1c007aaa <S16_Conv2d_18x32x3x3+0x676>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0078d6:	56ce                	lw	a3,240(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0078d8:	02000713          	li	a4,32
1c0078dc:	002047b7          	lui	a5,0x204
1c0078e0:	ca89                	beqz	a3,1c0078f2 <S16_Conv2d_18x32x3x3+0x4be>
1c0078e2:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0078e6:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0078ea:	00e7a223          	sw	a4,4(a5)
1c0078ee:	56ce                	lw	a3,240(sp)
1c0078f0:	faed                	bnez	a3,1c0078e2 <S16_Conv2d_18x32x3x3+0x4ae>
			T0Ind_Total++;
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
1c0078f2:	5322                	lw	t1,40(sp)
1c0078f4:	02030563          	beqz	t1,1c00791e <S16_Conv2d_18x32x3x3+0x4ea>
1c0078f8:	1bc14783          	lbu	a5,444(sp)
1c0078fc:	0ff7f793          	andi	a5,a5,255
1c007900:	ef99                	bnez	a5,1c00791e <S16_Conv2d_18x32x3x3+0x4ea>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007902:	4689                	li	a3,2
1c007904:	00204737          	lui	a4,0x204
1c007908:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00790c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007910:	00d72223          	sw	a3,4(a4)
1c007914:	1bc14783          	lbu	a5,444(sp)
1c007918:	0ff7f793          	andi	a5,a5,255
1c00791c:	d7f5                	beqz	a5,1c007908 <S16_Conv2d_18x32x3x3+0x4d4>
	AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) cnn_ssd_L2_Memory+89584+10240*((T0Ind_Total+-1)%2)), _SP_Out, 640, _LP_Out, 1, &UchanHR1);
1c00791e:	1c015537          	lui	a0,0x1c015
1c007922:	a8050513          	addi	a0,a0,-1408 # 1c014a80 <cnn_ssd_L2_Memory>
1c007926:	410c                	lw	a1,0(a0)
1c007928:	5352                	lw	t1,52(sp)
1c00792a:	5512                	lw	a0,36(sp)
1c00792c:	6661                	lui	a2,0x18
1c00792e:	56b2                	lw	a3,44(sp)
1c007930:	5f060613          	addi	a2,a2,1520 # 185f0 <__L1Cl+0x85f0>
1c007934:	962e                	add	a2,a2,a1
1c007936:	00a305b3          	add	a1,t1,a0
1c00793a:	1c015337          	lui	t1,0x1c015
1c00793e:	28000793          	li	a5,640
1c007942:	28000713          	li	a4,640
1c007946:	12010893          	addi	a7,sp,288
1c00794a:	4801                	li	a6,0
1c00794c:	fb030513          	addi	a0,t1,-80 # 1c014fb0 <HyperRam>
1c007950:	636070ef          	jal	ra,1c00ef86 <pi_cl_ram_copy_2d>
1c007954:	1bc14783          	lbu	a5,444(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007958:	4689                	li	a3,2
1c00795a:	00204737          	lui	a4,0x204
1c00795e:	0ff7f793          	andi	a5,a5,255
1c007962:	ef81                	bnez	a5,1c00797a <S16_Conv2d_18x32x3x3+0x546>
1c007964:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007968:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00796c:	00d72223          	sw	a3,4(a4)
1c007970:	1bc14783          	lbu	a5,444(sp)
1c007974:	0ff7f793          	andi	a5,a5,255
1c007978:	d7f5                	beqz	a5,1c007964 <S16_Conv2d_18x32x3x3+0x530>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait current uDMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c00797a:	1fc12083          	lw	ra,508(sp)
1c00797e:	1f812403          	lw	s0,504(sp)
1c007982:	1f412483          	lw	s1,500(sp)
1c007986:	1f012903          	lw	s2,496(sp)
1c00798a:	1ec12983          	lw	s3,492(sp)
1c00798e:	1e812a03          	lw	s4,488(sp)
1c007992:	1e412a83          	lw	s5,484(sp)
1c007996:	1e012b03          	lw	s6,480(sp)
1c00799a:	1dc12b83          	lw	s7,476(sp)
1c00799e:	1d812c03          	lw	s8,472(sp)
1c0079a2:	1d412c83          	lw	s9,468(sp)
1c0079a6:	1d012d03          	lw	s10,464(sp)
1c0079aa:	1cc12d83          	lw	s11,460(sp)
1c0079ae:	20010113          	addi	sp,sp,512
1c0079b2:	8082                	ret
1c0079b4:	dc02                	sw	zero,56(sp)
1c0079b6:	04800a13          	li	s4,72
			for (D0Ind=0; D0Ind<16; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c0079ba:	4d81                	li	s11,0
1c0079bc:	b19d                	j	1c007622 <S16_Conv2d_18x32x3x3+0x1ee>
  if (copy->length == 0)
1c0079be:	57ae                	lw	a5,232(sp)
1c0079c0:	12079f63          	bnez	a5,1c007afe <S16_Conv2d_18x32x3x3+0x6ca>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0079c4:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0079c8:	404ca783          	lw	a5,1028(s9)
1c0079cc:	476e                	lw	a4,216(sp)
1c0079ce:	40e7d7b3          	sra	a5,a5,a4
1c0079d2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0079d6:	c78d                	beqz	a5,1c007a00 <S16_Conv2d_18x32x3x3+0x5cc>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0079d8:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c0079dc:	30069073          	csrw	mstatus,a3
1c0079e0:	00cca423          	sw	a2,8(s9)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0079e4:	03cce783          	p.elw	a5,60(s9)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0079e8:	00cca223          	sw	a2,4(s9)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0079ec:	300476f3          	csrrci	a3,mstatus,8
1c0079f0:	404ca783          	lw	a5,1028(s9)
1c0079f4:	476e                	lw	a4,216(sp)
1c0079f6:	40e7d7b3          	sra	a5,a5,a4
1c0079fa:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0079fe:	fff9                	bnez	a5,1c0079dc <S16_Conv2d_18x32x3x3+0x5a8>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c007a00:	4785                	li	a5,1
1c007a02:	00e79733          	sll	a4,a5,a4
1c007a06:	40eca223          	sw	a4,1028(s9)
  __builtin_pulp_spr_write(reg, val);
1c007a0a:	30069073          	csrw	mstatus,a3
			if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
1c007a0e:	55c2                	lw	a1,48(sp)
1c007a10:	10059663          	bnez	a1,1c007b1c <S16_Conv2d_18x32x3x3+0x6e8>
			if (_SP_Out) AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) cnn_ssd_L2_Memory+89584+10240*((T0Ind_Total+-1)%2)),
1c007a14:	5312                	lw	t1,36(sp)
1c007a16:	1c0156b7          	lui	a3,0x1c015
1c007a1a:	67cd                	lui	a5,0x13
1c007a1c:	a8068693          	addi	a3,a3,-1408 # 1c014a80 <cnn_ssd_L2_Memory>
1c007a20:	5f078793          	addi	a5,a5,1520 # 135f0 <__L1Cl+0x35f0>
1c007a24:	428c                	lw	a1,0(a3)
1c007a26:	00f30633          	add	a2,t1,a5
1c007a2a:	5572                	lw	a0,60(sp)
1c007a2c:	5352                	lw	t1,52(sp)
1c007a2e:	56a2                	lw	a3,40(sp)
1c007a30:	962e                	add	a2,a2,a1
1c007a32:	00a305b3          	add	a1,t1,a0
1c007a36:	1c015337          	lui	t1,0x1c015
1c007a3a:	12010893          	addi	a7,sp,288
1c007a3e:	4801                	li	a6,0
1c007a40:	28000793          	li	a5,640
1c007a44:	28000713          	li	a4,640
1c007a48:	fb030513          	addi	a0,t1,-80 # 1c014fb0 <HyperRam>
1c007a4c:	c676                	sw	t4,12(sp)
1c007a4e:	538070ef          	jal	ra,1c00ef86 <pi_cl_ram_copy_2d>
1c007a52:	4eb2                	lw	t4,12(sp)
1c007a54:	b9d1                	j	1c007728 <S16_Conv2d_18x32x3x3+0x2f4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007a56:	30047673          	csrrci	a2,mstatus,8
1c007a5a:	4047a783          	lw	a5,1028(a5)
1c007a5e:	46ea                	lw	a3,152(sp)
1c007a60:	40d7d7b3          	sra	a5,a5,a3
1c007a64:	fc17b7b3          	p.bclr	a5,a5,30,1
1c007a68:	c79d                	beqz	a5,1c007a96 <S16_Conv2d_18x32x3x3+0x662>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007a6a:	10000593          	li	a1,256
1c007a6e:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c007a72:	30061073          	csrw	mstatus,a2
1c007a76:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007a7a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007a7e:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007a82:	30047673          	csrrci	a2,mstatus,8
1c007a86:	40472783          	lw	a5,1028(a4)
1c007a8a:	46ea                	lw	a3,152(sp)
1c007a8c:	40d7d7b3          	sra	a5,a5,a3
1c007a90:	fc17b7b3          	p.bclr	a5,a5,30,1
1c007a94:	fff9                	bnez	a5,1c007a72 <S16_Conv2d_18x32x3x3+0x63e>
1c007a96:	4785                	li	a5,1
1c007a98:	00d796b3          	sll	a3,a5,a3
1c007a9c:	002047b7          	lui	a5,0x204
1c007aa0:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c007aa4:	30061073          	csrw	mstatus,a2
1c007aa8:	bc4d                	j	1c00755a <S16_Conv2d_18x32x3x3+0x126>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007aaa:	30047673          	csrrci	a2,mstatus,8
1c007aae:	404ca783          	lw	a5,1028(s9)
1c007ab2:	46ee                	lw	a3,216(sp)
1c007ab4:	40d7d7b3          	sra	a5,a5,a3
1c007ab8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c007abc:	c79d                	beqz	a5,1c007aea <S16_Conv2d_18x32x3x3+0x6b6>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007abe:	10000593          	li	a1,256
1c007ac2:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c007ac6:	30061073          	csrw	mstatus,a2
1c007aca:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007ace:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007ad2:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007ad6:	30047673          	csrrci	a2,mstatus,8
1c007ada:	40472783          	lw	a5,1028(a4)
1c007ade:	46ee                	lw	a3,216(sp)
1c007ae0:	40d7d7b3          	sra	a5,a5,a3
1c007ae4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c007ae8:	fff9                	bnez	a5,1c007ac6 <S16_Conv2d_18x32x3x3+0x692>
1c007aea:	4785                	li	a5,1
1c007aec:	00d796b3          	sll	a3,a5,a3
1c007af0:	002047b7          	lui	a5,0x204
1c007af4:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c007af8:	30061073          	csrw	mstatus,a2
1c007afc:	bbdd                	j	1c0078f2 <S16_Conv2d_18x32x3x3+0x4be>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c007afe:	574e                	lw	a4,240(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007b00:	02000793          	li	a5,32
1c007b04:	d709                	beqz	a4,1c007a0e <S16_Conv2d_18x32x3x3+0x5da>
1c007b06:	00fca423          	sw	a5,8(s9)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007b0a:	03cce703          	p.elw	a4,60(s9)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007b0e:	00fca223          	sw	a5,4(s9)
1c007b12:	574e                	lw	a4,240(sp)
1c007b14:	fb6d                	bnez	a4,1c007b06 <S16_Conv2d_18x32x3x3+0x6d2>
			if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
1c007b16:	55c2                	lw	a1,48(sp)
1c007b18:	ee058ee3          	beqz	a1,1c007a14 <S16_Conv2d_18x32x3x3+0x5e0>
1c007b1c:	1bc14783          	lbu	a5,444(sp)
1c007b20:	0ff7f793          	andi	a5,a5,255
1c007b24:	ee0798e3          	bnez	a5,1c007a14 <S16_Conv2d_18x32x3x3+0x5e0>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007b28:	4709                	li	a4,2
1c007b2a:	00eca423          	sw	a4,8(s9)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007b2e:	03cce783          	p.elw	a5,60(s9)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007b32:	00eca223          	sw	a4,4(s9)
1c007b36:	1bc14783          	lbu	a5,444(sp)
1c007b3a:	0ff7f793          	andi	a5,a5,255
1c007b3e:	d7f5                	beqz	a5,1c007b2a <S16_Conv2d_18x32x3x3+0x6f6>
			if (_SP_Out) AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) cnn_ssd_L2_Memory+89584+10240*((T0Ind_Total+-1)%2)),
1c007b40:	5322                	lw	t1,40(sp)
1c007b42:	be0303e3          	beqz	t1,1c007728 <S16_Conv2d_18x32x3x3+0x2f4>
1c007b46:	b5f9                	j	1c007a14 <S16_Conv2d_18x32x3x3+0x5e0>
1c007b48:	1bc14783          	lbu	a5,444(sp)
1c007b4c:	0ff7f793          	andi	a5,a5,255
1c007b50:	dfe1                	beqz	a5,1c007b28 <S16_Conv2d_18x32x3x3+0x6f4>
1c007b52:	bed9                	j	1c007728 <S16_Conv2d_18x32x3x3+0x2f4>
				} else if (!(D1Ind_Last)) {
1c007b54:	5302                	lw	t1,32(sp)
1c007b56:	00132c63          	p.beqimm	t1,1,1c007b6e <S16_Conv2d_18x32x3x3+0x73a>
					_N_In = _N_In + (-19200); _LN_In = (640); _SN_In = (2*_LN_In); 
1c007b5a:	756d                	lui	a0,0xffffb
1c007b5c:	50050513          	addi	a0,a0,1280 # ffffb500 <pulp__FC+0xffffb501>
1c007b60:	9baa                	add	s7,s7,a0
					_N_Filter = _N_Filter + (9216)+(((D1Ind_Last)?(-1080):(-8640))); _SN_Filter = (((1)?(72):(576))); 
1c007b62:	240c0c13          	addi	s8,s8,576
1c007b66:	58e2                	lw	a7,56(sp)
1c007b68:	04800813          	li	a6,72
1c007b6c:	b4d9                	j	1c007632 <S16_Conv2d_18x32x3x3+0x1fe>
				_SN_In = 0;
1c007b6e:	4881                	li	a7,0
				_SN_Filter = 0;
1c007b70:	4801                	li	a6,0
1c007b72:	b4c1                	j	1c007632 <S16_Conv2d_18x32x3x3+0x1fe>

1c007b74 <S20_Conv2d_24x32x3x3>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c007b74:	7101                	addi	sp,sp,-512
1c007b76:	1f212823          	sw	s2,496(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D1, [0 x 30720, 30720]][Tile0, 2:[20x8, 20x8], 4]
		Tile0: [0, 15360, 640], Tile1: [0, 15360, 640], Tile2; [0, 15360, 640]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+32432);
1c007b7a:	10000937          	lui	s2,0x10000
1c007b7e:	02090913          	addi	s2,s2,32 # 10000020 <cnn_ssd_L1_Memory>
1c007b82:	00092803          	lw	a6,0(s2)
	KerArg0->W = (unsigned short int) (20);
1c007b86:	1c0147b7          	lui	a5,0x1c014
1c007b8a:	5987af03          	lw	t5,1432(a5) # 1c014598 <IntegerExpLUT+0x50>
{
1c007b8e:	de36                	sw	a3,60(sp)
	KerArg0->H = (unsigned short int) (8);
	KerArg0->OutFeatures = (unsigned short int) (24);
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+3200);
1c007b90:	6785                	lui	a5,0x1
	KerArg0->NormBias = (signed char) (12);
1c007b92:	46b1                	li	a3,12
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+3200);
1c007b94:	c8078313          	addi	t1,a5,-896 # c80 <__rt_stack_size+0x480>
	KerArg0->NormBias = (signed char) (12);
1c007b98:	04d10b23          	sb	a3,86(sp)
	KerArg1->W = (unsigned short int) (20);
	KerArg1->UsedW = (unsigned short int) (20);
	KerArg1->InFeatures = (unsigned short int) (4);
1c007b9c:	1c014fb7          	lui	t6,0x1c014
	KerArg1->W = (unsigned short int) (20);
1c007ba0:	00a066d7          	pv.add.sci.h	a3,zero,20
	KerArg1->OutFeatures = (unsigned short int) (24);
	KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+3248);
1c007ba4:	cb078793          	addi	a5,a5,-848
1c007ba8:	97c2                	add	a5,a5,a6
	KerArg1->W = (unsigned short int) (20);
1c007baa:	dfb6                	sw	a3,252(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+32432);
1c007bac:	68a1                	lui	a7,0x8
	KerArg1->InFeatures = (unsigned short int) (4);
1c007bae:	59cfa683          	lw	a3,1436(t6) # 1c01459c <IntegerExpLUT+0x54>
	KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+3248);
1c007bb2:	10f12623          	sw	a5,268(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+32432);
1c007bb6:	eb088713          	addi	a4,a7,-336 # 7eb0 <__rt_stack_size+0x76b0>
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+32432);
	KerArg1->Norm = (unsigned char) (16);
	KerArg1->TotalInFeatures = (short int) (32);
1c007bba:	02000793          	li	a5,32
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+32432);
1c007bbe:	9742                	add	a4,a4,a6
	KerArg0->OutFeatures = (unsigned short int) (24);
1c007bc0:	4e61                	li	t3,24
	KerArg1->Norm = (unsigned char) (16);
1c007bc2:	4ec1                	li	t4,16
	KerArg1->TotalInFeatures = (short int) (32);
1c007bc4:	10f11423          	sh	a5,264(sp)
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+3200);
1c007bc8:	006802b3          	add	t0,a6,t1
	KerArg1->Orientation = (unsigned char) (1);
1c007bcc:	4785                	li	a5,1
1c007bce:	10f10da3          	sb	a5,283(sp)
{
1c007bd2:	1e112e23          	sw	ra,508(sp)
1c007bd6:	1e812c23          	sw	s0,504(sp)
1c007bda:	1e912a23          	sw	s1,500(sp)
1c007bde:	1f312623          	sw	s3,492(sp)
1c007be2:	1f412423          	sw	s4,488(sp)
1c007be6:	1f512223          	sw	s5,484(sp)
1c007bea:	1f612023          	sw	s6,480(sp)
1c007bee:	1d712e23          	sw	s7,476(sp)
1c007bf2:	1d812c23          	sw	s8,472(sp)
1c007bf6:	1d912a23          	sw	s9,468(sp)
1c007bfa:	1da12823          	sw	s10,464(sp)
1c007bfe:	1db12623          	sw	s11,460(sp)
	KerArg2->W = (unsigned short int) (20);
	KerArg2->H = (unsigned short int) (8);
	KerArg2->Norm = (unsigned char) (16);
	KerArg2->InFeatures = (unsigned short int) (24);
	KerArg2->LB = (int) (-32768);
	KerArg2->UB = (int) (32767);
1c007c02:	18fd                	addi	a7,a7,-1
{
1c007c04:	d22a                	sw	a0,36(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+32432);
1c007c06:	c6ba                	sw	a4,76(sp)
	KerArg0->W = (unsigned short int) (20);
1c007c08:	c8fa                	sw	t5,80(sp)
	KerArg0->OutFeatures = (unsigned short int) (24);
1c007c0a:	05c11a23          	sh	t3,84(sp)
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+3200);
1c007c0e:	cc96                	sw	t0,88(sp)
	KerArg1->InFeatures = (unsigned short int) (4);
1c007c10:	10d12223          	sw	a3,260(sp)
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+32432);
1c007c14:	10e12823          	sw	a4,272(sp)
	KerArg1->Norm = (unsigned char) (16);
1c007c18:	11d10c23          	sb	t4,280(sp)
	KerArg2->In = (int * __restrict__) (cnn_ssd_L1_Memory+32432);
1c007c1c:	ceba                	sw	a4,92(sp)
	KerArg2->W = (unsigned short int) (20);
1c007c1e:	d0fa                	sw	t5,96(sp)
	KerArg2->LB = (int) (-32768);
1c007c20:	77e1                	lui	a5,0xffff8
	KerArg2->Norm = (unsigned char) (16);
1c007c22:	07d10423          	sb	t4,104(sp)
	KerArg2->InFeatures = (unsigned short int) (24);
1c007c26:	07c11523          	sh	t3,106(sp)
	KerArg2->LB = (int) (-32768);
1c007c2a:	d6be                	sw	a5,108(sp)
	KerArg2->UB = (int) (32767);
1c007c2c:	d8c6                	sw	a7,112(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007c2e:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c007c32:	002047b7          	lui	a5,0x204
1c007c36:	4007a503          	lw	a0,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c007c3a:	002f0737          	lui	a4,0x2f0
1c007c3e:	5a070713          	addi	a4,a4,1440 # 2f05a0 <__L2+0x2705a0>
1c007c42:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c007c46:	4107a023          	sw	a6,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c007c4a:	5712                	lw	a4,36(sp)
1c007c4c:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c007c50:	02800737          	lui	a4,0x2800
1c007c54:	16870713          	addi	a4,a4,360 # 2800168 <__L2+0x2780168>
1c007c58:	40e7a023          	sw	a4,1024(a5)
        if (!merge) copy->id = id;
1c007c5c:	dcaa                	sw	a0,120(sp)
        copy->length = 0;
1c007c5e:	c502                	sw	zero,136(sp)
  __builtin_pulp_spr_write(reg, val);
1c007c60:	30069073          	csrw	mstatus,a3
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+0), 1440, 640, 360, 0, &DmaR_Evt1);
	_N_In=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+3200), 48, 0, &DmaR_Evt2);
1c007c64:	00092683          	lw	a3,0(s2)
1c007c68:	969a                	add	a3,a3,t1
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007c6a:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c007c6e:	4007a803          	lw	a6,1024(a5)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c007c72:	00030737          	lui	a4,0x30
1c007c76:	c2474733          	p.bset	a4,a4,1,4
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c007c7a:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c007c7e:	c1574733          	p.bset	a4,a4,0,21
1c007c82:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c007c86:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c007c8a:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c007c8e:	cd42                	sw	a6,152(sp)
        copy->length = 0;
1c007c90:	d502                	sw	zero,168(sp)
  __builtin_pulp_spr_write(reg, val);
1c007c92:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c007c96:	572a                	lw	a4,168(sp)
1c007c98:	50070f63          	beqz	a4,1c0081b6 <S20_Conv2d_24x32x3x3+0x642>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c007c9c:	56ca                	lw	a3,176(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007c9e:	02000713          	li	a4,32
1c007ca2:	ca89                	beqz	a3,1c007cb4 <S20_Conv2d_24x32x3x3+0x140>
1c007ca4:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007ca8:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007cac:	00e7a223          	sw	a4,4(a5)
1c007cb0:	56ca                	lw	a3,176(sp)
1c007cb2:	faed                	bnez	a3,1c007ca4 <S20_Conv2d_24x32x3x3+0x130>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+3248), 13824, 0, &DmaR_Evt3);
1c007cb4:	00092683          	lw	a3,0(s2)
1c007cb8:	6785                	lui	a5,0x1
1c007cba:	cb078793          	addi	a5,a5,-848 # cb0 <__rt_stack_size+0x4b0>
1c007cbe:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007cc0:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c007cc4:	002047b7          	lui	a5,0x204
1c007cc8:	4007a503          	lw	a0,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c007ccc:	00033737          	lui	a4,0x33
1c007cd0:	60070713          	addi	a4,a4,1536 # 33600 <__L1Cl+0x23600>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c007cd4:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c007cd8:	c1574733          	p.bset	a4,a4,0,21
1c007cdc:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c007ce0:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c007ce4:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c007ce8:	dd2a                	sw	a0,184(sp)
        copy->length = 0;
1c007cea:	c582                	sw	zero,200(sp)
  __builtin_pulp_spr_write(reg, val);
1c007cec:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c007cf0:	472e                	lw	a4,200(sp)
1c007cf2:	46070863          	beqz	a4,1c008162 <S20_Conv2d_24x32x3x3+0x5ee>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c007cf6:	46ce                	lw	a3,208(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007cf8:	02000713          	li	a4,32
1c007cfc:	ca89                	beqz	a3,1c007d0e <S20_Conv2d_24x32x3x3+0x19a>
1c007cfe:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007d02:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007d06:	00e7a223          	sw	a4,4(a5)
1c007d0a:	46ce                	lw	a3,208(sp)
1c007d0c:	faed                	bnez	a3,1c007cfe <S20_Conv2d_24x32x3x3+0x18a>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c007d0e:	6309                	lui	t1,0x2
1c007d10:	e0030313          	addi	t1,t1,-512 # 1e00 <__rt_stack_size+0x1600>
1c007d14:	000207b7          	lui	a5,0x20
1c007d18:	de0327b3          	p.insert	a5,t1,15,0
{
1c007d1c:	4329                	li	t1,10
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c007d1e:	c137c7b3          	p.bset	a5,a5,0,19
1c007d22:	d41a                	sw	t1,40(sp)
1c007d24:	04c10313          	addi	t1,sp,76
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c007d28:	00204d37          	lui	s10,0x204
1c007d2c:	c81a                	sw	t1,16(sp)
1c007d2e:	1c00d9b7          	lui	s3,0x1c00d
1c007d32:	05c10313          	addi	t1,sp,92
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c007d36:	c157c7b3          	p.bset	a5,a5,0,21
1c007d3a:	ce02                	sw	zero,28(sp)
1c007d3c:	d002                	sw	zero,32(sp)
1c007d3e:	d602                	sw	zero,44(sp)
1c007d40:	4401                	li	s0,0
1c007d42:	cc02                	sw	zero,24(sp)
1c007d44:	f4298993          	addi	s3,s3,-190 # 1c00cf42 <KerParConv3x3Stride1_DP_fp>
1c007d48:	19a4                	addi	s1,sp,248
1c007d4a:	ca1a                	sw	t1,20(sp)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c007d4c:	200d0d93          	addi	s11,s10,512 # 204200 <__L2+0x184200>
1c007d50:	da3e                	sw	a5,52(sp)
1c007d52:	4362                	lw	t1,24(sp)
1c007d54:	00231793          	slli	a5,t1,0x2
1c007d58:	979a                	add	a5,a5,t1
1c007d5a:	079a                	slli	a5,a5,0x6
1c007d5c:	d83e                	sw	a5,48(sp)
1c007d5e:	00331593          	slli	a1,t1,0x3
1c007d62:	00134a13          	xori	s4,t1,1
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c007d66:	0ff00793          	li	a5,255
1c007d6a:	08fd2223          	sw	a5,132(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c007d6e:	00fda023          	sw	a5,0(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c007d72:	00fda623          	sw	a5,12(s11)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c007d76:	1c00d537          	lui	a0,0x1c00d
1c007d7a:	92a50513          	addi	a0,a0,-1750 # 1c00c92a <KerParSetBias_DP_fp>
1c007d7e:	08ad2023          	sw	a0,128(s10)
1c007d82:	4342                	lw	t1,16(sp)
1c007d84:	086d2023          	sw	t1,128(s10)
1c007d88:	00e8                	addi	a0,sp,76
1c007d8a:	c62e                	sw	a1,12(sp)
1c007d8c:	39f040ef          	jal	ra,1c00c92a <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007d90:	01cde783          	p.elw	a5,28(s11)
1c007d94:	1c014637          	lui	a2,0x1c014
1c007d98:	5522                	lw	a0,40(sp)
1c007d9a:	5dc60613          	addi	a2,a2,1500 # 1c0145dc <IntegerExpLUT+0x94>
1c007d9e:	87d2                	mv	a5,s4
1c007da0:	41450333          	sub	t1,a0,s4
1c007da4:	00062a03          	lw	s4,0(a2)
1c007da8:	4662                	lw	a2,24(sp)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c007daa:	45b2                	lw	a1,12(sp)
1c007dac:	6685                	lui	a3,0x1
1c007dae:	10035bb3          	p.exthz	s7,t1
1c007db2:	d8f61a57          	pv.packhi.b	s4,a2,a5
1c007db6:	cb068c13          	addi	s8,a3,-848 # cb0 <__rt_stack_size+0x4b0>
		for (T0Ind=0; T0Ind<2; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
			int T0Ind_Last = (T0Ind==1), T0Ind_NextLast = ((T0Ind+1)==1);
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			AT_FORK(gap_ncore(), (void *) KerParSetBias_DP_fp, (void *) KerArg0);
			__CALL(KerParSetBias_DP_fp, KerArg0);
			for (D0Ind=0; D0Ind<8; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c007dba:	4c81                	li	s9,0
				int D0Ind_Last = (D0Ind==7), D0Ind_NextLast = ((D0Ind+1)==7);
				/*================================= Prepare Tiles ===================================*/
				_SN_In = 0;
				if (!(D0Ind_Last)) {
					_N_In = _N_In + (2560); _LN_In = ((T0Ind_Last)?360:(400-40*(T0Ind==0))); _SN_In = (4*_LN_In); 
1c007dbc:	a0068a93          	addi	s5,a3,-1536
				if (!(D0Ind_Last)) {
1c007dc0:	4a7ca163          	p.beqimm	s9,7,1c008262 <S20_Conv2d_24x32x3x3+0x6ee>
					_N_In = _N_In + (2560); _LN_In = ((T0Ind_Last)?360:(400-40*(T0Ind==0))); _SN_In = (4*_LN_In); 
1c007dc4:	9456                	add	s0,s0,s5
1c007dc6:	5a000513          	li	a0,1440
  if (copy->length == 0)
1c007dca:	47aa                	lw	a5,136(sp)
1c007dcc:	12078563          	beqz	a5,1c007ef6 <S20_Conv2d_24x32x3x3+0x382>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c007dd0:	474a                	lw	a4,144(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007dd2:	02000793          	li	a5,32
1c007dd6:	cb09                	beqz	a4,1c007de8 <S20_Conv2d_24x32x3x3+0x274>
1c007dd8:	00fd2423          	sw	a5,8(s10)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007ddc:	03cd6703          	p.elw	a4,60(s10)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007de0:	00fd2223          	sw	a5,4(s10)
1c007de4:	474a                	lw	a4,144(sp)
1c007de6:	fb6d                	bnez	a4,1c007dd8 <S20_Conv2d_24x32x3x3+0x264>
1c007de8:	00092783          	lw	a5,0(s2)
1c007dec:	00158b13          	addi	s6,a1,1
					_N_In = _N_In + (-280)+(-17920); _LN_In = (360); _SN_In = (4*_LN_In); 
				}
				/*============================= End Prepare Tiles ===================================*/
				/*================================= Read Tiles ======================================*/
				AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In */
				if (_SN_In) {
1c007df0:	14051e63          	bnez	a0,1c007f4c <S20_Conv2d_24x32x3x3+0x3d8>
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+1600*((D0Ind_Total+1)%2)),
							_SN_In, 640, _LN_In, 0, &DmaR_Evt1);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+1600*((D0Ind_Total)%2));
1c007df4:	fc15b5b3          	p.bclr	a1,a1,30,1
1c007df8:	64000713          	li	a4,1600
1c007dfc:	863e                	mv	a2,a5
1c007dfe:	42e58633          	p.mac	a2,a1,a4
				KerArg1->H = (unsigned short int) (10-1*(T0Ind==0)-1*(T0Ind_Last));
				KerArg1->UsedH = (unsigned short int) (10-1*(T0Ind==0)-1*(T0Ind_Last));
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+3248+((D0Ind)*72));
1c007e02:	97e2                	add	a5,a5,s8
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c007e04:	0ff00713          	li	a4,255
1c007e08:	10f12623          	sw	a5,268(sp)
				KerArg1->H = (unsigned short int) (10-1*(T0Ind==0)-1*(T0Ind_Last));
1c007e0c:	11711023          	sh	s7,256(sp)
				KerArg1->UsedH = (unsigned short int) (10-1*(T0Ind==0)-1*(T0Ind_Last));
1c007e10:	11711123          	sh	s7,258(sp)
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c007e14:	11412a23          	sw	s4,276(sp)
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+1600*((D0Ind_Total)%2));
1c007e18:	ddb2                	sw	a2,248(sp)
1c007e1a:	08ed2223          	sw	a4,132(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c007e1e:	00eda023          	sw	a4,0(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c007e22:	00eda623          	sw	a4,12(s11)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c007e26:	093d2023          	sw	s3,128(s10)
1c007e2a:	089d2023          	sw	s1,128(s10)
1c007e2e:	8526                	mv	a0,s1
1c007e30:	112050ef          	jal	ra,1c00cf42 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007e34:	01cde783          	p.elw	a5,28(s11)
			for (D0Ind=0; D0Ind<8; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c007e38:	0c85                	addi	s9,s9,1
1c007e3a:	048c0c13          	addi	s8,s8,72
1c007e3e:	85da                	mv	a1,s6
1c007e40:	f88cb0e3          	p.bneimm	s9,8,1c007dc0 <S20_Conv2d_24x32x3x3+0x24c>
				__CALL(KerParConv3x3Stride1_DP_fp, KerArg1);
				/*================================= Update Arg Pipeline =============================*/
				/*============================= End Update Arg Pipeline =============================*/
			} /* End iteration on D0 */
			/*====================== Call Kernel LOC_D0_EPILOG =========================*/
			KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+17072+7680*((T0Ind_Total)%2));
1c007e44:	4372                	lw	t1,28(sp)
1c007e46:	00092703          	lw	a4,0(s2)
1c007e4a:	6a11                	lui	s4,0x4
1c007e4c:	2b0a0a13          	addi	s4,s4,688 # 42b0 <__rt_stack_size+0x3ab0>
1c007e50:	9a1a                	add	s4,s4,t1
1c007e52:	9752                	add	a4,a4,s4
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c007e54:	0ff00793          	li	a5,255
1c007e58:	d2ba                	sw	a4,100(sp)
1c007e5a:	08fd2223          	sw	a5,132(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c007e5e:	00fda023          	sw	a5,0(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c007e62:	00fda623          	sw	a5,12(s11)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c007e66:	1c00d537          	lui	a0,0x1c00d
1c007e6a:	9de50513          	addi	a0,a0,-1570 # 1c00c9de <KerDP_fp>
1c007e6e:	08ad2023          	sw	a0,128(s10)
1c007e72:	4352                	lw	t1,20(sp)
1c007e74:	086d2023          	sw	t1,128(s10)
1c007e78:	08e8                	addi	a0,sp,92
1c007e7a:	365040ef          	jal	ra,1c00c9de <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007e7e:	01cde783          	p.elw	a5,28(s11)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
			/*================================= Write Tiles =====================================*/
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c007e82:	5302                	lw	t1,32(sp)
1c007e84:	1e031c63          	bnez	t1,1c00807c <S20_Conv2d_24x32x3x3+0x508>
			if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
1c007e88:	5632                	lw	a2,44(sp)
1c007e8a:	3c061663          	bnez	a2,1c008256 <S20_Conv2d_24x32x3x3+0x6e2>
			if (_SP_Out) AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) cnn_ssd_L2_Memory+89584+7680*((T0Ind_Total+-1)%2)),
						_SP_Out, 640, _LP_Out, 1, &UchanHR1);
			AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) cnn_ssd_L2_Memory+89584+7680*((T0Ind_Total)%2)), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+17072+7680*((T0Ind_Total)%2)),
1c007e8e:	1c015537          	lui	a0,0x1c015
1c007e92:	a8050513          	addi	a0,a0,-1408 # 1c014a80 <cnn_ssd_L2_Memory>
1c007e96:	411c                	lw	a5,0(a0)
1c007e98:	00092703          	lw	a4,0(s2)
1c007e9c:	4372                	lw	t1,28(sp)
1c007e9e:	66d9                	lui	a3,0x16
1c007ea0:	df068693          	addi	a3,a3,-528 # 15df0 <__L1Cl+0x5df0>
1c007ea4:	97b6                	add	a5,a5,a3
1c007ea6:	979a                	add	a5,a5,t1
1c007ea8:	9a3a                	add	s4,s4,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007eaa:	30047773          	csrrci	a4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c007eae:	400d2683          	lw	a3,1024(s10)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c007eb2:	5352                	lw	t1,52(sp)
1c007eb4:	406d2023          	sw	t1,1024(s10)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c007eb8:	414d2023          	sw	s4,1024(s10)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c007ebc:	40fd2023          	sw	a5,1024(s10)
        if (!merge) copy->id = id;
1c007ec0:	cdb6                	sw	a3,216(sp)
        copy->length = 0;
1c007ec2:	d582                	sw	zero,232(sp)
  __builtin_pulp_spr_write(reg, val);
1c007ec4:	30071073          	csrw	mstatus,a4
			_SPP_Out = _SP_Out;_LPP_Out = _LP_Out;
			_P_Out = _C_Out;_SP_Out = _SC_Out;_LP_Out = _LC_Out;
			/*============================= End Update Arg Pipeline =============================*/
			/*================================= Prepare Tiles ===================================*/
			_SC_Out = 0;
			if (!(T0Ind_Last)) {
1c007ec8:	4362                	lw	t1,24(sp)
1c007eca:	0c132563          	p.beqimm	t1,1,1c007f94 <S20_Conv2d_24x32x3x3+0x420>
1c007ece:	5322                	lw	t1,40(sp)
1c007ed0:	6509                	lui	a0,0x2
1c007ed2:	e0050513          	addi	a0,a0,-512 # 1e00 <__rt_stack_size+0x1600>
1c007ed6:	fff30793          	addi	a5,t1,-1
1c007eda:	5302                	lw	t1,32(sp)
1c007edc:	1007d7b3          	p.exthz	a5,a5
1c007ee0:	d43e                	sw	a5,40(sp)
1c007ee2:	d61a                	sw	t1,44(sp)
1c007ee4:	4372                	lw	t1,28(sp)
1c007ee6:	d02a                	sw	a0,32(sp)
1c007ee8:	932a                	add	t1,t1,a0
1c007eea:	ce1a                	sw	t1,28(sp)
1c007eec:	4305                	li	t1,1
1c007eee:	cc1a                	sw	t1,24(sp)
1c007ef0:	5342                	lw	t1,48(sp)
1c007ef2:	dc1a                	sw	t1,56(sp)
1c007ef4:	bdb9                	j	1c007d52 <S20_Conv2d_24x32x3x3+0x1de>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007ef6:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c007efa:	404d2783          	lw	a5,1028(s10)
1c007efe:	5766                	lw	a4,120(sp)
1c007f00:	40e7d7b3          	sra	a5,a5,a4
1c007f04:	fc17b7b3          	p.bclr	a5,a5,30,1
1c007f08:	c78d                	beqz	a5,1c007f32 <S20_Conv2d_24x32x3x3+0x3be>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007f0a:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c007f0e:	30069073          	csrw	mstatus,a3
1c007f12:	00cd2423          	sw	a2,8(s10)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007f16:	03cd6783          	p.elw	a5,60(s10)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007f1a:	00cd2223          	sw	a2,4(s10)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007f1e:	300476f3          	csrrci	a3,mstatus,8
1c007f22:	404d2783          	lw	a5,1028(s10)
1c007f26:	5766                	lw	a4,120(sp)
1c007f28:	40e7d7b3          	sra	a5,a5,a4
1c007f2c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c007f30:	fff9                	bnez	a5,1c007f0e <S20_Conv2d_24x32x3x3+0x39a>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c007f32:	4785                	li	a5,1
1c007f34:	00e79733          	sll	a4,a5,a4
1c007f38:	40ed2223          	sw	a4,1028(s10)
  __builtin_pulp_spr_write(reg, val);
1c007f3c:	30069073          	csrw	mstatus,a3
1c007f40:	00092783          	lw	a5,0(s2)
1c007f44:	00158b13          	addi	s6,a1,1
				if (_SN_In) {
1c007f48:	ea0506e3          	beqz	a0,1c007df4 <S20_Conv2d_24x32x3x3+0x280>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007f4c:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c007f50:	400d2803          	lw	a6,1024(s10)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c007f54:	c7054533          	p.bset	a0,a0,3,16
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c007f58:	c1554533          	p.bset	a0,a0,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c007f5c:	40ad2023          	sw	a0,1024(s10)
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+1600*((D0Ind_Total+1)%2)),
1c007f60:	fc1b3733          	p.bclr	a4,s6,30,1
1c007f64:	64000513          	li	a0,1600
1c007f68:	42a707b3          	p.mac	a5,a4,a0
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c007f6c:	40fd2023          	sw	a5,1024(s10)
1c007f70:	5312                	lw	t1,36(sp)
1c007f72:	008307b3          	add	a5,t1,s0
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c007f76:	40fd2023          	sw	a5,1024(s10)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c007f7a:	02800537          	lui	a0,0x2800
1c007f7e:	16850513          	addi	a0,a0,360 # 2800168 <__L2+0x2780168>
1c007f82:	40ad2023          	sw	a0,1024(s10)
        if (!merge) copy->id = id;
1c007f86:	dcc2                	sw	a6,120(sp)
        copy->length = 0;
1c007f88:	c502                	sw	zero,136(sp)
  __builtin_pulp_spr_write(reg, val);
1c007f8a:	30061073          	csrw	mstatus,a2
1c007f8e:	00092783          	lw	a5,0(s2)
1c007f92:	b58d                	j	1c007df4 <S20_Conv2d_24x32x3x3+0x280>
  if (copy->length == 0)
1c007f94:	57ae                	lw	a5,232(sp)
1c007f96:	16078c63          	beqz	a5,1c00810e <S20_Conv2d_24x32x3x3+0x59a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c007f9a:	56ce                	lw	a3,240(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007f9c:	02000713          	li	a4,32
1c007fa0:	002047b7          	lui	a5,0x204
1c007fa4:	ca89                	beqz	a3,1c007fb6 <S20_Conv2d_24x32x3x3+0x442>
1c007fa6:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007faa:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007fae:	00e7a223          	sw	a4,4(a5)
1c007fb2:	56ce                	lw	a3,240(sp)
1c007fb4:	faed                	bnez	a3,1c007fa6 <S20_Conv2d_24x32x3x3+0x432>
			/*============================= End Prepare Tiles ===================================*/
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
1c007fb6:	5302                	lw	t1,32(sp)
1c007fb8:	02030563          	beqz	t1,1c007fe2 <S20_Conv2d_24x32x3x3+0x46e>
1c007fbc:	1bc14783          	lbu	a5,444(sp)
1c007fc0:	0ff7f793          	andi	a5,a5,255
1c007fc4:	ef99                	bnez	a5,1c007fe2 <S20_Conv2d_24x32x3x3+0x46e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007fc6:	4689                	li	a3,2
1c007fc8:	00204737          	lui	a4,0x204
1c007fcc:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007fd0:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007fd4:	00d72223          	sw	a3,4(a4)
1c007fd8:	1bc14783          	lbu	a5,444(sp)
1c007fdc:	0ff7f793          	andi	a5,a5,255
1c007fe0:	d7f5                	beqz	a5,1c007fcc <S20_Conv2d_24x32x3x3+0x458>
	AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) cnn_ssd_L2_Memory+89584+7680*((T0Ind_Total+-1)%2)), _SP_Out, 640, _LP_Out, 1, &UchanHR1);
1c007fe2:	1c015537          	lui	a0,0x1c015
1c007fe6:	a8050513          	addi	a0,a0,-1408 # 1c014a80 <cnn_ssd_L2_Memory>
1c007fea:	410c                	lw	a1,0(a0)
1c007fec:	5372                	lw	t1,60(sp)
1c007fee:	5542                	lw	a0,48(sp)
1c007ff0:	6661                	lui	a2,0x18
1c007ff2:	bf060613          	addi	a2,a2,-1040 # 17bf0 <__L1Cl+0x7bf0>
1c007ff6:	962e                	add	a2,a2,a1
1c007ff8:	6689                	lui	a3,0x2
1c007ffa:	00a305b3          	add	a1,t1,a0
1c007ffe:	1c015337          	lui	t1,0x1c015
1c008002:	14000793          	li	a5,320
1c008006:	12010893          	addi	a7,sp,288
1c00800a:	4801                	li	a6,0
1c00800c:	28000713          	li	a4,640
1c008010:	e0068693          	addi	a3,a3,-512 # 1e00 <__rt_stack_size+0x1600>
1c008014:	fb030513          	addi	a0,t1,-80 # 1c014fb0 <HyperRam>
1c008018:	76f060ef          	jal	ra,1c00ef86 <pi_cl_ram_copy_2d>
1c00801c:	1bc14783          	lbu	a5,444(sp)
1c008020:	0ff7f793          	andi	a5,a5,255
1c008024:	ef99                	bnez	a5,1c008042 <S20_Conv2d_24x32x3x3+0x4ce>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008026:	4689                	li	a3,2
1c008028:	00204737          	lui	a4,0x204
1c00802c:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008030:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008034:	00d72223          	sw	a3,4(a4)
1c008038:	1bc14783          	lbu	a5,444(sp)
1c00803c:	0ff7f793          	andi	a5,a5,255
1c008040:	d7f5                	beqz	a5,1c00802c <S20_Conv2d_24x32x3x3+0x4b8>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait current uDMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c008042:	1fc12083          	lw	ra,508(sp)
1c008046:	1f812403          	lw	s0,504(sp)
1c00804a:	1f412483          	lw	s1,500(sp)
1c00804e:	1f012903          	lw	s2,496(sp)
1c008052:	1ec12983          	lw	s3,492(sp)
1c008056:	1e812a03          	lw	s4,488(sp)
1c00805a:	1e412a83          	lw	s5,484(sp)
1c00805e:	1e012b03          	lw	s6,480(sp)
1c008062:	1dc12b83          	lw	s7,476(sp)
1c008066:	1d812c03          	lw	s8,472(sp)
1c00806a:	1d412c83          	lw	s9,468(sp)
1c00806e:	1d012d03          	lw	s10,464(sp)
1c008072:	1cc12d83          	lw	s11,460(sp)
1c008076:	20010113          	addi	sp,sp,512
1c00807a:	8082                	ret
  if (copy->length == 0)
1c00807c:	57ae                	lw	a5,232(sp)
1c00807e:	18079663          	bnez	a5,1c00820a <S20_Conv2d_24x32x3x3+0x696>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008082:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c008086:	404d2783          	lw	a5,1028(s10)
1c00808a:	476e                	lw	a4,216(sp)
1c00808c:	40e7d7b3          	sra	a5,a5,a4
1c008090:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008094:	c78d                	beqz	a5,1c0080be <S20_Conv2d_24x32x3x3+0x54a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008096:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c00809a:	30069073          	csrw	mstatus,a3
1c00809e:	00cd2423          	sw	a2,8(s10)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0080a2:	03cd6783          	p.elw	a5,60(s10)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0080a6:	00cd2223          	sw	a2,4(s10)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0080aa:	300476f3          	csrrci	a3,mstatus,8
1c0080ae:	404d2783          	lw	a5,1028(s10)
1c0080b2:	476e                	lw	a4,216(sp)
1c0080b4:	40e7d7b3          	sra	a5,a5,a4
1c0080b8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0080bc:	fff9                	bnez	a5,1c00809a <S20_Conv2d_24x32x3x3+0x526>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0080be:	4785                	li	a5,1
1c0080c0:	00e79733          	sll	a4,a5,a4
1c0080c4:	40ed2223          	sw	a4,1028(s10)
  __builtin_pulp_spr_write(reg, val);
1c0080c8:	30069073          	csrw	mstatus,a3
			if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
1c0080cc:	5632                	lw	a2,44(sp)
1c0080ce:	14061e63          	bnez	a2,1c00822a <S20_Conv2d_24x32x3x3+0x6b6>
			if (_SP_Out) AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) cnn_ssd_L2_Memory+89584+7680*((T0Ind_Total+-1)%2)),
1c0080d2:	4372                	lw	t1,28(sp)
1c0080d4:	1c0156b7          	lui	a3,0x1c015
1c0080d8:	67d1                	lui	a5,0x14
1c0080da:	a8068693          	addi	a3,a3,-1408 # 1c014a80 <cnn_ssd_L2_Memory>
1c0080de:	17c1                	addi	a5,a5,-16
1c0080e0:	428c                	lw	a1,0(a3)
1c0080e2:	00f30633          	add	a2,t1,a5
1c0080e6:	5562                	lw	a0,56(sp)
1c0080e8:	5372                	lw	t1,60(sp)
1c0080ea:	5682                	lw	a3,32(sp)
1c0080ec:	962e                	add	a2,a2,a1
1c0080ee:	00a305b3          	add	a1,t1,a0
1c0080f2:	1c015337          	lui	t1,0x1c015
1c0080f6:	12010893          	addi	a7,sp,288
1c0080fa:	4801                	li	a6,0
1c0080fc:	14000793          	li	a5,320
1c008100:	28000713          	li	a4,640
1c008104:	fb030513          	addi	a0,t1,-80 # 1c014fb0 <HyperRam>
1c008108:	67f060ef          	jal	ra,1c00ef86 <pi_cl_ram_copy_2d>
1c00810c:	b349                	j	1c007e8e <S20_Conv2d_24x32x3x3+0x31a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00810e:	30047673          	csrrci	a2,mstatus,8
1c008112:	404d2783          	lw	a5,1028(s10)
1c008116:	46ee                	lw	a3,216(sp)
1c008118:	40d7d7b3          	sra	a5,a5,a3
1c00811c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008120:	c79d                	beqz	a5,1c00814e <S20_Conv2d_24x32x3x3+0x5da>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008122:	10000593          	li	a1,256
1c008126:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00812a:	30061073          	csrw	mstatus,a2
1c00812e:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008132:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008136:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00813a:	30047673          	csrrci	a2,mstatus,8
1c00813e:	40472783          	lw	a5,1028(a4)
1c008142:	46ee                	lw	a3,216(sp)
1c008144:	40d7d7b3          	sra	a5,a5,a3
1c008148:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00814c:	fff9                	bnez	a5,1c00812a <S20_Conv2d_24x32x3x3+0x5b6>
1c00814e:	4785                	li	a5,1
1c008150:	00d796b3          	sll	a3,a5,a3
1c008154:	002047b7          	lui	a5,0x204
1c008158:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00815c:	30061073          	csrw	mstatus,a2
1c008160:	bd99                	j	1c007fb6 <S20_Conv2d_24x32x3x3+0x442>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008162:	30047673          	csrrci	a2,mstatus,8
1c008166:	4047a783          	lw	a5,1028(a5)
1c00816a:	56ea                	lw	a3,184(sp)
1c00816c:	40d7d7b3          	sra	a5,a5,a3
1c008170:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008174:	c79d                	beqz	a5,1c0081a2 <S20_Conv2d_24x32x3x3+0x62e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008176:	10000593          	li	a1,256
1c00817a:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00817e:	30061073          	csrw	mstatus,a2
1c008182:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008186:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00818a:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00818e:	30047673          	csrrci	a2,mstatus,8
1c008192:	40472783          	lw	a5,1028(a4)
1c008196:	56ea                	lw	a3,184(sp)
1c008198:	40d7d7b3          	sra	a5,a5,a3
1c00819c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0081a0:	fff9                	bnez	a5,1c00817e <S20_Conv2d_24x32x3x3+0x60a>
1c0081a2:	4785                	li	a5,1
1c0081a4:	00d796b3          	sll	a3,a5,a3
1c0081a8:	002047b7          	lui	a5,0x204
1c0081ac:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0081b0:	30061073          	csrw	mstatus,a2
1c0081b4:	bea9                	j	1c007d0e <S20_Conv2d_24x32x3x3+0x19a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0081b6:	30047673          	csrrci	a2,mstatus,8
1c0081ba:	4047a783          	lw	a5,1028(a5)
1c0081be:	46ea                	lw	a3,152(sp)
1c0081c0:	40d7d7b3          	sra	a5,a5,a3
1c0081c4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0081c8:	c79d                	beqz	a5,1c0081f6 <S20_Conv2d_24x32x3x3+0x682>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0081ca:	10000513          	li	a0,256
1c0081ce:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0081d2:	30061073          	csrw	mstatus,a2
1c0081d6:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0081da:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0081de:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0081e2:	30047673          	csrrci	a2,mstatus,8
1c0081e6:	40472783          	lw	a5,1028(a4)
1c0081ea:	46ea                	lw	a3,152(sp)
1c0081ec:	40d7d7b3          	sra	a5,a5,a3
1c0081f0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0081f4:	fff9                	bnez	a5,1c0081d2 <S20_Conv2d_24x32x3x3+0x65e>
1c0081f6:	4785                	li	a5,1
1c0081f8:	00d796b3          	sll	a3,a5,a3
1c0081fc:	002047b7          	lui	a5,0x204
1c008200:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c008204:	30061073          	csrw	mstatus,a2
1c008208:	b475                	j	1c007cb4 <S20_Conv2d_24x32x3x3+0x140>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00820a:	574e                	lw	a4,240(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00820c:	02000793          	li	a5,32
1c008210:	ea070ee3          	beqz	a4,1c0080cc <S20_Conv2d_24x32x3x3+0x558>
1c008214:	00fd2423          	sw	a5,8(s10)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008218:	03cd6703          	p.elw	a4,60(s10)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00821c:	00fd2223          	sw	a5,4(s10)
1c008220:	574e                	lw	a4,240(sp)
1c008222:	fb6d                	bnez	a4,1c008214 <S20_Conv2d_24x32x3x3+0x6a0>
			if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
1c008224:	5632                	lw	a2,44(sp)
1c008226:	ea0606e3          	beqz	a2,1c0080d2 <S20_Conv2d_24x32x3x3+0x55e>
1c00822a:	1bc14783          	lbu	a5,444(sp)
1c00822e:	0ff7f793          	andi	a5,a5,255
1c008232:	ea0790e3          	bnez	a5,1c0080d2 <S20_Conv2d_24x32x3x3+0x55e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008236:	4709                	li	a4,2
1c008238:	00ed2423          	sw	a4,8(s10)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00823c:	03cd6783          	p.elw	a5,60(s10)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008240:	00ed2223          	sw	a4,4(s10)
1c008244:	1bc14783          	lbu	a5,444(sp)
1c008248:	0ff7f793          	andi	a5,a5,255
1c00824c:	d7f5                	beqz	a5,1c008238 <S20_Conv2d_24x32x3x3+0x6c4>
			if (_SP_Out) AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) cnn_ssd_L2_Memory+89584+7680*((T0Ind_Total+-1)%2)),
1c00824e:	5302                	lw	t1,32(sp)
1c008250:	c2030fe3          	beqz	t1,1c007e8e <S20_Conv2d_24x32x3x3+0x31a>
1c008254:	bdbd                	j	1c0080d2 <S20_Conv2d_24x32x3x3+0x55e>
1c008256:	1bc14783          	lbu	a5,444(sp)
1c00825a:	0ff7f793          	andi	a5,a5,255
1c00825e:	dfe1                	beqz	a5,1c008236 <S20_Conv2d_24x32x3x3+0x6c2>
1c008260:	b13d                	j	1c007e8e <S20_Conv2d_24x32x3x3+0x31a>
				} else if (!(T0Ind_Last)) {
1c008262:	4362                	lw	t1,24(sp)
1c008264:	00132963          	p.beqimm	t1,1,1c008276 <S20_Conv2d_24x32x3x3+0x702>
					_N_In = _N_In + (320-(40*(T0Ind==0)))+(-17920); _LN_In = ((1)?360:400); _SN_In = (4*_LN_In); 
1c008268:	7571                	lui	a0,0xffffc
1c00826a:	b1850513          	addi	a0,a0,-1256 # ffffbb18 <pulp__FC+0xffffbb19>
1c00826e:	942a                	add	s0,s0,a0
1c008270:	5a000513          	li	a0,1440
1c008274:	be99                	j	1c007dca <S20_Conv2d_24x32x3x3+0x256>
				_SN_In = 0;
1c008276:	4501                	li	a0,0
1c008278:	be89                	j	1c007dca <S20_Conv2d_24x32x3x3+0x256>

1c00827a <S24_Conv2d_64x32x3x3_Relu>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c00827a:	7169                	addi	sp,sp,-304
1c00827c:	11a12023          	sw	s10,256(sp)
1c008280:	c636                	sw	a3,12(sp)
	KerArg0->OutFeatures = (unsigned short int) (64);
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+640);
	KerArg0->NormBias = (signed char) (14);
	KerArg1->W = (unsigned short int) (10);
	KerArg1->UsedW = (unsigned short int) (10);
	KerArg1->InFeatures = (unsigned short int) (2);
1c008282:	1c014eb7          	lui	t4,0x1c014
	KerArg1->W = (unsigned short int) (10);
1c008286:	005066d7          	pv.add.sci.h	a3,zero,10
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+15616);
1c00828a:	10000d37          	lui	s10,0x10000
	KerArg1->W = (unsigned short int) (10);
1c00828e:	c7b6                	sw	a3,204(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+15616);
1c008290:	020d0d13          	addi	s10,s10,32 # 10000020 <cnn_ssd_L1_Memory>
	KerArg1->InFeatures = (unsigned short int) (2);
1c008294:	5a4ea683          	lw	a3,1444(t4) # 1c0145a4 <IntegerExpLUT+0x5c>
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+15616);
1c008298:	000d2803          	lw	a6,0(s10)
	KerArg0->W = (unsigned short int) (10);
1c00829c:	1c0147b7          	lui	a5,0x1c014
1c0082a0:	5a07ae03          	lw	t3,1440(a5) # 1c0145a0 <IntegerExpLUT+0x58>
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+15616);
1c0082a4:	6791                	lui	a5,0x4
	KerArg1->InFeatures = (unsigned short int) (2);
1c0082a6:	cbb6                	sw	a3,212(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+15616);
1c0082a8:	d0078793          	addi	a5,a5,-768 # 3d00 <__rt_stack_size+0x3500>
	KerArg1->OutFeatures = (unsigned short int) (64);
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+15616);
	KerArg1->Norm = (unsigned char) (14);
	KerArg1->TotalInFeatures = (short int) (2);
1c0082ac:	4689                	li	a3,2
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+15616);
1c0082ae:	97c2                	add	a5,a5,a6
	KerArg1->TotalInFeatures = (short int) (2);
1c0082b0:	0cd11c23          	sh	a3,216(sp)
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
	KerArg1->Orientation = (unsigned char) (1);
	KerArg2->In = (int * __restrict__) (cnn_ssd_L1_Memory+15616);
	KerArg2->W = (unsigned short int) (10);
	KerArg2->H = (unsigned short int) (8);
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+5376);
1c0082b4:	6705                	lui	a4,0x1
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c0082b6:	020076d7          	pv.add.sci.b	a3,zero,1
	KerArg0->NormBias = (signed char) (14);
1c0082ba:	48b9                	li	a7,14
	KerArg0->OutFeatures = (unsigned short int) (64);
1c0082bc:	04000313          	li	t1,64
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+15616);
1c0082c0:	ce3e                	sw	a5,28(sp)
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+15616);
1c0082c2:	d1be                	sw	a5,224(sp)
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c0082c4:	d3b6                	sw	a3,228(sp)
	KerArg2->In = (int * __restrict__) (cnn_ssd_L1_Memory+15616);
1c0082c6:	d63e                	sw	a5,44(sp)
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+640);
1c0082c8:	28080f13          	addi	t5,a6,640
	KerArg1->Orientation = (unsigned char) (1);
1c0082cc:	4685                	li	a3,1
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+5376);
1c0082ce:	50070713          	addi	a4,a4,1280 # 1500 <__rt_stack_size+0xd00>
	KerArg2->Norm = (unsigned char) (14);
	KerArg2->InFeatures = (unsigned short int) (64);
	KerArg2->LB = (int) (0);
	KerArg2->UB = (int) (32767);
1c0082d2:	67a1                	lui	a5,0x8
{
1c0082d4:	11712623          	sw	s7,268(sp)
1c0082d8:	12112623          	sw	ra,300(sp)
1c0082dc:	12812423          	sw	s0,296(sp)
1c0082e0:	12912223          	sw	s1,292(sp)
1c0082e4:	13212023          	sw	s2,288(sp)
1c0082e8:	11312e23          	sw	s3,284(sp)
1c0082ec:	11412c23          	sw	s4,280(sp)
1c0082f0:	11512a23          	sw	s5,276(sp)
1c0082f4:	11612823          	sw	s6,272(sp)
1c0082f8:	11812423          	sw	s8,264(sp)
1c0082fc:	11912223          	sw	s9,260(sp)
1c008300:	dfee                	sw	s11,252(sp)
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+5376);
1c008302:	9742                	add	a4,a4,a6
{
1c008304:	c42e                	sw	a1,8(sp)
	KerArg0->W = (unsigned short int) (10);
1c008306:	d072                	sw	t3,32(sp)
	KerArg0->OutFeatures = (unsigned short int) (64);
1c008308:	02611223          	sh	t1,36(sp)
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+640);
1c00830c:	d47a                	sw	t5,40(sp)
	KerArg0->NormBias = (signed char) (14);
1c00830e:	03110323          	sb	a7,38(sp)
	KerArg1->Norm = (unsigned char) (14);
1c008312:	0f110423          	sb	a7,232(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c008316:	0ed105a3          	sb	a3,235(sp)
	KerArg2->W = (unsigned short int) (10);
1c00831a:	d872                	sw	t3,48(sp)
	KerArg2->UB = (int) (32767);
1c00831c:	17fd                	addi	a5,a5,-1
{
1c00831e:	8baa                	mv	s7,a0
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+5376);
1c008320:	da3a                	sw	a4,52(sp)
	KerArg2->Norm = (unsigned char) (14);
1c008322:	03110c23          	sb	a7,56(sp)
	KerArg2->InFeatures = (unsigned short int) (64);
1c008326:	02611d23          	sh	t1,58(sp)
	KerArg2->LB = (int) (0);
1c00832a:	de02                	sw	zero,60(sp)
	KerArg2->UB = (int) (32767);
1c00832c:	c0be                	sw	a5,64(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00832e:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c008332:	002047b7          	lui	a5,0x204
1c008336:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00833a:	002f0737          	lui	a4,0x2f0
1c00833e:	14070713          	addi	a4,a4,320 # 2f0140 <__L2+0x270140>
1c008342:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c008346:	4107a023          	sw	a6,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00834a:	40a7a023          	sw	a0,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c00834e:	00a00737          	lui	a4,0xa00
1c008352:	0a070713          	addi	a4,a4,160 # a000a0 <__L2+0x9800a0>
1c008356:	40e7a023          	sw	a4,1024(a5)
        if (!merge) copy->id = id;
1c00835a:	c4ae                	sw	a1,72(sp)
        copy->length = 0;
1c00835c:	cc82                	sw	zero,88(sp)
  __builtin_pulp_spr_write(reg, val);
1c00835e:	30069073          	csrw	mstatus,a3
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+0), 320, 160, 160, 0, &DmaR_Evt1);
	_N_In=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+640), 128, 0, &DmaR_Evt2);
1c008362:	000d2683          	lw	a3,0(s10)
1c008366:	28068693          	addi	a3,a3,640
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00836a:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00836e:	4007a503          	lw	a0,1024(a5)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c008372:	00030737          	lui	a4,0x30
1c008376:	c0774733          	p.bset	a4,a4,0,7
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00837a:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00837e:	c1574733          	p.bset	a4,a4,0,21
1c008382:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c008386:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00838a:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c00838e:	d4aa                	sw	a0,104(sp)
        copy->length = 0;
1c008390:	dc82                	sw	zero,120(sp)
  __builtin_pulp_spr_write(reg, val);
1c008392:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c008396:	5766                	lw	a4,120(sp)
1c008398:	34070263          	beqz	a4,1c0086dc <S24_Conv2d_64x32x3x3_Relu+0x462>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00839c:	468a                	lw	a3,128(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00839e:	02000713          	li	a4,32
1c0083a2:	ca89                	beqz	a3,1c0083b4 <S24_Conv2d_64x32x3x3_Relu+0x13a>
1c0083a4:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0083a8:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0083ac:	00e7a223          	sw	a4,4(a5)
1c0083b0:	468a                	lw	a3,128(sp)
1c0083b2:	faed                	bnez	a3,1c0083a4 <S24_Conv2d_64x32x3x3_Relu+0x12a>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+768+0), 2304, 0, &DmaR_Evt3);
1c0083b4:	000d2683          	lw	a3,0(s10)
1c0083b8:	30068693          	addi	a3,a3,768
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0083bc:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0083c0:	002047b7          	lui	a5,0x204
1c0083c4:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0083c8:	6485                	lui	s1,0x1
1c0083ca:	90048493          	addi	s1,s1,-1792 # 900 <__rt_stack_size+0x100>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c0083ce:	00030737          	lui	a4,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0083d2:	de04a733          	p.insert	a4,s1,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0083d6:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0083da:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0083de:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0083e2:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0083e6:	4722                	lw	a4,8(sp)
1c0083e8:	40e7a023          	sw	a4,1024(a5)
        if (!merge) copy->id = id;
1c0083ec:	c52e                	sw	a1,136(sp)
        copy->length = 0;
1c0083ee:	cd02                	sw	zero,152(sp)
  __builtin_pulp_spr_write(reg, val);
1c0083f0:	30061073          	csrw	mstatus,a2
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0083f4:	0ff00713          	li	a4,255
1c0083f8:	08e7a223          	sw	a4,132(a5)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0083fc:	20078c93          	addi	s9,a5,512
1c008400:	00eca023          	sw	a4,0(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c008404:	00eca623          	sw	a4,12(s9)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c008408:	1c00d737          	lui	a4,0x1c00d
1c00840c:	92a70713          	addi	a4,a4,-1750 # 1c00c92a <KerParSetBias_DP_fp>
1c008410:	08e7a023          	sw	a4,128(a5)
1c008414:	0868                	addi	a0,sp,28
1c008416:	08a7a023          	sw	a0,128(a5)
1c00841a:	510040ef          	jal	ra,1c00c92a <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00841e:	01cce783          	p.elw	a5,28(s9)
1c008422:	1c00d937          	lui	s2,0x1c00d
	_N_Filter=0;
1c008426:	4b01                	li	s6,0
	_N_In=0;
1c008428:	4d81                	li	s11,0
		{ /* Single iteration on Tile0 */
			int T0Ind_Last = 1, T0Ind_NextLast = 1;
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			AT_FORK(gap_ncore(), (void *) KerParSetBias_DP_fp, (void *) KerArg0);
			__CALL(KerParSetBias_DP_fp, KerArg0);
			for (D0Ind=0; D0Ind<16; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c00842a:	4701                	li	a4,0
1c00842c:	f4290913          	addi	s2,s2,-190 # 1c00cf42 <KerParConv3x3Stride1_DP_fp>
1c008430:	0c810c13          	addi	s8,sp,200
				} else if (!(1)) {
					_N_In = _N_In + (-4800); _LN_In = (160); _SN_In = (2*_LN_In); 
				}
				_SN_Filter = 0;
				if (!(D0Ind_Last)) {
					_N_Filter = _N_Filter + ((2304)); _SN_Filter = (((1)?(2304):(2304))); 
1c008434:	8a26                	mv	s4,s1
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c008436:	00204437          	lui	s0,0x204
							_SN_Filter, 0, &DmaR_Evt3);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+320*((D0Ind_Total)%2));
				KerArg1->H = (unsigned short int) (10-1*(1)-1*(1));
1c00843a:	004069d7          	pv.add.sci.h	s3,zero,8
				if (!(D0Ind_Last)) {
1c00843e:	34f72363          	p.beqimm	a4,15,1c008784 <S24_Conv2d_64x32x3x3_Relu+0x50a>
					_N_In = _N_In + (320); _LN_In = (160); _SN_In = (2*_LN_In); 
1c008442:	140d8d93          	addi	s11,s11,320
					_N_Filter = _N_Filter + ((2304)); _SN_Filter = (((1)?(2304):(2304))); 
1c008446:	9b52                	add	s6,s6,s4
1c008448:	14000313          	li	t1,320
1c00844c:	88a6                	mv	a7,s1
  if (copy->length == 0)
1c00844e:	47e6                	lw	a5,88(sp)
1c008450:	1e078963          	beqz	a5,1c008642 <S24_Conv2d_64x32x3x3_Relu+0x3c8>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c008454:	5586                	lw	a1,96(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008456:	02000793          	li	a5,32
1c00845a:	c989                	beqz	a1,1c00846c <S24_Conv2d_64x32x3x3_Relu+0x1f2>
1c00845c:	00f42423          	sw	a5,8(s0) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008460:	03c46583          	p.elw	a1,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008464:	00f42223          	sw	a5,4(s0)
1c008468:	5586                	lw	a1,96(sp)
1c00846a:	f9ed                	bnez	a1,1c00845c <S24_Conv2d_64x32x3x3_Relu+0x1e2>
1c00846c:	00170a93          	addi	s5,a4,1
				if (_SN_In) {
1c008470:	22031263          	bnez	t1,1c008694 <S24_Conv2d_64x32x3x3_Relu+0x41a>
  if (copy->length == 0)
1c008474:	47ea                	lw	a5,152(sp)
1c008476:	12078863          	beqz	a5,1c0085a6 <S24_Conv2d_64x32x3x3_Relu+0x32c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00847a:	550a                	lw	a0,160(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00847c:	02000793          	li	a5,32
1c008480:	c909                	beqz	a0,1c008492 <S24_Conv2d_64x32x3x3_Relu+0x218>
1c008482:	00f42423          	sw	a5,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008486:	03c46503          	p.elw	a0,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00848a:	00f42223          	sw	a5,4(s0)
1c00848e:	550a                	lw	a0,160(sp)
1c008490:	f96d                	bnez	a0,1c008482 <S24_Conv2d_64x32x3x3_Relu+0x208>
1c008492:	000d2503          	lw	a0,0(s10)
				if (_SN_Filter) {
1c008496:	16089163          	bnez	a7,1c0085f8 <S24_Conv2d_64x32x3x3_Relu+0x37e>
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+320*((D0Ind_Total)%2));
1c00849a:	fc173833          	p.bclr	a6,a4,30,1
				KerArg1->UsedH = (unsigned short int) (10-1*(1)-1*(1));
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+768+2304*((D0Ind_Total)%2));
1c00849e:	00381793          	slli	a5,a6,0x3
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+320*((D0Ind_Total)%2));
1c0084a2:	00281713          	slli	a4,a6,0x2
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+768+2304*((D0Ind_Total)%2));
1c0084a6:	97c2                	add	a5,a5,a6
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+320*((D0Ind_Total)%2));
1c0084a8:	9742                	add	a4,a4,a6
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+768+2304*((D0Ind_Total)%2));
1c0084aa:	07a2                	slli	a5,a5,0x8
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+320*((D0Ind_Total)%2));
1c0084ac:	071a                	slli	a4,a4,0x6
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+768+2304*((D0Ind_Total)%2));
1c0084ae:	30078793          	addi	a5,a5,768
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+320*((D0Ind_Total)%2));
1c0084b2:	972a                	add	a4,a4,a0
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+768+2304*((D0Ind_Total)%2));
1c0084b4:	97aa                	add	a5,a5,a0
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0084b6:	0ff00513          	li	a0,255
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+320*((D0Ind_Total)%2));
1c0084ba:	c5ba                	sw	a4,200(sp)
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+768+2304*((D0Ind_Total)%2));
1c0084bc:	cfbe                	sw	a5,220(sp)
				KerArg1->H = (unsigned short int) (10-1*(1)-1*(1));
1c0084be:	c9ce                	sw	s3,208(sp)
1c0084c0:	08a42223          	sw	a0,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0084c4:	00aca023          	sw	a0,0(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0084c8:	00aca623          	sw	a0,12(s9)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0084cc:	09242023          	sw	s2,128(s0)
1c0084d0:	09842023          	sw	s8,128(s0)
1c0084d4:	8562                	mv	a0,s8
1c0084d6:	26d040ef          	jal	ra,1c00cf42 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0084da:	01cce783          	p.elw	a5,28(s9)
			for (D0Ind=0; D0Ind<16; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c0084de:	47c1                	li	a5,16
1c0084e0:	8756                	mv	a4,s5
1c0084e2:	f4fa9ee3          	bne	s5,a5,1c00843e <S24_Conv2d_64x32x3x3_Relu+0x1c4>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0084e6:	0ff00793          	li	a5,255
1c0084ea:	002044b7          	lui	s1,0x204
1c0084ee:	08f4a223          	sw	a5,132(s1) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0084f2:	00fca023          	sw	a5,0(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0084f6:	00fca623          	sw	a5,12(s9)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0084fa:	1c00d7b7          	lui	a5,0x1c00d
1c0084fe:	9de78793          	addi	a5,a5,-1570 # 1c00c9de <KerDP_fp>
1c008502:	08f4a023          	sw	a5,128(s1)
1c008506:	1068                	addi	a0,sp,44
1c008508:	08a4a023          	sw	a0,128(s1)
1c00850c:	4d2040ef          	jal	ra,1c00c9de <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008510:	01cce783          	p.elw	a5,28(s9)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+5376), 10240, 1, &DmaW_Evt1);
1c008514:	6785                	lui	a5,0x1
1c008516:	000d2703          	lw	a4,0(s10)
1c00851a:	50078793          	addi	a5,a5,1280 # 1500 <__rt_stack_size+0xd00>
1c00851e:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008520:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c008524:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c008528:	000237b7          	lui	a5,0x23
1c00852c:	80078793          	addi	a5,a5,-2048 # 22800 <__L1Cl+0x12800>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c008530:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c008534:	c157c7b3          	p.bset	a5,a5,0,21
1c008538:	40f4a023          	sw	a5,1024(s1)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00853c:	40e4a023          	sw	a4,1024(s1)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c008540:	4732                	lw	a4,12(sp)
1c008542:	40e4a023          	sw	a4,1024(s1)
        if (!merge) copy->id = id;
1c008546:	d532                	sw	a2,168(sp)
        copy->length = 0;
1c008548:	dd02                	sw	zero,184(sp)
  __builtin_pulp_spr_write(reg, val);
1c00854a:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c00854e:	57ea                	lw	a5,184(sp)
1c008550:	1e078063          	beqz	a5,1c008730 <S24_Conv2d_64x32x3x3_Relu+0x4b6>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c008554:	468e                	lw	a3,192(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008556:	02000713          	li	a4,32
1c00855a:	002047b7          	lui	a5,0x204
1c00855e:	ca89                	beqz	a3,1c008570 <S24_Conv2d_64x32x3x3_Relu+0x2f6>
1c008560:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008564:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008568:	00e7a223          	sw	a4,4(a5)
1c00856c:	468e                	lw	a3,192(sp)
1c00856e:	faed                	bnez	a3,1c008560 <S24_Conv2d_64x32x3x3_Relu+0x2e6>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c008570:	12c12083          	lw	ra,300(sp)
1c008574:	12812403          	lw	s0,296(sp)
1c008578:	12412483          	lw	s1,292(sp)
1c00857c:	12012903          	lw	s2,288(sp)
1c008580:	11c12983          	lw	s3,284(sp)
1c008584:	11812a03          	lw	s4,280(sp)
1c008588:	11412a83          	lw	s5,276(sp)
1c00858c:	11012b03          	lw	s6,272(sp)
1c008590:	10c12b83          	lw	s7,268(sp)
1c008594:	10812c03          	lw	s8,264(sp)
1c008598:	10412c83          	lw	s9,260(sp)
1c00859c:	10012d03          	lw	s10,256(sp)
1c0085a0:	5dfe                	lw	s11,252(sp)
1c0085a2:	6155                	addi	sp,sp,304
1c0085a4:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0085a6:	30047873          	csrrci	a6,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0085aa:	40442783          	lw	a5,1028(s0)
1c0085ae:	452a                	lw	a0,136(sp)
1c0085b0:	40a7d7b3          	sra	a5,a5,a0
1c0085b4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0085b8:	c78d                	beqz	a5,1c0085e2 <S24_Conv2d_64x32x3x3_Relu+0x368>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0085ba:	10000313          	li	t1,256
  __builtin_pulp_spr_write(reg, val);
1c0085be:	30081073          	csrw	mstatus,a6
1c0085c2:	00642423          	sw	t1,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0085c6:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0085ca:	00642223          	sw	t1,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0085ce:	30047873          	csrrci	a6,mstatus,8
1c0085d2:	40442783          	lw	a5,1028(s0)
1c0085d6:	452a                	lw	a0,136(sp)
1c0085d8:	40a7d7b3          	sra	a5,a5,a0
1c0085dc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0085e0:	fff9                	bnez	a5,1c0085be <S24_Conv2d_64x32x3x3_Relu+0x344>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0085e2:	4785                	li	a5,1
1c0085e4:	00a79533          	sll	a0,a5,a0
1c0085e8:	40a42223          	sw	a0,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c0085ec:	30081073          	csrw	mstatus,a6
1c0085f0:	000d2503          	lw	a0,0(s10)
				if (_SN_Filter) {
1c0085f4:	ea0883e3          	beqz	a7,1c00849a <S24_Conv2d_64x32x3x3_Relu+0x220>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0085f8:	30047873          	csrrci	a6,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0085fc:	40042303          	lw	t1,1024(s0)
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c008600:	000307b7          	lui	a5,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c008604:	de08a7b3          	p.insert	a5,a7,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c008608:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00860c:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c008610:	40f42023          	sw	a5,1024(s0)
					AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+768+2304*((D0Ind_Total+1)%2)),
1c008614:	fc1ab8b3          	p.bclr	a7,s5,30,1
1c008618:	00389793          	slli	a5,a7,0x3
1c00861c:	97c6                	add	a5,a5,a7
1c00861e:	07a2                	slli	a5,a5,0x8
1c008620:	30078793          	addi	a5,a5,768 # 30300 <__L1Cl+0x20300>
1c008624:	953e                	add	a0,a0,a5
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c008626:	40a42023          	sw	a0,1024(s0)
1c00862a:	46a2                	lw	a3,8(sp)
1c00862c:	016687b3          	add	a5,a3,s6
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c008630:	40f42023          	sw	a5,1024(s0)
        if (!merge) copy->id = id;
1c008634:	c51a                	sw	t1,136(sp)
        copy->length = 0;
1c008636:	cd02                	sw	zero,152(sp)
  __builtin_pulp_spr_write(reg, val);
1c008638:	30081073          	csrw	mstatus,a6
1c00863c:	000d2503          	lw	a0,0(s10)
1c008640:	bda9                	j	1c00849a <S24_Conv2d_64x32x3x3_Relu+0x220>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008642:	30047573          	csrrci	a0,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c008646:	40442783          	lw	a5,1028(s0)
1c00864a:	45a6                	lw	a1,72(sp)
1c00864c:	40b7d7b3          	sra	a5,a5,a1
1c008650:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008654:	c78d                	beqz	a5,1c00867e <S24_Conv2d_64x32x3x3_Relu+0x404>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008656:	10000813          	li	a6,256
  __builtin_pulp_spr_write(reg, val);
1c00865a:	30051073          	csrw	mstatus,a0
1c00865e:	01042423          	sw	a6,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008662:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008666:	01042223          	sw	a6,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00866a:	30047573          	csrrci	a0,mstatus,8
1c00866e:	40442783          	lw	a5,1028(s0)
1c008672:	45a6                	lw	a1,72(sp)
1c008674:	40b7d7b3          	sra	a5,a5,a1
1c008678:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00867c:	fff9                	bnez	a5,1c00865a <S24_Conv2d_64x32x3x3_Relu+0x3e0>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00867e:	4785                	li	a5,1
1c008680:	00b795b3          	sll	a1,a5,a1
1c008684:	40b42223          	sw	a1,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c008688:	30051073          	csrw	mstatus,a0
1c00868c:	00170a93          	addi	s5,a4,1
				if (_SN_In) {
1c008690:	de0302e3          	beqz	t1,1c008474 <S24_Conv2d_64x32x3x3_Relu+0x1fa>
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+320*((D0Ind_Total+1)%2)),
1c008694:	fc1ab833          	p.bclr	a6,s5,30,1
1c008698:	00281793          	slli	a5,a6,0x2
1c00869c:	000d2503          	lw	a0,0(s10)
1c0086a0:	97c2                	add	a5,a5,a6
1c0086a2:	079a                	slli	a5,a5,0x6
1c0086a4:	97aa                	add	a5,a5,a0
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0086a6:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0086aa:	40042803          	lw	a6,1024(s0)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0086ae:	c7034333          	p.bset	t1,t1,3,16
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0086b2:	c1534333          	p.bset	t1,t1,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0086b6:	40642023          	sw	t1,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0086ba:	40f42023          	sw	a5,1024(s0)
1c0086be:	01bb87b3          	add	a5,s7,s11
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0086c2:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0086c6:	00a007b7          	lui	a5,0xa00
1c0086ca:	0a078793          	addi	a5,a5,160 # a000a0 <__L2+0x9800a0>
1c0086ce:	40f42023          	sw	a5,1024(s0)
        if (!merge) copy->id = id;
1c0086d2:	c4c2                	sw	a6,72(sp)
        copy->length = 0;
1c0086d4:	cc82                	sw	zero,88(sp)
  __builtin_pulp_spr_write(reg, val);
1c0086d6:	30051073          	csrw	mstatus,a0
1c0086da:	bb69                	j	1c008474 <S24_Conv2d_64x32x3x3_Relu+0x1fa>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0086dc:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0086e0:	4047a783          	lw	a5,1028(a5)
1c0086e4:	56a6                	lw	a3,104(sp)
1c0086e6:	40d7d7b3          	sra	a5,a5,a3
1c0086ea:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0086ee:	c79d                	beqz	a5,1c00871c <S24_Conv2d_64x32x3x3_Relu+0x4a2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0086f0:	10000593          	li	a1,256
1c0086f4:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0086f8:	30061073          	csrw	mstatus,a2
1c0086fc:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008700:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008704:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008708:	30047673          	csrrci	a2,mstatus,8
1c00870c:	40472783          	lw	a5,1028(a4)
1c008710:	56a6                	lw	a3,104(sp)
1c008712:	40d7d7b3          	sra	a5,a5,a3
1c008716:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00871a:	fff9                	bnez	a5,1c0086f8 <S24_Conv2d_64x32x3x3_Relu+0x47e>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00871c:	4785                	li	a5,1
1c00871e:	00d796b3          	sll	a3,a5,a3
1c008722:	002047b7          	lui	a5,0x204
1c008726:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00872a:	30061073          	csrw	mstatus,a2
1c00872e:	b159                	j	1c0083b4 <S24_Conv2d_64x32x3x3_Relu+0x13a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008730:	30047673          	csrrci	a2,mstatus,8
1c008734:	40442783          	lw	a5,1028(s0)
1c008738:	56aa                	lw	a3,168(sp)
1c00873a:	40d7d7b3          	sra	a5,a5,a3
1c00873e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008742:	c79d                	beqz	a5,1c008770 <S24_Conv2d_64x32x3x3_Relu+0x4f6>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008744:	10000593          	li	a1,256
1c008748:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00874c:	30061073          	csrw	mstatus,a2
1c008750:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008754:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008758:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00875c:	30047673          	csrrci	a2,mstatus,8
1c008760:	40472783          	lw	a5,1028(a4)
1c008764:	56aa                	lw	a3,168(sp)
1c008766:	40d7d7b3          	sra	a5,a5,a3
1c00876a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00876e:	fff9                	bnez	a5,1c00874c <S24_Conv2d_64x32x3x3_Relu+0x4d2>
1c008770:	4785                	li	a5,1
1c008772:	00d796b3          	sll	a3,a5,a3
1c008776:	002047b7          	lui	a5,0x204
1c00877a:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00877e:	30061073          	csrw	mstatus,a2
1c008782:	b3fd                	j	1c008570 <S24_Conv2d_64x32x3x3_Relu+0x2f6>
				_SN_In = 0;
1c008784:	4301                	li	t1,0
				_SN_Filter = 0;
1c008786:	4881                	li	a7,0
1c008788:	b1d9                	j	1c00844e <S24_Conv2d_64x32x3x3_Relu+0x1d4>

1c00878a <S25_MaxPool_2x2>:
void S25_MaxPool_2x2(
		short int * __restrict__ In,
		short int * __restrict__ Out)

{
1c00878a:	7175                	addi	sp,sp,-144
1c00878c:	c326                	sw	s1,132(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D0, [0 x 2560, 2560]][Tile0, 1:[5x4], 2]
		Tile0: [0, 2560, 2560], Tile1: [0, 2560, 2560], Tile2; [0, 2560, 2560]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0);
1c00878e:	100004b7          	lui	s1,0x10000
1c008792:	02048493          	addi	s1,s1,32 # 10000020 <cnn_ssd_L1_Memory>
1c008796:	4090                	lw	a2,0(s1)
	KerArg0->W = (unsigned short int) (10);
	KerArg0->UsedW = (unsigned short int) (10);
	KerArg0->H = (unsigned short int) (8);
	KerArg0->OutFeatures = (unsigned short int) (64);
	KerArg0->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+10240);
1c008798:	668d                	lui	a3,0x3
1c00879a:	80068693          	addi	a3,a3,-2048 # 2800 <__rt_stack_size+0x2000>
1c00879e:	00d607b3          	add	a5,a2,a3
1c0087a2:	ccbe                	sw	a5,88(sp)
	KerArg0->Pad = (v4s) 0;
1c0087a4:	000077d7          	pv.add.sci.b	a5,zero,0
1c0087a8:	cebe                	sw	a5,92(sp)
	KerArg0->Orientation = (unsigned char) (1);
1c0087aa:	4785                	li	a5,1
	KerArg0->W = (unsigned short int) (10);
1c0087ac:	00506757          	pv.add.sci.h	a4,zero,10
	KerArg0->Orientation = (unsigned char) (1);
1c0087b0:	06f11123          	sh	a5,98(sp)
	KerArg0->Oper = (unsigned char) (0);
	KerArg0->LB = (int) (-32768);
1c0087b4:	77e1                	lui	a5,0xffff8
	KerArg0->W = (unsigned short int) (10);
1c0087b6:	c6ba                	sw	a4,76(sp)
	KerArg0->LB = (int) (-32768);
1c0087b8:	d4be                	sw	a5,104(sp)
	KerArg0->H = (unsigned short int) (8);
1c0087ba:	4721                	li	a4,8
	KerArg0->UB = (int) (32767);
1c0087bc:	67a1                	lui	a5,0x8
{
1c0087be:	c14a                	sw	s2,128(sp)
	KerArg0->H = (unsigned short int) (8);
1c0087c0:	04e11823          	sh	a4,80(sp)
	KerArg0->UB = (int) (32767);
1c0087c4:	17fd                	addi	a5,a5,-1
	KerArg0->OutFeatures = (unsigned short int) (64);
1c0087c6:	04000713          	li	a4,64
{
1c0087ca:	892e                	mv	s2,a1
1c0087cc:	c706                	sw	ra,140(sp)
1c0087ce:	c522                	sw	s0,136(sp)
1c0087d0:	dece                	sw	s3,124(sp)
	KerArg0->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0);
1c0087d2:	c4b2                	sw	a2,72(sp)
	KerArg0->OutFeatures = (unsigned short int) (64);
1c0087d4:	04e11a23          	sh	a4,84(sp)
	KerArg0->UB = (int) (32767);
1c0087d8:	d6be                	sw	a5,108(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0087da:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0087de:	002047b7          	lui	a5,0x204
1c0087e2:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c0087e6:	00030737          	lui	a4,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0087ea:	de06a733          	p.insert	a4,a3,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0087ee:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0087f2:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0087f6:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0087fa:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0087fe:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c008802:	c442                	sw	a6,8(sp)
        copy->length = 0;
1c008804:	cc02                	sw	zero,24(sp)
  __builtin_pulp_spr_write(reg, val);
1c008806:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c00880a:	4762                	lw	a4,24(sp)
1c00880c:	10070c63          	beqz	a4,1c008924 <S25_MaxPool_2x2+0x19a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c008810:	5682                	lw	a3,32(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008812:	02000713          	li	a4,32
1c008816:	ca89                	beqz	a3,1c008828 <S25_MaxPool_2x2+0x9e>
1c008818:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00881c:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008820:	00e7a223          	sw	a4,4(a5)
1c008824:	5682                	lw	a3,32(sp)
1c008826:	faed                	bnez	a3,1c008818 <S25_MaxPool_2x2+0x8e>
	{ /* Single iteration on D0 */
		int D0Ind_Last = 1;
		{ /* Single iteration on Tile0 */
			int T0Ind_Last = 1;
			/*====================== Call Kernel LOC_LOOP =========================*/
			KerArg0->UsedH = (unsigned short int) (8);
1c008828:	4721                	li	a4,8
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00882a:	0ff00793          	li	a5,255
1c00882e:	00204437          	lui	s0,0x204
1c008832:	04e11923          	sh	a4,82(sp)
1c008836:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00883a:	20040993          	addi	s3,s0,512
1c00883e:	00f9a023          	sw	a5,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c008842:	00f9a623          	sw	a5,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c008846:	1c00d7b7          	lui	a5,0x1c00d
1c00884a:	73a78793          	addi	a5,a5,1850 # 1c00d73a <KerParPool2x2Stride2_fp>
1c00884e:	08f42023          	sw	a5,128(s0)
1c008852:	00a8                	addi	a0,sp,72
1c008854:	08a42023          	sw	a0,128(s0)
1c008858:	6e3040ef          	jal	ra,1c00d73a <KerParPool2x2Stride2_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00885c:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParPool2x2Stride2_fp, (void *) KerArg0);
			__CALL(KerParPool2x2Stride2_fp, KerArg0);
		} /* End iteration on Tile0 */
	} /* End iteration on D0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+10240), 2560, 1, &DmaW_Evt1);
1c008860:	678d                	lui	a5,0x3
1c008862:	4098                	lw	a4,0(s1)
1c008864:	80078793          	addi	a5,a5,-2048 # 2800 <__rt_stack_size+0x2000>
1c008868:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00886a:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00886e:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c008872:	000217b7          	lui	a5,0x21
1c008876:	a0078793          	addi	a5,a5,-1536 # 20a00 <__L1Cl+0x10a00>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00887a:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00887e:	c157c7b3          	p.bset	a5,a5,0,21
1c008882:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c008886:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00888a:	41242023          	sw	s2,1024(s0)
        if (!merge) copy->id = id;
1c00888e:	d432                	sw	a2,40(sp)
        copy->length = 0;
1c008890:	dc02                	sw	zero,56(sp)
  __builtin_pulp_spr_write(reg, val);
1c008892:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c008896:	57e2                	lw	a5,56(sp)
1c008898:	c795                	beqz	a5,1c0088c4 <S25_MaxPool_2x2+0x13a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00889a:	4686                	lw	a3,64(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00889c:	02000713          	li	a4,32
1c0088a0:	002047b7          	lui	a5,0x204
1c0088a4:	ca89                	beqz	a3,1c0088b6 <S25_MaxPool_2x2+0x12c>
1c0088a6:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0088aa:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0088ae:	00e7a223          	sw	a4,4(a5)
1c0088b2:	4686                	lw	a3,64(sp)
1c0088b4:	faed                	bnez	a3,1c0088a6 <S25_MaxPool_2x2+0x11c>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c0088b6:	40ba                	lw	ra,140(sp)
1c0088b8:	442a                	lw	s0,136(sp)
1c0088ba:	449a                	lw	s1,132(sp)
1c0088bc:	490a                	lw	s2,128(sp)
1c0088be:	59f6                	lw	s3,124(sp)
1c0088c0:	6149                	addi	sp,sp,144
1c0088c2:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0088c4:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0088c8:	40442403          	lw	s0,1028(s0)
1c0088cc:	56a2                	lw	a3,40(sp)
1c0088ce:	40d45433          	sra	s0,s0,a3
1c0088d2:	fc143433          	p.bclr	s0,s0,30,1
1c0088d6:	c41d                	beqz	s0,1c008904 <S25_MaxPool_2x2+0x17a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0088d8:	10000593          	li	a1,256
1c0088dc:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0088e0:	30061073          	csrw	mstatus,a2
1c0088e4:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0088e8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0088ec:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0088f0:	30047673          	csrrci	a2,mstatus,8
1c0088f4:	40472783          	lw	a5,1028(a4)
1c0088f8:	56a2                	lw	a3,40(sp)
1c0088fa:	40d7d7b3          	sra	a5,a5,a3
1c0088fe:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008902:	fff9                	bnez	a5,1c0088e0 <S25_MaxPool_2x2+0x156>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c008904:	4785                	li	a5,1
1c008906:	00d796b3          	sll	a3,a5,a3
1c00890a:	002047b7          	lui	a5,0x204
1c00890e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c008912:	30061073          	csrw	mstatus,a2
1c008916:	40ba                	lw	ra,140(sp)
1c008918:	442a                	lw	s0,136(sp)
1c00891a:	449a                	lw	s1,132(sp)
1c00891c:	490a                	lw	s2,128(sp)
1c00891e:	59f6                	lw	s3,124(sp)
1c008920:	6149                	addi	sp,sp,144
1c008922:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008924:	30047673          	csrrci	a2,mstatus,8
1c008928:	4047a783          	lw	a5,1028(a5)
1c00892c:	46a2                	lw	a3,8(sp)
1c00892e:	40d7d7b3          	sra	a5,a5,a3
1c008932:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008936:	c79d                	beqz	a5,1c008964 <S25_MaxPool_2x2+0x1da>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008938:	10000513          	li	a0,256
1c00893c:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c008940:	30061073          	csrw	mstatus,a2
1c008944:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008948:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00894c:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008950:	30047673          	csrrci	a2,mstatus,8
1c008954:	40472783          	lw	a5,1028(a4)
1c008958:	46a2                	lw	a3,8(sp)
1c00895a:	40d7d7b3          	sra	a5,a5,a3
1c00895e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008962:	fff9                	bnez	a5,1c008940 <S25_MaxPool_2x2+0x1b6>
1c008964:	4785                	li	a5,1
1c008966:	00d796b3          	sll	a3,a5,a3
1c00896a:	002047b7          	lui	a5,0x204
1c00896e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c008972:	30061073          	csrw	mstatus,a2
1c008976:	bd4d                	j	1c008828 <S25_MaxPool_2x2+0x9e>

1c008978 <S28_Conv2d_18x64x3x3>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c008978:	7125                	addi	sp,sp,-416
1c00897a:	19412423          	sw	s4,392(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[10x8], 2][D0, [0 x 10240, 10240]]
		Tile0: [0, 10240, 10240], Tile1: [0, 10240, 10240], Tile2; [0, 10240, 10240]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+33892);
1c00897e:	10000a37          	lui	s4,0x10000
1c008982:	020a0a13          	addi	s4,s4,32 # 10000020 <cnn_ssd_L1_Memory>
1c008986:	000a2883          	lw	a7,0(s4)
	KerArg0->W = (unsigned short int) (10);
1c00898a:	1c0147b7          	lui	a5,0x1c014
1c00898e:	5a07af83          	lw	t6,1440(a5) # 1c0145a0 <IntegerExpLUT+0x58>
	KerArg0->H = (unsigned short int) (8);
	KerArg0->OutFeatures = (unsigned short int) (18);
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+10240);
1c008992:	678d                	lui	a5,0x3
{
1c008994:	19212823          	sw	s2,400(sp)
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+10240);
1c008998:	80078313          	addi	t1,a5,-2048 # 2800 <__rt_stack_size+0x2000>
{
1c00899c:	8936                	mv	s2,a3
	KerArg1->W = (unsigned short int) (10);
	KerArg1->UsedW = (unsigned short int) (10);
	KerArg1->H = (unsigned short int) (8);
	KerArg1->InFeatures = (unsigned short int) (64);
	KerArg1->OutFeatures = (unsigned short int) (18);
	KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+10276);
1c00899e:	82478793          	addi	a5,a5,-2012
	KerArg0->NormBias = (signed char) (12);
1c0089a2:	46b1                	li	a3,12
	KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+10276);
1c0089a4:	97c6                	add	a5,a5,a7
	KerArg0->NormBias = (signed char) (12);
1c0089a6:	00d10b23          	sb	a3,22(sp)
	KerArg1->W = (unsigned short int) (10);
1c0089aa:	005066d7          	pv.add.sci.h	a3,zero,10
	KerArg1->InFeatures = (unsigned short int) (64);
1c0089ae:	1c0142b7          	lui	t0,0x1c014
	KerArg1->W = (unsigned short int) (10);
1c0089b2:	df36                	sw	a3,188(sp)
	KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+10276);
1c0089b4:	c7be                	sw	a5,204(sp)
	KerArg1->H = (unsigned short int) (8);
1c0089b6:	46a1                	li	a3,8
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+33892);
	KerArg1->Norm = (unsigned char) (16);
	KerArg1->TotalInFeatures = (short int) (64);
1c0089b8:	04000793          	li	a5,64
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+33892);
1c0089bc:	6721                	lui	a4,0x8
	KerArg1->H = (unsigned short int) (8);
1c0089be:	0cd11023          	sh	a3,192(sp)
	KerArg1->TotalInFeatures = (short int) (64);
1c0089c2:	0cf11423          	sh	a5,200(sp)
	KerArg1->InFeatures = (unsigned short int) (64);
1c0089c6:	5a82a683          	lw	a3,1448(t0) # 1c0145a8 <IntegerExpLUT+0x60>
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c0089ca:	020077d7          	pv.add.sci.b	a5,zero,1
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+33892);
1c0089ce:	46470813          	addi	a6,a4,1124 # 8464 <__rt_stack_size+0x7c64>
	KerArg1->Orientation = (unsigned char) (1);
	KerArg2->In = (int * __restrict__) (cnn_ssd_L1_Memory+33892);
	KerArg2->W = (unsigned short int) (10);
	KerArg2->H = (unsigned short int) (8);
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+31012);
1c0089d2:	92470e13          	addi	t3,a4,-1756
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c0089d6:	cbbe                	sw	a5,212(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c0089d8:	4785                	li	a5,1
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+33892);
1c0089da:	9846                	add	a6,a6,a7
	KerArg0->OutFeatures = (unsigned short int) (18);
1c0089dc:	4ec9                	li	t4,18
	KerArg1->Norm = (unsigned char) (16);
1c0089de:	4f41                	li	t5,16
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+10240);
1c0089e0:	9346                	add	t1,t1,a7
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+31012);
1c0089e2:	9e46                	add	t3,t3,a7
	KerArg2->Norm = (unsigned char) (16);
	KerArg2->InFeatures = (unsigned short int) (18);
	KerArg2->LB = (int) (-32768);
	KerArg2->UB = (int) (32767);
1c0089e4:	177d                	addi	a4,a4,-1
	KerArg1->Orientation = (unsigned char) (1);
1c0089e6:	0cf10da3          	sb	a5,219(sp)
	KerArg2->LB = (int) (-32768);
1c0089ea:	77e1                	lui	a5,0xffff8
{
1c0089ec:	18112e23          	sw	ra,412(sp)
1c0089f0:	18812c23          	sw	s0,408(sp)
1c0089f4:	18912a23          	sw	s1,404(sp)
1c0089f8:	19312623          	sw	s3,396(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+33892);
1c0089fc:	c642                	sw	a6,12(sp)
	KerArg0->W = (unsigned short int) (10);
1c0089fe:	c87e                	sw	t6,16(sp)
	KerArg0->OutFeatures = (unsigned short int) (18);
1c008a00:	01d11a23          	sh	t4,20(sp)
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+10240);
1c008a04:	cc1a                	sw	t1,24(sp)
	KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0);
1c008a06:	dd46                	sw	a7,184(sp)
	KerArg1->InFeatures = (unsigned short int) (64);
1c008a08:	c3b6                	sw	a3,196(sp)
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+33892);
1c008a0a:	c9c2                	sw	a6,208(sp)
	KerArg1->Norm = (unsigned char) (16);
1c008a0c:	0de10c23          	sb	t5,216(sp)
	KerArg2->In = (int * __restrict__) (cnn_ssd_L1_Memory+33892);
1c008a10:	ce42                	sw	a6,28(sp)
	KerArg2->W = (unsigned short int) (10);
1c008a12:	d07e                	sw	t6,32(sp)
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+31012);
1c008a14:	d272                	sw	t3,36(sp)
	KerArg2->Norm = (unsigned char) (16);
1c008a16:	03e10423          	sb	t5,40(sp)
	KerArg2->InFeatures = (unsigned short int) (18);
1c008a1a:	03d11523          	sh	t4,42(sp)
	KerArg2->LB = (int) (-32768);
1c008a1e:	d63e                	sw	a5,44(sp)
	KerArg2->UB = (int) (32767);
1c008a20:	d83a                	sw	a4,48(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008a22:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c008a26:	002047b7          	lui	a5,0x204
1c008a2a:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c008a2e:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c008a32:	02470713          	addi	a4,a4,36 # b0024 <__L2+0x30024>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c008a36:	c1574733          	p.bset	a4,a4,0,21
1c008a3a:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c008a3e:	4067a023          	sw	t1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c008a42:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c008a46:	dc42                	sw	a6,56(sp)
        copy->length = 0;
1c008a48:	c482                	sw	zero,72(sp)
  __builtin_pulp_spr_write(reg, val);
1c008a4a:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c008a4e:	4726                	lw	a4,72(sp)
1c008a50:	30070b63          	beqz	a4,1c008d66 <S28_Conv2d_18x64x3x3+0x3ee>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c008a54:	46c6                	lw	a3,80(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008a56:	02000713          	li	a4,32
1c008a5a:	ca89                	beqz	a3,1c008a6c <S28_Conv2d_18x64x3x3+0xf4>
1c008a5c:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008a60:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008a64:	00e7a223          	sw	a4,4(a5)
1c008a68:	46c6                	lw	a3,80(sp)
1c008a6a:	faed                	bnez	a3,1c008a5c <S28_Conv2d_18x64x3x3+0xe4>
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+10240), 36, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+10276), 20736, 0, &DmaR_Evt2);
1c008a6c:	000a2683          	lw	a3,0(s4)
1c008a70:	678d                	lui	a5,0x3
1c008a72:	82478793          	addi	a5,a5,-2012 # 2824 <__rt_stack_size+0x2024>
1c008a76:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008a78:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c008a7c:	002047b7          	lui	a5,0x204
1c008a80:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c008a84:	00035737          	lui	a4,0x35
1c008a88:	10070713          	addi	a4,a4,256 # 35100 <__L1Cl+0x25100>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c008a8c:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c008a90:	c1574733          	p.bset	a4,a4,0,21
1c008a94:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c008a98:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c008a9c:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c008aa0:	ccc2                	sw	a6,88(sp)
        copy->length = 0;
1c008aa2:	d482                	sw	zero,104(sp)
  __builtin_pulp_spr_write(reg, val);
1c008aa4:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c008aa8:	5726                	lw	a4,104(sp)
1c008aaa:	26070463          	beqz	a4,1c008d12 <S28_Conv2d_18x64x3x3+0x39a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c008aae:	56c6                	lw	a3,112(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008ab0:	02000713          	li	a4,32
1c008ab4:	ca89                	beqz	a3,1c008ac6 <S28_Conv2d_18x64x3x3+0x14e>
1c008ab6:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008aba:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008abe:	00e7a223          	sw	a4,4(a5)
1c008ac2:	56c6                	lw	a3,112(sp)
1c008ac4:	faed                	bnez	a3,1c008ab6 <S28_Conv2d_18x64x3x3+0x13e>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Filter */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0), 10240, 0, &DmaR_Evt3);
1c008ac6:	000a2583          	lw	a1,0(s4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008aca:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c008ace:	002047b7          	lui	a5,0x204
1c008ad2:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c008ad6:	00033737          	lui	a4,0x33
1c008ada:	80070713          	addi	a4,a4,-2048 # 32800 <__L1Cl+0x22800>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c008ade:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c008ae2:	c1574733          	p.bset	a4,a4,0,21
1c008ae6:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c008aea:	40b7a023          	sw	a1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c008aee:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c008af2:	dcb2                	sw	a2,120(sp)
        copy->length = 0;
1c008af4:	c502                	sw	zero,136(sp)
  __builtin_pulp_spr_write(reg, val);
1c008af6:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c008afa:	472a                	lw	a4,136(sp)
1c008afc:	1c070163          	beqz	a4,1c008cbe <S28_Conv2d_18x64x3x3+0x346>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c008b00:	46ca                	lw	a3,144(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008b02:	02000713          	li	a4,32
1c008b06:	ca89                	beqz	a3,1c008b18 <S28_Conv2d_18x64x3x3+0x1a0>
1c008b08:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008b0c:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008b10:	00e7a223          	sw	a4,4(a5)
1c008b14:	46ca                	lw	a3,144(sp)
1c008b16:	faed                	bnez	a3,1c008b08 <S28_Conv2d_18x64x3x3+0x190>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c008b18:	0ff00993          	li	s3,255
1c008b1c:	00204437          	lui	s0,0x204
1c008b20:	09342223          	sw	s3,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c008b24:	20040493          	addi	s1,s0,512
1c008b28:	0134a023          	sw	s3,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c008b2c:	0134a623          	sw	s3,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c008b30:	1c00d7b7          	lui	a5,0x1c00d
1c008b34:	92a78793          	addi	a5,a5,-1750 # 1c00c92a <KerParSetBias_DP_fp>
1c008b38:	08f42023          	sw	a5,128(s0)
1c008b3c:	0068                	addi	a0,sp,12
1c008b3e:	08a42023          	sw	a0,128(s0)
1c008b42:	5e9030ef          	jal	ra,1c00c92a <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008b46:	01c4e783          	p.elw	a5,28(s1)
			AT_FORK(gap_ncore(), (void *) KerParSetBias_DP_fp, (void *) KerArg0);
			__CALL(KerParSetBias_DP_fp, KerArg0);
			{ /* Single iteration on D0 */
				int D0Ind_Last = 1;
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->UsedH = (unsigned short int) (8);
1c008b4a:	47a1                	li	a5,8
1c008b4c:	0cf11123          	sh	a5,194(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c008b50:	09342223          	sw	s3,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c008b54:	0134a023          	sw	s3,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c008b58:	0134a623          	sw	s3,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c008b5c:	1c00d7b7          	lui	a5,0x1c00d
1c008b60:	f4278793          	addi	a5,a5,-190 # 1c00cf42 <KerParConv3x3Stride1_DP_fp>
1c008b64:	08f42023          	sw	a5,128(s0)
1c008b68:	1928                	addi	a0,sp,184
1c008b6a:	08a42023          	sw	a0,128(s0)
1c008b6e:	3d4040ef          	jal	ra,1c00cf42 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008b72:	01c4e783          	p.elw	a5,28(s1)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c008b76:	09342223          	sw	s3,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c008b7a:	0134a023          	sw	s3,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c008b7e:	0134a623          	sw	s3,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c008b82:	1c00d7b7          	lui	a5,0x1c00d
1c008b86:	9de78793          	addi	a5,a5,-1570 # 1c00c9de <KerDP_fp>
1c008b8a:	08f42023          	sw	a5,128(s0)
1c008b8e:	0868                	addi	a0,sp,28
1c008b90:	08a42023          	sw	a0,128(s0)
1c008b94:	64b030ef          	jal	ra,1c00c9de <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008b98:	01c4e783          	p.elw	a5,28(s1)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) cnn_ssd_L2_Memory+58864+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+31012), 2880, 1, &DmaW_Evt1);
1c008b9c:	1c015537          	lui	a0,0x1c015
1c008ba0:	a8050513          	addi	a0,a0,-1408 # 1c014a80 <cnn_ssd_L2_Memory>
1c008ba4:	4118                	lw	a4,0(a0)
1c008ba6:	67b9                	lui	a5,0xe
1c008ba8:	000a2683          	lw	a3,0(s4)
1c008bac:	5f078793          	addi	a5,a5,1520 # e5f0 <__rt_stack_size+0xddf0>
1c008bb0:	973e                	add	a4,a4,a5
1c008bb2:	67a1                	lui	a5,0x8
1c008bb4:	92478793          	addi	a5,a5,-1756 # 7924 <__rt_stack_size+0x7124>
1c008bb8:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008bba:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c008bbe:	40042583          	lw	a1,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c008bc2:	000217b7          	lui	a5,0x21
1c008bc6:	b4078793          	addi	a5,a5,-1216 # 20b40 <__L1Cl+0x10b40>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c008bca:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c008bce:	c157c7b3          	p.bset	a5,a5,0,21
1c008bd2:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c008bd6:	40d42023          	sw	a3,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c008bda:	40e42023          	sw	a4,1024(s0)
        if (!merge) copy->id = id;
1c008bde:	cd2e                	sw	a1,152(sp)
        copy->length = 0;
1c008be0:	d502                	sw	zero,168(sp)
  __builtin_pulp_spr_write(reg, val);
1c008be2:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c008be6:	57aa                	lw	a5,168(sp)
1c008be8:	c3c9                	beqz	a5,1c008c6a <S28_Conv2d_18x64x3x3+0x2f2>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c008bea:	56ca                	lw	a3,176(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008bec:	02000713          	li	a4,32
1c008bf0:	002047b7          	lui	a5,0x204
1c008bf4:	ca89                	beqz	a3,1c008c06 <S28_Conv2d_18x64x3x3+0x28e>
1c008bf6:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008bfa:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008bfe:	00e7a223          	sw	a4,4(a5)
1c008c02:	56ca                	lw	a3,176(sp)
1c008c04:	faed                	bnez	a3,1c008bf6 <S28_Conv2d_18x64x3x3+0x27e>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+0), ((AT_HYPERRAM_INT_ADDR_TYPE) cnn_ssd_L2_Memory+58864+0), 2880, 1, &UchanHR1);
1c008c06:	410c                	lw	a1,0(a0)
1c008c08:	6639                	lui	a2,0xe
1c008c0a:	6685                	lui	a3,0x1
1c008c0c:	5f060613          	addi	a2,a2,1520 # e5f0 <__rt_stack_size+0xddf0>
1c008c10:	1c015537          	lui	a0,0x1c015
1c008c14:	119c                	addi	a5,sp,224
1c008c16:	962e                	add	a2,a2,a1
1c008c18:	4701                	li	a4,0
1c008c1a:	b4068693          	addi	a3,a3,-1216 # b40 <__rt_stack_size+0x340>
1c008c1e:	85ca                	mv	a1,s2
1c008c20:	fb050513          	addi	a0,a0,-80 # 1c014fb0 <HyperRam>
1c008c24:	320060ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c008c28:	17c14783          	lbu	a5,380(sp)
1c008c2c:	0ff7f793          	andi	a5,a5,255
1c008c30:	ef99                	bnez	a5,1c008c4e <S28_Conv2d_18x64x3x3+0x2d6>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008c32:	4689                	li	a3,2
1c008c34:	00204737          	lui	a4,0x204
1c008c38:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008c3c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008c40:	00d72223          	sw	a3,4(a4)
1c008c44:	17c14783          	lbu	a5,380(sp)
1c008c48:	0ff7f793          	andi	a5,a5,255
1c008c4c:	d7f5                	beqz	a5,1c008c38 <S28_Conv2d_18x64x3x3+0x2c0>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c008c4e:	19c12083          	lw	ra,412(sp)
1c008c52:	19812403          	lw	s0,408(sp)
1c008c56:	19412483          	lw	s1,404(sp)
1c008c5a:	19012903          	lw	s2,400(sp)
1c008c5e:	18c12983          	lw	s3,396(sp)
1c008c62:	18812a03          	lw	s4,392(sp)
1c008c66:	611d                	addi	sp,sp,416
1c008c68:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008c6a:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c008c6e:	40442403          	lw	s0,1028(s0)
1c008c72:	46ea                	lw	a3,152(sp)
1c008c74:	40d45433          	sra	s0,s0,a3
1c008c78:	fc143433          	p.bclr	s0,s0,30,1
1c008c7c:	c41d                	beqz	s0,1c008caa <S28_Conv2d_18x64x3x3+0x332>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008c7e:	10000593          	li	a1,256
1c008c82:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c008c86:	30061073          	csrw	mstatus,a2
1c008c8a:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008c8e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008c92:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008c96:	30047673          	csrrci	a2,mstatus,8
1c008c9a:	40472783          	lw	a5,1028(a4)
1c008c9e:	46ea                	lw	a3,152(sp)
1c008ca0:	40d7d7b3          	sra	a5,a5,a3
1c008ca4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008ca8:	fff9                	bnez	a5,1c008c86 <S28_Conv2d_18x64x3x3+0x30e>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c008caa:	4785                	li	a5,1
1c008cac:	00d796b3          	sll	a3,a5,a3
1c008cb0:	002047b7          	lui	a5,0x204
1c008cb4:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c008cb8:	30061073          	csrw	mstatus,a2
1c008cbc:	b7a9                	j	1c008c06 <S28_Conv2d_18x64x3x3+0x28e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008cbe:	30047673          	csrrci	a2,mstatus,8
1c008cc2:	4047a783          	lw	a5,1028(a5)
1c008cc6:	56e6                	lw	a3,120(sp)
1c008cc8:	40d7d7b3          	sra	a5,a5,a3
1c008ccc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008cd0:	c79d                	beqz	a5,1c008cfe <S28_Conv2d_18x64x3x3+0x386>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008cd2:	10000593          	li	a1,256
1c008cd6:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c008cda:	30061073          	csrw	mstatus,a2
1c008cde:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008ce2:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008ce6:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008cea:	30047673          	csrrci	a2,mstatus,8
1c008cee:	40472783          	lw	a5,1028(a4)
1c008cf2:	56e6                	lw	a3,120(sp)
1c008cf4:	40d7d7b3          	sra	a5,a5,a3
1c008cf8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008cfc:	fff9                	bnez	a5,1c008cda <S28_Conv2d_18x64x3x3+0x362>
1c008cfe:	4785                	li	a5,1
1c008d00:	00d796b3          	sll	a3,a5,a3
1c008d04:	002047b7          	lui	a5,0x204
1c008d08:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c008d0c:	30061073          	csrw	mstatus,a2
1c008d10:	b521                	j	1c008b18 <S28_Conv2d_18x64x3x3+0x1a0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008d12:	30047673          	csrrci	a2,mstatus,8
1c008d16:	4047a783          	lw	a5,1028(a5)
1c008d1a:	46e6                	lw	a3,88(sp)
1c008d1c:	40d7d7b3          	sra	a5,a5,a3
1c008d20:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008d24:	c79d                	beqz	a5,1c008d52 <S28_Conv2d_18x64x3x3+0x3da>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008d26:	10000593          	li	a1,256
1c008d2a:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c008d2e:	30061073          	csrw	mstatus,a2
1c008d32:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008d36:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008d3a:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008d3e:	30047673          	csrrci	a2,mstatus,8
1c008d42:	40472783          	lw	a5,1028(a4)
1c008d46:	46e6                	lw	a3,88(sp)
1c008d48:	40d7d7b3          	sra	a5,a5,a3
1c008d4c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008d50:	fff9                	bnez	a5,1c008d2e <S28_Conv2d_18x64x3x3+0x3b6>
1c008d52:	4785                	li	a5,1
1c008d54:	00d796b3          	sll	a3,a5,a3
1c008d58:	002047b7          	lui	a5,0x204
1c008d5c:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c008d60:	30061073          	csrw	mstatus,a2
1c008d64:	b38d                	j	1c008ac6 <S28_Conv2d_18x64x3x3+0x14e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008d66:	30047673          	csrrci	a2,mstatus,8
1c008d6a:	4047a783          	lw	a5,1028(a5)
1c008d6e:	56e2                	lw	a3,56(sp)
1c008d70:	40d7d7b3          	sra	a5,a5,a3
1c008d74:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008d78:	c79d                	beqz	a5,1c008da6 <S28_Conv2d_18x64x3x3+0x42e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008d7a:	10000813          	li	a6,256
1c008d7e:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c008d82:	30061073          	csrw	mstatus,a2
1c008d86:	01072423          	sw	a6,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008d8a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008d8e:	01072223          	sw	a6,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008d92:	30047673          	csrrci	a2,mstatus,8
1c008d96:	40472783          	lw	a5,1028(a4)
1c008d9a:	56e2                	lw	a3,56(sp)
1c008d9c:	40d7d7b3          	sra	a5,a5,a3
1c008da0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008da4:	fff9                	bnez	a5,1c008d82 <S28_Conv2d_18x64x3x3+0x40a>
1c008da6:	4785                	li	a5,1
1c008da8:	00d796b3          	sll	a3,a5,a3
1c008dac:	002047b7          	lui	a5,0x204
1c008db0:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c008db4:	30061073          	csrw	mstatus,a2
1c008db8:	b955                	j	1c008a6c <S28_Conv2d_18x64x3x3+0xf4>

1c008dba <S32_Conv2d_24x64x3x3>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c008dba:	7145                	addi	sp,sp,-464
1c008dbc:	1b812423          	sw	s8,424(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D1, [0 x 7680, 7680]][Tile0, 1:[10x8], 4]
		Tile0: [0, 7680, 320], Tile1: [0, 7680, 320], Tile2; [0, 7680, 320]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+34672);
1c008dc0:	10000c37          	lui	s8,0x10000
1c008dc4:	020c0c13          	addi	s8,s8,32 # 10000020 <cnn_ssd_L1_Memory>
1c008dc8:	000c2883          	lw	a7,0(s8)
{
1c008dcc:	c636                	sw	a3,12(sp)
	KerArg0->W = (unsigned short int) (10);
1c008dce:	1c014737          	lui	a4,0x1c014
	KerArg0->H = (unsigned short int) (8);
	KerArg0->OutFeatures = (unsigned short int) (24);
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+8320);
	KerArg0->NormBias = (signed char) (13);
1c008dd2:	46b5                	li	a3,13
	KerArg0->W = (unsigned short int) (10);
1c008dd4:	5a072f03          	lw	t5,1440(a4) # 1c0145a0 <IntegerExpLUT+0x58>
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+34672);
1c008dd8:	67a1                	lui	a5,0x8
	KerArg0->NormBias = (signed char) (13);
1c008dda:	02d10323          	sb	a3,38(sp)
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+8320);
1c008dde:	6809                	lui	a6,0x2
	KerArg1->W = (unsigned short int) (10);
1c008de0:	005066d7          	pv.add.sci.h	a3,zero,10
1c008de4:	c7b6                	sw	a3,204(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+34672);
1c008de6:	77078713          	addi	a4,a5,1904 # 8770 <__rt_stack_size+0x7f70>
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+8320);
1c008dea:	08080813          	addi	a6,a6,128 # 2080 <__rt_stack_size+0x1880>
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
	KerArg1->Orientation = (unsigned char) (1);
	KerArg2->In = (int * __restrict__) (cnn_ssd_L1_Memory+34672);
	KerArg2->W = (unsigned short int) (10);
	KerArg2->H = (unsigned short int) (8);
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+30832);
1c008dee:	87078e13          	addi	t3,a5,-1936
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c008df2:	020076d7          	pv.add.sci.b	a3,zero,1
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+34672);
1c008df6:	9746                	add	a4,a4,a7
	KerArg0->OutFeatures = (unsigned short int) (24);
1c008df8:	4361                	li	t1,24
	KerArg1->Norm = (unsigned char) (16);
1c008dfa:	4ec1                	li	t4,16
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c008dfc:	d3b6                	sw	a3,228(sp)
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+8320);
1c008dfe:	01088fb3          	add	t6,a7,a6
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+30832);
1c008e02:	9e46                	add	t3,t3,a7
	KerArg1->Orientation = (unsigned char) (1);
1c008e04:	4685                	li	a3,1
{
1c008e06:	1b512a23          	sw	s5,436(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+34672);
1c008e0a:	ce3a                	sw	a4,28(sp)
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+34672);
1c008e0c:	d1ba                	sw	a4,224(sp)
	KerArg2->In = (int * __restrict__) (cnn_ssd_L1_Memory+34672);
1c008e0e:	d63a                	sw	a4,44(sp)
{
1c008e10:	1c112623          	sw	ra,460(sp)
1c008e14:	1c812423          	sw	s0,456(sp)
1c008e18:	1c912223          	sw	s1,452(sp)
1c008e1c:	1d212023          	sw	s2,448(sp)
1c008e20:	1b312e23          	sw	s3,444(sp)
1c008e24:	1b412c23          	sw	s4,440(sp)
1c008e28:	1b612823          	sw	s6,432(sp)
1c008e2c:	1b712623          	sw	s7,428(sp)
1c008e30:	1b912223          	sw	s9,420(sp)
1c008e34:	1ba12023          	sw	s10,416(sp)
1c008e38:	19b12e23          	sw	s11,412(sp)
	KerArg2->Norm = (unsigned char) (16);
	KerArg2->InFeatures = (unsigned short int) (24);
	KerArg2->LB = (int) (-32768);
	KerArg2->UB = (int) (32767);
1c008e3c:	17fd                	addi	a5,a5,-1
{
1c008e3e:	c42e                	sw	a1,8(sp)
	KerArg0->W = (unsigned short int) (10);
1c008e40:	d07a                	sw	t5,32(sp)
	KerArg0->OutFeatures = (unsigned short int) (24);
1c008e42:	02611223          	sh	t1,36(sp)
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+8320);
1c008e46:	d47e                	sw	t6,40(sp)
	KerArg1->OutFeatures = (unsigned short int) (24);
1c008e48:	0c611b23          	sh	t1,214(sp)
	KerArg1->Norm = (unsigned char) (16);
1c008e4c:	0fd10423          	sb	t4,232(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c008e50:	0ed105a3          	sb	a3,235(sp)
	KerArg2->W = (unsigned short int) (10);
1c008e54:	d87a                	sw	t5,48(sp)
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+30832);
1c008e56:	da72                	sw	t3,52(sp)
	KerArg2->Norm = (unsigned char) (16);
1c008e58:	03d10c23          	sb	t4,56(sp)
	KerArg2->LB = (int) (-32768);
1c008e5c:	7761                	lui	a4,0xffff8
{
1c008e5e:	8aaa                	mv	s5,a0
	KerArg2->InFeatures = (unsigned short int) (24);
1c008e60:	02611d23          	sh	t1,58(sp)
	KerArg2->LB = (int) (-32768);
1c008e64:	de3a                	sw	a4,60(sp)
	KerArg2->UB = (int) (32767);
1c008e66:	c0be                	sw	a5,64(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008e68:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c008e6c:	002047b7          	lui	a5,0x204
1c008e70:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c008e74:	00071737          	lui	a4,0x71
1c008e78:	04070713          	addi	a4,a4,64 # 71040 <__L1Cl+0x61040>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c008e7c:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c008e80:	c1574733          	p.bset	a4,a4,0,21
1c008e84:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c008e88:	4117a023          	sw	a7,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c008e8c:	40a7a023          	sw	a0,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c008e90:	00a00737          	lui	a4,0xa00
1c008e94:	0a070713          	addi	a4,a4,160 # a000a0 <__L2+0x9800a0>
1c008e98:	40e7a023          	sw	a4,1024(a5)
        if (!merge) copy->id = id;
1c008e9c:	c4ae                	sw	a1,72(sp)
        copy->length = 0;
1c008e9e:	cc82                	sw	zero,88(sp)
  __builtin_pulp_spr_write(reg, val);
1c008ea0:	30069073          	csrw	mstatus,a3
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+0), 4160, 160, 160, 0, &DmaR_Evt1);
	_N_In=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+8320), 48, 0, &DmaR_Evt2);
1c008ea4:	000c2703          	lw	a4,0(s8)
1c008ea8:	983a                	add	a6,a6,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008eaa:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c008eae:	4007a583          	lw	a1,1024(a5)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c008eb2:	00030737          	lui	a4,0x30
1c008eb6:	c2474733          	p.bset	a4,a4,1,4
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c008eba:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c008ebe:	c1574733          	p.bset	a4,a4,0,21
1c008ec2:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c008ec6:	4107a023          	sw	a6,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c008eca:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c008ece:	d4ae                	sw	a1,104(sp)
        copy->length = 0;
1c008ed0:	dc82                	sw	zero,120(sp)
  __builtin_pulp_spr_write(reg, val);
1c008ed2:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c008ed6:	5766                	lw	a4,120(sp)
1c008ed8:	46070763          	beqz	a4,1c009346 <S32_Conv2d_24x64x3x3+0x58c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c008edc:	468a                	lw	a3,128(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008ede:	02000713          	li	a4,32
1c008ee2:	ca89                	beqz	a3,1c008ef4 <S32_Conv2d_24x64x3x3+0x13a>
1c008ee4:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008ee8:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008eec:	00e7a223          	sw	a4,4(a5)
1c008ef0:	468a                	lw	a3,128(sp)
1c008ef2:	faed                	bnez	a3,1c008ee4 <S32_Conv2d_24x64x3x3+0x12a>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+8368+0), 11232, 0, &DmaR_Evt3);
1c008ef4:	000c2683          	lw	a3,0(s8)
1c008ef8:	6789                	lui	a5,0x2
1c008efa:	0b078793          	addi	a5,a5,176 # 20b0 <__rt_stack_size+0x18b0>
1c008efe:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008f00:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c008f04:	002047b7          	lui	a5,0x204
1c008f08:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c008f0c:	640d                	lui	s0,0x3
1c008f0e:	be040413          	addi	s0,s0,-1056 # 2be0 <__rt_stack_size+0x23e0>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c008f12:	00030737          	lui	a4,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c008f16:	de042733          	p.insert	a4,s0,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c008f1a:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c008f1e:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c008f22:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c008f26:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c008f2a:	4722                	lw	a4,8(sp)
1c008f2c:	40e7a023          	sw	a4,1024(a5)
        if (!merge) copy->id = id;
1c008f30:	c52e                	sw	a1,136(sp)
        copy->length = 0;
1c008f32:	cd02                	sw	zero,152(sp)
  __builtin_pulp_spr_write(reg, val);
1c008f34:	30061073          	csrw	mstatus,a2
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c008f38:	0ff00713          	li	a4,255
1c008f3c:	08e7a223          	sw	a4,132(a5)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c008f40:	20078493          	addi	s1,a5,512
1c008f44:	00e4a023          	sw	a4,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c008f48:	00e4a623          	sw	a4,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c008f4c:	1c00d737          	lui	a4,0x1c00d
1c008f50:	92a70713          	addi	a4,a4,-1750 # 1c00c92a <KerParSetBias_DP_fp>
1c008f54:	08e7a023          	sw	a4,128(a5)
1c008f58:	0868                	addi	a0,sp,28
1c008f5a:	08a7a023          	sw	a0,128(a5)
1c008f5e:	1cd030ef          	jal	ra,1c00c92a <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008f62:	01c4e783          	p.elw	a5,28(s1)
			for (D0Ind=0; D0Ind<3; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
				int D0Ind_Last = (D0Ind==2), D0Ind_NextLast = ((D0Ind+1)==2);
				/*================================= Prepare Tiles ===================================*/
				_SN_In = 0;
				if (!(D0Ind_Last)) {
					_N_In = _N_In + (4160); _LN_In = (160); _SN_In = (((D0Ind_NextLast)?12:26)*_LN_In); 
1c008f66:	6905                	lui	s2,0x1
1c008f68:	1c00d4b7          	lui	s1,0x1c00d
	_N_Filter=0;
1c008f6c:	4a01                	li	s4,0
	_N_In=0;
1c008f6e:	4d81                	li	s11,0
			for (D0Ind=0; D0Ind<3; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c008f70:	4b81                	li	s7,0
1c008f72:	f4248493          	addi	s1,s1,-190 # 1c00cf42 <KerParConv3x3Stride1_DP_fp>
1c008f76:	0c810c93          	addi	s9,sp,200
					_N_In = _N_In + (4160); _LN_In = (160); _SN_In = (((D0Ind_NextLast)?12:26)*_LN_In); 
1c008f7a:	04090b13          	addi	s6,s2,64 # 1040 <__rt_stack_size+0x840>
				} else if (!(1)) {
					_N_In = _N_In + (-8320); _LN_In = (160); _SN_In = (26*_LN_In); 
				}
				_SN_Filter = 0;
				if (!(D0Ind_Last)) {
					_N_Filter = _N_Filter + ((11232)); _SN_Filter = (((1)?(((D0Ind_NextLast)?5184:11232)):(((D0Ind_NextLast)?5184:11232)))); 
1c008f7e:	8d22                	mv	s10,s0
							_SN_Filter, 0, &DmaR_Evt3);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+4160*((D0Ind_Total)%2));
				KerArg1->H = (unsigned short int) (10-1*(1)-1*(1));
1c008f80:	004069d7          	pv.add.sci.h	s3,zero,8
				if (!(D0Ind_Last)) {
1c008f84:	422ba563          	p.beqimm	s7,2,1c0093ae <S32_Conv2d_24x64x3x3+0x5f4>
					_N_In = _N_In + (4160); _LN_In = (160); _SN_In = (((D0Ind_NextLast)?12:26)*_LN_In); 
1c008f88:	9dda                	add	s11,s11,s6
1c008f8a:	401ba863          	p.beqimm	s7,1,1c00939a <S32_Conv2d_24x64x3x3+0x5e0>
					_N_Filter = _N_Filter + ((11232)); _SN_Filter = (((1)?(((D0Ind_NextLast)?5184:11232)):(((D0Ind_NextLast)?5184:11232)))); 
1c008f8e:	9a6a                	add	s4,s4,s10
1c008f90:	835a                	mv	t1,s6
1c008f92:	8822                	mv	a6,s0
  if (copy->length == 0)
1c008f94:	47e6                	lw	a5,88(sp)
1c008f96:	14078b63          	beqz	a5,1c0090ec <S32_Conv2d_24x64x3x3+0x332>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c008f9a:	5586                	lw	a1,96(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008f9c:	02000713          	li	a4,32
1c008fa0:	002047b7          	lui	a5,0x204
1c008fa4:	c989                	beqz	a1,1c008fb6 <S32_Conv2d_24x64x3x3+0x1fc>
1c008fa6:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008faa:	03c7e583          	p.elw	a1,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008fae:	00e7a223          	sw	a4,4(a5)
1c008fb2:	5586                	lw	a1,96(sp)
1c008fb4:	f9ed                	bnez	a1,1c008fa6 <S32_Conv2d_24x64x3x3+0x1ec>
				if (_SN_In) {
1c008fb6:	18031863          	bnez	t1,1c009146 <S32_Conv2d_24x64x3x3+0x38c>
  if (copy->length == 0)
1c008fba:	47ea                	lw	a5,152(sp)
1c008fbc:	c3c9                	beqz	a5,1c00903e <S32_Conv2d_24x64x3x3+0x284>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c008fbe:	558a                	lw	a1,160(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008fc0:	02000713          	li	a4,32
1c008fc4:	002047b7          	lui	a5,0x204
1c008fc8:	c989                	beqz	a1,1c008fda <S32_Conv2d_24x64x3x3+0x220>
1c008fca:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008fce:	03c7e583          	p.elw	a1,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008fd2:	00e7a223          	sw	a4,4(a5)
1c008fd6:	558a                	lw	a1,160(sp)
1c008fd8:	f9ed                	bnez	a1,1c008fca <S32_Conv2d_24x64x3x3+0x210>
1c008fda:	000c2583          	lw	a1,0(s8)
				if (_SN_Filter) {
1c008fde:	0a081f63          	bnez	a6,1c00909c <S32_Conv2d_24x64x3x3+0x2e2>
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+4160*((D0Ind_Total)%2));
1c008fe2:	fc1bb733          	p.bclr	a4,s7,30,1
1c008fe6:	00671793          	slli	a5,a4,0x6
1c008fea:	97ba                	add	a5,a5,a4
1c008fec:	079a                	slli	a5,a5,0x6
1c008fee:	97ae                	add	a5,a5,a1
1c008ff0:	c5be                	sw	a5,200(sp)
				KerArg1->H = (unsigned short int) (10-1*(1)-1*(1));
1c008ff2:	c9ce                	sw	s3,208(sp)
				KerArg1->UsedH = (unsigned short int) (10-1*(1)-1*(1));
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?12:26);
1c008ff4:	1a2ba263          	p.beqimm	s7,2,1c009198 <S32_Conv2d_24x64x3x3+0x3de>
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+8368+11232*((D0Ind_Total)%2));
1c008ff8:	6789                	lui	a5,0x2
1c008ffa:	0b078793          	addi	a5,a5,176 # 20b0 <__rt_stack_size+0x18b0>
1c008ffe:	43a707b3          	p.mac	a5,a4,s10
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?12:26);
1c009002:	4869                	li	a6,26
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c009004:	0ff00513          	li	a0,255
1c009008:	00204737          	lui	a4,0x204
1c00900c:	0d011a23          	sh	a6,212(sp)
				KerArg1->TotalInFeatures = (short int) (D0Ind_Last?12:26);
1c009010:	0d011c23          	sh	a6,216(sp)
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+8368+11232*((D0Ind_Total)%2));
1c009014:	97ae                	add	a5,a5,a1
1c009016:	cfbe                	sw	a5,220(sp)
1c009018:	08a72223          	sw	a0,132(a4) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00901c:	20070913          	addi	s2,a4,512
1c009020:	00a92023          	sw	a0,0(s2)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c009024:	00a92623          	sw	a0,12(s2)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c009028:	08972023          	sw	s1,128(a4)
1c00902c:	09972023          	sw	s9,128(a4)
1c009030:	8566                	mv	a0,s9
1c009032:	711030ef          	jal	ra,1c00cf42 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009036:	01c96703          	p.elw	a4,28(s2)
			for (D0Ind=0; D0Ind<3; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c00903a:	0b85                	addi	s7,s7,1
1c00903c:	b7a1                	j	1c008f84 <S32_Conv2d_24x64x3x3+0x1ca>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00903e:	30047573          	csrrci	a0,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c009042:	002047b7          	lui	a5,0x204
1c009046:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00904a:	45aa                	lw	a1,136(sp)
1c00904c:	40b7d7b3          	sra	a5,a5,a1
1c009050:	fc17b7b3          	p.bclr	a5,a5,30,1
1c009054:	c79d                	beqz	a5,1c009082 <S32_Conv2d_24x64x3x3+0x2c8>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009056:	10000893          	li	a7,256
1c00905a:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00905e:	30051073          	csrw	mstatus,a0
1c009062:	01172423          	sw	a7,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009066:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00906a:	01172223          	sw	a7,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00906e:	30047573          	csrrci	a0,mstatus,8
1c009072:	40472783          	lw	a5,1028(a4)
1c009076:	45aa                	lw	a1,136(sp)
1c009078:	40b7d7b3          	sra	a5,a5,a1
1c00907c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c009080:	fff9                	bnez	a5,1c00905e <S32_Conv2d_24x64x3x3+0x2a4>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c009082:	4785                	li	a5,1
1c009084:	00b795b3          	sll	a1,a5,a1
1c009088:	002047b7          	lui	a5,0x204
1c00908c:	40b7a223          	sw	a1,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c009090:	30051073          	csrw	mstatus,a0
1c009094:	000c2583          	lw	a1,0(s8)
				if (_SN_Filter) {
1c009098:	f40805e3          	beqz	a6,1c008fe2 <S32_Conv2d_24x64x3x3+0x228>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00909c:	300478f3          	csrrci	a7,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0090a0:	00204737          	lui	a4,0x204
1c0090a4:	40072303          	lw	t1,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c0090a8:	000307b7          	lui	a5,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0090ac:	de0827b3          	p.insert	a5,a6,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0090b0:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0090b4:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0090b8:	40f72023          	sw	a5,1024(a4)
					AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+8368+11232*((D0Ind_Total+1)%2)),
1c0090bc:	001b8513          	addi	a0,s7,1
1c0090c0:	6789                	lui	a5,0x2
1c0090c2:	fc153533          	p.bclr	a0,a0,30,1
1c0090c6:	0b078793          	addi	a5,a5,176 # 20b0 <__rt_stack_size+0x18b0>
1c0090ca:	43a507b3          	p.mac	a5,a0,s10
1c0090ce:	97ae                	add	a5,a5,a1
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0090d0:	40f72023          	sw	a5,1024(a4)
1c0090d4:	46a2                	lw	a3,8(sp)
1c0090d6:	014687b3          	add	a5,a3,s4
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0090da:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c0090de:	c51a                	sw	t1,136(sp)
        copy->length = 0;
1c0090e0:	cd02                	sw	zero,152(sp)
  __builtin_pulp_spr_write(reg, val);
1c0090e2:	30089073          	csrw	mstatus,a7
1c0090e6:	000c2583          	lw	a1,0(s8)
1c0090ea:	bde5                	j	1c008fe2 <S32_Conv2d_24x64x3x3+0x228>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0090ec:	30047573          	csrrci	a0,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0090f0:	002047b7          	lui	a5,0x204
1c0090f4:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c0090f8:	45a6                	lw	a1,72(sp)
1c0090fa:	40b7d7b3          	sra	a5,a5,a1
1c0090fe:	fc17b7b3          	p.bclr	a5,a5,30,1
1c009102:	c79d                	beqz	a5,1c009130 <S32_Conv2d_24x64x3x3+0x376>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009104:	10000893          	li	a7,256
1c009108:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00910c:	30051073          	csrw	mstatus,a0
1c009110:	01172423          	sw	a7,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009114:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c009118:	01172223          	sw	a7,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00911c:	30047573          	csrrci	a0,mstatus,8
1c009120:	40472783          	lw	a5,1028(a4)
1c009124:	45a6                	lw	a1,72(sp)
1c009126:	40b7d7b3          	sra	a5,a5,a1
1c00912a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00912e:	fff9                	bnez	a5,1c00910c <S32_Conv2d_24x64x3x3+0x352>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c009130:	4785                	li	a5,1
1c009132:	00b795b3          	sll	a1,a5,a1
1c009136:	002047b7          	lui	a5,0x204
1c00913a:	40b7a223          	sw	a1,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00913e:	30051073          	csrw	mstatus,a0
				if (_SN_In) {
1c009142:	e6030ce3          	beqz	t1,1c008fba <S32_Conv2d_24x64x3x3+0x200>
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+4160*((D0Ind_Total+1)%2)),
1c009146:	001b8793          	addi	a5,s7,1
1c00914a:	fc17b733          	p.bclr	a4,a5,30,1
1c00914e:	00671793          	slli	a5,a4,0x6
1c009152:	000c2583          	lw	a1,0(s8)
1c009156:	97ba                	add	a5,a5,a4
1c009158:	079a                	slli	a5,a5,0x6
1c00915a:	00f58733          	add	a4,a1,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00915e:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c009162:	002047b7          	lui	a5,0x204
1c009166:	4007a503          	lw	a0,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c00916a:	c7034333          	p.bset	t1,t1,3,16
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00916e:	c1534333          	p.bset	t1,t1,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c009172:	4067a023          	sw	t1,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c009176:	40e7a023          	sw	a4,1024(a5)
1c00917a:	01ba8733          	add	a4,s5,s11
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00917e:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c009182:	00a00737          	lui	a4,0xa00
1c009186:	0a070713          	addi	a4,a4,160 # a000a0 <__L2+0x9800a0>
1c00918a:	40e7a023          	sw	a4,1024(a5)
        if (!merge) copy->id = id;
1c00918e:	c4aa                	sw	a0,72(sp)
        copy->length = 0;
1c009190:	cc82                	sw	zero,88(sp)
  __builtin_pulp_spr_write(reg, val);
1c009192:	30059073          	csrw	mstatus,a1
1c009196:	b515                	j	1c008fba <S32_Conv2d_24x64x3x3+0x200>
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+8368+11232*((D0Ind_Total)%2));
1c009198:	6789                	lui	a5,0x2
1c00919a:	0b078793          	addi	a5,a5,176 # 20b0 <__rt_stack_size+0x18b0>
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?12:26);
1c00919e:	4731                	li	a4,12
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+8368+11232*((D0Ind_Total)%2));
1c0091a0:	97ae                	add	a5,a5,a1
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0091a2:	0ff00993          	li	s3,255
1c0091a6:	00204437          	lui	s0,0x204
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?12:26);
1c0091aa:	0ce11a23          	sh	a4,212(sp)
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+8368+11232*((D0Ind_Total)%2));
1c0091ae:	cfbe                	sw	a5,220(sp)
				KerArg1->TotalInFeatures = (short int) (D0Ind_Last?12:26);
1c0091b0:	0ce11c23          	sh	a4,216(sp)
1c0091b4:	09342223          	sw	s3,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0091b8:	20040913          	addi	s2,s0,512
1c0091bc:	01392023          	sw	s3,0(s2)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0091c0:	01392623          	sw	s3,12(s2)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0091c4:	08942023          	sw	s1,128(s0)
1c0091c8:	09942023          	sw	s9,128(s0)
1c0091cc:	8566                	mv	a0,s9
1c0091ce:	575030ef          	jal	ra,1c00cf42 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0091d2:	01c96783          	p.elw	a5,28(s2)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0091d6:	09342223          	sw	s3,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0091da:	01392023          	sw	s3,0(s2)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0091de:	01392623          	sw	s3,12(s2)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0091e2:	1c00d7b7          	lui	a5,0x1c00d
1c0091e6:	9de78793          	addi	a5,a5,-1570 # 1c00c9de <KerDP_fp>
1c0091ea:	08f42023          	sw	a5,128(s0)
1c0091ee:	1068                	addi	a0,sp,44
1c0091f0:	08a42023          	sw	a0,128(s0)
1c0091f4:	7ea030ef          	jal	ra,1c00c9de <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0091f8:	01c96783          	p.elw	a5,28(s2)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) cnn_ssd_L2_Memory+58864+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+30832), 3840, 1, &DmaW_Evt1);
1c0091fc:	1c015537          	lui	a0,0x1c015
1c009200:	a8050513          	addi	a0,a0,-1408 # 1c014a80 <cnn_ssd_L2_Memory>
1c009204:	4118                	lw	a4,0(a0)
1c009206:	67b9                	lui	a5,0xe
1c009208:	000c2683          	lw	a3,0(s8)
1c00920c:	5f078793          	addi	a5,a5,1520 # e5f0 <__rt_stack_size+0xddf0>
1c009210:	973e                	add	a4,a4,a5
1c009212:	67a1                	lui	a5,0x8
1c009214:	87078793          	addi	a5,a5,-1936 # 7870 <__rt_stack_size+0x7070>
1c009218:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00921a:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00921e:	40042583          	lw	a1,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c009222:	000a17b7          	lui	a5,0xa1
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c009226:	f0078793          	addi	a5,a5,-256 # a0f00 <__L2+0x20f00>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00922a:	c157c7b3          	p.bset	a5,a5,0,21
1c00922e:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c009232:	40d42023          	sw	a3,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c009236:	40e42023          	sw	a4,1024(s0)
        if (!merge) copy->id = id;
1c00923a:	d52e                	sw	a1,168(sp)
        copy->length = 0;
1c00923c:	dd02                	sw	zero,184(sp)
  __builtin_pulp_spr_write(reg, val);
1c00923e:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c009242:	57ea                	lw	a5,184(sp)
1c009244:	ebf1                	bnez	a5,1c009318 <S32_Conv2d_24x64x3x3+0x55e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009246:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00924a:	40442783          	lw	a5,1028(s0)
1c00924e:	56aa                	lw	a3,168(sp)
1c009250:	40d7d7b3          	sra	a5,a5,a3
1c009254:	fc17b7b3          	p.bclr	a5,a5,30,1
1c009258:	c79d                	beqz	a5,1c009286 <S32_Conv2d_24x64x3x3+0x4cc>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00925a:	10000593          	li	a1,256
1c00925e:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c009262:	30061073          	csrw	mstatus,a2
1c009266:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00926a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00926e:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009272:	30047673          	csrrci	a2,mstatus,8
1c009276:	40472783          	lw	a5,1028(a4)
1c00927a:	56aa                	lw	a3,168(sp)
1c00927c:	40d7d7b3          	sra	a5,a5,a3
1c009280:	fc17b7b3          	p.bclr	a5,a5,30,1
1c009284:	fff9                	bnez	a5,1c009262 <S32_Conv2d_24x64x3x3+0x4a8>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c009286:	4785                	li	a5,1
1c009288:	00d796b3          	sll	a3,a5,a3
1c00928c:	002047b7          	lui	a5,0x204
1c009290:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c009294:	30061073          	csrw	mstatus,a2
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+0), ((AT_HYPERRAM_INT_ADDR_TYPE) cnn_ssd_L2_Memory+58864+0), 3840, 1, &UchanHR1);
1c009298:	410c                	lw	a1,0(a0)
1c00929a:	6639                	lui	a2,0xe
1c00929c:	5f060613          	addi	a2,a2,1520 # e5f0 <__rt_stack_size+0xddf0>
1c0092a0:	962e                	add	a2,a2,a1
1c0092a2:	45b2                	lw	a1,12(sp)
1c0092a4:	6685                	lui	a3,0x1
1c0092a6:	1c015537          	lui	a0,0x1c015
1c0092aa:	199c                	addi	a5,sp,240
1c0092ac:	4701                	li	a4,0
1c0092ae:	f0068693          	addi	a3,a3,-256 # f00 <__rt_stack_size+0x700>
1c0092b2:	fb050513          	addi	a0,a0,-80 # 1c014fb0 <HyperRam>
1c0092b6:	48f050ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c0092ba:	18c14783          	lbu	a5,396(sp)
1c0092be:	0ff7f793          	andi	a5,a5,255
1c0092c2:	ef99                	bnez	a5,1c0092e0 <S32_Conv2d_24x64x3x3+0x526>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0092c4:	4689                	li	a3,2
1c0092c6:	00204737          	lui	a4,0x204
1c0092ca:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0092ce:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0092d2:	00d72223          	sw	a3,4(a4)
1c0092d6:	18c14783          	lbu	a5,396(sp)
1c0092da:	0ff7f793          	andi	a5,a5,255
1c0092de:	d7f5                	beqz	a5,1c0092ca <S32_Conv2d_24x64x3x3+0x510>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c0092e0:	1cc12083          	lw	ra,460(sp)
1c0092e4:	1c812403          	lw	s0,456(sp)
1c0092e8:	1c412483          	lw	s1,452(sp)
1c0092ec:	1c012903          	lw	s2,448(sp)
1c0092f0:	1bc12983          	lw	s3,444(sp)
1c0092f4:	1b812a03          	lw	s4,440(sp)
1c0092f8:	1b412a83          	lw	s5,436(sp)
1c0092fc:	1b012b03          	lw	s6,432(sp)
1c009300:	1ac12b83          	lw	s7,428(sp)
1c009304:	1a812c03          	lw	s8,424(sp)
1c009308:	1a412c83          	lw	s9,420(sp)
1c00930c:	1a012d03          	lw	s10,416(sp)
1c009310:	19c12d83          	lw	s11,412(sp)
1c009314:	6179                	addi	sp,sp,464
1c009316:	8082                	ret
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c009318:	468e                	lw	a3,192(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00931a:	02000713          	li	a4,32
1c00931e:	002047b7          	lui	a5,0x204
1c009322:	dabd                	beqz	a3,1c009298 <S32_Conv2d_24x64x3x3+0x4de>
1c009324:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009328:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00932c:	00e7a223          	sw	a4,4(a5)
1c009330:	468e                	lw	a3,192(sp)
1c009332:	d2bd                	beqz	a3,1c009298 <S32_Conv2d_24x64x3x3+0x4de>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009334:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009338:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00933c:	00e7a223          	sw	a4,4(a5)
1c009340:	468e                	lw	a3,192(sp)
1c009342:	f2ed                	bnez	a3,1c009324 <S32_Conv2d_24x64x3x3+0x56a>
1c009344:	bf91                	j	1c009298 <S32_Conv2d_24x64x3x3+0x4de>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009346:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00934a:	4047a783          	lw	a5,1028(a5)
1c00934e:	56a6                	lw	a3,104(sp)
1c009350:	40d7d7b3          	sra	a5,a5,a3
1c009354:	fc17b7b3          	p.bclr	a5,a5,30,1
1c009358:	c79d                	beqz	a5,1c009386 <S32_Conv2d_24x64x3x3+0x5cc>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00935a:	10000593          	li	a1,256
1c00935e:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c009362:	30061073          	csrw	mstatus,a2
1c009366:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00936a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00936e:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009372:	30047673          	csrrci	a2,mstatus,8
1c009376:	40472783          	lw	a5,1028(a4)
1c00937a:	56a6                	lw	a3,104(sp)
1c00937c:	40d7d7b3          	sra	a5,a5,a3
1c009380:	fc17b7b3          	p.bclr	a5,a5,30,1
1c009384:	fff9                	bnez	a5,1c009362 <S32_Conv2d_24x64x3x3+0x5a8>
1c009386:	4785                	li	a5,1
1c009388:	00d796b3          	sll	a3,a5,a3
1c00938c:	002047b7          	lui	a5,0x204
1c009390:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c009394:	30061073          	csrw	mstatus,a2
1c009398:	beb1                	j	1c008ef4 <S32_Conv2d_24x64x3x3+0x13a>
					_N_Filter = _N_Filter + ((11232)); _SN_Filter = (((1)?(((D0Ind_NextLast)?5184:11232)):(((D0Ind_NextLast)?5184:11232)))); 
1c00939a:	1c014737          	lui	a4,0x1c014
1c00939e:	5ac70713          	addi	a4,a4,1452 # 1c0145ac <IntegerExpLUT+0x64>
1c0093a2:	9a6a                	add	s4,s4,s10
1c0093a4:	78000313          	li	t1,1920
1c0093a8:	00072803          	lw	a6,0(a4)
1c0093ac:	b6e5                	j	1c008f94 <S32_Conv2d_24x64x3x3+0x1da>
				_SN_In = 0;
1c0093ae:	4301                	li	t1,0
				_SN_Filter = 0;
1c0093b0:	4801                	li	a6,0
1c0093b2:	b6cd                	j	1c008f94 <S32_Conv2d_24x64x3x3+0x1da>

1c0093b4 <S36_Conv2d_128x64x3x3_Relu>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c0093b4:	710d                	addi	sp,sp,-352
1c0093b6:	15212823          	sw	s2,336(sp)
1c0093ba:	ce36                	sw	a3,28(sp)
	KerArg0->OutFeatures = (unsigned short int) (128);
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+320);
	KerArg0->NormBias = (signed char) (15);
	KerArg1->W = (unsigned short int) (5);
	KerArg1->UsedW = (unsigned short int) (5);
	KerArg1->InFeatures = (unsigned short int) (4);
1c0093bc:	1c014eb7          	lui	t4,0x1c014
	KerArg1->W = (unsigned short int) (5);
1c0093c0:	022066d7          	pv.add.sci.h	a3,zero,5
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+24128);
1c0093c4:	10000937          	lui	s2,0x10000
	KerArg1->W = (unsigned short int) (5);
1c0093c8:	dfb6                	sw	a3,252(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+24128);
1c0093ca:	02090913          	addi	s2,s2,32 # 10000020 <cnn_ssd_L1_Memory>
	KerArg1->InFeatures = (unsigned short int) (4);
1c0093ce:	5b4ea683          	lw	a3,1460(t4) # 1c0145b4 <IntegerExpLUT+0x6c>
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+24128);
1c0093d2:	00092803          	lw	a6,0(s2)
	KerArg0->W = (unsigned short int) (5);
1c0093d6:	1c0147b7          	lui	a5,0x1c014
1c0093da:	5b07ae03          	lw	t3,1456(a5) # 1c0145b0 <IntegerExpLUT+0x68>
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+24128);
1c0093de:	6799                	lui	a5,0x6
	KerArg1->InFeatures = (unsigned short int) (4);
1c0093e0:	10d12223          	sw	a3,260(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+24128);
1c0093e4:	e4078793          	addi	a5,a5,-448 # 5e40 <__rt_stack_size+0x5640>
	KerArg1->OutFeatures = (unsigned short int) (128);
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+24128);
	KerArg1->Norm = (unsigned char) (15);
	KerArg1->TotalInFeatures = (short int) (4);
1c0093e8:	4691                	li	a3,4
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+24128);
1c0093ea:	97c2                	add	a5,a5,a6
	KerArg1->TotalInFeatures = (short int) (4);
1c0093ec:	10d11423          	sh	a3,264(sp)
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
	KerArg1->Orientation = (unsigned char) (1);
	KerArg2->In = (int * __restrict__) (cnn_ssd_L1_Memory+24128);
	KerArg2->W = (unsigned short int) (5);
	KerArg2->H = (unsigned short int) (4);
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+19008);
1c0093f0:	6715                	lui	a4,0x5
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c0093f2:	020076d7          	pv.add.sci.b	a3,zero,1
	KerArg0->NormBias = (signed char) (15);
1c0093f6:	48bd                	li	a7,15
	KerArg0->OutFeatures = (unsigned short int) (128);
1c0093f8:	08000313          	li	t1,128
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+24128);
1c0093fc:	d23e                	sw	a5,36(sp)
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+24128);
1c0093fe:	10f12823          	sw	a5,272(sp)
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c009402:	10d12a23          	sw	a3,276(sp)
	KerArg2->In = (int * __restrict__) (cnn_ssd_L1_Memory+24128);
1c009406:	da3e                	sw	a5,52(sp)
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+320);
1c009408:	14080f13          	addi	t5,a6,320
	KerArg1->Orientation = (unsigned char) (1);
1c00940c:	4685                	li	a3,1
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+19008);
1c00940e:	a4070713          	addi	a4,a4,-1472 # 4a40 <__rt_stack_size+0x4240>
	KerArg2->Norm = (unsigned char) (15);
	KerArg2->InFeatures = (unsigned short int) (128);
	KerArg2->LB = (int) (0);
	KerArg2->UB = (int) (32767);
1c009412:	67a1                	lui	a5,0x8
{
1c009414:	14112e23          	sw	ra,348(sp)
1c009418:	14812c23          	sw	s0,344(sp)
1c00941c:	14912a23          	sw	s1,340(sp)
1c009420:	15312623          	sw	s3,332(sp)
1c009424:	15412423          	sw	s4,328(sp)
1c009428:	15512223          	sw	s5,324(sp)
1c00942c:	15612023          	sw	s6,320(sp)
1c009430:	13712e23          	sw	s7,316(sp)
1c009434:	13812c23          	sw	s8,312(sp)
1c009438:	13912a23          	sw	s9,308(sp)
1c00943c:	13a12823          	sw	s10,304(sp)
1c009440:	13b12623          	sw	s11,300(sp)
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+19008);
1c009444:	9742                	add	a4,a4,a6
{
1c009446:	cc2a                	sw	a0,24(sp)
1c009448:	ca2e                	sw	a1,20(sp)
	KerArg0->W = (unsigned short int) (5);
1c00944a:	d472                	sw	t3,40(sp)
	KerArg0->OutFeatures = (unsigned short int) (128);
1c00944c:	02611623          	sh	t1,44(sp)
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+320);
1c009450:	d87a                	sw	t5,48(sp)
	KerArg0->NormBias = (signed char) (15);
1c009452:	03110723          	sb	a7,46(sp)
	KerArg1->Norm = (unsigned char) (15);
1c009456:	11110c23          	sb	a7,280(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c00945a:	10d10da3          	sb	a3,283(sp)
	KerArg2->UB = (int) (32767);
1c00945e:	17fd                	addi	a5,a5,-1
	KerArg2->W = (unsigned short int) (5);
1c009460:	dc72                	sw	t3,56(sp)
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+19008);
1c009462:	de3a                	sw	a4,60(sp)
	KerArg2->Norm = (unsigned char) (15);
1c009464:	05110023          	sb	a7,64(sp)
	KerArg2->InFeatures = (unsigned short int) (128);
1c009468:	04611123          	sh	t1,66(sp)
	KerArg2->LB = (int) (0);
1c00946c:	c282                	sw	zero,68(sp)
	KerArg2->UB = (int) (32767);
1c00946e:	c4be                	sw	a5,72(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009470:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c009474:	002047b7          	lui	a5,0x204
1c009478:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00947c:	002f0737          	lui	a4,0x2f0
1c009480:	0a070713          	addi	a4,a4,160 # 2f00a0 <__L2+0x2700a0>
1c009484:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c009488:	4107a023          	sw	a6,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00948c:	4862                	lw	a6,24(sp)
1c00948e:	4107a023          	sw	a6,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c009492:	00280737          	lui	a4,0x280
1c009496:	02870713          	addi	a4,a4,40 # 280028 <__L2+0x200028>
1c00949a:	40e7a023          	sw	a4,1024(a5)
        if (!merge) copy->id = id;
1c00949e:	c8ae                	sw	a1,80(sp)
        copy->length = 0;
1c0094a0:	d082                	sw	zero,96(sp)
  __builtin_pulp_spr_write(reg, val);
1c0094a2:	30069073          	csrw	mstatus,a3
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+0), 160, 40, 40, 0, &DmaR_Evt1);
	_N_In=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+320), 256, 0, &DmaR_Evt2);
1c0094a6:	00092683          	lw	a3,0(s2)
1c0094aa:	14068693          	addi	a3,a3,320
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0094ae:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0094b2:	4007a503          	lw	a0,1024(a5)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0094b6:	00030737          	lui	a4,0x30
1c0094ba:	c0874733          	p.bset	a4,a4,0,8
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0094be:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0094c2:	c1574733          	p.bset	a4,a4,0,21
1c0094c6:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0094ca:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0094ce:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c0094d2:	d8aa                	sw	a0,112(sp)
        copy->length = 0;
1c0094d4:	c102                	sw	zero,128(sp)
  __builtin_pulp_spr_write(reg, val);
1c0094d6:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c0094da:	470a                	lw	a4,128(sp)
1c0094dc:	42070a63          	beqz	a4,1c009910 <S36_Conv2d_128x64x3x3_Relu+0x55c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0094e0:	46aa                	lw	a3,136(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0094e2:	02000713          	li	a4,32
1c0094e6:	ca89                	beqz	a3,1c0094f8 <S36_Conv2d_128x64x3x3_Relu+0x144>
1c0094e8:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0094ec:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0094f0:	00e7a223          	sw	a4,4(a5)
1c0094f4:	46aa                	lw	a3,136(sp)
1c0094f6:	faed                	bnez	a3,1c0094e8 <S36_Conv2d_128x64x3x3_Relu+0x134>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Bias */
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) Filter+0), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory+99824+0), 9216, 0, &UchanHF1);
1c0094f8:	1c015c37          	lui	s8,0x1c015
1c0094fc:	a80c0c13          	addi	s8,s8,-1408 # 1c014a80 <cnn_ssd_L2_Memory>
1c009500:	1c015637          	lui	a2,0x1c015
1c009504:	000c2583          	lw	a1,0(s8)
1c009508:	cf860613          	addi	a2,a2,-776 # 1c014cf8 <HyperFlash>
1c00950c:	4e08                	lw	a0,24(a2)
1c00950e:	6661                	lui	a2,0x18
1c009510:	5f060613          	addi	a2,a2,1520 # 185f0 <__L1Cl+0x85f0>
1c009514:	962e                	add	a2,a2,a1
1c009516:	45d2                	lw	a1,20(sp)
1c009518:	6689                	lui	a3,0x2
1c00951a:	099c                	addi	a5,sp,208
1c00951c:	4705                	li	a4,1
1c00951e:	40068693          	addi	a3,a3,1024 # 2400 <__rt_stack_size+0x1c00>
1c009522:	5d0040ef          	jal	ra,1c00daf2 <pi_cl_fs_copy>
1c009526:	0e014783          	lbu	a5,224(sp)
1c00952a:	0ff7f793          	andi	a5,a5,255
1c00952e:	ef99                	bnez	a5,1c00954c <S36_Conv2d_128x64x3x3_Relu+0x198>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009530:	4689                	li	a3,2
1c009532:	00204737          	lui	a4,0x204
1c009536:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00953a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00953e:	00d72223          	sw	a3,4(a4)
1c009542:	0e014783          	lbu	a5,224(sp)
1c009546:	0ff7f793          	andi	a5,a5,255
1c00954a:	d7f5                	beqz	a5,1c009536 <S36_Conv2d_128x64x3x3_Relu+0x182>
	AT_HYPERFLASH_FS_CL_WAIT(&HyperFlash, &UchanHF1); /* Wait previous uDMA read Filter */
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) Filter+9216), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory+99824+9216), 9216, 0, &UchanHF1);
1c00954c:	1c015737          	lui	a4,0x1c015
1c009550:	000c2583          	lw	a1,0(s8)
1c009554:	4852                	lw	a6,20(sp)
1c009556:	cf870713          	addi	a4,a4,-776 # 1c014cf8 <HyperFlash>
1c00955a:	4f08                	lw	a0,24(a4)
1c00955c:	6a09                	lui	s4,0x2
1c00955e:	666d                	lui	a2,0x1b
1c009560:	400a0a13          	addi	s4,s4,1024 # 2400 <__rt_stack_size+0x1c00>
1c009564:	9f060613          	addi	a2,a2,-1552 # 1a9f0 <__L1Cl+0xa9f0>
1c009568:	099c                	addi	a5,sp,208
1c00956a:	86d2                	mv	a3,s4
1c00956c:	962e                	add	a2,a2,a1
1c00956e:	4705                	li	a4,1
1c009570:	014805b3          	add	a1,a6,s4
1c009574:	57e040ef          	jal	ra,1c00daf2 <pi_cl_fs_copy>
	AT_L2_COPY(0, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L2_Memory+99824+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+576+0), 9216, 0, &DmaR_Evt3);
1c009578:	000c2703          	lw	a4,0(s8)
1c00957c:	00092683          	lw	a3,0(s2)
1c009580:	67e1                	lui	a5,0x18
1c009582:	5f078793          	addi	a5,a5,1520 # 185f0 <__L1Cl+0x85f0>
1c009586:	973e                	add	a4,a4,a5
1c009588:	24068693          	addi	a3,a3,576
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00958c:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c009590:	002047b7          	lui	a5,0x204
1c009594:	4007a503          	lw	a0,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c009598:	002b0637          	lui	a2,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00959c:	00ca6633          	or	a2,s4,a2
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0095a0:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0095a4:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0095a8:	40e7a023          	sw	a4,1024(a5)
        if (!merge) copy->id = id;
1c0095ac:	c92a                	sw	a0,144(sp)
        copy->length = 0;
1c0095ae:	d102                	sw	zero,160(sp)
  __builtin_pulp_spr_write(reg, val);
1c0095b0:	30059073          	csrw	mstatus,a1
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0095b4:	0ff00713          	li	a4,255
1c0095b8:	08e7a223          	sw	a4,132(a5)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0095bc:	20078d13          	addi	s10,a5,512
1c0095c0:	00ed2023          	sw	a4,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0095c4:	00ed2623          	sw	a4,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0095c8:	1c00d737          	lui	a4,0x1c00d
1c0095cc:	92a70713          	addi	a4,a4,-1750 # 1c00c92a <KerParSetBias_DP_fp>
1c0095d0:	08e7a023          	sw	a4,128(a5)
1c0095d4:	1048                	addi	a0,sp,36
1c0095d6:	08a7a023          	sw	a0,128(a5)
1c0095da:	350030ef          	jal	ra,1c00c92a <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0095de:	01cd6783          	p.elw	a5,28(s10)
1c0095e2:	1c00dab7          	lui	s5,0x1c00d
	_NN_Filter=9216; _SN_Filter=9216;
1c0095e6:	8cd2                	mv	s9,s4
1c0095e8:	84d2                	mv	s1,s4
	_N_In=0;
1c0095ea:	4401                	li	s0,0
		{ /* Single iteration on Tile0 */
			int T0Ind_Last = 1, T0Ind_NextLast = 1;
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			AT_FORK(gap_ncore(), (void *) KerParSetBias_DP_fp, (void *) KerArg0);
			__CALL(KerParSetBias_DP_fp, KerArg0);
			for (D0Ind=0; D0Ind<16; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c0095ec:	4f01                	li	t5,0
1c0095ee:	f42a8a93          	addi	s5,s5,-190 # 1c00cf42 <KerParConv3x3Stride1_DP_fp>
1c0095f2:	0f810993          	addi	s3,sp,248
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0095f6:	00204db7          	lui	s11,0x204
				int D0Ind_Last = (D0Ind==15), D0Ind_NextLast = ((D0Ind+1)==15), D0Ind_NextNextLast = ((D0Ind+2)==15);
				/*================================= Prepare Tiles ===================================*/
				_SN_In = 0;
				if (!(D0Ind_Last)) {
1c0095fa:	3aff2f63          	p.beqimm	t5,15,1c0099b8 <S36_Conv2d_128x64x3x3_Relu+0x604>
					_N_In = _N_In + (160); _LN_In = (40); _SN_In = (4*_LN_In); 
1c0095fe:	0a040413          	addi	s0,s0,160
				} else if (!(1)) {
					_N_In = _N_In + (-2400); _LN_In = (40); _SN_In = (4*_LN_In); 
				}
				_SNN_Filter = 0;
				if (!(D0Ind_Last)) {
					if (!(D0Ind_NextLast)) {
1c009602:	3aef2e63          	p.beqimm	t5,14,1c0099be <S36_Conv2d_128x64x3x3_Relu+0x60a>
						_NN_Filter = _NN_Filter + ((9216)); _SNN_Filter = (((1)?(9216):(9216))); 
1c009606:	6609                	lui	a2,0x2
1c009608:	40060613          	addi	a2,a2,1024 # 2400 <__rt_stack_size+0x1c00>
1c00960c:	94b2                	add	s1,s1,a2
1c00960e:	0a000593          	li	a1,160
1c009612:	8bd2                	mv	s7,s4
  if (copy->length == 0)
1c009614:	5786                	lw	a5,96(sp)
1c009616:	22078663          	beqz	a5,1c009842 <S36_Conv2d_128x64x3x3_Relu+0x48e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00961a:	5726                	lw	a4,104(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00961c:	02000793          	li	a5,32
1c009620:	cb09                	beqz	a4,1c009632 <S36_Conv2d_128x64x3x3_Relu+0x27e>
1c009622:	00fda423          	sw	a5,8(s11) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009626:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00962a:	00fda223          	sw	a5,4(s11)
1c00962e:	5726                	lw	a4,104(sp)
1c009630:	fb6d                	bnez	a4,1c009622 <S36_Conv2d_128x64x3x3_Relu+0x26e>
1c009632:	001f0b13          	addi	s6,t5,1
					_NN_Filter = _NN_Filter + ((9216)); _SNN_Filter = (((1)?(9216):(9216))); 
				}
				/*============================= End Prepare Tiles ===================================*/
				/*================================= Read Tiles ======================================*/
				AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In */
				if (_SN_In) {
1c009636:	24059f63          	bnez	a1,1c009894 <S36_Conv2d_128x64x3x3_Relu+0x4e0>
1c00963a:	0e014783          	lbu	a5,224(sp)
1c00963e:	0ff7f793          	andi	a5,a5,255
1c009642:	ef89                	bnez	a5,1c00965c <S36_Conv2d_128x64x3x3_Relu+0x2a8>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009644:	4709                	li	a4,2
1c009646:	00eda423          	sw	a4,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00964a:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00964e:	00eda223          	sw	a4,4(s11)
1c009652:	0e014783          	lbu	a5,224(sp)
1c009656:	0ff7f793          	andi	a5,a5,255
1c00965a:	d7f5                	beqz	a5,1c009646 <S36_Conv2d_128x64x3x3_Relu+0x292>
1c00965c:	fc1f3f33          	p.bclr	t5,t5,30,1
1c009660:	003f1f93          	slli	t6,t5,0x3
1c009664:	9ffa                	add	t6,t6,t5
1c009666:	0faa                	slli	t6,t6,0xa
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+160*((D0Ind_Total+1)%2)),
							_SN_In, 40, _LN_In, 0, &DmaR_Evt1);
				}
				AT_HYPERFLASH_FS_CL_WAIT(&HyperFlash, &UchanHF1); /* Wait previous uDMA read Filter */
				if (_SNN_Filter) {
1c009668:	260b9b63          	bnez	s7,1c0098de <S36_Conv2d_128x64x3x3_Relu+0x52a>
  if (copy->length == 0)
1c00966c:	578a                	lw	a5,160(sp)
1c00966e:	12078863          	beqz	a5,1c00979e <S36_Conv2d_128x64x3x3_Relu+0x3ea>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c009672:	572a                	lw	a4,168(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009674:	02000793          	li	a5,32
1c009678:	cb09                	beqz	a4,1c00968a <S36_Conv2d_128x64x3x3_Relu+0x2d6>
1c00967a:	00fda423          	sw	a5,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00967e:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c009682:	00fda223          	sw	a5,4(s11)
1c009686:	572a                	lw	a4,168(sp)
1c009688:	fb6d                	bnez	a4,1c00967a <S36_Conv2d_128x64x3x3_Relu+0x2c6>
1c00968a:	00092703          	lw	a4,0(s2)
					AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) Filter+_NN_Filter), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory+99824+9216*((D0Ind_Total)%2)),
							_SNN_Filter, 0, &UchanHF1);
				}
				AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read Filter */
				if (_SN_Filter) {
1c00968e:	160c9163          	bnez	s9,1c0097f0 <S36_Conv2d_128x64x3x3_Relu+0x43c>
					AT_L2_COPY(0, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L2_Memory+99824+9216*((D0Ind_Total+1)%2)), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+576+9216*((D0Ind_Total+1)%2)),
							_SN_Filter, 0, &DmaR_Evt3);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+160*((D0Ind_Total)%2));
1c009692:	002f1793          	slli	a5,t5,0x2
1c009696:	9f3e                	add	t5,t5,a5
				KerArg1->H = (unsigned short int) (6-1*(1)-1*(1));
				KerArg1->UsedH = (unsigned short int) (6-1*(1)-1*(1));
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+576+9216*((D0Ind_Total)%2));
1c009698:	240f8f93          	addi	t6,t6,576
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+160*((D0Ind_Total)%2));
1c00969c:	0f16                	slli	t5,t5,0x5
1c00969e:	9f3a                	add	t5,t5,a4
				KerArg1->H = (unsigned short int) (6-1*(1)-1*(1));
1c0096a0:	00206657          	pv.add.sci.h	a2,zero,4
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+576+9216*((D0Ind_Total)%2));
1c0096a4:	977e                	add	a4,a4,t6
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0096a6:	0ff00793          	li	a5,255
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+160*((D0Ind_Total)%2));
1c0096aa:	ddfa                	sw	t5,248(sp)
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+576+9216*((D0Ind_Total)%2));
1c0096ac:	10e12623          	sw	a4,268(sp)
				KerArg1->H = (unsigned short int) (6-1*(1)-1*(1));
1c0096b0:	10c12023          	sw	a2,256(sp)
1c0096b4:	08fda223          	sw	a5,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0096b8:	00fd2023          	sw	a5,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0096bc:	00fd2623          	sw	a5,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0096c0:	095da023          	sw	s5,128(s11)
1c0096c4:	093da023          	sw	s3,128(s11)
1c0096c8:	854e                	mv	a0,s3
1c0096ca:	079030ef          	jal	ra,1c00cf42 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0096ce:	01cd6783          	p.elw	a5,28(s10)
			for (D0Ind=0; D0Ind<16; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c0096d2:	47c1                	li	a5,16
1c0096d4:	8f5a                	mv	t5,s6
1c0096d6:	8cde                	mv	s9,s7
1c0096d8:	f2fb11e3          	bne	s6,a5,1c0095fa <S36_Conv2d_128x64x3x3_Relu+0x246>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0096dc:	0ff00793          	li	a5,255
1c0096e0:	00204437          	lui	s0,0x204
1c0096e4:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0096e8:	00fd2023          	sw	a5,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0096ec:	00fd2623          	sw	a5,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0096f0:	1c00d7b7          	lui	a5,0x1c00d
1c0096f4:	9de78793          	addi	a5,a5,-1570 # 1c00c9de <KerDP_fp>
1c0096f8:	08f42023          	sw	a5,128(s0)
1c0096fc:	1848                	addi	a0,sp,52
1c0096fe:	08a42023          	sw	a0,128(s0)
1c009702:	2dc030ef          	jal	ra,1c00c9de <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009706:	01cd6783          	p.elw	a5,28(s10)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+19008), 5120, 1, &DmaW_Evt1);
1c00970a:	6795                	lui	a5,0x5
1c00970c:	00092703          	lw	a4,0(s2)
1c009710:	a4078793          	addi	a5,a5,-1472 # 4a40 <__rt_stack_size+0x4240>
1c009714:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009716:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00971a:	400da603          	lw	a2,1024(s11)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00971e:	000217b7          	lui	a5,0x21
1c009722:	40078793          	addi	a5,a5,1024 # 21400 <__L1Cl+0x11400>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c009726:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00972a:	c157c7b3          	p.bset	a5,a5,0,21
1c00972e:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c009732:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c009736:	4872                	lw	a6,28(sp)
1c009738:	41042023          	sw	a6,1024(s0)
        if (!merge) copy->id = id;
1c00973c:	d932                	sw	a2,176(sp)
        copy->length = 0;
1c00973e:	c182                	sw	zero,192(sp)
  __builtin_pulp_spr_write(reg, val);
1c009740:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c009744:	478e                	lw	a5,192(sp)
1c009746:	20078f63          	beqz	a5,1c009964 <S36_Conv2d_128x64x3x3_Relu+0x5b0>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00974a:	46ae                	lw	a3,200(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00974c:	02000713          	li	a4,32
1c009750:	002047b7          	lui	a5,0x204
1c009754:	ca89                	beqz	a3,1c009766 <S36_Conv2d_128x64x3x3_Relu+0x3b2>
1c009756:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00975a:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00975e:	00e7a223          	sw	a4,4(a5)
1c009762:	46ae                	lw	a3,200(sp)
1c009764:	faed                	bnez	a3,1c009756 <S36_Conv2d_128x64x3x3_Relu+0x3a2>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c009766:	15c12083          	lw	ra,348(sp)
1c00976a:	15812403          	lw	s0,344(sp)
1c00976e:	15412483          	lw	s1,340(sp)
1c009772:	15012903          	lw	s2,336(sp)
1c009776:	14c12983          	lw	s3,332(sp)
1c00977a:	14812a03          	lw	s4,328(sp)
1c00977e:	14412a83          	lw	s5,324(sp)
1c009782:	14012b03          	lw	s6,320(sp)
1c009786:	13c12b83          	lw	s7,316(sp)
1c00978a:	13812c03          	lw	s8,312(sp)
1c00978e:	13412c83          	lw	s9,308(sp)
1c009792:	13012d03          	lw	s10,304(sp)
1c009796:	12c12d83          	lw	s11,300(sp)
1c00979a:	6135                	addi	sp,sp,352
1c00979c:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00979e:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0097a2:	404da783          	lw	a5,1028(s11)
1c0097a6:	474a                	lw	a4,144(sp)
1c0097a8:	40e7d7b3          	sra	a5,a5,a4
1c0097ac:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0097b0:	c78d                	beqz	a5,1c0097da <S36_Conv2d_128x64x3x3_Relu+0x426>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0097b2:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c0097b6:	30069073          	csrw	mstatus,a3
1c0097ba:	00cda423          	sw	a2,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0097be:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0097c2:	00cda223          	sw	a2,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0097c6:	300476f3          	csrrci	a3,mstatus,8
1c0097ca:	404da783          	lw	a5,1028(s11)
1c0097ce:	474a                	lw	a4,144(sp)
1c0097d0:	40e7d7b3          	sra	a5,a5,a4
1c0097d4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0097d8:	fff9                	bnez	a5,1c0097b6 <S36_Conv2d_128x64x3x3_Relu+0x402>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0097da:	4785                	li	a5,1
1c0097dc:	00e79733          	sll	a4,a5,a4
1c0097e0:	40eda223          	sw	a4,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c0097e4:	30069073          	csrw	mstatus,a3
1c0097e8:	00092703          	lw	a4,0(s2)
				if (_SN_Filter) {
1c0097ec:	ea0c83e3          	beqz	s9,1c009692 <S36_Conv2d_128x64x3x3_Relu+0x2de>
					AT_L2_COPY(0, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L2_Memory+99824+9216*((D0Ind_Total+1)%2)), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+576+9216*((D0Ind_Total+1)%2)),
1c0097f0:	fc1b36b3          	p.bclr	a3,s6,30,1
1c0097f4:	000c2603          	lw	a2,0(s8)
1c0097f8:	00369793          	slli	a5,a3,0x3
1c0097fc:	97b6                	add	a5,a5,a3
1c0097fe:	66e1                	lui	a3,0x18
1c009800:	5f068693          	addi	a3,a3,1520 # 185f0 <__L1Cl+0x85f0>
1c009804:	07aa                	slli	a5,a5,0xa
1c009806:	9636                	add	a2,a2,a3
1c009808:	963e                	add	a2,a2,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00980a:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00980e:	400da503          	lw	a0,1024(s11)
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c009812:	000306b7          	lui	a3,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c009816:	de0ca6b3          	p.insert	a3,s9,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c00981a:	c136c6b3          	p.bset	a3,a3,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00981e:	c156c6b3          	p.bset	a3,a3,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c009822:	40dda023          	sw	a3,1024(s11)
1c009826:	24078793          	addi	a5,a5,576
1c00982a:	973e                	add	a4,a4,a5
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00982c:	40eda023          	sw	a4,1024(s11)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c009830:	40cda023          	sw	a2,1024(s11)
        if (!merge) copy->id = id;
1c009834:	c92a                	sw	a0,144(sp)
        copy->length = 0;
1c009836:	d102                	sw	zero,160(sp)
  __builtin_pulp_spr_write(reg, val);
1c009838:	30059073          	csrw	mstatus,a1
1c00983c:	00092703          	lw	a4,0(s2)
1c009840:	bd89                	j	1c009692 <S36_Conv2d_128x64x3x3_Relu+0x2de>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009842:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c009846:	404da783          	lw	a5,1028(s11)
1c00984a:	4746                	lw	a4,80(sp)
1c00984c:	40e7d7b3          	sra	a5,a5,a4
1c009850:	fc17b7b3          	p.bclr	a5,a5,30,1
1c009854:	c78d                	beqz	a5,1c00987e <S36_Conv2d_128x64x3x3_Relu+0x4ca>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009856:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c00985a:	30069073          	csrw	mstatus,a3
1c00985e:	00cda423          	sw	a2,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009862:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c009866:	00cda223          	sw	a2,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00986a:	300476f3          	csrrci	a3,mstatus,8
1c00986e:	404da783          	lw	a5,1028(s11)
1c009872:	4746                	lw	a4,80(sp)
1c009874:	40e7d7b3          	sra	a5,a5,a4
1c009878:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00987c:	fff9                	bnez	a5,1c00985a <S36_Conv2d_128x64x3x3_Relu+0x4a6>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00987e:	4785                	li	a5,1
1c009880:	00e79733          	sll	a4,a5,a4
1c009884:	40eda223          	sw	a4,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c009888:	30069073          	csrw	mstatus,a3
1c00988c:	001f0b13          	addi	s6,t5,1
				if (_SN_In) {
1c009890:	da0585e3          	beqz	a1,1c00963a <S36_Conv2d_128x64x3x3_Relu+0x286>
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+160*((D0Ind_Total+1)%2)),
1c009894:	fc1b36b3          	p.bclr	a3,s6,30,1
1c009898:	00269793          	slli	a5,a3,0x2
1c00989c:	00092703          	lw	a4,0(s2)
1c0098a0:	97b6                	add	a5,a5,a3
1c0098a2:	0796                	slli	a5,a5,0x5
1c0098a4:	97ba                	add	a5,a5,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0098a6:	30047773          	csrrci	a4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0098aa:	400da683          	lw	a3,1024(s11)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0098ae:	c705c5b3          	p.bset	a1,a1,3,16
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0098b2:	c155c5b3          	p.bset	a1,a1,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0098b6:	40bda023          	sw	a1,1024(s11)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0098ba:	40fda023          	sw	a5,1024(s11)
1c0098be:	4862                	lw	a6,24(sp)
1c0098c0:	008807b3          	add	a5,a6,s0
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0098c4:	40fda023          	sw	a5,1024(s11)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0098c8:	00280637          	lui	a2,0x280
1c0098cc:	02860613          	addi	a2,a2,40 # 280028 <__L2+0x200028>
1c0098d0:	40cda023          	sw	a2,1024(s11)
        if (!merge) copy->id = id;
1c0098d4:	c8b6                	sw	a3,80(sp)
        copy->length = 0;
1c0098d6:	d082                	sw	zero,96(sp)
  __builtin_pulp_spr_write(reg, val);
1c0098d8:	30071073          	csrw	mstatus,a4
1c0098dc:	bbb9                	j	1c00963a <S36_Conv2d_128x64x3x3_Relu+0x286>
					AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) Filter+_NN_Filter), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory+99824+9216*((D0Ind_Total)%2)),
1c0098de:	1c015737          	lui	a4,0x1c015
1c0098e2:	000c2583          	lw	a1,0(s8)
1c0098e6:	cf870713          	addi	a4,a4,-776 # 1c014cf8 <HyperFlash>
1c0098ea:	4852                	lw	a6,20(sp)
1c0098ec:	6661                	lui	a2,0x18
1c0098ee:	4f08                	lw	a0,24(a4)
1c0098f0:	5f060613          	addi	a2,a2,1520 # 185f0 <__L1Cl+0x85f0>
1c0098f4:	967e                	add	a2,a2,t6
1c0098f6:	962e                	add	a2,a2,a1
1c0098f8:	099c                	addi	a5,sp,208
1c0098fa:	4705                	li	a4,1
1c0098fc:	86de                	mv	a3,s7
1c0098fe:	009805b3          	add	a1,a6,s1
1c009902:	c87a                	sw	t5,16(sp)
1c009904:	c67e                	sw	t6,12(sp)
1c009906:	1ec040ef          	jal	ra,1c00daf2 <pi_cl_fs_copy>
1c00990a:	4fb2                	lw	t6,12(sp)
1c00990c:	4f42                	lw	t5,16(sp)
1c00990e:	bbb9                	j	1c00966c <S36_Conv2d_128x64x3x3_Relu+0x2b8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009910:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c009914:	4047a783          	lw	a5,1028(a5)
1c009918:	56c6                	lw	a3,112(sp)
1c00991a:	40d7d7b3          	sra	a5,a5,a3
1c00991e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c009922:	c79d                	beqz	a5,1c009950 <S36_Conv2d_128x64x3x3_Relu+0x59c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009924:	10000593          	li	a1,256
1c009928:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00992c:	30061073          	csrw	mstatus,a2
1c009930:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009934:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c009938:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00993c:	30047673          	csrrci	a2,mstatus,8
1c009940:	40472783          	lw	a5,1028(a4)
1c009944:	56c6                	lw	a3,112(sp)
1c009946:	40d7d7b3          	sra	a5,a5,a3
1c00994a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00994e:	fff9                	bnez	a5,1c00992c <S36_Conv2d_128x64x3x3_Relu+0x578>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c009950:	4785                	li	a5,1
1c009952:	00d796b3          	sll	a3,a5,a3
1c009956:	002047b7          	lui	a5,0x204
1c00995a:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00995e:	30061073          	csrw	mstatus,a2
1c009962:	be59                	j	1c0094f8 <S36_Conv2d_128x64x3x3_Relu+0x144>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009964:	30047673          	csrrci	a2,mstatus,8
1c009968:	404da783          	lw	a5,1028(s11)
1c00996c:	56ca                	lw	a3,176(sp)
1c00996e:	40d7d7b3          	sra	a5,a5,a3
1c009972:	fc17b7b3          	p.bclr	a5,a5,30,1
1c009976:	c79d                	beqz	a5,1c0099a4 <S36_Conv2d_128x64x3x3_Relu+0x5f0>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009978:	10000593          	li	a1,256
1c00997c:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c009980:	30061073          	csrw	mstatus,a2
1c009984:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009988:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00998c:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009990:	30047673          	csrrci	a2,mstatus,8
1c009994:	40472783          	lw	a5,1028(a4)
1c009998:	56ca                	lw	a3,176(sp)
1c00999a:	40d7d7b3          	sra	a5,a5,a3
1c00999e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0099a2:	fff9                	bnez	a5,1c009980 <S36_Conv2d_128x64x3x3_Relu+0x5cc>
1c0099a4:	4785                	li	a5,1
1c0099a6:	00d796b3          	sll	a3,a5,a3
1c0099aa:	002047b7          	lui	a5,0x204
1c0099ae:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0099b2:	30061073          	csrw	mstatus,a2
1c0099b6:	bb45                	j	1c009766 <S36_Conv2d_128x64x3x3_Relu+0x3b2>
				_SN_In = 0;
1c0099b8:	4581                	li	a1,0
				_SNN_Filter = 0;
1c0099ba:	4b81                	li	s7,0
1c0099bc:	b9a1                	j	1c009614 <S36_Conv2d_128x64x3x3_Relu+0x260>
1c0099be:	0a000593          	li	a1,160
1c0099c2:	4b81                	li	s7,0
1c0099c4:	b981                	j	1c009614 <S36_Conv2d_128x64x3x3_Relu+0x260>

1c0099c6 <S37_MaxPool_2x2>:
void S37_MaxPool_2x2(
		short int * __restrict__ In,
		short int * __restrict__ Out)

{
1c0099c6:	7175                	addi	sp,sp,-144
1c0099c8:	c326                	sw	s1,132(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D0, [0 x 1024, 1024]][Tile0, 1:[2x2], 2]
		Tile0: [0, 1024, 1024], Tile1: [0, 1024, 1024], Tile2; [0, 1024, 1024]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0);
1c0099ca:	100004b7          	lui	s1,0x10000
1c0099ce:	02048493          	addi	s1,s1,32 # 10000020 <cnn_ssd_L1_Memory>
1c0099d2:	4094                	lw	a3,0(s1)
	KerArg0->W = (unsigned short int) (5);
	KerArg0->UsedW = (unsigned short int) (4);
	KerArg0->H = (unsigned short int) (4);
	KerArg0->OutFeatures = (unsigned short int) (128);
	KerArg0->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+5120);
1c0099d4:	6705                	lui	a4,0x1
1c0099d6:	40070713          	addi	a4,a4,1024 # 1400 <__rt_stack_size+0xc00>
1c0099da:	00e687b3          	add	a5,a3,a4
	KerArg0->W = (unsigned short int) (5);
1c0099de:	1c014637          	lui	a2,0x1c014
1c0099e2:	5b062603          	lw	a2,1456(a2) # 1c0145b0 <IntegerExpLUT+0x68>
	KerArg0->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+5120);
1c0099e6:	ccbe                	sw	a5,88(sp)
	KerArg0->Pad = (v4s) 0;
1c0099e8:	000077d7          	pv.add.sci.b	a5,zero,0
1c0099ec:	cebe                	sw	a5,92(sp)
	KerArg0->Orientation = (unsigned char) (1);
1c0099ee:	4785                	li	a5,1
1c0099f0:	06f11123          	sh	a5,98(sp)
	KerArg0->Oper = (unsigned char) (0);
	KerArg0->LB = (int) (-32768);
1c0099f4:	77e1                	lui	a5,0xffff8
	KerArg0->W = (unsigned short int) (5);
1c0099f6:	c6b2                	sw	a2,76(sp)
	KerArg0->LB = (int) (-32768);
1c0099f8:	d4be                	sw	a5,104(sp)
	KerArg0->H = (unsigned short int) (4);
1c0099fa:	4611                	li	a2,4
	KerArg0->UB = (int) (32767);
1c0099fc:	67a1                	lui	a5,0x8
{
1c0099fe:	c14a                	sw	s2,128(sp)
	KerArg0->H = (unsigned short int) (4);
1c009a00:	04c11823          	sh	a2,80(sp)
	KerArg0->UB = (int) (32767);
1c009a04:	17fd                	addi	a5,a5,-1
	KerArg0->OutFeatures = (unsigned short int) (128);
1c009a06:	08000613          	li	a2,128
{
1c009a0a:	892e                	mv	s2,a1
1c009a0c:	c706                	sw	ra,140(sp)
1c009a0e:	c522                	sw	s0,136(sp)
1c009a10:	dece                	sw	s3,124(sp)
	KerArg0->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0);
1c009a12:	c4b6                	sw	a3,72(sp)
	KerArg0->OutFeatures = (unsigned short int) (128);
1c009a14:	04c11a23          	sh	a2,84(sp)
	KerArg0->UB = (int) (32767);
1c009a18:	d6be                	sw	a5,108(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009a1a:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c009a1e:	002047b7          	lui	a5,0x204
1c009a22:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c009a26:	002b0837          	lui	a6,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c009a2a:	01076733          	or	a4,a4,a6
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c009a2e:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c009a32:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c009a36:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c009a3a:	c42e                	sw	a1,8(sp)
        copy->length = 0;
1c009a3c:	cc02                	sw	zero,24(sp)
  __builtin_pulp_spr_write(reg, val);
1c009a3e:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c009a42:	4762                	lw	a4,24(sp)
1c009a44:	10070a63          	beqz	a4,1c009b58 <S37_MaxPool_2x2+0x192>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c009a48:	5682                	lw	a3,32(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009a4a:	02000713          	li	a4,32
1c009a4e:	ca89                	beqz	a3,1c009a60 <S37_MaxPool_2x2+0x9a>
1c009a50:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009a54:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c009a58:	00e7a223          	sw	a4,4(a5)
1c009a5c:	5682                	lw	a3,32(sp)
1c009a5e:	faed                	bnez	a3,1c009a50 <S37_MaxPool_2x2+0x8a>
	{ /* Single iteration on D0 */
		int D0Ind_Last = 1;
		{ /* Single iteration on Tile0 */
			int T0Ind_Last = 1;
			/*====================== Call Kernel LOC_LOOP =========================*/
			KerArg0->UsedH = (unsigned short int) (4);
1c009a60:	4711                	li	a4,4
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c009a62:	0ff00793          	li	a5,255
1c009a66:	00204437          	lui	s0,0x204
1c009a6a:	04e11923          	sh	a4,82(sp)
1c009a6e:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c009a72:	20040993          	addi	s3,s0,512
1c009a76:	00f9a023          	sw	a5,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c009a7a:	00f9a623          	sw	a5,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c009a7e:	1c00d7b7          	lui	a5,0x1c00d
1c009a82:	73a78793          	addi	a5,a5,1850 # 1c00d73a <KerParPool2x2Stride2_fp>
1c009a86:	08f42023          	sw	a5,128(s0)
1c009a8a:	00a8                	addi	a0,sp,72
1c009a8c:	08a42023          	sw	a0,128(s0)
1c009a90:	4ab030ef          	jal	ra,1c00d73a <KerParPool2x2Stride2_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009a94:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParPool2x2Stride2_fp, (void *) KerArg0);
			__CALL(KerParPool2x2Stride2_fp, KerArg0);
		} /* End iteration on Tile0 */
	} /* End iteration on D0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+5120), 1024, 1, &DmaW_Evt1);
1c009a98:	6785                	lui	a5,0x1
1c009a9a:	4098                	lw	a4,0(s1)
1c009a9c:	40078793          	addi	a5,a5,1024 # 1400 <__rt_stack_size+0xc00>
1c009aa0:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009aa2:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c009aa6:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c009aaa:	000a07b7          	lui	a5,0xa0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c009aae:	40078793          	addi	a5,a5,1024 # a0400 <__L2+0x20400>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c009ab2:	c157c7b3          	p.bset	a5,a5,0,21
1c009ab6:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c009aba:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c009abe:	41242023          	sw	s2,1024(s0)
        if (!merge) copy->id = id;
1c009ac2:	d432                	sw	a2,40(sp)
        copy->length = 0;
1c009ac4:	dc02                	sw	zero,56(sp)
  __builtin_pulp_spr_write(reg, val);
1c009ac6:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c009aca:	57e2                	lw	a5,56(sp)
1c009acc:	c795                	beqz	a5,1c009af8 <S37_MaxPool_2x2+0x132>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c009ace:	4686                	lw	a3,64(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009ad0:	02000713          	li	a4,32
1c009ad4:	002047b7          	lui	a5,0x204
1c009ad8:	ca89                	beqz	a3,1c009aea <S37_MaxPool_2x2+0x124>
1c009ada:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009ade:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c009ae2:	00e7a223          	sw	a4,4(a5)
1c009ae6:	4686                	lw	a3,64(sp)
1c009ae8:	faed                	bnez	a3,1c009ada <S37_MaxPool_2x2+0x114>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c009aea:	40ba                	lw	ra,140(sp)
1c009aec:	442a                	lw	s0,136(sp)
1c009aee:	449a                	lw	s1,132(sp)
1c009af0:	490a                	lw	s2,128(sp)
1c009af2:	59f6                	lw	s3,124(sp)
1c009af4:	6149                	addi	sp,sp,144
1c009af6:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009af8:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c009afc:	40442403          	lw	s0,1028(s0)
1c009b00:	56a2                	lw	a3,40(sp)
1c009b02:	40d45433          	sra	s0,s0,a3
1c009b06:	fc143433          	p.bclr	s0,s0,30,1
1c009b0a:	c41d                	beqz	s0,1c009b38 <S37_MaxPool_2x2+0x172>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009b0c:	10000593          	li	a1,256
1c009b10:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c009b14:	30061073          	csrw	mstatus,a2
1c009b18:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009b1c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c009b20:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009b24:	30047673          	csrrci	a2,mstatus,8
1c009b28:	40472783          	lw	a5,1028(a4)
1c009b2c:	56a2                	lw	a3,40(sp)
1c009b2e:	40d7d7b3          	sra	a5,a5,a3
1c009b32:	fc17b7b3          	p.bclr	a5,a5,30,1
1c009b36:	fff9                	bnez	a5,1c009b14 <S37_MaxPool_2x2+0x14e>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c009b38:	4785                	li	a5,1
1c009b3a:	00d796b3          	sll	a3,a5,a3
1c009b3e:	002047b7          	lui	a5,0x204
1c009b42:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c009b46:	30061073          	csrw	mstatus,a2
1c009b4a:	40ba                	lw	ra,140(sp)
1c009b4c:	442a                	lw	s0,136(sp)
1c009b4e:	449a                	lw	s1,132(sp)
1c009b50:	490a                	lw	s2,128(sp)
1c009b52:	59f6                	lw	s3,124(sp)
1c009b54:	6149                	addi	sp,sp,144
1c009b56:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009b58:	30047673          	csrrci	a2,mstatus,8
1c009b5c:	4047a783          	lw	a5,1028(a5)
1c009b60:	46a2                	lw	a3,8(sp)
1c009b62:	40d7d7b3          	sra	a5,a5,a3
1c009b66:	fc17b7b3          	p.bclr	a5,a5,30,1
1c009b6a:	c79d                	beqz	a5,1c009b98 <S37_MaxPool_2x2+0x1d2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009b6c:	10000513          	li	a0,256
1c009b70:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c009b74:	30061073          	csrw	mstatus,a2
1c009b78:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009b7c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c009b80:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009b84:	30047673          	csrrci	a2,mstatus,8
1c009b88:	40472783          	lw	a5,1028(a4)
1c009b8c:	46a2                	lw	a3,8(sp)
1c009b8e:	40d7d7b3          	sra	a5,a5,a3
1c009b92:	fc17b7b3          	p.bclr	a5,a5,30,1
1c009b96:	fff9                	bnez	a5,1c009b74 <S37_MaxPool_2x2+0x1ae>
1c009b98:	4785                	li	a5,1
1c009b9a:	00d796b3          	sll	a3,a5,a3
1c009b9e:	002047b7          	lui	a5,0x204
1c009ba2:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c009ba6:	30061073          	csrw	mstatus,a2
1c009baa:	bd5d                	j	1c009a60 <S37_MaxPool_2x2+0x9a>

1c009bac <S40_Conv2d_18x128x3x3>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c009bac:	7141                	addi	sp,sp,-496
		KerArgItSpace (User Kernel Iter Order):
			[D1, [1 x 1280, 160]][Tile0, 1:[5x4], 4]
		Tile0: [0, 1280, 80], Tile1: [0, 1280, 80], Tile2; [0, 1280, 80]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+44612);
1c009bae:	10000e37          	lui	t3,0x10000
{
1c009bb2:	1d912223          	sw	s9,452(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+44612);
1c009bb6:	020e0c93          	addi	s9,t3,32 # 10000020 <cnn_ssd_L1_Memory>
1c009bba:	000ca803          	lw	a6,0(s9)
	KerArg0->W = (unsigned short int) (5);
1c009bbe:	1c0147b7          	lui	a5,0x1c014
1c009bc2:	5b07a883          	lw	a7,1456(a5) # 1c0145b0 <IntegerExpLUT+0x68>
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+44612);
1c009bc6:	67ad                	lui	a5,0xb
1c009bc8:	e4478793          	addi	a5,a5,-444 # ae44 <__rt_stack_size+0xa644>
1c009bcc:	97c2                	add	a5,a5,a6
{
1c009bce:	d636                	sw	a3,44(sp)
	KerArg0->H = (unsigned short int) (4);
	KerArg0->NormBias = (signed char) (12);
1c009bd0:	46b1                	li	a3,12
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+44612);
1c009bd2:	de3e                	sw	a5,60(sp)
	KerArg0->NormBias = (signed char) (12);
1c009bd4:	04d10323          	sb	a3,70(sp)
	KerArg1->W = (unsigned short int) (5);
	KerArg1->UsedW = (unsigned short int) (5);
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+44612);
1c009bd8:	10f12023          	sw	a5,256(sp)
	KerArg1->W = (unsigned short int) (5);
1c009bdc:	022066d7          	pv.add.sci.h	a3,zero,5
	KerArg1->Norm = (unsigned char) (16);
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
	KerArg1->Orientation = (unsigned char) (1);
	KerArg2->In = (int * __restrict__) (cnn_ssd_L1_Memory+44612);
1c009be0:	c6be                	sw	a5,76(sp)
	KerArg2->W = (unsigned short int) (5);
	KerArg2->H = (unsigned short int) (4);
	KerArg2->Norm = (unsigned char) (16);
	KerArg2->LB = (int) (-32768);
1c009be2:	77e1                	lui	a5,0xffff8
	KerArg1->W = (unsigned short int) (5);
1c009be4:	d7b6                	sw	a3,236(sp)
	KerArg2->LB = (int) (-32768);
1c009be6:	cebe                	sw	a5,92(sp)
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c009be8:	020076d7          	pv.add.sci.b	a3,zero,1
	KerArg2->UB = (int) (32767);
1c009bec:	67a1                	lui	a5,0x8
	KerArg1->Norm = (unsigned char) (16);
1c009bee:	4741                	li	a4,16
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c009bf0:	10d12223          	sw	a3,260(sp)
	KerArg2->UB = (int) (32767);
1c009bf4:	17fd                	addi	a5,a5,-1
	KerArg1->Orientation = (unsigned char) (1);
1c009bf6:	4685                	li	a3,1
{
1c009bf8:	1e112623          	sw	ra,492(sp)
1c009bfc:	1e812423          	sw	s0,488(sp)
1c009c00:	1e912223          	sw	s1,484(sp)
1c009c04:	1f212023          	sw	s2,480(sp)
1c009c08:	1d312e23          	sw	s3,476(sp)
1c009c0c:	1d412c23          	sw	s4,472(sp)
1c009c10:	1d512a23          	sw	s5,468(sp)
1c009c14:	1d612823          	sw	s6,464(sp)
1c009c18:	1d712623          	sw	s7,460(sp)
1c009c1c:	1d812423          	sw	s8,456(sp)
1c009c20:	1da12023          	sw	s10,448(sp)
1c009c24:	1bb12e23          	sw	s11,444(sp)
1c009c28:	d02a                	sw	a0,32(sp)
1c009c2a:	d22e                	sw	a1,36(sp)
	KerArg0->W = (unsigned short int) (5);
1c009c2c:	c0c6                	sw	a7,64(sp)
	KerArg1->Norm = (unsigned char) (16);
1c009c2e:	10e10423          	sb	a4,264(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c009c32:	10d105a3          	sb	a3,267(sp)
	KerArg2->W = (unsigned short int) (5);
1c009c36:	c8c6                	sw	a7,80(sp)
	KerArg2->Norm = (unsigned char) (16);
1c009c38:	04e10c23          	sb	a4,88(sp)
	KerArg2->UB = (int) (32767);
1c009c3c:	d0be                	sw	a5,96(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009c3e:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c009c42:	002047b7          	lui	a5,0x204
1c009c46:	4007a503          	lw	a0,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c009c4a:	6685                	lui	a3,0x1
1c009c4c:	a5068893          	addi	a7,a3,-1456 # a50 <__rt_stack_size+0x250>
1c009c50:	00070737          	lui	a4,0x70
1c009c54:	de08a733          	p.insert	a4,a7,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c009c58:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c009c5c:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c009c60:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c009c64:	4107a023          	sw	a6,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c009c68:	5302                	lw	t1,32(sp)
1c009c6a:	4067a023          	sw	t1,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c009c6e:	00280737          	lui	a4,0x280
1c009c72:	02870713          	addi	a4,a4,40 # 280028 <__L2+0x200028>
1c009c76:	40e7a023          	sw	a4,1024(a5)
        if (!merge) copy->id = id;
1c009c7a:	d4aa                	sw	a0,104(sp)
        copy->length = 0;
1c009c7c:	dc82                	sw	zero,120(sp)
  __builtin_pulp_spr_write(reg, val);
1c009c7e:	30059073          	csrw	mstatus,a1
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+0), 2640, 40, 40, 0, &DmaR_Evt1);
	_N_In=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+5280), 36, 0, &DmaR_Evt2);
1c009c82:	000ca703          	lw	a4,0(s9)
1c009c86:	4a068693          	addi	a3,a3,1184
1c009c8a:	96ba                	add	a3,a3,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009c8c:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c009c90:	4007a503          	lw	a0,1024(a5)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c009c94:	00030737          	lui	a4,0x30
1c009c98:	02476713          	ori	a4,a4,36
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c009c9c:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c009ca0:	c1574733          	p.bset	a4,a4,0,21
1c009ca4:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c009ca8:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c009cac:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c009cb0:	c52a                	sw	a0,136(sp)
        copy->length = 0;
1c009cb2:	cd02                	sw	zero,152(sp)
  __builtin_pulp_spr_write(reg, val);
1c009cb4:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c009cb8:	476a                	lw	a4,152(sp)
1c009cba:	5c070f63          	beqz	a4,1c00a298 <S40_Conv2d_18x128x3x3+0x6ec>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c009cbe:	568a                	lw	a3,160(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009cc0:	02000713          	li	a4,32
1c009cc4:	ca89                	beqz	a3,1c009cd6 <S40_Conv2d_18x128x3x3+0x12a>
1c009cc6:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009cca:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c009cce:	00e7a223          	sw	a4,4(a5)
1c009cd2:	568a                	lw	a3,160(sp)
1c009cd4:	faed                	bnez	a3,1c009cc6 <S40_Conv2d_18x128x3x3+0x11a>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+5316+0), 19008, 0, &DmaR_Evt3);
1c009cd6:	000ca683          	lw	a3,0(s9)
1c009cda:	6785                	lui	a5,0x1
1c009cdc:	4c478793          	addi	a5,a5,1220 # 14c4 <__rt_stack_size+0xcc4>
1c009ce0:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009ce2:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c009ce6:	00204737          	lui	a4,0x204
1c009cea:	40072583          	lw	a1,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c009cee:	000357b7          	lui	a5,0x35
1c009cf2:	a4078793          	addi	a5,a5,-1472 # 34a40 <__L1Cl+0x24a40>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c009cf6:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c009cfa:	c157c7b3          	p.bset	a5,a5,0,21
1c009cfe:	40f72023          	sw	a5,1024(a4)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c009d02:	40d72023          	sw	a3,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c009d06:	5312                	lw	t1,36(sp)
1c009d08:	40672023          	sw	t1,1024(a4)
        if (!merge) copy->id = id;
1c009d0c:	d52e                	sw	a1,168(sp)
        copy->length = 0;
1c009d0e:	dd02                	sw	zero,184(sp)
  __builtin_pulp_spr_write(reg, val);
1c009d10:	30061073          	csrw	mstatus,a2
	_N_Filter=0;
	_C_Out=0; _SC_Out=640; _LC_Out=40;
1c009d14:	28000313          	li	t1,640
1c009d18:	c81a                	sw	t1,16(sp)
1c009d1a:	6505                	lui	a0,0x1
1c009d1c:	04c10313          	addi	t1,sp,76
	_SPP_Out=0; _SP_Out=0;
1c009d20:	cc02                	sw	zero,24(sp)
	_N_In=0;
1c009d22:	ca02                	sw	zero,20(sp)
	int D0Ind, D0Ind_Total=0, D0Ind_Last, D0Ind_NextLast;
1c009d24:	4d81                	li	s11,0
	_SPP_Out=0; _SP_Out=0;
1c009d26:	4b01                	li	s6,0
	_N_Filter=0;
1c009d28:	4a01                	li	s4,0
	/*============================= End Read Tiles Prolog ===============================*/
	for (D1Ind=0; D1Ind<2; D1Ind++) { /* Iteration on D1 */
1c009d2a:	4b81                	li	s7,0
		int D1Ind_Last = (D1Ind==1), D1Ind_NextLast = ((D1Ind+1)==1);
		{ /* Single iteration on Tile0 */
			int T0Ind_Last = 1, T0Ind_NextLast = 1;
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			KerArg0->OutFeatures = (unsigned short int) (D1Ind_Last?2:16);
1c009d2c:	44c1                	li	s1,16
1c009d2e:	03c10d13          	addi	s10,sp,60
1c009d32:	0e810913          	addi	s2,sp,232
1c009d36:	c61a                	sw	t1,12(sp)
1c009d38:	a5050a93          	addi	s5,a0,-1456 # a50 <__rt_stack_size+0x250>
			KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+5280+((D1Ind)*32));
1c009d3c:	000ca703          	lw	a4,0(s9)
1c009d40:	002b9413          	slli	s0,s7,0x2
1c009d44:	0a5b8793          	addi	a5,s7,165
1c009d48:	945e                	add	s0,s0,s7
1c009d4a:	0796                	slli	a5,a5,0x5
1c009d4c:	97ba                	add	a5,a5,a4
1c009d4e:	041e                	slli	s0,s0,0x7
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c009d50:	0ff00693          	li	a3,255
1c009d54:	00204737          	lui	a4,0x204
1c009d58:	c4be                	sw	a5,72(sp)
			KerArg0->OutFeatures = (unsigned short int) (D1Ind_Last?2:16);
1c009d5a:	04911223          	sh	s1,68(sp)
1c009d5e:	08d72223          	sw	a3,132(a4) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c009d62:	20070993          	addi	s3,a4,512
1c009d66:	00d9a023          	sw	a3,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c009d6a:	00d9a623          	sw	a3,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c009d6e:	1c00d537          	lui	a0,0x1c00d
1c009d72:	92a50513          	addi	a0,a0,-1750 # 1c00c92a <KerParSetBias_DP_fp>
1c009d76:	08a72023          	sw	a0,128(a4)
1c009d7a:	09a72023          	sw	s10,128(a4)
1c009d7e:	856a                	mv	a0,s10
1c009d80:	3ab020ef          	jal	ra,1c00c92a <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009d84:	01c9e783          	p.elw	a5,28(s3)
1c009d88:	ce02                	sw	zero,28(sp)
1c009d8a:	001ba363          	p.beqimm	s7,1,1c009d90 <S40_Conv2d_18x128x3x3+0x1e4>
1c009d8e:	ce56                	sw	s5,28(sp)
			for (D0Ind=0; D0Ind<2; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
				int D0Ind_Last = (D0Ind==1), D0Ind_NextLast = ((D0Ind+1)==1);
				/*================================= Prepare Tiles ===================================*/
				_SN_In = 0;
				if (!(D0Ind_Last)) {
					_N_In = _N_In + (2640); _LN_In = (40); _SN_In = (((1)?62:66)*_LN_In); 
1c009d90:	4352                	lw	t1,20(sp)
				} else if (!(D1Ind_Last)) {
					_N_In = _N_In + (-2640); _LN_In = (40); _SN_In = (66*_LN_In); 
				}
				_SN_Filter = 0;
				if (!(D0Ind_Last)) {
					_N_Filter = _N_Filter + (((D1Ind_Last)?(2376):(19008))); _SN_Filter = (((D1Ind_Last)?(((1)?2232:2376)):(((1)?17856:19008)))); 
1c009d92:	6695                	lui	a3,0x5
			for (D0Ind=0; D0Ind<2; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c009d94:	4581                	li	a1,0
					_N_In = _N_In + (2640); _LN_In = (40); _SN_In = (((1)?62:66)*_LN_In); 
1c009d96:	9356                	add	t1,t1,s5
1c009d98:	ca1a                	sw	t1,20(sp)
					_N_Filter = _N_Filter + (((D1Ind_Last)?(2376):(19008))); _SN_Filter = (((D1Ind_Last)?(((1)?2232:2376)):(((1)?17856:19008)))); 
1c009d9a:	a4068c13          	addi	s8,a3,-1472 # 4a40 <__rt_stack_size+0x4240>
1c009d9e:	5a1ba563          	p.beqimm	s7,1,1c00a348 <S40_Conv2d_18x128x3x3+0x79c>
					_N_In = _N_In + (2640); _LN_In = (40); _SN_In = (((1)?62:66)*_LN_In); 
1c009da2:	6505                	lui	a0,0x1
					_N_Filter = _N_Filter + (((D1Ind_Last)?(2376):(19008))); _SN_Filter = (((D1Ind_Last)?(((1)?2232:2376)):(((1)?17856:19008)))); 
1c009da4:	6811                	lui	a6,0x4
1c009da6:	9a62                	add	s4,s4,s8
					_N_In = _N_In + (2640); _LN_In = (40); _SN_In = (((1)?62:66)*_LN_In); 
1c009da8:	9b050e13          	addi	t3,a0,-1616 # 9b0 <__rt_stack_size+0x1b0>
					_N_Filter = _N_Filter + (((D1Ind_Last)?(2376):(19008))); _SN_Filter = (((D1Ind_Last)?(((1)?2232:2376)):(((1)?17856:19008)))); 
1c009dac:	5c080813          	addi	a6,a6,1472 # 45c0 <__rt_stack_size+0x3dc0>
  if (copy->length == 0)
1c009db0:	57e6                	lw	a5,120(sp)
1c009db2:	16078f63          	beqz	a5,1c009f30 <S40_Conv2d_18x128x3x3+0x384>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c009db6:	468a                	lw	a3,128(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009db8:	02000713          	li	a4,32
1c009dbc:	002047b7          	lui	a5,0x204
1c009dc0:	ca89                	beqz	a3,1c009dd2 <S40_Conv2d_18x128x3x3+0x226>
1c009dc2:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009dc6:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c009dca:	00e7a223          	sw	a4,4(a5)
1c009dce:	468a                	lw	a3,128(sp)
1c009dd0:	faed                	bnez	a3,1c009dc2 <S40_Conv2d_18x128x3x3+0x216>
1c009dd2:	001d8993          	addi	s3,s11,1
					_N_Filter = _N_Filter + (36864)+(((D1Ind_Last)?(-2376):(-19008))); _SN_Filter = (((1)?(2376):(19008))); 
				}
				/*============================= End Prepare Tiles ===================================*/
				/*================================= Read Tiles ======================================*/
				AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In */
				if (_SN_In) {
1c009dd6:	1a0e1c63          	bnez	t3,1c009f8e <S40_Conv2d_18x128x3x3+0x3e2>
  if (copy->length == 0)
1c009dda:	57ea                	lw	a5,184(sp)
1c009ddc:	cbcd                	beqz	a5,1c009e8e <S40_Conv2d_18x128x3x3+0x2e2>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c009dde:	468e                	lw	a3,192(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009de0:	02000713          	li	a4,32
1c009de4:	002047b7          	lui	a5,0x204
1c009de8:	ca89                	beqz	a3,1c009dfa <S40_Conv2d_18x128x3x3+0x24e>
1c009dea:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009dee:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c009df2:	00e7a223          	sw	a4,4(a5)
1c009df6:	468e                	lw	a3,192(sp)
1c009df8:	faed                	bnez	a3,1c009dea <S40_Conv2d_18x128x3x3+0x23e>
1c009dfa:	000ca783          	lw	a5,0(s9)
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+2640*((D0Ind_Total+1)%2)),
							_SN_In, 40, _LN_In, 0, &DmaR_Evt1);
				}
				AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read Filter */
				if (_SN_Filter) {
1c009dfe:	0e081763          	bnez	a6,1c009eec <S40_Conv2d_18x128x3x3+0x340>
					AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+5316+19008*((D0Ind_Total+1)%2)),
							_SN_Filter, 0, &DmaR_Evt3);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+2640*((D0Ind_Total)%2));
1c009e02:	fc1dbdb3          	p.bclr	s11,s11,30,1
1c009e06:	86be                	mv	a3,a5
1c009e08:	6705                	lui	a4,0x1
1c009e0a:	435d86b3          	p.mac	a3,s11,s5
1c009e0e:	4c470713          	addi	a4,a4,1220 # 14c4 <__rt_stack_size+0xcc4>
				KerArg1->H = (unsigned short int) (6-1*(1)-1*(1));
1c009e12:	00206557          	pv.add.sci.h	a0,zero,4
1c009e16:	d9aa                	sw	a0,240(sp)
1c009e18:	438d8733          	p.mac	a4,s11,s8
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+2640*((D0Ind_Total)%2));
1c009e1c:	d5b6                	sw	a3,232(sp)
1c009e1e:	97ba                	add	a5,a5,a4
				KerArg1->UsedH = (unsigned short int) (6-1*(1)-1*(1));
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?62:66);
1c009e20:	1a15ae63          	p.beqimm	a1,1,1c009fdc <S40_Conv2d_18x128x3x3+0x430>
1c009e24:	04200613          	li	a2,66
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c009e28:	0ff00693          	li	a3,255
1c009e2c:	00204737          	lui	a4,0x204
1c009e30:	0ec11a23          	sh	a2,244(sp)
				KerArg1->OutFeatures = (unsigned short int) (D1Ind_Last?2:16);
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+5316+19008*((D0Ind_Total)%2));
1c009e34:	dfbe                	sw	a5,252(sp)
				KerArg1->TotalInFeatures = (short int) (D0Ind_Last?62:66);
1c009e36:	0ec11c23          	sh	a2,248(sp)
				KerArg1->OutFeatures = (unsigned short int) (D1Ind_Last?2:16);
1c009e3a:	0e911b23          	sh	s1,246(sp)
1c009e3e:	08d72223          	sw	a3,132(a4) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c009e42:	20070d93          	addi	s11,a4,512
1c009e46:	00dda023          	sw	a3,0(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c009e4a:	00dda623          	sw	a3,12(s11)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c009e4e:	1c00d7b7          	lui	a5,0x1c00d
1c009e52:	f4278793          	addi	a5,a5,-190 # 1c00cf42 <KerParConv3x3Stride1_DP_fp>
1c009e56:	08f72023          	sw	a5,128(a4)
1c009e5a:	09272023          	sw	s2,128(a4)
1c009e5e:	854a                	mv	a0,s2
1c009e60:	0e2030ef          	jal	ra,1c00cf42 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009e64:	01cde783          	p.elw	a5,28(s11)
1c009e68:	4585                	li	a1,1
1c009e6a:	8dce                	mv	s11,s3
				} else if (!(D1Ind_Last)) {
1c009e6c:	4e1ba763          	p.beqimm	s7,1,1c00a35a <S40_Conv2d_18x128x3x3+0x7ae>
					_N_In = _N_In + (-2640); _LN_In = (40); _SN_In = (66*_LN_In); 
1c009e70:	4352                	lw	t1,20(sp)
1c009e72:	757d                	lui	a0,0xfffff
1c009e74:	5b050513          	addi	a0,a0,1456 # fffff5b0 <pulp__FC+0xfffff5b1>
					_N_Filter = _N_Filter + (36864)+(((D1Ind_Last)?(-2376):(-19008))); _SN_Filter = (((1)?(2376):(19008))); 
1c009e78:	6791                	lui	a5,0x4
					_N_In = _N_In + (-2640); _LN_In = (40); _SN_In = (66*_LN_In); 
1c009e7a:	932a                	add	t1,t1,a0
					_N_Filter = _N_Filter + (36864)+(((D1Ind_Last)?(-2376):(-19008))); _SN_Filter = (((1)?(2376):(19008))); 
1c009e7c:	5c078793          	addi	a5,a5,1472 # 45c0 <__rt_stack_size+0x3dc0>
1c009e80:	6685                	lui	a3,0x1
					_N_In = _N_In + (-2640); _LN_In = (40); _SN_In = (66*_LN_In); 
1c009e82:	ca1a                	sw	t1,20(sp)
					_N_Filter = _N_Filter + (36864)+(((D1Ind_Last)?(-2376):(-19008))); _SN_Filter = (((1)?(2376):(19008))); 
1c009e84:	9a3e                	add	s4,s4,a5
1c009e86:	4e72                	lw	t3,28(sp)
1c009e88:	94868813          	addi	a6,a3,-1720 # 948 <__rt_stack_size+0x148>
1c009e8c:	b715                	j	1c009db0 <S40_Conv2d_18x128x3x3+0x204>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009e8e:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c009e92:	002047b7          	lui	a5,0x204
1c009e96:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c009e9a:	56aa                	lw	a3,168(sp)
1c009e9c:	40d7d7b3          	sra	a5,a5,a3
1c009ea0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c009ea4:	c79d                	beqz	a5,1c009ed2 <S40_Conv2d_18x128x3x3+0x326>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009ea6:	10000513          	li	a0,256
1c009eaa:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c009eae:	30061073          	csrw	mstatus,a2
1c009eb2:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009eb6:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c009eba:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009ebe:	30047673          	csrrci	a2,mstatus,8
1c009ec2:	40472783          	lw	a5,1028(a4)
1c009ec6:	56aa                	lw	a3,168(sp)
1c009ec8:	40d7d7b3          	sra	a5,a5,a3
1c009ecc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c009ed0:	fff9                	bnez	a5,1c009eae <S40_Conv2d_18x128x3x3+0x302>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c009ed2:	4785                	li	a5,1
1c009ed4:	00d796b3          	sll	a3,a5,a3
1c009ed8:	002047b7          	lui	a5,0x204
1c009edc:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c009ee0:	30061073          	csrw	mstatus,a2
1c009ee4:	000ca783          	lw	a5,0(s9)
				if (_SN_Filter) {
1c009ee8:	f0080de3          	beqz	a6,1c009e02 <S40_Conv2d_18x128x3x3+0x256>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009eec:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c009ef0:	00204737          	lui	a4,0x204
1c009ef4:	40072503          	lw	a0,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c009ef8:	002b06b7          	lui	a3,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c009efc:	00d86833          	or	a6,a6,a3
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c009f00:	41072023          	sw	a6,1024(a4)
					AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+5316+19008*((D0Ind_Total+1)%2)),
1c009f04:	6805                	lui	a6,0x1
1c009f06:	fc19b6b3          	p.bclr	a3,s3,30,1
1c009f0a:	4c480813          	addi	a6,a6,1220 # 14c4 <__rt_stack_size+0xcc4>
1c009f0e:	43868833          	p.mac	a6,a3,s8
1c009f12:	97c2                	add	a5,a5,a6
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c009f14:	40f72023          	sw	a5,1024(a4)
1c009f18:	5312                	lw	t1,36(sp)
1c009f1a:	014307b3          	add	a5,t1,s4
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c009f1e:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c009f22:	d52a                	sw	a0,168(sp)
        copy->length = 0;
1c009f24:	dd02                	sw	zero,184(sp)
  __builtin_pulp_spr_write(reg, val);
1c009f26:	30061073          	csrw	mstatus,a2
1c009f2a:	000ca783          	lw	a5,0(s9)
1c009f2e:	bdd1                	j	1c009e02 <S40_Conv2d_18x128x3x3+0x256>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009f30:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c009f34:	002047b7          	lui	a5,0x204
1c009f38:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c009f3c:	56a6                	lw	a3,104(sp)
1c009f3e:	40d7d7b3          	sra	a5,a5,a3
1c009f42:	fc17b7b3          	p.bclr	a5,a5,30,1
1c009f46:	c79d                	beqz	a5,1c009f74 <S40_Conv2d_18x128x3x3+0x3c8>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009f48:	10000513          	li	a0,256
1c009f4c:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c009f50:	30061073          	csrw	mstatus,a2
1c009f54:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009f58:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c009f5c:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009f60:	30047673          	csrrci	a2,mstatus,8
1c009f64:	40472783          	lw	a5,1028(a4)
1c009f68:	56a6                	lw	a3,104(sp)
1c009f6a:	40d7d7b3          	sra	a5,a5,a3
1c009f6e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c009f72:	fff9                	bnez	a5,1c009f50 <S40_Conv2d_18x128x3x3+0x3a4>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c009f74:	4785                	li	a5,1
1c009f76:	00d796b3          	sll	a3,a5,a3
1c009f7a:	002047b7          	lui	a5,0x204
1c009f7e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c009f82:	30061073          	csrw	mstatus,a2
1c009f86:	001d8993          	addi	s3,s11,1
				if (_SN_In) {
1c009f8a:	e40e08e3          	beqz	t3,1c009dda <S40_Conv2d_18x128x3x3+0x22e>
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+2640*((D0Ind_Total+1)%2)),
1c009f8e:	000ca703          	lw	a4,0(s9)
1c009f92:	fc19b7b3          	p.bclr	a5,s3,30,1
1c009f96:	43578733          	p.mac	a4,a5,s5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009f9a:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c009f9e:	002047b7          	lui	a5,0x204
1c009fa2:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c009fa6:	100e5e33          	p.exthz	t3,t3
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c009faa:	c70e4e33          	p.bset	t3,t3,3,16
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c009fae:	c15e4e33          	p.bset	t3,t3,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c009fb2:	41c7a023          	sw	t3,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c009fb6:	40e7a023          	sw	a4,1024(a5)
1c009fba:	5302                	lw	t1,32(sp)
1c009fbc:	4552                	lw	a0,20(sp)
1c009fbe:	00a30733          	add	a4,t1,a0
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c009fc2:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c009fc6:	00280737          	lui	a4,0x280
1c009fca:	02870713          	addi	a4,a4,40 # 280028 <__L2+0x200028>
1c009fce:	40e7a023          	sw	a4,1024(a5)
        if (!merge) copy->id = id;
1c009fd2:	d4b2                	sw	a2,104(sp)
        copy->length = 0;
1c009fd4:	dc82                	sw	zero,120(sp)
  __builtin_pulp_spr_write(reg, val);
1c009fd6:	30069073          	csrw	mstatus,a3
1c009fda:	b501                	j	1c009dda <S40_Conv2d_18x128x3x3+0x22e>
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?62:66);
1c009fdc:	03e00693          	li	a3,62
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c009fe0:	0ff00713          	li	a4,255
1c009fe4:	00204c37          	lui	s8,0x204
1c009fe8:	0ed11a23          	sh	a3,244(sp)
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+5316+19008*((D0Ind_Total)%2));
1c009fec:	dfbe                	sw	a5,252(sp)
				KerArg1->TotalInFeatures = (short int) (D0Ind_Last?62:66);
1c009fee:	0ed11c23          	sh	a3,248(sp)
				KerArg1->OutFeatures = (unsigned short int) (D1Ind_Last?2:16);
1c009ff2:	0e911b23          	sh	s1,246(sp)
1c009ff6:	08ec2223          	sw	a4,132(s8) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c009ffa:	200c0793          	addi	a5,s8,512
1c009ffe:	00e7a023          	sw	a4,0(a5)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00a002:	00e7a623          	sw	a4,12(a5)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00a006:	1c00d837          	lui	a6,0x1c00d
1c00a00a:	f4280813          	addi	a6,a6,-190 # 1c00cf42 <KerParConv3x3Stride1_DP_fp>
1c00a00e:	090c2023          	sw	a6,128(s8)
1c00a012:	092c2023          	sw	s2,128(s8)
1c00a016:	854a                	mv	a0,s2
1c00a018:	c23e                	sw	a5,4(sp)
1c00a01a:	c43a                	sw	a4,8(sp)
1c00a01c:	727020ef          	jal	ra,1c00cf42 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00a020:	4792                	lw	a5,4(sp)
1c00a022:	01c7e683          	p.elw	a3,28(a5)
1c00a026:	6dad                	lui	s11,0xb
				__CALL(KerParConv3x3Stride1_DP_fp, KerArg1);
				/*================================= Update Arg Pipeline =============================*/
				/*============================= End Update Arg Pipeline =============================*/
			} /* End iteration on D0 */
			/*====================== Call Kernel LOC_D0_EPILOG =========================*/
			KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+43332+640*((T0Ind_Total)%2));
1c00a028:	000ca683          	lw	a3,0(s9)
1c00a02c:	944d8d93          	addi	s11,s11,-1724 # a944 <__rt_stack_size+0xa144>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00a030:	4722                	lw	a4,8(sp)
1c00a032:	9da2                	add	s11,s11,s0
1c00a034:	96ee                	add	a3,a3,s11
1c00a036:	cab6                	sw	a3,84(sp)
			KerArg2->InFeatures = (unsigned short int) (D1Ind_Last?2:16);
1c00a038:	04911d23          	sh	s1,90(sp)
1c00a03c:	08ec2223          	sw	a4,132(s8)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00a040:	00e7a023          	sw	a4,0(a5)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00a044:	00e7a623          	sw	a4,12(a5)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00a048:	1c00d8b7          	lui	a7,0x1c00d
1c00a04c:	9de88893          	addi	a7,a7,-1570 # 1c00c9de <KerDP_fp>
1c00a050:	091c2023          	sw	a7,128(s8)
1c00a054:	4332                	lw	t1,12(sp)
1c00a056:	086c2023          	sw	t1,128(s8)
1c00a05a:	00e8                	addi	a0,sp,76
1c00a05c:	c23e                	sw	a5,4(sp)
1c00a05e:	181020ef          	jal	ra,1c00c9de <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00a062:	4792                	lw	a5,4(sp)
1c00a064:	01c7e703          	p.elw	a4,28(a5)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
			/*================================= Write Tiles =====================================*/
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c00a068:	140b1263          	bnez	s6,1c00a1ac <S40_Conv2d_18x128x3x3+0x600>
			if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
1c00a06c:	46e2                	lw	a3,24(sp)
1c00a06e:	2a069663          	bnez	a3,1c00a31a <S40_Conv2d_18x128x3x3+0x76e>
			if (_SP_Out) AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) cnn_ssd_L2_Memory+58864+640*((T0Ind_Total+-1)%2)),
						_SP_Out, 40, _LP_Out, 1, &UchanHR1);
			AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) cnn_ssd_L2_Memory+58864+640*((T0Ind_Total)%2)), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+43332+640*((T0Ind_Total)%2)),
1c00a072:	1c015537          	lui	a0,0x1c015
1c00a076:	a8050513          	addi	a0,a0,-1408 # 1c014a80 <cnn_ssd_L2_Memory>
1c00a07a:	411c                	lw	a5,0(a0)
1c00a07c:	000ca703          	lw	a4,0(s9)
1c00a080:	66b9                	lui	a3,0xe
1c00a082:	5f068693          	addi	a3,a3,1520 # e5f0 <__rt_stack_size+0xddf0>
1c00a086:	97b6                	add	a5,a5,a3
1c00a088:	97a2                	add	a5,a5,s0
1c00a08a:	9dba                	add	s11,s11,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a08c:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00a090:	00204737          	lui	a4,0x204
1c00a094:	40072583          	lw	a1,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00a098:	4342                	lw	t1,16(sp)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c00a09a:	002a06b7          	lui	a3,0x2a0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00a09e:	00d366b3          	or	a3,t1,a3
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00a0a2:	40d72023          	sw	a3,1024(a4)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00a0a6:	41b72023          	sw	s11,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00a0aa:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c00a0ae:	c5ae                	sw	a1,200(sp)
        copy->length = 0;
1c00a0b0:	cd82                	sw	zero,216(sp)
  __builtin_pulp_spr_write(reg, val);
1c00a0b2:	30061073          	csrw	mstatus,a2
1c00a0b6:	d422                	sw	s0,40(sp)
1c00a0b8:	cc5a                	sw	s6,24(sp)
1c00a0ba:	4489                	li	s1,2
1c00a0bc:	8dce                	mv	s11,s3
			_SPP_Out = _SP_Out;_LPP_Out = _LP_Out;
			_P_Out = _C_Out;_SP_Out = _SC_Out;_LP_Out = _LC_Out;
			/*============================= End Update Arg Pipeline =============================*/
			/*================================= Prepare Tiles ===================================*/
			_SC_Out = 0;
			if (!(D1Ind_Last)) {
1c00a0be:	001ba863          	p.beqimm	s7,1,1c00a0ce <S40_Conv2d_18x128x3x3+0x522>
				_C_Out = _C_Out + (640); _LC_Out = (40); _SC_Out = (((1)?2:16)*_LC_Out); 
1c00a0c2:	05000313          	li	t1,80
1c00a0c6:	4b42                	lw	s6,16(sp)
1c00a0c8:	4b85                	li	s7,1
1c00a0ca:	c81a                	sw	t1,16(sp)
1c00a0cc:	b985                	j	1c009d3c <S40_Conv2d_18x128x3x3+0x190>
  if (copy->length == 0)
1c00a0ce:	47ee                	lw	a5,216(sp)
1c00a0d0:	16078a63          	beqz	a5,1c00a244 <S40_Conv2d_18x128x3x3+0x698>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00a0d4:	568e                	lw	a3,224(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00a0d6:	02000713          	li	a4,32
1c00a0da:	002047b7          	lui	a5,0x204
1c00a0de:	ca89                	beqz	a3,1c00a0f0 <S40_Conv2d_18x128x3x3+0x544>
1c00a0e0:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00a0e4:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00a0e8:	00e7a223          	sw	a4,4(a5)
1c00a0ec:	568e                	lw	a3,224(sp)
1c00a0ee:	faed                	bnez	a3,1c00a0e0 <S40_Conv2d_18x128x3x3+0x534>
			T0Ind_Total++;
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
1c00a0f0:	020b0563          	beqz	s6,1c00a11a <S40_Conv2d_18x128x3x3+0x56e>
1c00a0f4:	1ac14783          	lbu	a5,428(sp)
1c00a0f8:	0ff7f793          	andi	a5,a5,255
1c00a0fc:	ef99                	bnez	a5,1c00a11a <S40_Conv2d_18x128x3x3+0x56e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00a0fe:	4689                	li	a3,2
1c00a100:	00204737          	lui	a4,0x204
1c00a104:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00a108:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00a10c:	00d72223          	sw	a3,4(a4)
1c00a110:	1ac14783          	lbu	a5,428(sp)
1c00a114:	0ff7f793          	andi	a5,a5,255
1c00a118:	d7f5                	beqz	a5,1c00a104 <S40_Conv2d_18x128x3x3+0x558>
	AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) cnn_ssd_L2_Memory+58864+640*((T0Ind_Total+-1)%2)), _SP_Out, 40, _LP_Out, 1, &UchanHR1);
1c00a11a:	1c015537          	lui	a0,0x1c015
1c00a11e:	a8050513          	addi	a0,a0,-1408 # 1c014a80 <cnn_ssd_L2_Memory>
1c00a122:	410c                	lw	a1,0(a0)
1c00a124:	5332                	lw	t1,44(sp)
1c00a126:	663d                	lui	a2,0xf
1c00a128:	46c2                	lw	a3,16(sp)
1c00a12a:	87060613          	addi	a2,a2,-1936 # e870 <__rt_stack_size+0xe070>
1c00a12e:	962e                	add	a2,a2,a1
1c00a130:	008305b3          	add	a1,t1,s0
1c00a134:	1c015337          	lui	t1,0x1c015
1c00a138:	02800793          	li	a5,40
1c00a13c:	02800713          	li	a4,40
1c00a140:	11010893          	addi	a7,sp,272
1c00a144:	4801                	li	a6,0
1c00a146:	fb030513          	addi	a0,t1,-80 # 1c014fb0 <HyperRam>
1c00a14a:	63d040ef          	jal	ra,1c00ef86 <pi_cl_ram_copy_2d>
1c00a14e:	1ac14783          	lbu	a5,428(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00a152:	4689                	li	a3,2
1c00a154:	00204737          	lui	a4,0x204
1c00a158:	0ff7f793          	andi	a5,a5,255
1c00a15c:	ef81                	bnez	a5,1c00a174 <S40_Conv2d_18x128x3x3+0x5c8>
1c00a15e:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00a162:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00a166:	00d72223          	sw	a3,4(a4)
1c00a16a:	1ac14783          	lbu	a5,428(sp)
1c00a16e:	0ff7f793          	andi	a5,a5,255
1c00a172:	d7f5                	beqz	a5,1c00a15e <S40_Conv2d_18x128x3x3+0x5b2>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait current uDMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c00a174:	1ec12083          	lw	ra,492(sp)
1c00a178:	1e812403          	lw	s0,488(sp)
1c00a17c:	1e412483          	lw	s1,484(sp)
1c00a180:	1e012903          	lw	s2,480(sp)
1c00a184:	1dc12983          	lw	s3,476(sp)
1c00a188:	1d812a03          	lw	s4,472(sp)
1c00a18c:	1d412a83          	lw	s5,468(sp)
1c00a190:	1d012b03          	lw	s6,464(sp)
1c00a194:	1cc12b83          	lw	s7,460(sp)
1c00a198:	1c812c03          	lw	s8,456(sp)
1c00a19c:	1c412c83          	lw	s9,452(sp)
1c00a1a0:	1c012d03          	lw	s10,448(sp)
1c00a1a4:	1bc12d83          	lw	s11,444(sp)
1c00a1a8:	617d                	addi	sp,sp,496
1c00a1aa:	8082                	ret
  if (copy->length == 0)
1c00a1ac:	47ee                	lw	a5,216(sp)
1c00a1ae:	12079f63          	bnez	a5,1c00a2ec <S40_Conv2d_18x128x3x3+0x740>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a1b2:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00a1b6:	404c2783          	lw	a5,1028(s8)
1c00a1ba:	46ae                	lw	a3,200(sp)
1c00a1bc:	40d7d7b3          	sra	a5,a5,a3
1c00a1c0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00a1c4:	c79d                	beqz	a5,1c00a1f2 <S40_Conv2d_18x128x3x3+0x646>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00a1c6:	10000593          	li	a1,256
1c00a1ca:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00a1ce:	30061073          	csrw	mstatus,a2
1c00a1d2:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00a1d6:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00a1da:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a1de:	30047673          	csrrci	a2,mstatus,8
1c00a1e2:	40472783          	lw	a5,1028(a4)
1c00a1e6:	46ae                	lw	a3,200(sp)
1c00a1e8:	40d7d7b3          	sra	a5,a5,a3
1c00a1ec:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00a1f0:	fff9                	bnez	a5,1c00a1ce <S40_Conv2d_18x128x3x3+0x622>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00a1f2:	4785                	li	a5,1
1c00a1f4:	00d796b3          	sll	a3,a5,a3
1c00a1f8:	002047b7          	lui	a5,0x204
1c00a1fc:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00a200:	30061073          	csrw	mstatus,a2
			if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
1c00a204:	46e2                	lw	a3,24(sp)
1c00a206:	10069463          	bnez	a3,1c00a30e <S40_Conv2d_18x128x3x3+0x762>
			if (_SP_Out) AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) cnn_ssd_L2_Memory+58864+640*((T0Ind_Total+-1)%2)),
1c00a20a:	1c015737          	lui	a4,0x1c015
1c00a20e:	a8070713          	addi	a4,a4,-1408 # 1c014a80 <cnn_ssd_L2_Memory>
1c00a212:	430c                	lw	a1,0(a4)
1c00a214:	5332                	lw	t1,44(sp)
1c00a216:	5522                	lw	a0,40(sp)
1c00a218:	6639                	lui	a2,0xe
1c00a21a:	37060613          	addi	a2,a2,880 # e370 <__rt_stack_size+0xdb70>
1c00a21e:	9622                	add	a2,a2,s0
1c00a220:	962e                	add	a2,a2,a1
1c00a222:	00a305b3          	add	a1,t1,a0
1c00a226:	1c015337          	lui	t1,0x1c015
1c00a22a:	11010893          	addi	a7,sp,272
1c00a22e:	4801                	li	a6,0
1c00a230:	02800793          	li	a5,40
1c00a234:	02800713          	li	a4,40
1c00a238:	86da                	mv	a3,s6
1c00a23a:	fb030513          	addi	a0,t1,-80 # 1c014fb0 <HyperRam>
1c00a23e:	549040ef          	jal	ra,1c00ef86 <pi_cl_ram_copy_2d>
1c00a242:	bd05                	j	1c00a072 <S40_Conv2d_18x128x3x3+0x4c6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a244:	30047673          	csrrci	a2,mstatus,8
1c00a248:	40472783          	lw	a5,1028(a4)
1c00a24c:	46ae                	lw	a3,200(sp)
1c00a24e:	40d7d7b3          	sra	a5,a5,a3
1c00a252:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00a256:	c79d                	beqz	a5,1c00a284 <S40_Conv2d_18x128x3x3+0x6d8>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00a258:	10000593          	li	a1,256
1c00a25c:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00a260:	30061073          	csrw	mstatus,a2
1c00a264:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00a268:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00a26c:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a270:	30047673          	csrrci	a2,mstatus,8
1c00a274:	40472783          	lw	a5,1028(a4)
1c00a278:	46ae                	lw	a3,200(sp)
1c00a27a:	40d7d7b3          	sra	a5,a5,a3
1c00a27e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00a282:	fff9                	bnez	a5,1c00a260 <S40_Conv2d_18x128x3x3+0x6b4>
1c00a284:	4785                	li	a5,1
1c00a286:	00d796b3          	sll	a3,a5,a3
1c00a28a:	002047b7          	lui	a5,0x204
1c00a28e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00a292:	30061073          	csrw	mstatus,a2
1c00a296:	bda9                	j	1c00a0f0 <S40_Conv2d_18x128x3x3+0x544>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a298:	30047673          	csrrci	a2,mstatus,8
1c00a29c:	4047a783          	lw	a5,1028(a5)
1c00a2a0:	46aa                	lw	a3,136(sp)
1c00a2a2:	40d7d7b3          	sra	a5,a5,a3
1c00a2a6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00a2aa:	c79d                	beqz	a5,1c00a2d8 <S40_Conv2d_18x128x3x3+0x72c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00a2ac:	10000593          	li	a1,256
1c00a2b0:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00a2b4:	30061073          	csrw	mstatus,a2
1c00a2b8:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00a2bc:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00a2c0:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a2c4:	30047673          	csrrci	a2,mstatus,8
1c00a2c8:	40472783          	lw	a5,1028(a4)
1c00a2cc:	46aa                	lw	a3,136(sp)
1c00a2ce:	40d7d7b3          	sra	a5,a5,a3
1c00a2d2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00a2d6:	fff9                	bnez	a5,1c00a2b4 <S40_Conv2d_18x128x3x3+0x708>
1c00a2d8:	4785                	li	a5,1
1c00a2da:	00d796b3          	sll	a3,a5,a3
1c00a2de:	002047b7          	lui	a5,0x204
1c00a2e2:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00a2e6:	30061073          	csrw	mstatus,a2
1c00a2ea:	b2f5                	j	1c009cd6 <S40_Conv2d_18x128x3x3+0x12a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00a2ec:	568e                	lw	a3,224(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00a2ee:	02000713          	li	a4,32
1c00a2f2:	002047b7          	lui	a5,0x204
1c00a2f6:	d699                	beqz	a3,1c00a204 <S40_Conv2d_18x128x3x3+0x658>
1c00a2f8:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00a2fc:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00a300:	00e7a223          	sw	a4,4(a5)
1c00a304:	568e                	lw	a3,224(sp)
1c00a306:	faed                	bnez	a3,1c00a2f8 <S40_Conv2d_18x128x3x3+0x74c>
			if (_SPP_Out) AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
1c00a308:	46e2                	lw	a3,24(sp)
1c00a30a:	f00680e3          	beqz	a3,1c00a20a <S40_Conv2d_18x128x3x3+0x65e>
1c00a30e:	1ac14783          	lbu	a5,428(sp)
1c00a312:	0ff7f793          	andi	a5,a5,255
1c00a316:	cb81                	beqz	a5,1c00a326 <S40_Conv2d_18x128x3x3+0x77a>
1c00a318:	bdcd                	j	1c00a20a <S40_Conv2d_18x128x3x3+0x65e>
1c00a31a:	1ac14783          	lbu	a5,428(sp)
1c00a31e:	0ff7f793          	andi	a5,a5,255
1c00a322:	d40798e3          	bnez	a5,1c00a072 <S40_Conv2d_18x128x3x3+0x4c6>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00a326:	4689                	li	a3,2
1c00a328:	00204737          	lui	a4,0x204
1c00a32c:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00a330:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00a334:	00d72223          	sw	a3,4(a4)
1c00a338:	1ac14783          	lbu	a5,428(sp)
1c00a33c:	0ff7f793          	andi	a5,a5,255
1c00a340:	d7f5                	beqz	a5,1c00a32c <S40_Conv2d_18x128x3x3+0x780>
			if (_SP_Out) AT_HYPERRAM_CL_COPY2D(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+_P_Out), ((AT_HYPERRAM_INT_ADDR_TYPE) cnn_ssd_L2_Memory+58864+640*((T0Ind_Total+-1)%2)),
1c00a342:	d20b08e3          	beqz	s6,1c00a072 <S40_Conv2d_18x128x3x3+0x4c6>
1c00a346:	b5d1                	j	1c00a20a <S40_Conv2d_18x128x3x3+0x65e>
					_N_Filter = _N_Filter + (((D1Ind_Last)?(2376):(19008))); _SN_Filter = (((D1Ind_Last)?(((1)?2232:2376)):(((1)?17856:19008)))); 
1c00a348:	6685                	lui	a3,0x1
1c00a34a:	94868793          	addi	a5,a3,-1720 # 948 <__rt_stack_size+0x148>
1c00a34e:	9a3e                	add	s4,s4,a5
1c00a350:	9b068e13          	addi	t3,a3,-1616
1c00a354:	8b868813          	addi	a6,a3,-1864
1c00a358:	bca1                	j	1c009db0 <S40_Conv2d_18x128x3x3+0x204>
				_SN_In = 0;
1c00a35a:	4e01                	li	t3,0
				_SN_Filter = 0;
1c00a35c:	4801                	li	a6,0
1c00a35e:	bc89                	j	1c009db0 <S40_Conv2d_18x128x3x3+0x204>

1c00a360 <S44_Conv2d_24x128x3x3>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c00a360:	7145                	addi	sp,sp,-464
1c00a362:	1b912223          	sw	s9,420(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D1, [0 x 1920, 1920]][Tile0, 1:[5x4], 4]
		Tile0: [0, 1920, 80], Tile1: [0, 1920, 80], Tile2; [0, 1920, 80]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+42544);
1c00a366:	10000cb7          	lui	s9,0x10000
1c00a36a:	020c8c93          	addi	s9,s9,32 # 10000020 <cnn_ssd_L1_Memory>
1c00a36e:	000ca883          	lw	a7,0(s9)
{
1c00a372:	c636                	sw	a3,12(sp)
	KerArg0->W = (unsigned short int) (5);
1c00a374:	1c014737          	lui	a4,0x1c014
	KerArg0->H = (unsigned short int) (4);
	KerArg0->OutFeatures = (unsigned short int) (24);
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+3520);
	KerArg0->NormBias = (signed char) (13);
1c00a378:	46b5                	li	a3,13
	KerArg0->W = (unsigned short int) (5);
1c00a37a:	5b072e83          	lw	t4,1456(a4) # 1c0145b0 <IntegerExpLUT+0x68>
	KerArg0->NormBias = (signed char) (13);
1c00a37e:	02d10323          	sb	a3,38(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+42544);
1c00a382:	67a9                	lui	a5,0xa
	KerArg1->W = (unsigned short int) (5);
1c00a384:	022066d7          	pv.add.sci.h	a3,zero,5
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+3520);
1c00a388:	6805                	lui	a6,0x1
	KerArg1->W = (unsigned short int) (5);
1c00a38a:	c7b6                	sw	a3,204(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+42544);
1c00a38c:	63078713          	addi	a4,a5,1584 # a630 <__rt_stack_size+0x9e30>
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+3520);
1c00a390:	dc080813          	addi	a6,a6,-576 # dc0 <__rt_stack_size+0x5c0>
	KerArg1->UsedW = (unsigned short int) (5);
	KerArg1->OutFeatures = (unsigned short int) (24);
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+42544);
	KerArg1->Norm = (unsigned char) (16);
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c00a394:	020076d7          	pv.add.sci.b	a3,zero,1
	KerArg1->Orientation = (unsigned char) (1);
	KerArg2->In = (int * __restrict__) (cnn_ssd_L1_Memory+42544);
	KerArg2->W = (unsigned short int) (5);
	KerArg2->H = (unsigned short int) (4);
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+41584);
1c00a398:	27078793          	addi	a5,a5,624
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+42544);
1c00a39c:	9746                	add	a4,a4,a7
	KerArg0->OutFeatures = (unsigned short int) (24);
1c00a39e:	4361                	li	t1,24
	KerArg1->Norm = (unsigned char) (16);
1c00a3a0:	4e41                	li	t3,16
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+41584);
1c00a3a2:	97c6                	add	a5,a5,a7
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c00a3a4:	d3b6                	sw	a3,228(sp)
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+3520);
1c00a3a6:	01088f33          	add	t5,a7,a6
	KerArg1->Orientation = (unsigned char) (1);
1c00a3aa:	4685                	li	a3,1
{
1c00a3ac:	1b612823          	sw	s6,432(sp)
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+41584);
1c00a3b0:	da3e                	sw	a5,52(sp)
{
1c00a3b2:	1c112623          	sw	ra,460(sp)
1c00a3b6:	1c812423          	sw	s0,456(sp)
1c00a3ba:	1c912223          	sw	s1,452(sp)
1c00a3be:	1d212023          	sw	s2,448(sp)
1c00a3c2:	1b312e23          	sw	s3,444(sp)
1c00a3c6:	1b412c23          	sw	s4,440(sp)
1c00a3ca:	1b512a23          	sw	s5,436(sp)
1c00a3ce:	1b712623          	sw	s7,428(sp)
1c00a3d2:	1b812423          	sw	s8,424(sp)
1c00a3d6:	1ba12023          	sw	s10,416(sp)
1c00a3da:	19b12e23          	sw	s11,412(sp)
1c00a3de:	c42e                	sw	a1,8(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+42544);
1c00a3e0:	ce3a                	sw	a4,28(sp)
	KerArg0->W = (unsigned short int) (5);
1c00a3e2:	d076                	sw	t4,32(sp)
	KerArg0->OutFeatures = (unsigned short int) (24);
1c00a3e4:	02611223          	sh	t1,36(sp)
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+3520);
1c00a3e8:	d47a                	sw	t5,40(sp)
	KerArg1->OutFeatures = (unsigned short int) (24);
1c00a3ea:	0c611b23          	sh	t1,214(sp)
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+42544);
1c00a3ee:	d1ba                	sw	a4,224(sp)
	KerArg1->Norm = (unsigned char) (16);
1c00a3f0:	0fc10423          	sb	t3,232(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c00a3f4:	0ed105a3          	sb	a3,235(sp)
	KerArg2->In = (int * __restrict__) (cnn_ssd_L1_Memory+42544);
1c00a3f8:	d63a                	sw	a4,44(sp)
	KerArg2->W = (unsigned short int) (5);
1c00a3fa:	d876                	sw	t4,48(sp)
	KerArg2->Norm = (unsigned char) (16);
1c00a3fc:	03c10c23          	sb	t3,56(sp)
	KerArg2->InFeatures = (unsigned short int) (24);
	KerArg2->LB = (int) (-32768);
1c00a400:	77e1                	lui	a5,0xffff8
	KerArg2->InFeatures = (unsigned short int) (24);
1c00a402:	02611d23          	sh	t1,58(sp)
	KerArg2->LB = (int) (-32768);
1c00a406:	de3e                	sw	a5,60(sp)
	KerArg2->UB = (int) (32767);
1c00a408:	67a1                	lui	a5,0x8
1c00a40a:	17fd                	addi	a5,a5,-1
{
1c00a40c:	8b2a                	mv	s6,a0
	KerArg2->UB = (int) (32767);
1c00a40e:	c0be                	sw	a5,64(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a410:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00a414:	002047b7          	lui	a5,0x204
1c00a418:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00a41c:	002f0737          	lui	a4,0x2f0
1c00a420:	6e070713          	addi	a4,a4,1760 # 2f06e0 <__L2+0x2706e0>
1c00a424:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00a428:	4117a023          	sw	a7,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00a42c:	40a7a023          	sw	a0,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c00a430:	00280737          	lui	a4,0x280
1c00a434:	02870713          	addi	a4,a4,40 # 280028 <__L2+0x200028>
1c00a438:	40e7a023          	sw	a4,1024(a5)
        if (!merge) copy->id = id;
1c00a43c:	c4ae                	sw	a1,72(sp)
        copy->length = 0;
1c00a43e:	cc82                	sw	zero,88(sp)
  __builtin_pulp_spr_write(reg, val);
1c00a440:	30069073          	csrw	mstatus,a3
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+0), 1760, 40, 40, 0, &DmaR_Evt1);
	_N_In=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+3520), 48, 0, &DmaR_Evt2);
1c00a444:	000ca703          	lw	a4,0(s9)
1c00a448:	983a                	add	a6,a6,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a44a:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00a44e:	4007a583          	lw	a1,1024(a5)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00a452:	00030737          	lui	a4,0x30
1c00a456:	c2474733          	p.bset	a4,a4,1,4
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00a45a:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00a45e:	c1574733          	p.bset	a4,a4,0,21
1c00a462:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00a466:	4107a023          	sw	a6,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00a46a:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c00a46e:	d4ae                	sw	a1,104(sp)
        copy->length = 0;
1c00a470:	dc82                	sw	zero,120(sp)
  __builtin_pulp_spr_write(reg, val);
1c00a472:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c00a476:	5766                	lw	a4,120(sp)
1c00a478:	46070563          	beqz	a4,1c00a8e2 <S44_Conv2d_24x128x3x3+0x582>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00a47c:	468a                	lw	a3,128(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00a47e:	02000713          	li	a4,32
1c00a482:	ca89                	beqz	a3,1c00a494 <S44_Conv2d_24x128x3x3+0x134>
1c00a484:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00a488:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00a48c:	00e7a223          	sw	a4,4(a5)
1c00a490:	468a                	lw	a3,128(sp)
1c00a492:	faed                	bnez	a3,1c00a484 <S44_Conv2d_24x128x3x3+0x124>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+3568+0), 19008, 0, &DmaR_Evt3);
1c00a494:	000ca683          	lw	a3,0(s9)
1c00a498:	6785                	lui	a5,0x1
1c00a49a:	df078793          	addi	a5,a5,-528 # df0 <__rt_stack_size+0x5f0>
1c00a49e:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a4a0:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00a4a4:	002047b7          	lui	a5,0x204
1c00a4a8:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00a4ac:	6415                	lui	s0,0x5
1c00a4ae:	a4040413          	addi	s0,s0,-1472 # 4a40 <__rt_stack_size+0x4240>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c00a4b2:	00030737          	lui	a4,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00a4b6:	de042733          	p.insert	a4,s0,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00a4ba:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00a4be:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00a4c2:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00a4c6:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00a4ca:	4722                	lw	a4,8(sp)
1c00a4cc:	40e7a023          	sw	a4,1024(a5)
        if (!merge) copy->id = id;
1c00a4d0:	c52e                	sw	a1,136(sp)
        copy->length = 0;
1c00a4d2:	cd02                	sw	zero,152(sp)
  __builtin_pulp_spr_write(reg, val);
1c00a4d4:	30061073          	csrw	mstatus,a2
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00a4d8:	0ff00713          	li	a4,255
1c00a4dc:	08e7a223          	sw	a4,132(a5)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00a4e0:	20078493          	addi	s1,a5,512
1c00a4e4:	00e4a023          	sw	a4,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00a4e8:	00e4a623          	sw	a4,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00a4ec:	1c00d737          	lui	a4,0x1c00d
1c00a4f0:	92a70713          	addi	a4,a4,-1750 # 1c00c92a <KerParSetBias_DP_fp>
1c00a4f4:	08e7a023          	sw	a4,128(a5)
1c00a4f8:	0868                	addi	a0,sp,28
1c00a4fa:	08a7a023          	sw	a0,128(a5)
1c00a4fe:	42c020ef          	jal	ra,1c00c92a <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00a502:	01c4e783          	p.elw	a5,28(s1)
1c00a506:	1c00d4b7          	lui	s1,0x1c00d
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c00a50a:	002809b7          	lui	s3,0x280
	_N_Filter=0;
1c00a50e:	4a81                	li	s5,0
	_N_In=0;
1c00a510:	4b81                	li	s7,0
		{ /* Single iteration on Tile0 */
			int T0Ind_Last = 1, T0Ind_NextLast = 1;
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			AT_FORK(gap_ncore(), (void *) KerParSetBias_DP_fp, (void *) KerArg0);
			__CALL(KerParSetBias_DP_fp, KerArg0);
			for (D0Ind=0; D0Ind<3; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c00a512:	4c01                	li	s8,0
1c00a514:	f4248493          	addi	s1,s1,-190 # 1c00cf42 <KerParConv3x3Stride1_DP_fp>
1c00a518:	0c810d13          	addi	s10,sp,200
				} else if (!(1)) {
					_N_In = _N_In + (-3520); _LN_In = (40); _SN_In = (44*_LN_In); 
				}
				_SN_Filter = 0;
				if (!(D0Ind_Last)) {
					_N_Filter = _N_Filter + ((19008)); _SN_Filter = (((1)?(((D0Ind_NextLast)?17280:19008)):(((D0Ind_NextLast)?17280:19008)))); 
1c00a51c:	8da2                	mv	s11,s0
1c00a51e:	02898993          	addi	s3,s3,40 # 280028 <__L2+0x200028>
							_SN_Filter, 0, &DmaR_Evt3);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+1760*((D0Ind_Total)%2));
				KerArg1->H = (unsigned short int) (6-1*(1)-1*(1));
1c00a522:	00206957          	pv.add.sci.h	s2,zero,4
				if (!(D0Ind_Last)) {
1c00a526:	422c2263          	p.beqimm	s8,2,1c00a94a <S44_Conv2d_24x128x3x3+0x5ea>
					_N_In = _N_In + (1760); _LN_In = (40); _SN_In = (((D0Ind_NextLast)?40:44)*_LN_In); 
1c00a52a:	6e0b8b93          	addi	s7,s7,1760
1c00a52e:	401c2463          	p.beqimm	s8,1,1c00a936 <S44_Conv2d_24x128x3x3+0x5d6>
					_N_Filter = _N_Filter + ((19008)); _SN_Filter = (((1)?(((D0Ind_NextLast)?17280:19008)):(((D0Ind_NextLast)?17280:19008)))); 
1c00a532:	9aee                	add	s5,s5,s11
1c00a534:	6e000313          	li	t1,1760
1c00a538:	8822                	mv	a6,s0
  if (copy->length == 0)
1c00a53a:	47e6                	lw	a5,88(sp)
1c00a53c:	14078c63          	beqz	a5,1c00a694 <S44_Conv2d_24x128x3x3+0x334>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00a540:	5586                	lw	a1,96(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00a542:	02000713          	li	a4,32
1c00a546:	002047b7          	lui	a5,0x204
1c00a54a:	c989                	beqz	a1,1c00a55c <S44_Conv2d_24x128x3x3+0x1fc>
1c00a54c:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00a550:	03c7e583          	p.elw	a1,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00a554:	00e7a223          	sw	a4,4(a5)
1c00a558:	5586                	lw	a1,96(sp)
1c00a55a:	f9ed                	bnez	a1,1c00a54c <S44_Conv2d_24x128x3x3+0x1ec>
				if (_SN_In) {
1c00a55c:	18031963          	bnez	t1,1c00a6ee <S44_Conv2d_24x128x3x3+0x38e>
  if (copy->length == 0)
1c00a560:	47ea                	lw	a5,152(sp)
1c00a562:	c3d1                	beqz	a5,1c00a5e6 <S44_Conv2d_24x128x3x3+0x286>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00a564:	558a                	lw	a1,160(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00a566:	02000713          	li	a4,32
1c00a56a:	002047b7          	lui	a5,0x204
1c00a56e:	c989                	beqz	a1,1c00a580 <S44_Conv2d_24x128x3x3+0x220>
1c00a570:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00a574:	03c7e583          	p.elw	a1,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00a578:	00e7a223          	sw	a4,4(a5)
1c00a57c:	558a                	lw	a1,160(sp)
1c00a57e:	f9ed                	bnez	a1,1c00a570 <S44_Conv2d_24x128x3x3+0x210>
1c00a580:	000ca583          	lw	a1,0(s9)
				if (_SN_Filter) {
1c00a584:	0c081063          	bnez	a6,1c00a644 <S44_Conv2d_24x128x3x3+0x2e4>
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+1760*((D0Ind_Total)%2));
1c00a588:	fc1c3733          	p.bclr	a4,s8,30,1
1c00a58c:	6e000793          	li	a5,1760
1c00a590:	86ae                	mv	a3,a1
1c00a592:	42f706b3          	p.mac	a3,a4,a5
				KerArg1->H = (unsigned short int) (6-1*(1)-1*(1));
1c00a596:	c9ca                	sw	s2,208(sp)
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+1760*((D0Ind_Total)%2));
1c00a598:	c5b6                	sw	a3,200(sp)
				KerArg1->UsedH = (unsigned short int) (6-1*(1)-1*(1));
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?40:44);
1c00a59a:	182c2d63          	p.beqimm	s8,2,1c00a734 <S44_Conv2d_24x128x3x3+0x3d4>
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+3568+19008*((D0Ind_Total)%2));
1c00a59e:	6785                	lui	a5,0x1
1c00a5a0:	df078793          	addi	a5,a5,-528 # df0 <__rt_stack_size+0x5f0>
1c00a5a4:	43b707b3          	p.mac	a5,a4,s11
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?40:44);
1c00a5a8:	02c00813          	li	a6,44
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00a5ac:	0ff00513          	li	a0,255
1c00a5b0:	00204737          	lui	a4,0x204
1c00a5b4:	0d011a23          	sh	a6,212(sp)
				KerArg1->TotalInFeatures = (short int) (D0Ind_Last?40:44);
1c00a5b8:	0d011c23          	sh	a6,216(sp)
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+3568+19008*((D0Ind_Total)%2));
1c00a5bc:	97ae                	add	a5,a5,a1
1c00a5be:	cfbe                	sw	a5,220(sp)
1c00a5c0:	08a72223          	sw	a0,132(a4) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00a5c4:	20070a13          	addi	s4,a4,512
1c00a5c8:	00aa2023          	sw	a0,0(s4)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00a5cc:	00aa2623          	sw	a0,12(s4)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00a5d0:	08972023          	sw	s1,128(a4)
1c00a5d4:	09a72023          	sw	s10,128(a4)
1c00a5d8:	856a                	mv	a0,s10
1c00a5da:	169020ef          	jal	ra,1c00cf42 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00a5de:	01ca6703          	p.elw	a4,28(s4)
			for (D0Ind=0; D0Ind<3; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c00a5e2:	0c05                	addi	s8,s8,1
1c00a5e4:	b789                	j	1c00a526 <S44_Conv2d_24x128x3x3+0x1c6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a5e6:	30047573          	csrrci	a0,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00a5ea:	002047b7          	lui	a5,0x204
1c00a5ee:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00a5f2:	45aa                	lw	a1,136(sp)
1c00a5f4:	40b7d7b3          	sra	a5,a5,a1
1c00a5f8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00a5fc:	c79d                	beqz	a5,1c00a62a <S44_Conv2d_24x128x3x3+0x2ca>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00a5fe:	10000893          	li	a7,256
1c00a602:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00a606:	30051073          	csrw	mstatus,a0
1c00a60a:	01172423          	sw	a7,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00a60e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00a612:	01172223          	sw	a7,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a616:	30047573          	csrrci	a0,mstatus,8
1c00a61a:	40472783          	lw	a5,1028(a4)
1c00a61e:	45aa                	lw	a1,136(sp)
1c00a620:	40b7d7b3          	sra	a5,a5,a1
1c00a624:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00a628:	fff9                	bnez	a5,1c00a606 <S44_Conv2d_24x128x3x3+0x2a6>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00a62a:	4785                	li	a5,1
1c00a62c:	00b795b3          	sll	a1,a5,a1
1c00a630:	002047b7          	lui	a5,0x204
1c00a634:	40b7a223          	sw	a1,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00a638:	30051073          	csrw	mstatus,a0
1c00a63c:	000ca583          	lw	a1,0(s9)
				if (_SN_Filter) {
1c00a640:	f40804e3          	beqz	a6,1c00a588 <S44_Conv2d_24x128x3x3+0x228>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a644:	300478f3          	csrrci	a7,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00a648:	00204737          	lui	a4,0x204
1c00a64c:	40072303          	lw	t1,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c00a650:	000307b7          	lui	a5,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00a654:	de0827b3          	p.insert	a5,a6,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c00a658:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00a65c:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00a660:	40f72023          	sw	a5,1024(a4)
					AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+3568+19008*((D0Ind_Total+1)%2)),
1c00a664:	001c0513          	addi	a0,s8,1
1c00a668:	6785                	lui	a5,0x1
1c00a66a:	fc153533          	p.bclr	a0,a0,30,1
1c00a66e:	df078793          	addi	a5,a5,-528 # df0 <__rt_stack_size+0x5f0>
1c00a672:	43b507b3          	p.mac	a5,a0,s11
1c00a676:	97ae                	add	a5,a5,a1
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00a678:	40f72023          	sw	a5,1024(a4)
1c00a67c:	46a2                	lw	a3,8(sp)
1c00a67e:	015687b3          	add	a5,a3,s5
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00a682:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c00a686:	c51a                	sw	t1,136(sp)
        copy->length = 0;
1c00a688:	cd02                	sw	zero,152(sp)
  __builtin_pulp_spr_write(reg, val);
1c00a68a:	30089073          	csrw	mstatus,a7
1c00a68e:	000ca583          	lw	a1,0(s9)
1c00a692:	bddd                	j	1c00a588 <S44_Conv2d_24x128x3x3+0x228>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a694:	30047573          	csrrci	a0,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00a698:	002047b7          	lui	a5,0x204
1c00a69c:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00a6a0:	45a6                	lw	a1,72(sp)
1c00a6a2:	40b7d7b3          	sra	a5,a5,a1
1c00a6a6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00a6aa:	c79d                	beqz	a5,1c00a6d8 <S44_Conv2d_24x128x3x3+0x378>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00a6ac:	10000893          	li	a7,256
1c00a6b0:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00a6b4:	30051073          	csrw	mstatus,a0
1c00a6b8:	01172423          	sw	a7,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00a6bc:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00a6c0:	01172223          	sw	a7,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a6c4:	30047573          	csrrci	a0,mstatus,8
1c00a6c8:	40472783          	lw	a5,1028(a4)
1c00a6cc:	45a6                	lw	a1,72(sp)
1c00a6ce:	40b7d7b3          	sra	a5,a5,a1
1c00a6d2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00a6d6:	fff9                	bnez	a5,1c00a6b4 <S44_Conv2d_24x128x3x3+0x354>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00a6d8:	4785                	li	a5,1
1c00a6da:	00b795b3          	sll	a1,a5,a1
1c00a6de:	002047b7          	lui	a5,0x204
1c00a6e2:	40b7a223          	sw	a1,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00a6e6:	30051073          	csrw	mstatus,a0
				if (_SN_In) {
1c00a6ea:	e6030be3          	beqz	t1,1c00a560 <S44_Conv2d_24x128x3x3+0x200>
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+1760*((D0Ind_Total+1)%2)),
1c00a6ee:	000ca703          	lw	a4,0(s9)
1c00a6f2:	001c0793          	addi	a5,s8,1
1c00a6f6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00a6fa:	6e000593          	li	a1,1760
1c00a6fe:	42b78733          	p.mac	a4,a5,a1
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a702:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00a706:	002047b7          	lui	a5,0x204
1c00a70a:	4007a503          	lw	a0,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c00a70e:	c7034333          	p.bset	t1,t1,3,16
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00a712:	c1534333          	p.bset	t1,t1,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00a716:	4067a023          	sw	t1,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00a71a:	40e7a023          	sw	a4,1024(a5)
1c00a71e:	017b0733          	add	a4,s6,s7
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00a722:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c00a726:	4137a023          	sw	s3,1024(a5)
        if (!merge) copy->id = id;
1c00a72a:	c4aa                	sw	a0,72(sp)
        copy->length = 0;
1c00a72c:	cc82                	sw	zero,88(sp)
  __builtin_pulp_spr_write(reg, val);
1c00a72e:	30059073          	csrw	mstatus,a1
1c00a732:	b53d                	j	1c00a560 <S44_Conv2d_24x128x3x3+0x200>
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+3568+19008*((D0Ind_Total)%2));
1c00a734:	6785                	lui	a5,0x1
1c00a736:	df078793          	addi	a5,a5,-528 # df0 <__rt_stack_size+0x5f0>
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?40:44);
1c00a73a:	02800713          	li	a4,40
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+3568+19008*((D0Ind_Total)%2));
1c00a73e:	97ae                	add	a5,a5,a1
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00a740:	0ff00993          	li	s3,255
1c00a744:	00204437          	lui	s0,0x204
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?40:44);
1c00a748:	0ce11a23          	sh	a4,212(sp)
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+3568+19008*((D0Ind_Total)%2));
1c00a74c:	cfbe                	sw	a5,220(sp)
				KerArg1->TotalInFeatures = (short int) (D0Ind_Last?40:44);
1c00a74e:	0ce11c23          	sh	a4,216(sp)
1c00a752:	09342223          	sw	s3,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00a756:	20040913          	addi	s2,s0,512
1c00a75a:	01392023          	sw	s3,0(s2)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00a75e:	01392623          	sw	s3,12(s2)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00a762:	08942023          	sw	s1,128(s0)
1c00a766:	09a42023          	sw	s10,128(s0)
1c00a76a:	856a                	mv	a0,s10
1c00a76c:	7d6020ef          	jal	ra,1c00cf42 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00a770:	01c96783          	p.elw	a5,28(s2)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00a774:	09342223          	sw	s3,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00a778:	01392023          	sw	s3,0(s2)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00a77c:	01392623          	sw	s3,12(s2)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00a780:	1c00d7b7          	lui	a5,0x1c00d
1c00a784:	9de78793          	addi	a5,a5,-1570 # 1c00c9de <KerDP_fp>
1c00a788:	08f42023          	sw	a5,128(s0)
1c00a78c:	1068                	addi	a0,sp,44
1c00a78e:	08a42023          	sw	a0,128(s0)
1c00a792:	24c020ef          	jal	ra,1c00c9de <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00a796:	01c96783          	p.elw	a5,28(s2)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) cnn_ssd_L2_Memory+58864+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+41584), 960, 1, &DmaW_Evt1);
1c00a79a:	1c015537          	lui	a0,0x1c015
1c00a79e:	a8050513          	addi	a0,a0,-1408 # 1c014a80 <cnn_ssd_L2_Memory>
1c00a7a2:	4118                	lw	a4,0(a0)
1c00a7a4:	67b9                	lui	a5,0xe
1c00a7a6:	000ca683          	lw	a3,0(s9)
1c00a7aa:	5f078793          	addi	a5,a5,1520 # e5f0 <__rt_stack_size+0xddf0>
1c00a7ae:	973e                	add	a4,a4,a5
1c00a7b0:	67a9                	lui	a5,0xa
1c00a7b2:	27078793          	addi	a5,a5,624 # a270 <__rt_stack_size+0x9a70>
1c00a7b6:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a7b8:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00a7bc:	40042583          	lw	a1,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00a7c0:	000a07b7          	lui	a5,0xa0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00a7c4:	3c078793          	addi	a5,a5,960 # a03c0 <__L2+0x203c0>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00a7c8:	c157c7b3          	p.bset	a5,a5,0,21
1c00a7cc:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00a7d0:	40d42023          	sw	a3,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00a7d4:	40e42023          	sw	a4,1024(s0)
        if (!merge) copy->id = id;
1c00a7d8:	d52e                	sw	a1,168(sp)
        copy->length = 0;
1c00a7da:	dd02                	sw	zero,184(sp)
  __builtin_pulp_spr_write(reg, val);
1c00a7dc:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c00a7e0:	57ea                	lw	a5,184(sp)
1c00a7e2:	ebe9                	bnez	a5,1c00a8b4 <S44_Conv2d_24x128x3x3+0x554>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a7e4:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00a7e8:	40442783          	lw	a5,1028(s0)
1c00a7ec:	56aa                	lw	a3,168(sp)
1c00a7ee:	40d7d7b3          	sra	a5,a5,a3
1c00a7f2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00a7f6:	c79d                	beqz	a5,1c00a824 <S44_Conv2d_24x128x3x3+0x4c4>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00a7f8:	10000593          	li	a1,256
1c00a7fc:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00a800:	30061073          	csrw	mstatus,a2
1c00a804:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00a808:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00a80c:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a810:	30047673          	csrrci	a2,mstatus,8
1c00a814:	40472783          	lw	a5,1028(a4)
1c00a818:	56aa                	lw	a3,168(sp)
1c00a81a:	40d7d7b3          	sra	a5,a5,a3
1c00a81e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00a822:	fff9                	bnez	a5,1c00a800 <S44_Conv2d_24x128x3x3+0x4a0>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00a824:	4785                	li	a5,1
1c00a826:	00d796b3          	sll	a3,a5,a3
1c00a82a:	002047b7          	lui	a5,0x204
1c00a82e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00a832:	30061073          	csrw	mstatus,a2
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+0), ((AT_HYPERRAM_INT_ADDR_TYPE) cnn_ssd_L2_Memory+58864+0), 960, 1, &UchanHR1);
1c00a836:	410c                	lw	a1,0(a0)
1c00a838:	6639                	lui	a2,0xe
1c00a83a:	5f060613          	addi	a2,a2,1520 # e5f0 <__rt_stack_size+0xddf0>
1c00a83e:	962e                	add	a2,a2,a1
1c00a840:	45b2                	lw	a1,12(sp)
1c00a842:	1c015537          	lui	a0,0x1c015
1c00a846:	199c                	addi	a5,sp,240
1c00a848:	4701                	li	a4,0
1c00a84a:	3c000693          	li	a3,960
1c00a84e:	fb050513          	addi	a0,a0,-80 # 1c014fb0 <HyperRam>
1c00a852:	6f2040ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c00a856:	18c14783          	lbu	a5,396(sp)
1c00a85a:	0ff7f793          	andi	a5,a5,255
1c00a85e:	ef99                	bnez	a5,1c00a87c <S44_Conv2d_24x128x3x3+0x51c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00a860:	4689                	li	a3,2
1c00a862:	00204737          	lui	a4,0x204
1c00a866:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00a86a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00a86e:	00d72223          	sw	a3,4(a4)
1c00a872:	18c14783          	lbu	a5,396(sp)
1c00a876:	0ff7f793          	andi	a5,a5,255
1c00a87a:	d7f5                	beqz	a5,1c00a866 <S44_Conv2d_24x128x3x3+0x506>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1); /* Wait previous uDMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c00a87c:	1cc12083          	lw	ra,460(sp)
1c00a880:	1c812403          	lw	s0,456(sp)
1c00a884:	1c412483          	lw	s1,452(sp)
1c00a888:	1c012903          	lw	s2,448(sp)
1c00a88c:	1bc12983          	lw	s3,444(sp)
1c00a890:	1b812a03          	lw	s4,440(sp)
1c00a894:	1b412a83          	lw	s5,436(sp)
1c00a898:	1b012b03          	lw	s6,432(sp)
1c00a89c:	1ac12b83          	lw	s7,428(sp)
1c00a8a0:	1a812c03          	lw	s8,424(sp)
1c00a8a4:	1a412c83          	lw	s9,420(sp)
1c00a8a8:	1a012d03          	lw	s10,416(sp)
1c00a8ac:	19c12d83          	lw	s11,412(sp)
1c00a8b0:	6179                	addi	sp,sp,464
1c00a8b2:	8082                	ret
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00a8b4:	468e                	lw	a3,192(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00a8b6:	02000713          	li	a4,32
1c00a8ba:	002047b7          	lui	a5,0x204
1c00a8be:	dea5                	beqz	a3,1c00a836 <S44_Conv2d_24x128x3x3+0x4d6>
1c00a8c0:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00a8c4:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00a8c8:	00e7a223          	sw	a4,4(a5)
1c00a8cc:	468e                	lw	a3,192(sp)
1c00a8ce:	d6a5                	beqz	a3,1c00a836 <S44_Conv2d_24x128x3x3+0x4d6>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00a8d0:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00a8d4:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00a8d8:	00e7a223          	sw	a4,4(a5)
1c00a8dc:	468e                	lw	a3,192(sp)
1c00a8de:	f2ed                	bnez	a3,1c00a8c0 <S44_Conv2d_24x128x3x3+0x560>
1c00a8e0:	bf99                	j	1c00a836 <S44_Conv2d_24x128x3x3+0x4d6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a8e2:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00a8e6:	4047a783          	lw	a5,1028(a5)
1c00a8ea:	56a6                	lw	a3,104(sp)
1c00a8ec:	40d7d7b3          	sra	a5,a5,a3
1c00a8f0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00a8f4:	c79d                	beqz	a5,1c00a922 <S44_Conv2d_24x128x3x3+0x5c2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00a8f6:	10000593          	li	a1,256
1c00a8fa:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00a8fe:	30061073          	csrw	mstatus,a2
1c00a902:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00a906:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00a90a:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a90e:	30047673          	csrrci	a2,mstatus,8
1c00a912:	40472783          	lw	a5,1028(a4)
1c00a916:	56a6                	lw	a3,104(sp)
1c00a918:	40d7d7b3          	sra	a5,a5,a3
1c00a91c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00a920:	fff9                	bnez	a5,1c00a8fe <S44_Conv2d_24x128x3x3+0x59e>
1c00a922:	4785                	li	a5,1
1c00a924:	00d796b3          	sll	a3,a5,a3
1c00a928:	002047b7          	lui	a5,0x204
1c00a92c:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00a930:	30061073          	csrw	mstatus,a2
1c00a934:	b685                	j	1c00a494 <S44_Conv2d_24x128x3x3+0x134>
					_N_Filter = _N_Filter + ((19008)); _SN_Filter = (((1)?(((D0Ind_NextLast)?17280:19008)):(((D0Ind_NextLast)?17280:19008)))); 
1c00a936:	1c014737          	lui	a4,0x1c014
1c00a93a:	5c470713          	addi	a4,a4,1476 # 1c0145c4 <IntegerExpLUT+0x7c>
1c00a93e:	9aee                	add	s5,s5,s11
1c00a940:	64000313          	li	t1,1600
1c00a944:	00072803          	lw	a6,0(a4)
1c00a948:	becd                	j	1c00a53a <S44_Conv2d_24x128x3x3+0x1da>
				_SN_In = 0;
1c00a94a:	4301                	li	t1,0
				_SN_Filter = 0;
1c00a94c:	4801                	li	a6,0
1c00a94e:	b6f5                	j	1c00a53a <S44_Conv2d_24x128x3x3+0x1da>

1c00a950 <S48_Conv2d_128x128x3x3_Relu>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c00a950:	710d                	addi	sp,sp,-352
1c00a952:	ce36                	sw	a3,28(sp)
	KerArg0->OutFeatures = (unsigned short int) (128);
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+128);
	KerArg0->NormBias = (signed char) (13);
	KerArg1->W = (unsigned short int) (2);
	KerArg1->UsedW = (unsigned short int) (2);
	KerArg1->InFeatures = (unsigned short int) (8);
1c00a954:	1c014eb7          	lui	t4,0x1c014
	KerArg0->NormBias = (signed char) (13);
1c00a958:	46b5                	li	a3,13
{
1c00a95a:	15212823          	sw	s2,336(sp)
	KerArg0->NormBias = (signed char) (13);
1c00a95e:	02d10723          	sb	a3,46(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+38272);
1c00a962:	10000937          	lui	s2,0x10000
	KerArg1->InFeatures = (unsigned short int) (8);
1c00a966:	5c8ea683          	lw	a3,1480(t4) # 1c0145c8 <IntegerExpLUT+0x80>
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+38272);
1c00a96a:	02090913          	addi	s2,s2,32 # 10000020 <cnn_ssd_L1_Memory>
1c00a96e:	00092803          	lw	a6,0(s2)
	KerArg1->InFeatures = (unsigned short int) (8);
1c00a972:	10d12223          	sw	a3,260(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+38272);
1c00a976:	67a5                	lui	a5,0x9
	KerArg1->OutFeatures = (unsigned short int) (128);
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+38272);
	KerArg1->Norm = (unsigned char) (14);
	KerArg1->TotalInFeatures = (short int) (8);
1c00a978:	46a1                	li	a3,8
1c00a97a:	10d11423          	sh	a3,264(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+38272);
1c00a97e:	58078713          	addi	a4,a5,1408 # 9580 <__rt_stack_size+0x8d80>
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c00a982:	020076d7          	pv.add.sci.b	a3,zero,1
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+38272);
1c00a986:	9742                	add	a4,a4,a6
	KerArg0->W = (unsigned short int) (2);
1c00a988:	001068d7          	pv.add.sci.h	a7,zero,2
	KerArg0->OutFeatures = (unsigned short int) (128);
1c00a98c:	08000313          	li	t1,128
	KerArg1->Norm = (unsigned char) (14);
1c00a990:	4e39                	li	t3,14
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c00a992:	10d12a23          	sw	a3,276(sp)
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+128);
1c00a996:	08080f13          	addi	t5,a6,128
	KerArg1->Orientation = (unsigned char) (1);
1c00a99a:	4685                	li	a3,1
	KerArg2->In = (int * __restrict__) (cnn_ssd_L1_Memory+38272);
	KerArg2->W = (unsigned short int) (2);
	KerArg2->H = (unsigned short int) (2);
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+37248);
1c00a99c:	18078793          	addi	a5,a5,384
1c00a9a0:	97c2                	add	a5,a5,a6
{
1c00a9a2:	14112e23          	sw	ra,348(sp)
1c00a9a6:	14812c23          	sw	s0,344(sp)
1c00a9aa:	14912a23          	sw	s1,340(sp)
1c00a9ae:	15312623          	sw	s3,332(sp)
1c00a9b2:	15412423          	sw	s4,328(sp)
1c00a9b6:	15512223          	sw	s5,324(sp)
1c00a9ba:	15612023          	sw	s6,320(sp)
1c00a9be:	13712e23          	sw	s7,316(sp)
1c00a9c2:	13812c23          	sw	s8,312(sp)
1c00a9c6:	13912a23          	sw	s9,308(sp)
1c00a9ca:	13a12823          	sw	s10,304(sp)
1c00a9ce:	13b12623          	sw	s11,300(sp)
1c00a9d2:	cc2a                	sw	a0,24(sp)
1c00a9d4:	ca2e                	sw	a1,20(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+38272);
1c00a9d6:	d23a                	sw	a4,36(sp)
	KerArg0->W = (unsigned short int) (2);
1c00a9d8:	d446                	sw	a7,40(sp)
	KerArg0->OutFeatures = (unsigned short int) (128);
1c00a9da:	02611623          	sh	t1,44(sp)
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+128);
1c00a9de:	d87a                	sw	t5,48(sp)
	KerArg1->W = (unsigned short int) (2);
1c00a9e0:	dfc6                	sw	a7,252(sp)
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+38272);
1c00a9e2:	10e12823          	sw	a4,272(sp)
	KerArg1->Norm = (unsigned char) (14);
1c00a9e6:	11c10c23          	sb	t3,280(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c00a9ea:	10d10da3          	sb	a3,283(sp)
	KerArg2->In = (int * __restrict__) (cnn_ssd_L1_Memory+38272);
1c00a9ee:	da3a                	sw	a4,52(sp)
	KerArg2->W = (unsigned short int) (2);
1c00a9f0:	dc46                	sw	a7,56(sp)
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+37248);
1c00a9f2:	de3e                	sw	a5,60(sp)
	KerArg2->Norm = (unsigned char) (14);
	KerArg2->InFeatures = (unsigned short int) (128);
	KerArg2->LB = (int) (0);
	KerArg2->UB = (int) (32767);
1c00a9f4:	67a1                	lui	a5,0x8
1c00a9f6:	17fd                	addi	a5,a5,-1
	KerArg2->Norm = (unsigned char) (14);
1c00a9f8:	05c10023          	sb	t3,64(sp)
	KerArg2->InFeatures = (unsigned short int) (128);
1c00a9fc:	04611123          	sh	t1,66(sp)
	KerArg2->LB = (int) (0);
1c00aa00:	c282                	sw	zero,68(sp)
	KerArg2->UB = (int) (32767);
1c00aa02:	c4be                	sw	a5,72(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00aa04:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00aa08:	002047b7          	lui	a5,0x204
1c00aa0c:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00aa10:	002f0737          	lui	a4,0x2f0
1c00aa14:	04070713          	addi	a4,a4,64 # 2f0040 <__L2+0x270040>
1c00aa18:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00aa1c:	4107a023          	sw	a6,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00aa20:	4862                	lw	a6,24(sp)
1c00aa22:	4107a023          	sw	a6,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c00aa26:	00080737          	lui	a4,0x80
1c00aa2a:	0721                	addi	a4,a4,8
1c00aa2c:	40e7a023          	sw	a4,1024(a5)
        if (!merge) copy->id = id;
1c00aa30:	c8ae                	sw	a1,80(sp)
        copy->length = 0;
1c00aa32:	d082                	sw	zero,96(sp)
  __builtin_pulp_spr_write(reg, val);
1c00aa34:	30069073          	csrw	mstatus,a3
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+0), 64, 8, 8, 0, &DmaR_Evt1);
	_N_In=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+128), 256, 0, &DmaR_Evt2);
1c00aa38:	00092683          	lw	a3,0(s2)
1c00aa3c:	08068693          	addi	a3,a3,128
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00aa40:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00aa44:	4007a503          	lw	a0,1024(a5)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00aa48:	00030737          	lui	a4,0x30
1c00aa4c:	c0874733          	p.bset	a4,a4,0,8
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00aa50:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00aa54:	c1574733          	p.bset	a4,a4,0,21
1c00aa58:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00aa5c:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00aa60:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c00aa64:	d8aa                	sw	a0,112(sp)
        copy->length = 0;
1c00aa66:	c102                	sw	zero,128(sp)
  __builtin_pulp_spr_write(reg, val);
1c00aa68:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c00aa6c:	470a                	lw	a4,128(sp)
1c00aa6e:	42070563          	beqz	a4,1c00ae98 <S48_Conv2d_128x128x3x3_Relu+0x548>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00aa72:	46aa                	lw	a3,136(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00aa74:	02000713          	li	a4,32
1c00aa78:	ca89                	beqz	a3,1c00aa8a <S48_Conv2d_128x128x3x3_Relu+0x13a>
1c00aa7a:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00aa7e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00aa82:	00e7a223          	sw	a4,4(a5)
1c00aa86:	46aa                	lw	a3,136(sp)
1c00aa88:	faed                	bnez	a3,1c00aa7a <S48_Conv2d_128x128x3x3_Relu+0x12a>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Bias */
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) Filter+0), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory+99824+0), 18432, 0, &UchanHF1);
1c00aa8a:	1c015c37          	lui	s8,0x1c015
1c00aa8e:	a80c0c13          	addi	s8,s8,-1408 # 1c014a80 <cnn_ssd_L2_Memory>
1c00aa92:	1c015637          	lui	a2,0x1c015
1c00aa96:	000c2583          	lw	a1,0(s8)
1c00aa9a:	cf860613          	addi	a2,a2,-776 # 1c014cf8 <HyperFlash>
1c00aa9e:	4e08                	lw	a0,24(a2)
1c00aaa0:	6661                	lui	a2,0x18
1c00aaa2:	5f060613          	addi	a2,a2,1520 # 185f0 <__L1Cl+0x85f0>
1c00aaa6:	962e                	add	a2,a2,a1
1c00aaa8:	45d2                	lw	a1,20(sp)
1c00aaaa:	6695                	lui	a3,0x5
1c00aaac:	099c                	addi	a5,sp,208
1c00aaae:	4705                	li	a4,1
1c00aab0:	80068693          	addi	a3,a3,-2048 # 4800 <__rt_stack_size+0x4000>
1c00aab4:	03e030ef          	jal	ra,1c00daf2 <pi_cl_fs_copy>
1c00aab8:	0e014783          	lbu	a5,224(sp)
1c00aabc:	0ff7f793          	andi	a5,a5,255
1c00aac0:	ef99                	bnez	a5,1c00aade <S48_Conv2d_128x128x3x3_Relu+0x18e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00aac2:	4689                	li	a3,2
1c00aac4:	00204737          	lui	a4,0x204
1c00aac8:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00aacc:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00aad0:	00d72223          	sw	a3,4(a4)
1c00aad4:	0e014783          	lbu	a5,224(sp)
1c00aad8:	0ff7f793          	andi	a5,a5,255
1c00aadc:	d7f5                	beqz	a5,1c00aac8 <S48_Conv2d_128x128x3x3_Relu+0x178>
	AT_HYPERFLASH_FS_CL_WAIT(&HyperFlash, &UchanHF1); /* Wait previous uDMA read Filter */
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) Filter+18432), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory+99824+18432), 18432, 0, &UchanHF1);
1c00aade:	1c015737          	lui	a4,0x1c015
1c00aae2:	000c2583          	lw	a1,0(s8)
1c00aae6:	4852                	lw	a6,20(sp)
1c00aae8:	cf870713          	addi	a4,a4,-776 # 1c014cf8 <HyperFlash>
1c00aaec:	4f08                	lw	a0,24(a4)
1c00aaee:	6a15                	lui	s4,0x5
1c00aaf0:	6675                	lui	a2,0x1d
1c00aaf2:	800a0a13          	addi	s4,s4,-2048 # 4800 <__rt_stack_size+0x4000>
1c00aaf6:	df060613          	addi	a2,a2,-528 # 1cdf0 <__L1Cl+0xcdf0>
1c00aafa:	099c                	addi	a5,sp,208
1c00aafc:	86d2                	mv	a3,s4
1c00aafe:	962e                	add	a2,a2,a1
1c00ab00:	4705                	li	a4,1
1c00ab02:	014805b3          	add	a1,a6,s4
1c00ab06:	7ed020ef          	jal	ra,1c00daf2 <pi_cl_fs_copy>
	AT_L2_COPY(0, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L2_Memory+99824+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+384+0), 18432, 0, &DmaR_Evt3);
1c00ab0a:	000c2683          	lw	a3,0(s8)
1c00ab0e:	00092603          	lw	a2,0(s2)
1c00ab12:	67e1                	lui	a5,0x18
1c00ab14:	5f078793          	addi	a5,a5,1520 # 185f0 <__L1Cl+0x85f0>
1c00ab18:	96be                	add	a3,a3,a5
1c00ab1a:	18060613          	addi	a2,a2,384
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00ab1e:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00ab22:	002047b7          	lui	a5,0x204
1c00ab26:	4007a503          	lw	a0,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c00ab2a:	00030737          	lui	a4,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00ab2e:	de0a2733          	p.insert	a4,s4,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00ab32:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00ab36:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00ab3a:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00ab3e:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00ab42:	40d7a023          	sw	a3,1024(a5)
        if (!merge) copy->id = id;
1c00ab46:	c92a                	sw	a0,144(sp)
        copy->length = 0;
1c00ab48:	d102                	sw	zero,160(sp)
  __builtin_pulp_spr_write(reg, val);
1c00ab4a:	30059073          	csrw	mstatus,a1
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00ab4e:	0ff00713          	li	a4,255
1c00ab52:	08e7a223          	sw	a4,132(a5)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00ab56:	20078d13          	addi	s10,a5,512
1c00ab5a:	00ed2023          	sw	a4,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00ab5e:	00ed2623          	sw	a4,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00ab62:	1c00d737          	lui	a4,0x1c00d
1c00ab66:	92a70713          	addi	a4,a4,-1750 # 1c00c92a <KerParSetBias_DP_fp>
1c00ab6a:	08e7a023          	sw	a4,128(a5)
1c00ab6e:	1048                	addi	a0,sp,36
1c00ab70:	08a7a023          	sw	a0,128(a5)
1c00ab74:	5b7010ef          	jal	ra,1c00c92a <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00ab78:	01cd6783          	p.elw	a5,28(s10)
1c00ab7c:	1c00dab7          	lui	s5,0x1c00d
	_NN_Filter=18432; _SN_Filter=18432;
1c00ab80:	8cd2                	mv	s9,s4
1c00ab82:	84d2                	mv	s1,s4
	_N_In=0;
1c00ab84:	4401                	li	s0,0
		{ /* Single iteration on Tile0 */
			int T0Ind_Last = 1, T0Ind_NextLast = 1;
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			AT_FORK(gap_ncore(), (void *) KerParSetBias_DP_fp, (void *) KerArg0);
			__CALL(KerParSetBias_DP_fp, KerArg0);
			for (D0Ind=0; D0Ind<16; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c00ab86:	4f01                	li	t5,0
1c00ab88:	f42a8a93          	addi	s5,s5,-190 # 1c00cf42 <KerParConv3x3Stride1_DP_fp>
1c00ab8c:	0f810993          	addi	s3,sp,248
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00ab90:	00204db7          	lui	s11,0x204
				int D0Ind_Last = (D0Ind==15), D0Ind_NextLast = ((D0Ind+1)==15), D0Ind_NextNextLast = ((D0Ind+2)==15);
				/*================================= Prepare Tiles ===================================*/
				_SN_In = 0;
				if (!(D0Ind_Last)) {
1c00ab94:	3aff2663          	p.beqimm	t5,15,1c00af40 <S48_Conv2d_128x128x3x3_Relu+0x5f0>
					_N_In = _N_In + (64); _LN_In = (8); _SN_In = (8*_LN_In); 
1c00ab98:	04040413          	addi	s0,s0,64
				} else if (!(1)) {
					_N_In = _N_In + (-960); _LN_In = (8); _SN_In = (8*_LN_In); 
				}
				_SNN_Filter = 0;
				if (!(D0Ind_Last)) {
					if (!(D0Ind_NextLast)) {
1c00ab9c:	3aef2563          	p.beqimm	t5,14,1c00af46 <S48_Conv2d_128x128x3x3_Relu+0x5f6>
						_NN_Filter = _NN_Filter + ((18432)); _SNN_Filter = (((1)?(18432):(18432))); 
1c00aba0:	6615                	lui	a2,0x5
1c00aba2:	80060613          	addi	a2,a2,-2048 # 4800 <__rt_stack_size+0x4000>
1c00aba6:	94b2                	add	s1,s1,a2
1c00aba8:	04000593          	li	a1,64
1c00abac:	8bd2                	mv	s7,s4
  if (copy->length == 0)
1c00abae:	5786                	lw	a5,96(sp)
1c00abb0:	22078163          	beqz	a5,1c00add2 <S48_Conv2d_128x128x3x3_Relu+0x482>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00abb4:	5726                	lw	a4,104(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00abb6:	02000793          	li	a5,32
1c00abba:	cb09                	beqz	a4,1c00abcc <S48_Conv2d_128x128x3x3_Relu+0x27c>
1c00abbc:	00fda423          	sw	a5,8(s11) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00abc0:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00abc4:	00fda223          	sw	a5,4(s11)
1c00abc8:	5726                	lw	a4,104(sp)
1c00abca:	fb6d                	bnez	a4,1c00abbc <S48_Conv2d_128x128x3x3_Relu+0x26c>
1c00abcc:	001f0b13          	addi	s6,t5,1
					_NN_Filter = _NN_Filter + ((18432)); _SNN_Filter = (((1)?(18432):(18432))); 
				}
				/*============================= End Prepare Tiles ===================================*/
				/*================================= Read Tiles ======================================*/
				AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In */
				if (_SN_In) {
1c00abd0:	24059a63          	bnez	a1,1c00ae24 <S48_Conv2d_128x128x3x3_Relu+0x4d4>
1c00abd4:	0e014783          	lbu	a5,224(sp)
1c00abd8:	0ff7f793          	andi	a5,a5,255
1c00abdc:	ef89                	bnez	a5,1c00abf6 <S48_Conv2d_128x128x3x3_Relu+0x2a6>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00abde:	4709                	li	a4,2
1c00abe0:	00eda423          	sw	a4,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00abe4:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00abe8:	00eda223          	sw	a4,4(s11)
1c00abec:	0e014783          	lbu	a5,224(sp)
1c00abf0:	0ff7f793          	andi	a5,a5,255
1c00abf4:	d7f5                	beqz	a5,1c00abe0 <S48_Conv2d_128x128x3x3_Relu+0x290>
1c00abf6:	fc1f3f33          	p.bclr	t5,t5,30,1
1c00abfa:	003f1f93          	slli	t6,t5,0x3
1c00abfe:	9ffa                	add	t6,t6,t5
1c00ac00:	0fae                	slli	t6,t6,0xb
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+64*((D0Ind_Total+1)%2)),
							_SN_In, 8, _LN_In, 0, &DmaR_Evt1);
				}
				AT_HYPERFLASH_FS_CL_WAIT(&HyperFlash, &UchanHF1); /* Wait previous uDMA read Filter */
				if (_SNN_Filter) {
1c00ac02:	260b9263          	bnez	s7,1c00ae66 <S48_Conv2d_128x128x3x3_Relu+0x516>
  if (copy->length == 0)
1c00ac06:	578a                	lw	a5,160(sp)
1c00ac08:	12078363          	beqz	a5,1c00ad2e <S48_Conv2d_128x128x3x3_Relu+0x3de>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00ac0c:	572a                	lw	a4,168(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00ac0e:	02000793          	li	a5,32
1c00ac12:	cb09                	beqz	a4,1c00ac24 <S48_Conv2d_128x128x3x3_Relu+0x2d4>
1c00ac14:	00fda423          	sw	a5,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00ac18:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00ac1c:	00fda223          	sw	a5,4(s11)
1c00ac20:	572a                	lw	a4,168(sp)
1c00ac22:	fb6d                	bnez	a4,1c00ac14 <S48_Conv2d_128x128x3x3_Relu+0x2c4>
1c00ac24:	00092783          	lw	a5,0(s2)
					AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) Filter+_NN_Filter), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory+99824+18432*((D0Ind_Total)%2)),
							_SNN_Filter, 0, &UchanHF1);
				}
				AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read Filter */
				if (_SN_Filter) {
1c00ac28:	140c9c63          	bnez	s9,1c00ad80 <S48_Conv2d_128x128x3x3_Relu+0x430>
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+64*((D0Ind_Total)%2));
				KerArg1->H = (unsigned short int) (4-1*(1)-1*(1));
				KerArg1->UsedH = (unsigned short int) (4-1*(1)-1*(1));
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+384+18432*((D0Ind_Total)%2));
1c00ac2c:	180f8f93          	addi	t6,t6,384
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+64*((D0Ind_Total)%2));
1c00ac30:	0f1a                	slli	t5,t5,0x6
1c00ac32:	9f3e                	add	t5,t5,a5
				KerArg1->H = (unsigned short int) (4-1*(1)-1*(1));
1c00ac34:	00106657          	pv.add.sci.h	a2,zero,2
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+384+18432*((D0Ind_Total)%2));
1c00ac38:	97fe                	add	a5,a5,t6
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00ac3a:	0ff00713          	li	a4,255
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+64*((D0Ind_Total)%2));
1c00ac3e:	ddfa                	sw	t5,248(sp)
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+384+18432*((D0Ind_Total)%2));
1c00ac40:	10f12623          	sw	a5,268(sp)
				KerArg1->H = (unsigned short int) (4-1*(1)-1*(1));
1c00ac44:	10c12023          	sw	a2,256(sp)
1c00ac48:	08eda223          	sw	a4,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00ac4c:	00ed2023          	sw	a4,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00ac50:	00ed2623          	sw	a4,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00ac54:	095da023          	sw	s5,128(s11)
1c00ac58:	093da023          	sw	s3,128(s11)
1c00ac5c:	854e                	mv	a0,s3
1c00ac5e:	2e4020ef          	jal	ra,1c00cf42 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00ac62:	01cd6783          	p.elw	a5,28(s10)
			for (D0Ind=0; D0Ind<16; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c00ac66:	47c1                	li	a5,16
1c00ac68:	8f5a                	mv	t5,s6
1c00ac6a:	8cde                	mv	s9,s7
1c00ac6c:	f2fb14e3          	bne	s6,a5,1c00ab94 <S48_Conv2d_128x128x3x3_Relu+0x244>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00ac70:	0ff00793          	li	a5,255
1c00ac74:	00204437          	lui	s0,0x204
1c00ac78:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00ac7c:	00fd2023          	sw	a5,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00ac80:	00fd2623          	sw	a5,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00ac84:	1c00d7b7          	lui	a5,0x1c00d
1c00ac88:	9de78793          	addi	a5,a5,-1570 # 1c00c9de <KerDP_fp>
1c00ac8c:	08f42023          	sw	a5,128(s0)
1c00ac90:	1848                	addi	a0,sp,52
1c00ac92:	08a42023          	sw	a0,128(s0)
1c00ac96:	549010ef          	jal	ra,1c00c9de <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00ac9a:	01cd6783          	p.elw	a5,28(s10)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+37248), 1024, 1, &DmaW_Evt1);
1c00ac9e:	67a5                	lui	a5,0x9
1c00aca0:	00092703          	lw	a4,0(s2)
1c00aca4:	18078793          	addi	a5,a5,384 # 9180 <__rt_stack_size+0x8980>
1c00aca8:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00acaa:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00acae:	400da603          	lw	a2,1024(s11)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00acb2:	000a07b7          	lui	a5,0xa0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00acb6:	40078793          	addi	a5,a5,1024 # a0400 <__L2+0x20400>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00acba:	c157c7b3          	p.bset	a5,a5,0,21
1c00acbe:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00acc2:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00acc6:	4872                	lw	a6,28(sp)
1c00acc8:	41042023          	sw	a6,1024(s0)
        if (!merge) copy->id = id;
1c00accc:	d932                	sw	a2,176(sp)
        copy->length = 0;
1c00acce:	c182                	sw	zero,192(sp)
  __builtin_pulp_spr_write(reg, val);
1c00acd0:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c00acd4:	478e                	lw	a5,192(sp)
1c00acd6:	20078b63          	beqz	a5,1c00aeec <S48_Conv2d_128x128x3x3_Relu+0x59c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00acda:	46ae                	lw	a3,200(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00acdc:	02000713          	li	a4,32
1c00ace0:	002047b7          	lui	a5,0x204
1c00ace4:	ca89                	beqz	a3,1c00acf6 <S48_Conv2d_128x128x3x3_Relu+0x3a6>
1c00ace6:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00acea:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00acee:	00e7a223          	sw	a4,4(a5)
1c00acf2:	46ae                	lw	a3,200(sp)
1c00acf4:	faed                	bnez	a3,1c00ace6 <S48_Conv2d_128x128x3x3_Relu+0x396>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c00acf6:	15c12083          	lw	ra,348(sp)
1c00acfa:	15812403          	lw	s0,344(sp)
1c00acfe:	15412483          	lw	s1,340(sp)
1c00ad02:	15012903          	lw	s2,336(sp)
1c00ad06:	14c12983          	lw	s3,332(sp)
1c00ad0a:	14812a03          	lw	s4,328(sp)
1c00ad0e:	14412a83          	lw	s5,324(sp)
1c00ad12:	14012b03          	lw	s6,320(sp)
1c00ad16:	13c12b83          	lw	s7,316(sp)
1c00ad1a:	13812c03          	lw	s8,312(sp)
1c00ad1e:	13412c83          	lw	s9,308(sp)
1c00ad22:	13012d03          	lw	s10,304(sp)
1c00ad26:	12c12d83          	lw	s11,300(sp)
1c00ad2a:	6135                	addi	sp,sp,352
1c00ad2c:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00ad2e:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00ad32:	404da783          	lw	a5,1028(s11)
1c00ad36:	474a                	lw	a4,144(sp)
1c00ad38:	40e7d7b3          	sra	a5,a5,a4
1c00ad3c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00ad40:	c78d                	beqz	a5,1c00ad6a <S48_Conv2d_128x128x3x3_Relu+0x41a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00ad42:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c00ad46:	30069073          	csrw	mstatus,a3
1c00ad4a:	00cda423          	sw	a2,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00ad4e:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00ad52:	00cda223          	sw	a2,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00ad56:	300476f3          	csrrci	a3,mstatus,8
1c00ad5a:	404da783          	lw	a5,1028(s11)
1c00ad5e:	474a                	lw	a4,144(sp)
1c00ad60:	40e7d7b3          	sra	a5,a5,a4
1c00ad64:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00ad68:	fff9                	bnez	a5,1c00ad46 <S48_Conv2d_128x128x3x3_Relu+0x3f6>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00ad6a:	4785                	li	a5,1
1c00ad6c:	00e79733          	sll	a4,a5,a4
1c00ad70:	40eda223          	sw	a4,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c00ad74:	30069073          	csrw	mstatus,a3
1c00ad78:	00092783          	lw	a5,0(s2)
				if (_SN_Filter) {
1c00ad7c:	ea0c88e3          	beqz	s9,1c00ac2c <S48_Conv2d_128x128x3x3_Relu+0x2dc>
					AT_L2_COPY(0, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L2_Memory+99824+18432*((D0Ind_Total+1)%2)), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+384+18432*((D0Ind_Total+1)%2)),
1c00ad80:	fc1b36b3          	p.bclr	a3,s6,30,1
1c00ad84:	000c2603          	lw	a2,0(s8)
1c00ad88:	00369713          	slli	a4,a3,0x3
1c00ad8c:	9736                	add	a4,a4,a3
1c00ad8e:	66e1                	lui	a3,0x18
1c00ad90:	5f068693          	addi	a3,a3,1520 # 185f0 <__L1Cl+0x85f0>
1c00ad94:	072e                	slli	a4,a4,0xb
1c00ad96:	9636                	add	a2,a2,a3
1c00ad98:	963a                	add	a2,a2,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00ad9a:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00ad9e:	400da503          	lw	a0,1024(s11)
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c00ada2:	000306b7          	lui	a3,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00ada6:	de0ca6b3          	p.insert	a3,s9,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c00adaa:	c136c6b3          	p.bset	a3,a3,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00adae:	c156c6b3          	p.bset	a3,a3,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00adb2:	40dda023          	sw	a3,1024(s11)
1c00adb6:	18070713          	addi	a4,a4,384
1c00adba:	97ba                	add	a5,a5,a4
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00adbc:	40fda023          	sw	a5,1024(s11)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00adc0:	40cda023          	sw	a2,1024(s11)
        if (!merge) copy->id = id;
1c00adc4:	c92a                	sw	a0,144(sp)
        copy->length = 0;
1c00adc6:	d102                	sw	zero,160(sp)
  __builtin_pulp_spr_write(reg, val);
1c00adc8:	30059073          	csrw	mstatus,a1
1c00adcc:	00092783          	lw	a5,0(s2)
1c00add0:	bdb1                	j	1c00ac2c <S48_Conv2d_128x128x3x3_Relu+0x2dc>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00add2:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00add6:	404da783          	lw	a5,1028(s11)
1c00adda:	4746                	lw	a4,80(sp)
1c00addc:	40e7d7b3          	sra	a5,a5,a4
1c00ade0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00ade4:	c78d                	beqz	a5,1c00ae0e <S48_Conv2d_128x128x3x3_Relu+0x4be>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00ade6:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c00adea:	30069073          	csrw	mstatus,a3
1c00adee:	00cda423          	sw	a2,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00adf2:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00adf6:	00cda223          	sw	a2,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00adfa:	300476f3          	csrrci	a3,mstatus,8
1c00adfe:	404da783          	lw	a5,1028(s11)
1c00ae02:	4746                	lw	a4,80(sp)
1c00ae04:	40e7d7b3          	sra	a5,a5,a4
1c00ae08:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00ae0c:	fff9                	bnez	a5,1c00adea <S48_Conv2d_128x128x3x3_Relu+0x49a>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00ae0e:	4785                	li	a5,1
1c00ae10:	00e79733          	sll	a4,a5,a4
1c00ae14:	40eda223          	sw	a4,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c00ae18:	30069073          	csrw	mstatus,a3
1c00ae1c:	001f0b13          	addi	s6,t5,1
				if (_SN_In) {
1c00ae20:	da058ae3          	beqz	a1,1c00abd4 <S48_Conv2d_128x128x3x3_Relu+0x284>
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+64*((D0Ind_Total+1)%2)),
1c00ae24:	00092783          	lw	a5,0(s2)
1c00ae28:	fc1b3733          	p.bclr	a4,s6,30,1
1c00ae2c:	071a                	slli	a4,a4,0x6
1c00ae2e:	97ba                	add	a5,a5,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00ae30:	30047773          	csrrci	a4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00ae34:	400da683          	lw	a3,1024(s11)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c00ae38:	c705c5b3          	p.bset	a1,a1,3,16
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00ae3c:	c155c5b3          	p.bset	a1,a1,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00ae40:	40bda023          	sw	a1,1024(s11)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00ae44:	40fda023          	sw	a5,1024(s11)
1c00ae48:	4862                	lw	a6,24(sp)
1c00ae4a:	008807b3          	add	a5,a6,s0
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00ae4e:	40fda023          	sw	a5,1024(s11)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c00ae52:	00080637          	lui	a2,0x80
1c00ae56:	0621                	addi	a2,a2,8
1c00ae58:	40cda023          	sw	a2,1024(s11)
        if (!merge) copy->id = id;
1c00ae5c:	c8b6                	sw	a3,80(sp)
        copy->length = 0;
1c00ae5e:	d082                	sw	zero,96(sp)
  __builtin_pulp_spr_write(reg, val);
1c00ae60:	30071073          	csrw	mstatus,a4
1c00ae64:	bb85                	j	1c00abd4 <S48_Conv2d_128x128x3x3_Relu+0x284>
					AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) Filter+_NN_Filter), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory+99824+18432*((D0Ind_Total)%2)),
1c00ae66:	1c015737          	lui	a4,0x1c015
1c00ae6a:	000c2583          	lw	a1,0(s8)
1c00ae6e:	cf870713          	addi	a4,a4,-776 # 1c014cf8 <HyperFlash>
1c00ae72:	4852                	lw	a6,20(sp)
1c00ae74:	6661                	lui	a2,0x18
1c00ae76:	4f08                	lw	a0,24(a4)
1c00ae78:	5f060613          	addi	a2,a2,1520 # 185f0 <__L1Cl+0x85f0>
1c00ae7c:	967e                	add	a2,a2,t6
1c00ae7e:	962e                	add	a2,a2,a1
1c00ae80:	099c                	addi	a5,sp,208
1c00ae82:	4705                	li	a4,1
1c00ae84:	86de                	mv	a3,s7
1c00ae86:	009805b3          	add	a1,a6,s1
1c00ae8a:	c87a                	sw	t5,16(sp)
1c00ae8c:	c67e                	sw	t6,12(sp)
1c00ae8e:	465020ef          	jal	ra,1c00daf2 <pi_cl_fs_copy>
1c00ae92:	4fb2                	lw	t6,12(sp)
1c00ae94:	4f42                	lw	t5,16(sp)
1c00ae96:	bb85                	j	1c00ac06 <S48_Conv2d_128x128x3x3_Relu+0x2b6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00ae98:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00ae9c:	4047a783          	lw	a5,1028(a5)
1c00aea0:	56c6                	lw	a3,112(sp)
1c00aea2:	40d7d7b3          	sra	a5,a5,a3
1c00aea6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00aeaa:	c79d                	beqz	a5,1c00aed8 <S48_Conv2d_128x128x3x3_Relu+0x588>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00aeac:	10000593          	li	a1,256
1c00aeb0:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00aeb4:	30061073          	csrw	mstatus,a2
1c00aeb8:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00aebc:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00aec0:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00aec4:	30047673          	csrrci	a2,mstatus,8
1c00aec8:	40472783          	lw	a5,1028(a4)
1c00aecc:	56c6                	lw	a3,112(sp)
1c00aece:	40d7d7b3          	sra	a5,a5,a3
1c00aed2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00aed6:	fff9                	bnez	a5,1c00aeb4 <S48_Conv2d_128x128x3x3_Relu+0x564>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00aed8:	4785                	li	a5,1
1c00aeda:	00d796b3          	sll	a3,a5,a3
1c00aede:	002047b7          	lui	a5,0x204
1c00aee2:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00aee6:	30061073          	csrw	mstatus,a2
1c00aeea:	b645                	j	1c00aa8a <S48_Conv2d_128x128x3x3_Relu+0x13a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00aeec:	30047673          	csrrci	a2,mstatus,8
1c00aef0:	404da783          	lw	a5,1028(s11)
1c00aef4:	56ca                	lw	a3,176(sp)
1c00aef6:	40d7d7b3          	sra	a5,a5,a3
1c00aefa:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00aefe:	c79d                	beqz	a5,1c00af2c <S48_Conv2d_128x128x3x3_Relu+0x5dc>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00af00:	10000593          	li	a1,256
1c00af04:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00af08:	30061073          	csrw	mstatus,a2
1c00af0c:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00af10:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00af14:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00af18:	30047673          	csrrci	a2,mstatus,8
1c00af1c:	40472783          	lw	a5,1028(a4)
1c00af20:	56ca                	lw	a3,176(sp)
1c00af22:	40d7d7b3          	sra	a5,a5,a3
1c00af26:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00af2a:	fff9                	bnez	a5,1c00af08 <S48_Conv2d_128x128x3x3_Relu+0x5b8>
1c00af2c:	4785                	li	a5,1
1c00af2e:	00d796b3          	sll	a3,a5,a3
1c00af32:	002047b7          	lui	a5,0x204
1c00af36:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00af3a:	30061073          	csrw	mstatus,a2
1c00af3e:	bb65                	j	1c00acf6 <S48_Conv2d_128x128x3x3_Relu+0x3a6>
				_SN_In = 0;
1c00af40:	4581                	li	a1,0
				_SNN_Filter = 0;
1c00af42:	4b81                	li	s7,0
1c00af44:	b1ad                	j	1c00abae <S48_Conv2d_128x128x3x3_Relu+0x25e>
1c00af46:	04000593          	li	a1,64
1c00af4a:	4b81                	li	s7,0
1c00af4c:	b18d                	j	1c00abae <S48_Conv2d_128x128x3x3_Relu+0x25e>

1c00af4e <S51_Conv2d_18x128x3x3>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c00af4e:	7121                	addi	sp,sp,-448
1c00af50:	1b412423          	sw	s4,424(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[2x2], 2][D0, [0 x 1024, 1024]]
		Tile0: [0, 1024, 1024], Tile1: [0, 1024, 1024], Tile2; [0, 1024, 1024]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+42676);
1c00af54:	10000a37          	lui	s4,0x10000
{
1c00af58:	1a912a23          	sw	s1,436(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+42676);
1c00af5c:	020a0a13          	addi	s4,s4,32 # 10000020 <cnn_ssd_L1_Memory>
{
1c00af60:	84b6                	mv	s1,a3
	KerArg0->W = (unsigned short int) (2);
	KerArg0->H = (unsigned short int) (2);
	KerArg0->OutFeatures = (unsigned short int) (18);
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+1024);
	KerArg0->NormBias = (signed char) (13);
1c00af62:	46b5                	li	a3,13
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+42676);
1c00af64:	000a2803          	lw	a6,0(s4)
	KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0);
	KerArg1->W = (unsigned short int) (2);
	KerArg1->UsedW = (unsigned short int) (2);
	KerArg1->H = (unsigned short int) (2);
	KerArg1->InFeatures = (unsigned short int) (128);
1c00af68:	1c014fb7          	lui	t6,0x1c014
	KerArg0->NormBias = (signed char) (13);
1c00af6c:	00d10723          	sb	a3,14(sp)
	KerArg1->H = (unsigned short int) (2);
1c00af70:	4689                	li	a3,2
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+42676);
1c00af72:	67a9                	lui	a5,0xa
	KerArg1->H = (unsigned short int) (2);
1c00af74:	0ed11023          	sh	a3,224(sp)
	KerArg1->InFeatures = (unsigned short int) (128);
1c00af78:	5ccfa683          	lw	a3,1484(t6) # 1c0145cc <IntegerExpLUT+0x84>
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+42676);
1c00af7c:	6b478713          	addi	a4,a5,1716 # a6b4 <__rt_stack_size+0x9eb4>
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
	KerArg1->Orientation = (unsigned char) (1);
	KerArg2->In = (int * __restrict__) (cnn_ssd_L1_Memory+42676);
	KerArg2->W = (unsigned short int) (2);
	KerArg2->H = (unsigned short int) (2);
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+42532);
1c00af80:	62478793          	addi	a5,a5,1572
1c00af84:	97c2                	add	a5,a5,a6
	KerArg1->InFeatures = (unsigned short int) (128);
1c00af86:	d3b6                	sw	a3,228(sp)
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+42532);
1c00af88:	ce3e                	sw	a5,28(sp)
	KerArg1->TotalInFeatures = (short int) (128);
1c00af8a:	08000693          	li	a3,128
	KerArg2->Norm = (unsigned char) (16);
	KerArg2->InFeatures = (unsigned short int) (18);
	KerArg2->LB = (int) (-32768);
1c00af8e:	77e1                	lui	a5,0xffff8
	KerArg1->TotalInFeatures = (short int) (128);
1c00af90:	0ed11423          	sh	a3,232(sp)
	KerArg2->LB = (int) (-32768);
1c00af94:	d23e                	sw	a5,36(sp)
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c00af96:	020076d7          	pv.add.sci.b	a3,zero,1
	KerArg2->UB = (int) (32767);
1c00af9a:	67a1                	lui	a5,0x8
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+42676);
1c00af9c:	9742                	add	a4,a4,a6
	KerArg0->W = (unsigned short int) (2);
1c00af9e:	001068d7          	pv.add.sci.h	a7,zero,2
	KerArg0->OutFeatures = (unsigned short int) (18);
1c00afa2:	4e49                	li	t3,18
	KerArg1->Norm = (unsigned char) (16);
1c00afa4:	4ec1                	li	t4,16
{
1c00afa6:	1a812c23          	sw	s0,440(sp)
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+1024);
1c00afaa:	40080313          	addi	t1,a6,1024
	KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+1060);
1c00afae:	42480f13          	addi	t5,a6,1060
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c00afb2:	dbb6                	sw	a3,244(sp)
	KerArg2->UB = (int) (32767);
1c00afb4:	17fd                	addi	a5,a5,-1
	KerArg1->Orientation = (unsigned char) (1);
1c00afb6:	4685                	li	a3,1
{
1c00afb8:	842a                	mv	s0,a0
1c00afba:	1a112e23          	sw	ra,444(sp)
1c00afbe:	1b212823          	sw	s2,432(sp)
1c00afc2:	1b312623          	sw	s3,428(sp)
1c00afc6:	1b512223          	sw	s5,420(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+42676);
1c00afca:	c23a                	sw	a4,4(sp)
	KerArg0->W = (unsigned short int) (2);
1c00afcc:	c446                	sw	a7,8(sp)
	KerArg0->OutFeatures = (unsigned short int) (18);
1c00afce:	01c11623          	sh	t3,12(sp)
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+1024);
1c00afd2:	c81a                	sw	t1,16(sp)
	KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0);
1c00afd4:	cdc2                	sw	a6,216(sp)
	KerArg1->W = (unsigned short int) (2);
1c00afd6:	cfc6                	sw	a7,220(sp)
	KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+1060);
1c00afd8:	d7fa                	sw	t5,236(sp)
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+42676);
1c00afda:	d9ba                	sw	a4,240(sp)
	KerArg1->Norm = (unsigned char) (16);
1c00afdc:	0fd10c23          	sb	t4,248(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c00afe0:	0ed10da3          	sb	a3,251(sp)
	KerArg2->In = (int * __restrict__) (cnn_ssd_L1_Memory+42676);
1c00afe4:	ca3a                	sw	a4,20(sp)
	KerArg2->W = (unsigned short int) (2);
1c00afe6:	cc46                	sw	a7,24(sp)
	KerArg2->Norm = (unsigned char) (16);
1c00afe8:	03d10023          	sb	t4,32(sp)
	KerArg2->InFeatures = (unsigned short int) (18);
1c00afec:	03c11123          	sh	t3,34(sp)
	KerArg2->UB = (int) (32767);
1c00aff0:	d43e                	sw	a5,40(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00aff2:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00aff6:	002047b7          	lui	a5,0x204
1c00affa:	4007a503          	lw	a0,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00affe:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00b002:	02470713          	addi	a4,a4,36 # b0024 <__L2+0x30024>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00b006:	c1574733          	p.bset	a4,a4,0,21
1c00b00a:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00b00e:	4067a023          	sw	t1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00b012:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c00b016:	d82a                	sw	a0,48(sp)
        copy->length = 0;
1c00b018:	c082                	sw	zero,64(sp)
  __builtin_pulp_spr_write(reg, val);
1c00b01a:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c00b01e:	4706                	lw	a4,64(sp)
1c00b020:	36070b63          	beqz	a4,1c00b396 <S51_Conv2d_18x128x3x3+0x448>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00b024:	46a6                	lw	a3,72(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b026:	02000713          	li	a4,32
1c00b02a:	ca89                	beqz	a3,1c00b03c <S51_Conv2d_18x128x3x3+0xee>
1c00b02c:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b030:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b034:	00e7a223          	sw	a4,4(a5)
1c00b038:	46a6                	lw	a3,72(sp)
1c00b03a:	faed                	bnez	a3,1c00b02c <S51_Conv2d_18x128x3x3+0xde>
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+1024), 36, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) Filter+0), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory+99824+0), 41472, 0, &UchanHF1);
1c00b03c:	1c015937          	lui	s2,0x1c015
1c00b040:	a8090913          	addi	s2,s2,-1408 # 1c014a80 <cnn_ssd_L2_Memory>
1c00b044:	00092803          	lw	a6,0(s2)
1c00b048:	1c0157b7          	lui	a5,0x1c015
1c00b04c:	d107a503          	lw	a0,-752(a5) # 1c014d10 <HyperFlash+0x18>
1c00b050:	6661                	lui	a2,0x18
1c00b052:	66a9                	lui	a3,0xa
1c00b054:	5f060613          	addi	a2,a2,1520 # 185f0 <__L1Cl+0x85f0>
1c00b058:	191c                	addi	a5,sp,176
1c00b05a:	4705                	li	a4,1
1c00b05c:	20068693          	addi	a3,a3,512 # a200 <__rt_stack_size+0x9a00>
1c00b060:	9642                	add	a2,a2,a6
1c00b062:	291020ef          	jal	ra,1c00daf2 <pi_cl_fs_copy>
1c00b066:	0c014783          	lbu	a5,192(sp)
1c00b06a:	0ff7f793          	andi	a5,a5,255
1c00b06e:	ef99                	bnez	a5,1c00b08c <S51_Conv2d_18x128x3x3+0x13e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b070:	4689                	li	a3,2
1c00b072:	00204737          	lui	a4,0x204
1c00b076:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b07a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b07e:	00d72223          	sw	a3,4(a4)
1c00b082:	0c014783          	lbu	a5,192(sp)
1c00b086:	0ff7f793          	andi	a5,a5,255
1c00b08a:	d7f5                	beqz	a5,1c00b076 <S51_Conv2d_18x128x3x3+0x128>
	AT_HYPERFLASH_FS_CL_WAIT(&HyperFlash, &UchanHF1); /* Wait previous uDMA read Filter */
	AT_L2_COPY(0, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L2_Memory+99824+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+1060), 41472, 0, &DmaR_Evt2);
1c00b08c:	00092583          	lw	a1,0(s2)
1c00b090:	000a2703          	lw	a4,0(s4)
1c00b094:	67e1                	lui	a5,0x18
1c00b096:	5f078793          	addi	a5,a5,1520 # 185f0 <__L1Cl+0x85f0>
1c00b09a:	97ae                	add	a5,a5,a1
1c00b09c:	42470713          	addi	a4,a4,1060
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b0a0:	30047573          	csrrci	a0,mstatus,8
        copy->cmd = plp_dma_getCmd(dir, 0, PLP_DMA_1D,
1c00b0a4:	003306b7          	lui	a3,0x330
1c00b0a8:	cab6                	sw	a3,84(sp)
    cmd->size = len;
1c00b0aa:	66a9                	lui	a3,0xa
1c00b0ac:	20068693          	addi	a3,a3,512 # a200 <__rt_stack_size+0x9a00>
    if (__rt_dma_first_pending)
1c00b0b0:	01402803          	lw	a6,20(zero) # 14 <__rt_bridge_eeprom_handle>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00b0b4:	6621                	lui	a2,0x8
    cmd->size = len;
1c00b0b6:	ccb6                	sw	a3,88(sp)
    cmd->id = tid;
1c00b0b8:	56fd                	li	a3,-1
    cmd->loc_addr = loc;
1c00b0ba:	d2ba                	sw	a4,100(sp)
    cmd->ext_addr = ext;
1c00b0bc:	d4be                	sw	a5,104(sp)
    cmd->stride = stride;
1c00b0be:	ceb2                	sw	a2,92(sp)
    cmd->length = length;
1c00b0c0:	d0b2                	sw	a2,96(sp)
    cmd->id = tid;
1c00b0c2:	c8b6                	sw	a3,80(sp)
    cmd->next = NULL;
1c00b0c4:	d682                	sw	zero,108(sp)
    if (__rt_dma_first_pending)
1c00b0c6:	32080263          	beqz	a6,1c00b3ea <S51_Conv2d_18x128x3x3+0x49c>
        __rt_dma_last_pending->next = cmd;
1c00b0ca:	01002703          	lw	a4,16(zero) # 10 <__rt_bridge_flash_cs>
1c00b0ce:	089c                	addi	a5,sp,80
1c00b0d0:	cf5c                	sw	a5,28(a4)
    __rt_dma_last_pending = cmd;
1c00b0d2:	00f02823          	sw	a5,16(zero) # 10 <__rt_bridge_flash_cs>
  __builtin_pulp_spr_write(reg, val);
1c00b0d6:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c00b0da:	5786                	lw	a5,96(sp)
1c00b0dc:	26078163          	beqz	a5,1c00b33e <S51_Conv2d_18x128x3x3+0x3f0>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00b0e0:	56a6                	lw	a3,104(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b0e2:	02000713          	li	a4,32
1c00b0e6:	002047b7          	lui	a5,0x204
1c00b0ea:	ca89                	beqz	a3,1c00b0fc <S51_Conv2d_18x128x3x3+0x1ae>
1c00b0ec:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b0f0:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b0f4:	00e7a223          	sw	a4,4(a5)
1c00b0f8:	56a6                	lw	a3,104(sp)
1c00b0fa:	faed                	bnez	a3,1c00b0ec <S51_Conv2d_18x128x3x3+0x19e>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Filter */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0), 1024, 0, &DmaR_Evt3);
1c00b0fc:	000a2583          	lw	a1,0(s4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b100:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00b104:	002047b7          	lui	a5,0x204
1c00b108:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00b10c:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00b110:	40070713          	addi	a4,a4,1024 # b0400 <__L2+0x30400>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00b114:	c1574733          	p.bset	a4,a4,0,21
1c00b118:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00b11c:	40b7a023          	sw	a1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00b120:	4087a023          	sw	s0,1024(a5)
        if (!merge) copy->id = id;
1c00b124:	d8b2                	sw	a2,112(sp)
        copy->length = 0;
1c00b126:	c102                	sw	zero,128(sp)
  __builtin_pulp_spr_write(reg, val);
1c00b128:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c00b12c:	470a                	lw	a4,128(sp)
1c00b12e:	1a070e63          	beqz	a4,1c00b2ea <S51_Conv2d_18x128x3x3+0x39c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00b132:	46aa                	lw	a3,136(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b134:	02000713          	li	a4,32
1c00b138:	ca89                	beqz	a3,1c00b14a <S51_Conv2d_18x128x3x3+0x1fc>
1c00b13a:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b13e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b142:	00e7a223          	sw	a4,4(a5)
1c00b146:	46aa                	lw	a3,136(sp)
1c00b148:	faed                	bnez	a3,1c00b13a <S51_Conv2d_18x128x3x3+0x1ec>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00b14a:	0ff00a93          	li	s5,255
1c00b14e:	00204437          	lui	s0,0x204
1c00b152:	09542223          	sw	s5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00b156:	20040993          	addi	s3,s0,512
1c00b15a:	0159a023          	sw	s5,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00b15e:	0159a623          	sw	s5,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00b162:	1c00d7b7          	lui	a5,0x1c00d
1c00b166:	92a78793          	addi	a5,a5,-1750 # 1c00c92a <KerParSetBias_DP_fp>
1c00b16a:	08f42023          	sw	a5,128(s0)
1c00b16e:	0048                	addi	a0,sp,4
1c00b170:	08a42023          	sw	a0,128(s0)
1c00b174:	7b6010ef          	jal	ra,1c00c92a <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b178:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParSetBias_DP_fp, (void *) KerArg0);
			__CALL(KerParSetBias_DP_fp, KerArg0);
			{ /* Single iteration on D0 */
				int D0Ind_Last = 1;
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->UsedH = (unsigned short int) (2);
1c00b17c:	4789                	li	a5,2
1c00b17e:	0ef11123          	sh	a5,226(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00b182:	09542223          	sw	s5,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00b186:	0159a023          	sw	s5,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00b18a:	0159a623          	sw	s5,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00b18e:	1c00d7b7          	lui	a5,0x1c00d
1c00b192:	f4278793          	addi	a5,a5,-190 # 1c00cf42 <KerParConv3x3Stride1_DP_fp>
1c00b196:	08f42023          	sw	a5,128(s0)
1c00b19a:	09a8                	addi	a0,sp,216
1c00b19c:	08a42023          	sw	a0,128(s0)
1c00b1a0:	5a3010ef          	jal	ra,1c00cf42 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b1a4:	01c9e783          	p.elw	a5,28(s3)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00b1a8:	09542223          	sw	s5,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00b1ac:	0159a023          	sw	s5,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00b1b0:	0159a623          	sw	s5,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00b1b4:	1c00d7b7          	lui	a5,0x1c00d
1c00b1b8:	9de78793          	addi	a5,a5,-1570 # 1c00c9de <KerDP_fp>
1c00b1bc:	08f42023          	sw	a5,128(s0)
1c00b1c0:	0848                	addi	a0,sp,20
1c00b1c2:	08a42023          	sw	a0,128(s0)
1c00b1c6:	019010ef          	jal	ra,1c00c9de <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b1ca:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) cnn_ssd_L2_Memory+58864+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+42532), 144, 1, &DmaW_Evt1);
1c00b1ce:	67b9                	lui	a5,0xe
1c00b1d0:	00092703          	lw	a4,0(s2)
1c00b1d4:	000a2683          	lw	a3,0(s4)
1c00b1d8:	5f078793          	addi	a5,a5,1520 # e5f0 <__rt_stack_size+0xddf0>
1c00b1dc:	973e                	add	a4,a4,a5
1c00b1de:	67a9                	lui	a5,0xa
1c00b1e0:	62478793          	addi	a5,a5,1572 # a624 <__rt_stack_size+0x9e24>
1c00b1e4:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b1e6:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00b1ea:	40042583          	lw	a1,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00b1ee:	000a07b7          	lui	a5,0xa0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00b1f2:	09078793          	addi	a5,a5,144 # a0090 <__L2+0x20090>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00b1f6:	c157c7b3          	p.bset	a5,a5,0,21
1c00b1fa:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00b1fe:	40d42023          	sw	a3,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00b202:	40e42023          	sw	a4,1024(s0)
        if (!merge) copy->id = id;
1c00b206:	c92e                	sw	a1,144(sp)
        copy->length = 0;
1c00b208:	d102                	sw	zero,160(sp)
  __builtin_pulp_spr_write(reg, val);
1c00b20a:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c00b20e:	578a                	lw	a5,160(sp)
1c00b210:	c3d9                	beqz	a5,1c00b296 <S51_Conv2d_18x128x3x3+0x348>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00b212:	56aa                	lw	a3,168(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b214:	02000713          	li	a4,32
1c00b218:	002047b7          	lui	a5,0x204
1c00b21c:	ca89                	beqz	a3,1c00b22e <S51_Conv2d_18x128x3x3+0x2e0>
1c00b21e:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b222:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b226:	00e7a223          	sw	a4,4(a5)
1c00b22a:	56aa                	lw	a3,168(sp)
1c00b22c:	faed                	bnez	a3,1c00b21e <S51_Conv2d_18x128x3x3+0x2d0>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+0), ((AT_HYPERRAM_INT_ADDR_TYPE) cnn_ssd_L2_Memory+58864+0), 144, 1, &UchanHR2);
1c00b22e:	00092583          	lw	a1,0(s2)
1c00b232:	6639                	lui	a2,0xe
1c00b234:	5f060613          	addi	a2,a2,1520 # e5f0 <__rt_stack_size+0xddf0>
1c00b238:	1c015537          	lui	a0,0x1c015
1c00b23c:	021c                	addi	a5,sp,256
1c00b23e:	962e                	add	a2,a2,a1
1c00b240:	4701                	li	a4,0
1c00b242:	09000693          	li	a3,144
1c00b246:	85a6                	mv	a1,s1
1c00b248:	fb050513          	addi	a0,a0,-80 # 1c014fb0 <HyperRam>
1c00b24c:	4f9030ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c00b250:	19c14783          	lbu	a5,412(sp)
1c00b254:	0ff7f793          	andi	a5,a5,255
1c00b258:	ef99                	bnez	a5,1c00b276 <S51_Conv2d_18x128x3x3+0x328>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b25a:	4689                	li	a3,2
1c00b25c:	00204737          	lui	a4,0x204
1c00b260:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b264:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b268:	00d72223          	sw	a3,4(a4)
1c00b26c:	19c14783          	lbu	a5,412(sp)
1c00b270:	0ff7f793          	andi	a5,a5,255
1c00b274:	d7f5                	beqz	a5,1c00b260 <S51_Conv2d_18x128x3x3+0x312>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2); /* Wait previous uDMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c00b276:	1bc12083          	lw	ra,444(sp)
1c00b27a:	1b812403          	lw	s0,440(sp)
1c00b27e:	1b412483          	lw	s1,436(sp)
1c00b282:	1b012903          	lw	s2,432(sp)
1c00b286:	1ac12983          	lw	s3,428(sp)
1c00b28a:	1a812a03          	lw	s4,424(sp)
1c00b28e:	1a412a83          	lw	s5,420(sp)
1c00b292:	6139                	addi	sp,sp,448
1c00b294:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b296:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00b29a:	40442403          	lw	s0,1028(s0)
1c00b29e:	46ca                	lw	a3,144(sp)
1c00b2a0:	40d45433          	sra	s0,s0,a3
1c00b2a4:	fc143433          	p.bclr	s0,s0,30,1
1c00b2a8:	c41d                	beqz	s0,1c00b2d6 <S51_Conv2d_18x128x3x3+0x388>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b2aa:	10000593          	li	a1,256
1c00b2ae:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00b2b2:	30061073          	csrw	mstatus,a2
1c00b2b6:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b2ba:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b2be:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b2c2:	30047673          	csrrci	a2,mstatus,8
1c00b2c6:	40472783          	lw	a5,1028(a4)
1c00b2ca:	46ca                	lw	a3,144(sp)
1c00b2cc:	40d7d7b3          	sra	a5,a5,a3
1c00b2d0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00b2d4:	fff9                	bnez	a5,1c00b2b2 <S51_Conv2d_18x128x3x3+0x364>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00b2d6:	4785                	li	a5,1
1c00b2d8:	00d796b3          	sll	a3,a5,a3
1c00b2dc:	002047b7          	lui	a5,0x204
1c00b2e0:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00b2e4:	30061073          	csrw	mstatus,a2
1c00b2e8:	b799                	j	1c00b22e <S51_Conv2d_18x128x3x3+0x2e0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b2ea:	30047673          	csrrci	a2,mstatus,8
1c00b2ee:	4047a783          	lw	a5,1028(a5)
1c00b2f2:	56c6                	lw	a3,112(sp)
1c00b2f4:	40d7d7b3          	sra	a5,a5,a3
1c00b2f8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00b2fc:	c79d                	beqz	a5,1c00b32a <S51_Conv2d_18x128x3x3+0x3dc>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b2fe:	10000593          	li	a1,256
1c00b302:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00b306:	30061073          	csrw	mstatus,a2
1c00b30a:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b30e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b312:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b316:	30047673          	csrrci	a2,mstatus,8
1c00b31a:	40472783          	lw	a5,1028(a4)
1c00b31e:	56c6                	lw	a3,112(sp)
1c00b320:	40d7d7b3          	sra	a5,a5,a3
1c00b324:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00b328:	fff9                	bnez	a5,1c00b306 <S51_Conv2d_18x128x3x3+0x3b8>
1c00b32a:	4785                	li	a5,1
1c00b32c:	00d796b3          	sll	a3,a5,a3
1c00b330:	002047b7          	lui	a5,0x204
1c00b334:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00b338:	30061073          	csrw	mstatus,a2
1c00b33c:	b539                	j	1c00b14a <S51_Conv2d_18x128x3x3+0x1fc>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b33e:	30047673          	csrrci	a2,mstatus,8
1c00b342:	002047b7          	lui	a5,0x204
1c00b346:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00b34a:	46c6                	lw	a3,80(sp)
1c00b34c:	40d7d7b3          	sra	a5,a5,a3
1c00b350:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00b354:	c79d                	beqz	a5,1c00b382 <S51_Conv2d_18x128x3x3+0x434>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b356:	10000593          	li	a1,256
1c00b35a:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00b35e:	30061073          	csrw	mstatus,a2
1c00b362:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b366:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b36a:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b36e:	30047673          	csrrci	a2,mstatus,8
1c00b372:	40472783          	lw	a5,1028(a4)
1c00b376:	46c6                	lw	a3,80(sp)
1c00b378:	40d7d7b3          	sra	a5,a5,a3
1c00b37c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00b380:	fff9                	bnez	a5,1c00b35e <S51_Conv2d_18x128x3x3+0x410>
1c00b382:	4785                	li	a5,1
1c00b384:	00d796b3          	sll	a3,a5,a3
1c00b388:	002047b7          	lui	a5,0x204
1c00b38c:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00b390:	30061073          	csrw	mstatus,a2
1c00b394:	b3a5                	j	1c00b0fc <S51_Conv2d_18x128x3x3+0x1ae>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b396:	30047673          	csrrci	a2,mstatus,8
1c00b39a:	4047a783          	lw	a5,1028(a5)
1c00b39e:	56c2                	lw	a3,48(sp)
1c00b3a0:	40d7d7b3          	sra	a5,a5,a3
1c00b3a4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00b3a8:	c79d                	beqz	a5,1c00b3d6 <S51_Conv2d_18x128x3x3+0x488>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b3aa:	10000513          	li	a0,256
1c00b3ae:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00b3b2:	30061073          	csrw	mstatus,a2
1c00b3b6:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b3ba:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b3be:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b3c2:	30047673          	csrrci	a2,mstatus,8
1c00b3c6:	40472783          	lw	a5,1028(a4)
1c00b3ca:	56c2                	lw	a3,48(sp)
1c00b3cc:	40d7d7b3          	sra	a5,a5,a3
1c00b3d0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00b3d4:	fff9                	bnez	a5,1c00b3b2 <S51_Conv2d_18x128x3x3+0x464>
1c00b3d6:	4785                	li	a5,1
1c00b3d8:	00d796b3          	sll	a3,a5,a3
1c00b3dc:	002047b7          	lui	a5,0x204
1c00b3e0:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00b3e4:	30061073          	csrw	mstatus,a2
1c00b3e8:	b991                	j	1c00b03c <S51_Conv2d_18x128x3x3+0xee>
        cmd->ext_addr += stride;
1c00b3ea:	000206b7          	lui	a3,0x20
1c00b3ee:	5f068693          	addi	a3,a3,1520 # 205f0 <__L1Cl+0x105f0>
1c00b3f2:	95b6                	add	a1,a1,a3
        cmd->size -= iter_length;
1c00b3f4:	6689                	lui	a3,0x2
        cmd->loc_addr += iter_length;
1c00b3f6:	963a                	add	a2,a2,a4
        cmd->size -= iter_length;
1c00b3f8:	20068693          	addi	a3,a3,512 # 2200 <__rt_stack_size+0x1a00>
        cmd->loc_addr += iter_length;
1c00b3fc:	d2b2                	sw	a2,100(sp)
        cmd->ext_addr += stride;
1c00b3fe:	d4ae                	sw	a1,104(sp)
        cmd->size -= iter_length;
1c00b400:	ccb6                	sw	a3,88(sp)
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00b402:	002046b7          	lui	a3,0x204
1c00b406:	4006a603          	lw	a2,1024(a3) # 204400 <__L2+0x184400>
        cmd->id = plp_dma_counter_alloc();
1c00b40a:	c8b2                	sw	a2,80(sp)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00b40c:	00338637          	lui	a2,0x338
1c00b410:	40c6a023          	sw	a2,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00b414:	40e6a023          	sw	a4,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00b418:	40f6a023          	sw	a5,1024(a3)
        if (cmd->length != 0)
1c00b41c:	5706                	lw	a4,96(sp)
1c00b41e:	089c                	addi	a5,sp,80
1c00b420:	ca0709e3          	beqz	a4,1c00b0d2 <S51_Conv2d_18x128x3x3+0x184>
            __rt_dma_first_pending = cmd;
1c00b424:	00f02a23          	sw	a5,20(zero) # 14 <__rt_bridge_eeprom_handle>
1c00b428:	b16d                	j	1c00b0d2 <S51_Conv2d_18x128x3x3+0x184>

1c00b42a <S55_Conv2d_24x128x3x3>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c00b42a:	7141                	addi	sp,sp,-496
1c00b42c:	1e812423          	sw	s0,488(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D1, [0 x 384, 384]][Tile0, 1:[2x2], 4]
		Tile0: [0, 384, 16], Tile1: [0, 384, 16], Tile2; [0, 384, 16]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+46000);
1c00b430:	10000437          	lui	s0,0x10000
1c00b434:	02040413          	addi	s0,s0,32 # 10000020 <cnn_ssd_L1_Memory>
1c00b438:	00042803          	lw	a6,0(s0)
{
1c00b43c:	c636                	sw	a3,12(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+46000);
1c00b43e:	67ad                	lui	a5,0xb
	KerArg0->W = (unsigned short int) (2);
	KerArg0->H = (unsigned short int) (2);
	KerArg0->OutFeatures = (unsigned short int) (24);
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+832);
	KerArg0->NormBias = (signed char) (14);
1c00b440:	46b9                	li	a3,14
1c00b442:	00d10f23          	sb	a3,30(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+46000);
1c00b446:	3b078713          	addi	a4,a5,944 # b3b0 <__rt_stack_size+0xabb0>
	KerArg1->W = (unsigned short int) (2);
	KerArg1->UsedW = (unsigned short int) (2);
	KerArg1->OutFeatures = (unsigned short int) (24);
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+46000);
	KerArg1->Norm = (unsigned char) (16);
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c00b44a:	020076d7          	pv.add.sci.b	a3,zero,1
	KerArg1->Orientation = (unsigned char) (1);
	KerArg2->In = (int * __restrict__) (cnn_ssd_L1_Memory+46000);
	KerArg2->W = (unsigned short int) (2);
	KerArg2->H = (unsigned short int) (2);
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+45808);
1c00b44e:	2f078793          	addi	a5,a5,752
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+46000);
1c00b452:	9742                	add	a4,a4,a6
	KerArg0->W = (unsigned short int) (2);
1c00b454:	00106357          	pv.add.sci.h	t1,zero,2
	KerArg0->OutFeatures = (unsigned short int) (24);
1c00b458:	48e1                	li	a7,24
	KerArg1->Norm = (unsigned char) (16);
1c00b45a:	4e41                	li	t3,16
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+45808);
1c00b45c:	97c2                	add	a5,a5,a6
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c00b45e:	10d12223          	sw	a3,260(sp)
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+832);
1c00b462:	34080e93          	addi	t4,a6,832
	KerArg1->Orientation = (unsigned char) (1);
1c00b466:	4685                	li	a3,1
	KerArg2->Out = (short int * __restrict__) (cnn_ssd_L1_Memory+45808);
1c00b468:	d63e                	sw	a5,44(sp)
{
1c00b46a:	1e112623          	sw	ra,492(sp)
1c00b46e:	1e912223          	sw	s1,484(sp)
1c00b472:	1f212023          	sw	s2,480(sp)
1c00b476:	1d312e23          	sw	s3,476(sp)
1c00b47a:	1d412c23          	sw	s4,472(sp)
1c00b47e:	1d512a23          	sw	s5,468(sp)
1c00b482:	1d612823          	sw	s6,464(sp)
1c00b486:	1d712623          	sw	s7,460(sp)
1c00b48a:	1d812423          	sw	s8,456(sp)
1c00b48e:	1d912223          	sw	s9,452(sp)
1c00b492:	1da12023          	sw	s10,448(sp)
1c00b496:	1bb12e23          	sw	s11,444(sp)
1c00b49a:	c42a                	sw	a0,8(sp)
1c00b49c:	c22e                	sw	a1,4(sp)
	KerArg0->Out = (int * __restrict__) (cnn_ssd_L1_Memory+46000);
1c00b49e:	ca3a                	sw	a4,20(sp)
	KerArg0->W = (unsigned short int) (2);
1c00b4a0:	cc1a                	sw	t1,24(sp)
	KerArg0->OutFeatures = (unsigned short int) (24);
1c00b4a2:	01111e23          	sh	a7,28(sp)
	KerArg0->Bias = (short int * __restrict__) (cnn_ssd_L1_Memory+832);
1c00b4a6:	d076                	sw	t4,32(sp)
	KerArg1->W = (unsigned short int) (2);
1c00b4a8:	d79a                	sw	t1,236(sp)
	KerArg1->OutFeatures = (unsigned short int) (24);
1c00b4aa:	0f111b23          	sh	a7,246(sp)
	KerArg1->Out = (int * __restrict__) (cnn_ssd_L1_Memory+46000);
1c00b4ae:	10e12023          	sw	a4,256(sp)
	KerArg1->Norm = (unsigned char) (16);
1c00b4b2:	11c10423          	sb	t3,264(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c00b4b6:	10d105a3          	sb	a3,267(sp)
	KerArg2->In = (int * __restrict__) (cnn_ssd_L1_Memory+46000);
1c00b4ba:	d23a                	sw	a4,36(sp)
	KerArg2->W = (unsigned short int) (2);
1c00b4bc:	d41a                	sw	t1,40(sp)
	KerArg2->Norm = (unsigned char) (16);
1c00b4be:	03c10823          	sb	t3,48(sp)
	KerArg2->InFeatures = (unsigned short int) (24);
	KerArg2->LB = (int) (-32768);
1c00b4c2:	77e1                	lui	a5,0xffff8
	KerArg2->InFeatures = (unsigned short int) (24);
1c00b4c4:	03111923          	sh	a7,50(sp)
	KerArg2->LB = (int) (-32768);
1c00b4c8:	da3e                	sw	a5,52(sp)
	KerArg2->UB = (int) (32767);
1c00b4ca:	67a1                	lui	a5,0x8
1c00b4cc:	17fd                	addi	a5,a5,-1
1c00b4ce:	dc3e                	sw	a5,56(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b4d0:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00b4d4:	002047b7          	lui	a5,0x204
1c00b4d8:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00b4dc:	002f0737          	lui	a4,0x2f0
1c00b4e0:	1a070713          	addi	a4,a4,416 # 2f01a0 <__L2+0x2701a0>
1c00b4e4:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00b4e8:	4107a023          	sw	a6,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00b4ec:	4822                	lw	a6,8(sp)
1c00b4ee:	4107a023          	sw	a6,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c00b4f2:	00080737          	lui	a4,0x80
1c00b4f6:	0721                	addi	a4,a4,8
1c00b4f8:	40e7a023          	sw	a4,1024(a5)
        if (!merge) copy->id = id;
1c00b4fc:	c0ae                	sw	a1,64(sp)
        copy->length = 0;
1c00b4fe:	c882                	sw	zero,80(sp)
  __builtin_pulp_spr_write(reg, val);
1c00b500:	30069073          	csrw	mstatus,a3
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+0), 416, 8, 8, 0, &DmaR_Evt1);
	_N_In=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+832), 48, 0, &DmaR_Evt2);
1c00b504:	4014                	lw	a3,0(s0)
1c00b506:	34068693          	addi	a3,a3,832
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b50a:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00b50e:	4007a503          	lw	a0,1024(a5)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00b512:	00030737          	lui	a4,0x30
1c00b516:	c2474733          	p.bset	a4,a4,1,4
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00b51a:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00b51e:	c1574733          	p.bset	a4,a4,0,21
1c00b522:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00b526:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00b52a:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c00b52e:	d0aa                	sw	a0,96(sp)
        copy->length = 0;
1c00b530:	d882                	sw	zero,112(sp)
  __builtin_pulp_spr_write(reg, val);
1c00b532:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c00b536:	5746                	lw	a4,112(sp)
1c00b538:	52070163          	beqz	a4,1c00ba5a <S55_Conv2d_24x128x3x3+0x630>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00b53c:	56e6                	lw	a3,120(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b53e:	02000713          	li	a4,32
1c00b542:	ca89                	beqz	a3,1c00b554 <S55_Conv2d_24x128x3x3+0x12a>
1c00b544:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b548:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b54c:	00e7a223          	sw	a4,4(a5)
1c00b550:	56e6                	lw	a3,120(sp)
1c00b552:	faed                	bnez	a3,1c00b544 <S55_Conv2d_24x128x3x3+0x11a>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Bias */
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) Filter+0), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory+99824+0), 22464, 0, &UchanHF1);
1c00b554:	1c0154b7          	lui	s1,0x1c015
1c00b558:	a8048493          	addi	s1,s1,-1408 # 1c014a80 <cnn_ssd_L2_Memory>
1c00b55c:	408c                	lw	a1,0(s1)
1c00b55e:	1c015a37          	lui	s4,0x1c015
1c00b562:	6661                	lui	a2,0x18
1c00b564:	cf8a0a13          	addi	s4,s4,-776 # 1c014cf8 <HyperFlash>
1c00b568:	5f060613          	addi	a2,a2,1520 # 185f0 <__L1Cl+0x85f0>
1c00b56c:	962e                	add	a2,a2,a1
1c00b56e:	018a2503          	lw	a0,24(s4)
1c00b572:	4592                	lw	a1,4(sp)
1c00b574:	6695                	lui	a3,0x5
1c00b576:	019c                	addi	a5,sp,192
1c00b578:	4705                	li	a4,1
1c00b57a:	7c068693          	addi	a3,a3,1984 # 57c0 <__rt_stack_size+0x4fc0>
1c00b57e:	574020ef          	jal	ra,1c00daf2 <pi_cl_fs_copy>
1c00b582:	0d014783          	lbu	a5,208(sp)
1c00b586:	0ff7f793          	andi	a5,a5,255
1c00b58a:	ef99                	bnez	a5,1c00b5a8 <S55_Conv2d_24x128x3x3+0x17e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b58c:	4689                	li	a3,2
1c00b58e:	00204737          	lui	a4,0x204
1c00b592:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b596:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b59a:	00d72223          	sw	a3,4(a4)
1c00b59e:	0d014783          	lbu	a5,208(sp)
1c00b5a2:	0ff7f793          	andi	a5,a5,255
1c00b5a6:	d7f5                	beqz	a5,1c00b592 <S55_Conv2d_24x128x3x3+0x168>
	AT_HYPERFLASH_FS_CL_WAIT(&HyperFlash, &UchanHF1); /* Wait previous uDMA read Filter */
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) Filter+22464), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory+99824+22464), 22464, 0, &UchanHF1);
1c00b5a8:	408c                	lw	a1,0(s1)
1c00b5aa:	4812                	lw	a6,4(sp)
1c00b5ac:	6895                	lui	a7,0x5
1c00b5ae:	018a2503          	lw	a0,24(s4)
1c00b5b2:	6679                	lui	a2,0x1e
1c00b5b4:	7c088913          	addi	s2,a7,1984 # 57c0 <__rt_stack_size+0x4fc0>
1c00b5b8:	db060613          	addi	a2,a2,-592 # 1ddb0 <__L1Cl+0xddb0>
1c00b5bc:	019c                	addi	a5,sp,192
1c00b5be:	86ca                	mv	a3,s2
1c00b5c0:	962e                	add	a2,a2,a1
1c00b5c2:	4705                	li	a4,1
1c00b5c4:	012805b3          	add	a1,a6,s2
1c00b5c8:	52a020ef          	jal	ra,1c00daf2 <pi_cl_fs_copy>
	AT_L2_COPY(0, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L2_Memory+99824+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+880+0), 22464, 0, &DmaR_Evt3);
1c00b5cc:	4098                	lw	a4,0(s1)
1c00b5ce:	4014                	lw	a3,0(s0)
1c00b5d0:	67e1                	lui	a5,0x18
1c00b5d2:	5f078793          	addi	a5,a5,1520 # 185f0 <__L1Cl+0x85f0>
1c00b5d6:	973e                	add	a4,a4,a5
1c00b5d8:	37068693          	addi	a3,a3,880
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b5dc:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00b5e0:	002047b7          	lui	a5,0x204
1c00b5e4:	4007a503          	lw	a0,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00b5e8:	002b0637          	lui	a2,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00b5ec:	00c96633          	or	a2,s2,a2
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00b5f0:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00b5f4:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00b5f8:	40e7a023          	sw	a4,1024(a5)
        if (!merge) copy->id = id;
1c00b5fc:	c12a                	sw	a0,128(sp)
        copy->length = 0;
1c00b5fe:	c902                	sw	zero,144(sp)
  __builtin_pulp_spr_write(reg, val);
1c00b600:	30059073          	csrw	mstatus,a1
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00b604:	0ff00713          	li	a4,255
1c00b608:	08e7a223          	sw	a4,132(a5)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00b60c:	20078993          	addi	s3,a5,512
1c00b610:	00e9a023          	sw	a4,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00b614:	00e9a623          	sw	a4,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00b618:	1c00d737          	lui	a4,0x1c00d
1c00b61c:	92a70713          	addi	a4,a4,-1750 # 1c00c92a <KerParSetBias_DP_fp>
1c00b620:	08e7a023          	sw	a4,128(a5)
1c00b624:	0848                	addi	a0,sp,20
1c00b626:	08a7a023          	sw	a0,128(a5)
1c00b62a:	300010ef          	jal	ra,1c00c92a <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b62e:	01c9e783          	p.elw	a5,28(s3)
1c00b632:	1c00d9b7          	lui	s3,0x1c00d
	_NN_Filter=22464; _SN_Filter=22464;
1c00b636:	88ca                	mv	a7,s2
	_N_In=0;
1c00b638:	4b81                	li	s7,0
		{ /* Single iteration on Tile0 */
			int T0Ind_Last = 1, T0Ind_NextLast = 1;
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			AT_FORK(gap_ncore(), (void *) KerParSetBias_DP_fp, (void *) KerArg0);
			__CALL(KerParSetBias_DP_fp, KerArg0);
			for (D0Ind=0; D0Ind<3; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c00b63a:	4c81                	li	s9,0
1c00b63c:	f4298993          	addi	s3,s3,-190 # 1c00cf42 <KerParConv3x3Stride1_DP_fp>
1c00b640:	0e810d93          	addi	s11,sp,232
					_N_In = _N_In + (-832); _LN_In = (8); _SN_In = (52*_LN_In); 
				}
				_SNN_Filter = 0;
				if (!(D0Ind_Last)) {
					if (!(D0Ind_NextLast)) {
						_NN_Filter = _NN_Filter + ((22464)); _SNN_Filter = (((1)?(((1)?10368:22464)):(((1)?10368:22464)))); 
1c00b644:	8d4a                	mv	s10,s2
1c00b646:	1a000b13          	li	s6,416
				if (!(D0Ind_Last)) {
1c00b64a:	462ca263          	p.beqimm	s9,2,1c00baae <S55_Conv2d_24x128x3x3+0x684>
					_N_In = _N_In + (416); _LN_In = (8); _SN_In = (((D0Ind_NextLast)?24:52)*_LN_In); 
1c00b64e:	1a0b8b93          	addi	s7,s7,416
1c00b652:	0c000593          	li	a1,192
				_SNN_Filter = 0;
1c00b656:	4c01                	li	s8,0
					_N_In = _N_In + (416); _LN_In = (8); _SN_In = (((D0Ind_NextLast)?24:52)*_LN_In); 
1c00b658:	001cab63          	p.beqimm	s9,1,1c00b66e <S55_Conv2d_24x128x3x3+0x244>
						_NN_Filter = _NN_Filter + ((22464)); _SNN_Filter = (((1)?(((1)?10368:22464)):(((1)?10368:22464)))); 
1c00b65c:	1c0146b7          	lui	a3,0x1c014
1c00b660:	5d068693          	addi	a3,a3,1488 # 1c0145d0 <IntegerExpLUT+0x88>
1c00b664:	0006ac03          	lw	s8,0(a3)
1c00b668:	996a                	add	s2,s2,s10
1c00b66a:	1a000593          	li	a1,416
  if (copy->length == 0)
1c00b66e:	47c6                	lw	a5,80(sp)
1c00b670:	16078f63          	beqz	a5,1c00b7ee <S55_Conv2d_24x128x3x3+0x3c4>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00b674:	46e6                	lw	a3,88(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b676:	02000713          	li	a4,32
1c00b67a:	002047b7          	lui	a5,0x204
1c00b67e:	ca89                	beqz	a3,1c00b690 <S55_Conv2d_24x128x3x3+0x266>
1c00b680:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b684:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b688:	00e7a223          	sw	a4,4(a5)
1c00b68c:	46e6                	lw	a3,88(sp)
1c00b68e:	faed                	bnez	a3,1c00b680 <S55_Conv2d_24x128x3x3+0x256>
					_NN_Filter = _NN_Filter + ((22464)); _SNN_Filter = (((1)?(22464):(22464))); 
				}
				/*============================= End Prepare Tiles ===================================*/
				/*================================= Read Tiles ======================================*/
				AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In */
				if (_SN_In) {
1c00b690:	1a059c63          	bnez	a1,1c00b848 <S55_Conv2d_24x128x3x3+0x41e>
1c00b694:	0d014783          	lbu	a5,208(sp)
1c00b698:	0ff7f793          	andi	a5,a5,255
1c00b69c:	ef99                	bnez	a5,1c00b6ba <S55_Conv2d_24x128x3x3+0x290>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b69e:	4689                	li	a3,2
1c00b6a0:	00204737          	lui	a4,0x204
1c00b6a4:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b6a8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b6ac:	00d72223          	sw	a3,4(a4)
1c00b6b0:	0d014783          	lbu	a5,208(sp)
1c00b6b4:	0ff7f793          	andi	a5,a5,255
1c00b6b8:	d7f5                	beqz	a5,1c00b6a4 <S55_Conv2d_24x128x3x3+0x27a>
1c00b6ba:	fc1cbab3          	p.bclr	s5,s9,30,1
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+416*((D0Ind_Total+1)%2)),
							_SN_In, 8, _LN_In, 0, &DmaR_Evt1);
				}
				AT_HYPERFLASH_FS_CL_WAIT(&HyperFlash, &UchanHF1); /* Wait previous uDMA read Filter */
				if (_SNN_Filter) {
1c00b6be:	340c1263          	bnez	s8,1c00ba02 <S55_Conv2d_24x128x3x3+0x5d8>
  if (copy->length == 0)
1c00b6c2:	47ca                	lw	a5,144(sp)
1c00b6c4:	cfb5                	beqz	a5,1c00b740 <S55_Conv2d_24x128x3x3+0x316>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00b6c6:	46ea                	lw	a3,152(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b6c8:	02000713          	li	a4,32
1c00b6cc:	002047b7          	lui	a5,0x204
1c00b6d0:	ca89                	beqz	a3,1c00b6e2 <S55_Conv2d_24x128x3x3+0x2b8>
1c00b6d2:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b6d6:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b6da:	00e7a223          	sw	a4,4(a5)
1c00b6de:	46ea                	lw	a3,152(sp)
1c00b6e0:	faed                	bnez	a3,1c00b6d2 <S55_Conv2d_24x128x3x3+0x2a8>
1c00b6e2:	401c                	lw	a5,0(s0)
					AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) Filter+_NN_Filter), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory+99824+22464*((D0Ind_Total)%2)),
							_SNN_Filter, 0, &UchanHF1);
				}
				AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read Filter */
				if (_SN_Filter) {
1c00b6e4:	0a089c63          	bnez	a7,1c00b79c <S55_Conv2d_24x128x3x3+0x372>
					AT_L2_COPY(0, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L2_Memory+99824+22464*((D0Ind_Total+1)%2)), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+880+22464*((D0Ind_Total+1)%2)),
							_SN_Filter, 0, &DmaR_Evt3);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+416*((D0Ind_Total)%2));
1c00b6e8:	873e                	mv	a4,a5
1c00b6ea:	436a8733          	p.mac	a4,s5,s6
				KerArg1->H = (unsigned short int) (4-1*(1)-1*(1));
1c00b6ee:	001065d7          	pv.add.sci.h	a1,zero,2
1c00b6f2:	d9ae                	sw	a1,240(sp)
				KerArg1->In = (short int * __restrict__) (cnn_ssd_L1_Memory+0+416*((D0Ind_Total)%2));
1c00b6f4:	d5ba                	sw	a4,232(sp)
				KerArg1->UsedH = (unsigned short int) (4-1*(1)-1*(1));
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?24:52);
1c00b6f6:	182cad63          	p.beqimm	s9,2,1c00b890 <S55_Conv2d_24x128x3x3+0x466>
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+880+22464*((D0Ind_Total)%2));
1c00b6fa:	43aa87b3          	p.mac	a5,s5,s10
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?24:52);
1c00b6fe:	03400613          	li	a2,52
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00b702:	0ff00693          	li	a3,255
1c00b706:	00204737          	lui	a4,0x204
1c00b70a:	0ec11a23          	sh	a2,244(sp)
				KerArg1->TotalInFeatures = (short int) (D0Ind_Last?24:52);
1c00b70e:	0ec11c23          	sh	a2,248(sp)
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+880+22464*((D0Ind_Total)%2));
1c00b712:	37078793          	addi	a5,a5,880
1c00b716:	dfbe                	sw	a5,252(sp)
1c00b718:	08d72223          	sw	a3,132(a4) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00b71c:	20070a93          	addi	s5,a4,512
1c00b720:	00daa023          	sw	a3,0(s5)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00b724:	00daa623          	sw	a3,12(s5)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00b728:	09372023          	sw	s3,128(a4)
1c00b72c:	09b72023          	sw	s11,128(a4)
1c00b730:	856e                	mv	a0,s11
1c00b732:	011010ef          	jal	ra,1c00cf42 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b736:	01cae703          	p.elw	a4,28(s5)
			for (D0Ind=0; D0Ind<3; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c00b73a:	0c85                	addi	s9,s9,1
1c00b73c:	88e2                	mv	a7,s8
1c00b73e:	b731                	j	1c00b64a <S55_Conv2d_24x128x3x3+0x220>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b740:	300475f3          	csrrci	a1,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00b744:	002047b7          	lui	a5,0x204
1c00b748:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00b74c:	460a                	lw	a2,128(sp)
1c00b74e:	40c7d7b3          	sra	a5,a5,a2
1c00b752:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00b756:	c79d                	beqz	a5,1c00b784 <S55_Conv2d_24x128x3x3+0x35a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b758:	10000693          	li	a3,256
1c00b75c:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00b760:	30059073          	csrw	mstatus,a1
1c00b764:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b768:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b76c:	00d72223          	sw	a3,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b770:	300475f3          	csrrci	a1,mstatus,8
1c00b774:	40472783          	lw	a5,1028(a4)
1c00b778:	460a                	lw	a2,128(sp)
1c00b77a:	40c7d7b3          	sra	a5,a5,a2
1c00b77e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00b782:	fff9                	bnez	a5,1c00b760 <S55_Conv2d_24x128x3x3+0x336>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00b784:	4785                	li	a5,1
1c00b786:	00c79633          	sll	a2,a5,a2
1c00b78a:	002047b7          	lui	a5,0x204
1c00b78e:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00b792:	30059073          	csrw	mstatus,a1
1c00b796:	401c                	lw	a5,0(s0)
				if (_SN_Filter) {
1c00b798:	f40888e3          	beqz	a7,1c00b6e8 <S55_Conv2d_24x128x3x3+0x2be>
					AT_L2_COPY(0, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L2_Memory+99824+22464*((D0Ind_Total+1)%2)), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+880+22464*((D0Ind_Total+1)%2)),
1c00b79c:	001c8713          	addi	a4,s9,1
1c00b7a0:	fc173733          	p.bclr	a4,a4,30,1
1c00b7a4:	03a70733          	mul	a4,a4,s10
1c00b7a8:	4090                	lw	a2,0(s1)
1c00b7aa:	66e1                	lui	a3,0x18
1c00b7ac:	5f068693          	addi	a3,a3,1520 # 185f0 <__L1Cl+0x85f0>
1c00b7b0:	9636                	add	a2,a2,a3
1c00b7b2:	963a                	add	a2,a2,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b7b4:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00b7b8:	002045b7          	lui	a1,0x204
1c00b7bc:	4005a283          	lw	t0,1024(a1) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c00b7c0:	000306b7          	lui	a3,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00b7c4:	de08a6b3          	p.insert	a3,a7,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c00b7c8:	c136c6b3          	p.bset	a3,a3,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00b7cc:	c156c6b3          	p.bset	a3,a3,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00b7d0:	40d5a023          	sw	a3,1024(a1)
1c00b7d4:	37070713          	addi	a4,a4,880
1c00b7d8:	97ba                	add	a5,a5,a4
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00b7da:	40f5a023          	sw	a5,1024(a1)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00b7de:	40c5a023          	sw	a2,1024(a1)
        if (!merge) copy->id = id;
1c00b7e2:	c116                	sw	t0,128(sp)
        copy->length = 0;
1c00b7e4:	c902                	sw	zero,144(sp)
  __builtin_pulp_spr_write(reg, val);
1c00b7e6:	30051073          	csrw	mstatus,a0
1c00b7ea:	401c                	lw	a5,0(s0)
1c00b7ec:	bdf5                	j	1c00b6e8 <S55_Conv2d_24x128x3x3+0x2be>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b7ee:	30047573          	csrrci	a0,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00b7f2:	002047b7          	lui	a5,0x204
1c00b7f6:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00b7fa:	4606                	lw	a2,64(sp)
1c00b7fc:	40c7d7b3          	sra	a5,a5,a2
1c00b800:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00b804:	c79d                	beqz	a5,1c00b832 <S55_Conv2d_24x128x3x3+0x408>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b806:	10000693          	li	a3,256
1c00b80a:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00b80e:	30051073          	csrw	mstatus,a0
1c00b812:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b816:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b81a:	00d72223          	sw	a3,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b81e:	30047573          	csrrci	a0,mstatus,8
1c00b822:	40472783          	lw	a5,1028(a4)
1c00b826:	4606                	lw	a2,64(sp)
1c00b828:	40c7d7b3          	sra	a5,a5,a2
1c00b82c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00b830:	fff9                	bnez	a5,1c00b80e <S55_Conv2d_24x128x3x3+0x3e4>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00b832:	4785                	li	a5,1
1c00b834:	00c79633          	sll	a2,a5,a2
1c00b838:	002047b7          	lui	a5,0x204
1c00b83c:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00b840:	30051073          	csrw	mstatus,a0
				if (_SN_In) {
1c00b844:	e40588e3          	beqz	a1,1c00b694 <S55_Conv2d_24x128x3x3+0x26a>
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+0+416*((D0Ind_Total+1)%2)),
1c00b848:	4018                	lw	a4,0(s0)
1c00b84a:	001c8793          	addi	a5,s9,1
1c00b84e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00b852:	43678733          	p.mac	a4,a5,s6
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b856:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00b85a:	002047b7          	lui	a5,0x204
1c00b85e:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c00b862:	c705c5b3          	p.bset	a1,a1,3,16
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00b866:	c155c5b3          	p.bset	a1,a1,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00b86a:	40b7a023          	sw	a1,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00b86e:	40e7a023          	sw	a4,1024(a5)
1c00b872:	4822                	lw	a6,8(sp)
1c00b874:	01780733          	add	a4,a6,s7
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00b878:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c00b87c:	000805b7          	lui	a1,0x80
1c00b880:	05a1                	addi	a1,a1,8
1c00b882:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c00b886:	c0b2                	sw	a2,64(sp)
        copy->length = 0;
1c00b888:	c882                	sw	zero,80(sp)
  __builtin_pulp_spr_write(reg, val);
1c00b88a:	30069073          	csrw	mstatus,a3
1c00b88e:	b519                	j	1c00b694 <S55_Conv2d_24x128x3x3+0x26a>
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?24:52);
1c00b890:	4761                	li	a4,24
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+880+22464*((D0Ind_Total)%2));
1c00b892:	37078793          	addi	a5,a5,880
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00b896:	0ff00a93          	li	s5,255
1c00b89a:	00204937          	lui	s2,0x204
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?24:52);
1c00b89e:	0ee11a23          	sh	a4,244(sp)
				KerArg1->Filter = (short int * __restrict__) (cnn_ssd_L1_Memory+880+22464*((D0Ind_Total)%2));
1c00b8a2:	dfbe                	sw	a5,252(sp)
				KerArg1->TotalInFeatures = (short int) (D0Ind_Last?24:52);
1c00b8a4:	0ee11c23          	sh	a4,248(sp)
1c00b8a8:	09592223          	sw	s5,132(s2) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00b8ac:	20090a13          	addi	s4,s2,512
1c00b8b0:	015a2023          	sw	s5,0(s4)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00b8b4:	015a2623          	sw	s5,12(s4)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00b8b8:	09392023          	sw	s3,128(s2)
1c00b8bc:	09b92023          	sw	s11,128(s2)
1c00b8c0:	856e                	mv	a0,s11
1c00b8c2:	680010ef          	jal	ra,1c00cf42 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b8c6:	01ca6783          	p.elw	a5,28(s4)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00b8ca:	09592223          	sw	s5,132(s2)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00b8ce:	015a2023          	sw	s5,0(s4)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00b8d2:	015a2623          	sw	s5,12(s4)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00b8d6:	1c00d7b7          	lui	a5,0x1c00d
1c00b8da:	9de78793          	addi	a5,a5,-1570 # 1c00c9de <KerDP_fp>
1c00b8de:	08f92023          	sw	a5,128(s2)
1c00b8e2:	1048                	addi	a0,sp,36
1c00b8e4:	08a92023          	sw	a0,128(s2)
1c00b8e8:	0f6010ef          	jal	ra,1c00c9de <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b8ec:	01ca6783          	p.elw	a5,28(s4)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_HYPERRAM_EXT_ADDR_TYPE) cnn_ssd_L2_Memory+58864+0), ((AT_L2_INT_ADDR_TYPE) cnn_ssd_L1_Memory+45808), 192, 1, &DmaW_Evt1);
1c00b8f0:	67b9                	lui	a5,0xe
1c00b8f2:	4098                	lw	a4,0(s1)
1c00b8f4:	4014                	lw	a3,0(s0)
1c00b8f6:	5f078793          	addi	a5,a5,1520 # e5f0 <__rt_stack_size+0xddf0>
1c00b8fa:	973e                	add	a4,a4,a5
1c00b8fc:	67ad                	lui	a5,0xb
1c00b8fe:	2f078793          	addi	a5,a5,752 # b2f0 <__rt_stack_size+0xaaf0>
1c00b902:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b904:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00b908:	40092583          	lw	a1,1024(s2)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00b90c:	000a07b7          	lui	a5,0xa0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00b910:	0c078793          	addi	a5,a5,192 # a00c0 <__L2+0x200c0>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00b914:	c157c7b3          	p.bset	a5,a5,0,21
1c00b918:	40f92023          	sw	a5,1024(s2)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00b91c:	40d92023          	sw	a3,1024(s2)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00b920:	40e92023          	sw	a4,1024(s2)
        if (!merge) copy->id = id;
1c00b924:	d12e                	sw	a1,160(sp)
        copy->length = 0;
1c00b926:	d902                	sw	zero,176(sp)
  __builtin_pulp_spr_write(reg, val);
1c00b928:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c00b92c:	57ca                	lw	a5,176(sp)
1c00b92e:	0e079f63          	bnez	a5,1c00ba2c <S55_Conv2d_24x128x3x3+0x602>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b932:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00b936:	40492783          	lw	a5,1028(s2)
1c00b93a:	568a                	lw	a3,160(sp)
1c00b93c:	40d7d7b3          	sra	a5,a5,a3
1c00b940:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00b944:	c79d                	beqz	a5,1c00b972 <S55_Conv2d_24x128x3x3+0x548>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b946:	10000593          	li	a1,256
1c00b94a:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00b94e:	30061073          	csrw	mstatus,a2
1c00b952:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b956:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b95a:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00b95e:	30047673          	csrrci	a2,mstatus,8
1c00b962:	40472783          	lw	a5,1028(a4)
1c00b966:	568a                	lw	a3,160(sp)
1c00b968:	40d7d7b3          	sra	a5,a5,a3
1c00b96c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00b970:	fff9                	bnez	a5,1c00b94e <S55_Conv2d_24x128x3x3+0x524>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00b972:	4785                	li	a5,1
1c00b974:	00d796b3          	sll	a3,a5,a3
1c00b978:	002047b7          	lui	a5,0x204
1c00b97c:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00b980:	30061073          	csrw	mstatus,a2
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) Out+0), ((AT_HYPERRAM_INT_ADDR_TYPE) cnn_ssd_L2_Memory+58864+0), 192, 1, &UchanHR2);
1c00b984:	408c                	lw	a1,0(s1)
1c00b986:	6639                	lui	a2,0xe
1c00b988:	5f060613          	addi	a2,a2,1520 # e5f0 <__rt_stack_size+0xddf0>
1c00b98c:	962e                	add	a2,a2,a1
1c00b98e:	45b2                	lw	a1,12(sp)
1c00b990:	1c015537          	lui	a0,0x1c015
1c00b994:	0a1c                	addi	a5,sp,272
1c00b996:	4701                	li	a4,0
1c00b998:	0c000693          	li	a3,192
1c00b99c:	fb050513          	addi	a0,a0,-80 # 1c014fb0 <HyperRam>
1c00b9a0:	5a4030ef          	jal	ra,1c00ef44 <pi_cl_ram_copy>
1c00b9a4:	1ac14783          	lbu	a5,428(sp)
1c00b9a8:	0ff7f793          	andi	a5,a5,255
1c00b9ac:	ef99                	bnez	a5,1c00b9ca <S55_Conv2d_24x128x3x3+0x5a0>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b9ae:	4689                	li	a3,2
1c00b9b0:	00204737          	lui	a4,0x204
1c00b9b4:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b9b8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b9bc:	00d72223          	sw	a3,4(a4)
1c00b9c0:	1ac14783          	lbu	a5,428(sp)
1c00b9c4:	0ff7f793          	andi	a5,a5,255
1c00b9c8:	d7f5                	beqz	a5,1c00b9b4 <S55_Conv2d_24x128x3x3+0x58a>
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2); /* Wait previous uDMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c00b9ca:	1ec12083          	lw	ra,492(sp)
1c00b9ce:	1e812403          	lw	s0,488(sp)
1c00b9d2:	1e412483          	lw	s1,484(sp)
1c00b9d6:	1e012903          	lw	s2,480(sp)
1c00b9da:	1dc12983          	lw	s3,476(sp)
1c00b9de:	1d812a03          	lw	s4,472(sp)
1c00b9e2:	1d412a83          	lw	s5,468(sp)
1c00b9e6:	1d012b03          	lw	s6,464(sp)
1c00b9ea:	1cc12b83          	lw	s7,460(sp)
1c00b9ee:	1c812c03          	lw	s8,456(sp)
1c00b9f2:	1c412c83          	lw	s9,452(sp)
1c00b9f6:	1c012d03          	lw	s10,448(sp)
1c00b9fa:	1bc12d83          	lw	s11,444(sp)
1c00b9fe:	617d                	addi	sp,sp,496
1c00ba00:	8082                	ret
					AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) Filter+_NN_Filter), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory+99824+22464*((D0Ind_Total)%2)),
1c00ba02:	6661                	lui	a2,0x18
1c00ba04:	5f060613          	addi	a2,a2,1520 # 185f0 <__L1Cl+0x85f0>
1c00ba08:	43aa8633          	p.mac	a2,s5,s10
1c00ba0c:	0004a283          	lw	t0,0(s1)
1c00ba10:	4812                	lw	a6,4(sp)
1c00ba12:	018a2503          	lw	a0,24(s4)
1c00ba16:	019c                	addi	a5,sp,192
1c00ba18:	4705                	li	a4,1
1c00ba1a:	86e2                	mv	a3,s8
1c00ba1c:	012805b3          	add	a1,a6,s2
1c00ba20:	c046                	sw	a7,0(sp)
1c00ba22:	9616                	add	a2,a2,t0
1c00ba24:	0ce020ef          	jal	ra,1c00daf2 <pi_cl_fs_copy>
1c00ba28:	4882                	lw	a7,0(sp)
1c00ba2a:	b961                	j	1c00b6c2 <S55_Conv2d_24x128x3x3+0x298>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00ba2c:	56ea                	lw	a3,184(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00ba2e:	02000713          	li	a4,32
1c00ba32:	002047b7          	lui	a5,0x204
1c00ba36:	d6b9                	beqz	a3,1c00b984 <S55_Conv2d_24x128x3x3+0x55a>
1c00ba38:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00ba3c:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00ba40:	00e7a223          	sw	a4,4(a5)
1c00ba44:	56ea                	lw	a3,184(sp)
1c00ba46:	de9d                	beqz	a3,1c00b984 <S55_Conv2d_24x128x3x3+0x55a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00ba48:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00ba4c:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00ba50:	00e7a223          	sw	a4,4(a5)
1c00ba54:	56ea                	lw	a3,184(sp)
1c00ba56:	f2ed                	bnez	a3,1c00ba38 <S55_Conv2d_24x128x3x3+0x60e>
1c00ba58:	b735                	j	1c00b984 <S55_Conv2d_24x128x3x3+0x55a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00ba5a:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00ba5e:	4047a783          	lw	a5,1028(a5)
1c00ba62:	5686                	lw	a3,96(sp)
1c00ba64:	40d7d7b3          	sra	a5,a5,a3
1c00ba68:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00ba6c:	c79d                	beqz	a5,1c00ba9a <S55_Conv2d_24x128x3x3+0x670>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00ba6e:	10000593          	li	a1,256
1c00ba72:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00ba76:	30061073          	csrw	mstatus,a2
1c00ba7a:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00ba7e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00ba82:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00ba86:	30047673          	csrrci	a2,mstatus,8
1c00ba8a:	40472783          	lw	a5,1028(a4)
1c00ba8e:	5686                	lw	a3,96(sp)
1c00ba90:	40d7d7b3          	sra	a5,a5,a3
1c00ba94:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00ba98:	fff9                	bnez	a5,1c00ba76 <S55_Conv2d_24x128x3x3+0x64c>
1c00ba9a:	4785                	li	a5,1
1c00ba9c:	00d796b3          	sll	a3,a5,a3
1c00baa0:	002047b7          	lui	a5,0x204
1c00baa4:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00baa8:	30061073          	csrw	mstatus,a2
1c00baac:	b465                	j	1c00b554 <S55_Conv2d_24x128x3x3+0x12a>
				_SN_In = 0;
1c00baae:	4581                	li	a1,0
				_SNN_Filter = 0;
1c00bab0:	4c01                	li	s8,0
1c00bab2:	be75                	j	1c00b66e <S55_Conv2d_24x128x3x3+0x244>

1c00bab4 <cnn_ssdCNN_Construct>:
int cnn_ssdCNN_Construct()

{
1c00bab4:	7131                	addi	sp,sp,-192
	AT_HYPERFLASH_FS_FC_EVENT UchanHF1;
	AT_HYPERFLASH_FS_CONF_T HyperFlashConf;
	int Error;
	AT_HYPERFLASH_FS_CONF_INIT(&HyperFlashConf, AT_MEM_L3_HFLASH, 0);
1c00bab6:	0068                	addi	a0,sp,12
{
1c00bab8:	df06                	sw	ra,188(sp)
1c00baba:	dd22                	sw	s0,184(sp)
1c00babc:	db26                	sw	s1,180(sp)
1c00babe:	d94a                	sw	s2,176(sp)
1c00bac0:	d74e                	sw	s3,172(sp)
1c00bac2:	d552                	sw	s4,168(sp)
1c00bac4:	d356                	sw	s5,164(sp)

static inline void __at_hyperflash_fs_open(AT_HYPERFLASH_FS_T *file, int is_write, struct pi_fs_conf *conf, const char *filename, int *err)
{
  struct pi_hyperflash_conf hyperflash_conf;
  pi_hyperflash_conf_init(&hyperflash_conf);
  pi_open_from_conf(&file->hyperflash, &hyperflash_conf);
1c00bac6:	1c015937          	lui	s2,0x1c015
	AT_HYPERFLASH_FS_CONF_INIT(&HyperFlashConf, AT_MEM_L3_HFLASH, 0);
1c00baca:	6d9010ef          	jal	ra,1c00d9a2 <pi_fs_conf_init>
  pi_hyperflash_conf_init(&hyperflash_conf);
1c00bace:	1008                	addi	a0,sp,32
  pi_open_from_conf(&file->hyperflash, &hyperflash_conf);
1c00bad0:	cf890493          	addi	s1,s2,-776 # 1c014cf8 <HyperFlash>
  pi_hyperflash_conf_init(&hyperflash_conf);
1c00bad4:	292030ef          	jal	ra,1c00ed66 <pi_hyperflash_conf_init>
  pi_open_from_conf(&file->hyperflash, &hyperflash_conf);
1c00bad8:	00c48413          	addi	s0,s1,12
1c00badc:	8522                	mv	a0,s0
1c00bade:	100c                	addi	a1,sp,32
1c00bae0:	66e040ef          	jal	ra,1c01014e <pi_open_from_conf>
  if (pi_flash_open(&file->hyperflash))
1c00bae4:	8522                	mv	a0,s0
1c00bae6:	621010ef          	jal	ra,1c00d906 <pi_flash_open>
1c00baea:	e115                	bnez	a0,1c00bb0e <cnn_ssdCNN_Construct+0x5a>
1c00baec:	8a2a                	mv	s4,a0

#ifdef __FLASH_FS_SEMIHOST__
  conf->type = PI_FS_HOST;
#endif

  pi_open_from_conf(&file->fs, conf);
1c00baee:	006c                	addi	a1,sp,12
1c00baf0:	cf890513          	addi	a0,s2,-776
  conf->flash = &file->hyperflash;
1c00baf4:	c822                	sw	s0,16(sp)
    conf->type = PI_FS_READ_ONLY;
1c00baf6:	c602                	sw	zero,12(sp)
  pi_open_from_conf(&file->fs, conf);
1c00baf8:	656040ef          	jal	ra,1c01014e <pi_open_from_conf>
  if (pi_fs_mount(&file->fs))
1c00bafc:	cf890513          	addi	a0,s2,-776
1c00bb00:	6b5010ef          	jal	ra,1c00d9b4 <pi_fs_mount>
1c00bb04:	c105                	beqz	a0,1c00bb24 <cnn_ssdCNN_Construct+0x70>


static inline void pi_flash_close(struct pi_device *device)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  api->close(device);
1c00bb06:	44dc                	lw	a5,12(s1)
1c00bb08:	8522                	mv	a0,s0
1c00bb0a:	43dc                	lw	a5,4(a5)
1c00bb0c:	9782                	jalr	a5
	AT_HYPERFLASH_FS_OPEN(&HyperFlash, &HyperFlashConf, "cnn_ssd_L3_Flash_Const.dat", &Error);
	if (Error) return 1;
1c00bb0e:	4a05                	li	s4,1
	AT_HYPERFLASH_FS_FC_WAIT(&HyperFlash, &UchanHF1);
	/* Moving Constant_regression_headers.3.bias, size 48 from HyperFlash at 762464 to (size 48) L2 at 58672..58719 */
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 762464), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 58672), 48, 0, &UchanHF1);
	AT_HYPERFLASH_FS_FC_WAIT(&HyperFlash, &UchanHF1);
	return 0;
}
1c00bb10:	50fa                	lw	ra,188(sp)
1c00bb12:	546a                	lw	s0,184(sp)
1c00bb14:	8552                	mv	a0,s4
1c00bb16:	54da                	lw	s1,180(sp)
1c00bb18:	594a                	lw	s2,176(sp)
1c00bb1a:	59ba                	lw	s3,172(sp)
1c00bb1c:	5a2a                	lw	s4,168(sp)
1c00bb1e:	5a9a                	lw	s5,164(sp)
1c00bb20:	6129                	addi	sp,sp,192
1c00bb22:	8082                	ret
  {
    pi_flash_close(&file->hyperflash);
    *err = -1;
    return;
  }
  file->file = pi_fs_open(&file->fs, filename, is_write ? PI_FS_FLAGS_WRITE : 0);
1c00bb24:	1c0145b7          	lui	a1,0x1c014
1c00bb28:	4601                	li	a2,0
1c00bb2a:	5e858593          	addi	a1,a1,1512 # 1c0145e8 <IntegerExpLUT+0xa0>
1c00bb2e:	cf890513          	addi	a0,s2,-776
1c00bb32:	6b7010ef          	jal	ra,1c00d9e8 <pi_fs_open>
1c00bb36:	cc88                	sw	a0,24(s1)
  if (file->file == NULL)
1c00bb38:	70050263          	beqz	a0,1c00c23c <cnn_ssdCNN_Construct+0x788>
	cnn_ssd_L2_Memory = (AT_L2_POINTER) AT_L2_ALLOC(0, 196592);
1c00bb3c:	00030537          	lui	a0,0x30
1c00bb40:	1541                	addi	a0,a0,-16
1c00bb42:	1c015937          	lui	s2,0x1c015
1c00bb46:	735040ef          	jal	ra,1c010a7a <pi_l2_malloc>
1c00bb4a:	a8090913          	addi	s2,s2,-1408 # 1c014a80 <cnn_ssd_L2_Memory>
1c00bb4e:	00a92023          	sw	a0,0(s2)
	if (cnn_ssd_L2_Memory == 0) return 3;
1c00bb52:	6c050f63          	beqz	a0,1c00c230 <cnn_ssdCNN_Construct+0x77c>
	cnn_ssd_L1_Memory = (AT_L1_POINTER) AT_L1_ALLOC(0, 47792);
1c00bb56:	65b1                	lui	a1,0xc
1c00bb58:	ab058593          	addi	a1,a1,-1360 # bab0 <__rt_stack_size+0xb2b0>
1c00bb5c:	4501                	li	a0,0
1c00bb5e:	70b040ef          	jal	ra,1c010a68 <pi_cl_l1_malloc>
1c00bb62:	100007b7          	lui	a5,0x10000
1c00bb66:	02a7a023          	sw	a0,32(a5) # 10000020 <cnn_ssd_L1_Memory>
	if (cnn_ssd_L1_Memory == 0) return 4;
1c00bb6a:	6c050663          	beqz	a0,1c00c236 <cnn_ssdCNN_Construct+0x782>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 761984), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 29952), 144, 0, &UchanHF1);
1c00bb6e:	00092583          	lw	a1,0(s2)
1c00bb72:	1c0159b7          	lui	s3,0x1c015
1c00bb76:	661d                	lui	a2,0x7
1c00bb78:	f709a503          	lw	a0,-144(s3) # 1c014f70 <cnn_ssd_L3_Flash>
1c00bb7c:	50060613          	addi	a2,a2,1280 # 7500 <__rt_stack_size+0x6d00>
1c00bb80:	962e                	add	a2,a2,a1
1c00bb82:	000ba5b7          	lui	a1,0xba
1c00bb86:	08058593          	addi	a1,a1,128 # ba080 <__L2+0x3a080>
1c00bb8a:	95aa                	add	a1,a1,a0
1c00bb8c:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00bb8e:	4805                	li	a6,1
1c00bb90:	101c                	addi	a5,sp,32
1c00bb92:	4705                	li	a4,1
1c00bb94:	09000693          	li	a3,144
1c00bb98:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00bb9a:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00bb9c:	c4c2                	sw	a6,72(sp)

void __rt_event_sched_init();

static inline void __rt_task_init(pi_task_t *task)
{
  task->done = 0;
1c00bb9e:	02010a23          	sb	zero,52(sp)
1c00bba2:	6b3010ef          	jal	ra,1c00da54 <pi_fs_copy_async>

#endif

static inline void pi_task_wait_on(struct pi_task *task)
{
  while(!task->done)
1c00bba6:	03410783          	lb	a5,52(sp)
1c00bbaa:	ef89                	bnez	a5,1c00bbc4 <cnn_ssdCNN_Construct+0x110>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00bbac:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00bbb0:	4585                	li	a1,1
1c00bbb2:	01c00513          	li	a0,28
1c00bbb6:	419040ef          	jal	ra,1c0107ce <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00bbba:	300a9073          	csrw	mstatus,s5
1c00bbbe:	03410783          	lb	a5,52(sp)
1c00bbc2:	d7ed                	beqz	a5,1c00bbac <cnn_ssdCNN_Construct+0xf8>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 762720), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 30160), 16, 0, &UchanHF1);
1c00bbc4:	00092583          	lw	a1,0(s2)
1c00bbc8:	661d                	lui	a2,0x7
1c00bbca:	f709a503          	lw	a0,-144(s3)
1c00bbce:	5d060613          	addi	a2,a2,1488 # 75d0 <__rt_stack_size+0x6dd0>
1c00bbd2:	962e                	add	a2,a2,a1
1c00bbd4:	000ba5b7          	lui	a1,0xba
1c00bbd8:	36058593          	addi	a1,a1,864 # ba360 <__L2+0x3a360>
1c00bbdc:	95aa                	add	a1,a1,a0
1c00bbde:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00bbe0:	4805                	li	a6,1
1c00bbe2:	101c                	addi	a5,sp,32
1c00bbe4:	4705                	li	a4,1
1c00bbe6:	46c1                	li	a3,16
1c00bbe8:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00bbea:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00bbec:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00bbee:	02010a23          	sb	zero,52(sp)
1c00bbf2:	663010ef          	jal	ra,1c00da54 <pi_fs_copy_async>
1c00bbf6:	03410783          	lb	a5,52(sp)
1c00bbfa:	ef89                	bnez	a5,1c00bc14 <cnn_ssdCNN_Construct+0x160>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00bbfc:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00bc00:	4585                	li	a1,1
1c00bc02:	01c00513          	li	a0,28
1c00bc06:	3c9040ef          	jal	ra,1c0107ce <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00bc0a:	300a9073          	csrw	mstatus,s5
1c00bc0e:	03410783          	lb	a5,52(sp)
1c00bc12:	d7ed                	beqz	a5,1c00bbfc <cnn_ssdCNN_Construct+0x148>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 759168), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 27648), 2304, 0, &UchanHF1);
1c00bc14:	00092583          	lw	a1,0(s2)
1c00bc18:	661d                	lui	a2,0x7
1c00bc1a:	f709a503          	lw	a0,-144(s3)
1c00bc1e:	c0060613          	addi	a2,a2,-1024 # 6c00 <__rt_stack_size+0x6400>
1c00bc22:	962e                	add	a2,a2,a1
1c00bc24:	000b95b7          	lui	a1,0xb9
1c00bc28:	58058593          	addi	a1,a1,1408 # b9580 <__L2+0x39580>
1c00bc2c:	95aa                	add	a1,a1,a0
1c00bc2e:	4c88                	lw	a0,24(s1)
1c00bc30:	6685                	lui	a3,0x1
  task->id = PI_TASK_NONE_ID;
1c00bc32:	4805                	li	a6,1
1c00bc34:	101c                	addi	a5,sp,32
1c00bc36:	4705                	li	a4,1
1c00bc38:	90068693          	addi	a3,a3,-1792 # 900 <__rt_stack_size+0x100>
1c00bc3c:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00bc3e:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00bc40:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00bc42:	02010a23          	sb	zero,52(sp)
1c00bc46:	60f010ef          	jal	ra,1c00da54 <pi_fs_copy_async>
1c00bc4a:	03410783          	lb	a5,52(sp)
1c00bc4e:	ef89                	bnez	a5,1c00bc68 <cnn_ssdCNN_Construct+0x1b4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00bc50:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00bc54:	4585                	li	a1,1
1c00bc56:	01c00513          	li	a0,28
1c00bc5a:	375040ef          	jal	ra,1c0107ce <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00bc5e:	300a9073          	csrw	mstatus,s5
1c00bc62:	03410783          	lb	a5,52(sp)
1c00bc66:	d7ed                	beqz	a5,1c00bc50 <cnn_ssdCNN_Construct+0x19c>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 762656), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 30096), 32, 0, &UchanHF1);
1c00bc68:	00092583          	lw	a1,0(s2)
1c00bc6c:	661d                	lui	a2,0x7
1c00bc6e:	f709a503          	lw	a0,-144(s3)
1c00bc72:	59060613          	addi	a2,a2,1424 # 7590 <__rt_stack_size+0x6d90>
1c00bc76:	962e                	add	a2,a2,a1
1c00bc78:	000ba5b7          	lui	a1,0xba
1c00bc7c:	32058593          	addi	a1,a1,800 # ba320 <__L2+0x3a320>
1c00bc80:	95aa                	add	a1,a1,a0
1c00bc82:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00bc84:	4805                	li	a6,1
1c00bc86:	101c                	addi	a5,sp,32
1c00bc88:	4705                	li	a4,1
1c00bc8a:	02000693          	li	a3,32
1c00bc8e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00bc90:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00bc92:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00bc94:	02010a23          	sb	zero,52(sp)
1c00bc98:	5bd010ef          	jal	ra,1c00da54 <pi_fs_copy_async>
1c00bc9c:	03410783          	lb	a5,52(sp)
1c00bca0:	ef89                	bnez	a5,1c00bcba <cnn_ssdCNN_Construct+0x206>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00bca2:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00bca6:	4585                	li	a1,1
1c00bca8:	01c00513          	li	a0,28
1c00bcac:	323040ef          	jal	ra,1c0107ce <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00bcb0:	300a9073          	csrw	mstatus,s5
1c00bcb4:	03410783          	lb	a5,52(sp)
1c00bcb8:	d7ed                	beqz	a5,1c00bca2 <cnn_ssdCNN_Construct+0x1ee>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 754560), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 23040), 4608, 0, &UchanHF1);
1c00bcba:	00092583          	lw	a1,0(s2)
1c00bcbe:	6619                	lui	a2,0x6
1c00bcc0:	f709a503          	lw	a0,-144(s3)
1c00bcc4:	a0060613          	addi	a2,a2,-1536 # 5a00 <__rt_stack_size+0x5200>
1c00bcc8:	962e                	add	a2,a2,a1
1c00bcca:	000b85b7          	lui	a1,0xb8
1c00bcce:	38058593          	addi	a1,a1,896 # b8380 <__L2+0x38380>
1c00bcd2:	95aa                	add	a1,a1,a0
1c00bcd4:	4c88                	lw	a0,24(s1)
1c00bcd6:	6685                	lui	a3,0x1
  task->id = PI_TASK_NONE_ID;
1c00bcd8:	4805                	li	a6,1
1c00bcda:	101c                	addi	a5,sp,32
1c00bcdc:	4705                	li	a4,1
1c00bcde:	20068693          	addi	a3,a3,512 # 1200 <__rt_stack_size+0xa00>
1c00bce2:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00bce4:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00bce6:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00bce8:	02010a23          	sb	zero,52(sp)
1c00bcec:	569010ef          	jal	ra,1c00da54 <pi_fs_copy_async>
1c00bcf0:	03410783          	lb	a5,52(sp)
1c00bcf4:	ef89                	bnez	a5,1c00bd0e <cnn_ssdCNN_Construct+0x25a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00bcf6:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00bcfa:	4585                	li	a1,1
1c00bcfc:	01c00513          	li	a0,28
1c00bd00:	2cf040ef          	jal	ra,1c0107ce <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00bd04:	300a9073          	csrw	mstatus,s5
1c00bd08:	03410783          	lb	a5,52(sp)
1c00bd0c:	d7ed                	beqz	a5,1c00bcf6 <cnn_ssdCNN_Construct+0x242>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 762688), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 30128), 32, 0, &UchanHF1);
1c00bd0e:	00092583          	lw	a1,0(s2)
1c00bd12:	661d                	lui	a2,0x7
1c00bd14:	f709a503          	lw	a0,-144(s3)
1c00bd18:	5b060613          	addi	a2,a2,1456 # 75b0 <__rt_stack_size+0x6db0>
1c00bd1c:	962e                	add	a2,a2,a1
1c00bd1e:	000ba5b7          	lui	a1,0xba
1c00bd22:	34058593          	addi	a1,a1,832 # ba340 <__L2+0x3a340>
1c00bd26:	95aa                	add	a1,a1,a0
1c00bd28:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00bd2a:	4805                	li	a6,1
1c00bd2c:	101c                	addi	a5,sp,32
1c00bd2e:	4705                	li	a4,1
1c00bd30:	02000693          	li	a3,32
1c00bd34:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00bd36:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00bd38:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00bd3a:	02010a23          	sb	zero,52(sp)
1c00bd3e:	517010ef          	jal	ra,1c00da54 <pi_fs_copy_async>
1c00bd42:	03410783          	lb	a5,52(sp)
1c00bd46:	ef89                	bnez	a5,1c00bd60 <cnn_ssdCNN_Construct+0x2ac>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00bd48:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00bd4c:	4585                	li	a1,1
1c00bd4e:	01c00513          	li	a0,28
1c00bd52:	27d040ef          	jal	ra,1c0107ce <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00bd56:	300a9073          	csrw	mstatus,s5
1c00bd5a:	03410783          	lb	a5,52(sp)
1c00bd5e:	d7ed                	beqz	a5,1c00bd48 <cnn_ssdCNN_Construct+0x294>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 745344), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 13824), 9216, 0, &UchanHF1);
1c00bd60:	00092583          	lw	a1,0(s2)
1c00bd64:	660d                	lui	a2,0x3
1c00bd66:	f709a503          	lw	a0,-144(s3)
1c00bd6a:	60060613          	addi	a2,a2,1536 # 3600 <__rt_stack_size+0x2e00>
1c00bd6e:	962e                	add	a2,a2,a1
1c00bd70:	000b65b7          	lui	a1,0xb6
1c00bd74:	f8058593          	addi	a1,a1,-128 # b5f80 <__L2+0x35f80>
1c00bd78:	95aa                	add	a1,a1,a0
1c00bd7a:	4c88                	lw	a0,24(s1)
1c00bd7c:	6689                	lui	a3,0x2
  task->id = PI_TASK_NONE_ID;
1c00bd7e:	4805                	li	a6,1
1c00bd80:	101c                	addi	a5,sp,32
1c00bd82:	4705                	li	a4,1
1c00bd84:	40068693          	addi	a3,a3,1024 # 2400 <__rt_stack_size+0x1c00>
1c00bd88:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00bd8a:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00bd8c:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00bd8e:	02010a23          	sb	zero,52(sp)
1c00bd92:	4c3010ef          	jal	ra,1c00da54 <pi_fs_copy_async>
1c00bd96:	03410783          	lb	a5,52(sp)
1c00bd9a:	ef89                	bnez	a5,1c00bdb4 <cnn_ssdCNN_Construct+0x300>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00bd9c:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00bda0:	4585                	li	a1,1
1c00bda2:	01c00513          	li	a0,28
1c00bda6:	229040ef          	jal	ra,1c0107ce <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00bdaa:	300a9073          	csrw	mstatus,s5
1c00bdae:	03410783          	lb	a5,52(sp)
1c00bdb2:	d7ed                	beqz	a5,1c00bd9c <cnn_ssdCNN_Construct+0x2e8>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 762256), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 58464), 64, 0, &UchanHF1);
1c00bdb4:	00092583          	lw	a1,0(s2)
1c00bdb8:	6639                	lui	a2,0xe
1c00bdba:	f709a503          	lw	a0,-144(s3)
1c00bdbe:	46060613          	addi	a2,a2,1120 # e460 <__rt_stack_size+0xdc60>
1c00bdc2:	962e                	add	a2,a2,a1
1c00bdc4:	000ba5b7          	lui	a1,0xba
1c00bdc8:	19058593          	addi	a1,a1,400 # ba190 <__L2+0x3a190>
1c00bdcc:	95aa                	add	a1,a1,a0
1c00bdce:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00bdd0:	4805                	li	a6,1
1c00bdd2:	101c                	addi	a5,sp,32
1c00bdd4:	4705                	li	a4,1
1c00bdd6:	04000693          	li	a3,64
1c00bdda:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00bddc:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00bdde:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00bde0:	02010a23          	sb	zero,52(sp)
1c00bde4:	471010ef          	jal	ra,1c00da54 <pi_fs_copy_async>
1c00bde8:	03410783          	lb	a5,52(sp)
1c00bdec:	ef89                	bnez	a5,1c00be06 <cnn_ssdCNN_Construct+0x352>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00bdee:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00bdf2:	4585                	li	a1,1
1c00bdf4:	01c00513          	li	a0,28
1c00bdf8:	1d7040ef          	jal	ra,1c0107ce <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00bdfc:	300a9073          	csrw	mstatus,s5
1c00be00:	03410783          	lb	a5,52(sp)
1c00be04:	d7ed                	beqz	a5,1c00bdee <cnn_ssdCNN_Construct+0x33a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 762512), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 58720), 36, 0, &UchanHF1);
1c00be06:	00092583          	lw	a1,0(s2)
1c00be0a:	6639                	lui	a2,0xe
1c00be0c:	f709a503          	lw	a0,-144(s3)
1c00be10:	56060613          	addi	a2,a2,1376 # e560 <__rt_stack_size+0xdd60>
1c00be14:	962e                	add	a2,a2,a1
1c00be16:	000ba5b7          	lui	a1,0xba
1c00be1a:	29058593          	addi	a1,a1,656 # ba290 <__L2+0x3a290>
1c00be1e:	95aa                	add	a1,a1,a0
1c00be20:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00be22:	4805                	li	a6,1
1c00be24:	101c                	addi	a5,sp,32
1c00be26:	4705                	li	a4,1
1c00be28:	02400693          	li	a3,36
1c00be2c:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00be2e:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00be30:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00be32:	02010a23          	sb	zero,52(sp)
1c00be36:	41f010ef          	jal	ra,1c00da54 <pi_fs_copy_async>
1c00be3a:	03410783          	lb	a5,52(sp)
1c00be3e:	ef89                	bnez	a5,1c00be58 <cnn_ssdCNN_Construct+0x3a4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00be40:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00be44:	4585                	li	a1,1
1c00be46:	01c00513          	li	a0,28
1c00be4a:	185040ef          	jal	ra,1c0107ce <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00be4e:	300a9073          	csrw	mstatus,s5
1c00be52:	03410783          	lb	a5,52(sp)
1c00be56:	d7ed                	beqz	a5,1c00be40 <cnn_ssdCNN_Construct+0x38c>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 721152), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 0), 13824, 0, &UchanHF1);
1c00be58:	f709a503          	lw	a0,-144(s3)
1c00be5c:	000b05b7          	lui	a1,0xb0
1c00be60:	10058593          	addi	a1,a1,256 # b0100 <__L2+0x30100>
1c00be64:	95aa                	add	a1,a1,a0
1c00be66:	00092603          	lw	a2,0(s2)
1c00be6a:	4c88                	lw	a0,24(s1)
1c00be6c:	668d                	lui	a3,0x3
  task->id = PI_TASK_NONE_ID;
1c00be6e:	4805                	li	a6,1
1c00be70:	101c                	addi	a5,sp,32
1c00be72:	4705                	li	a4,1
1c00be74:	60068693          	addi	a3,a3,1536 # 3600 <__rt_stack_size+0x2e00>
1c00be78:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00be7a:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00be7c:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00be7e:	02010a23          	sb	zero,52(sp)
1c00be82:	3d3010ef          	jal	ra,1c00da54 <pi_fs_copy_async>
1c00be86:	03410783          	lb	a5,52(sp)
1c00be8a:	ef89                	bnez	a5,1c00bea4 <cnn_ssdCNN_Construct+0x3f0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00be8c:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00be90:	4585                	li	a1,1
1c00be92:	01c00513          	li	a0,28
1c00be96:	139040ef          	jal	ra,1c0107ce <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00be9a:	300a9073          	csrw	mstatus,s5
1c00be9e:	03410783          	lb	a5,52(sp)
1c00bea2:	d7ed                	beqz	a5,1c00be8c <cnn_ssdCNN_Construct+0x3d8>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 762320), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 58528), 48, 0, &UchanHF1);
1c00bea4:	00092583          	lw	a1,0(s2)
1c00bea8:	6639                	lui	a2,0xe
1c00beaa:	f709a503          	lw	a0,-144(s3)
1c00beae:	4a060613          	addi	a2,a2,1184 # e4a0 <__rt_stack_size+0xdca0>
1c00beb2:	962e                	add	a2,a2,a1
1c00beb4:	000ba5b7          	lui	a1,0xba
1c00beb8:	1d058593          	addi	a1,a1,464 # ba1d0 <__L2+0x3a1d0>
1c00bebc:	95aa                	add	a1,a1,a0
1c00bebe:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00bec0:	4805                	li	a6,1
1c00bec2:	101c                	addi	a5,sp,32
1c00bec4:	4705                	li	a4,1
1c00bec6:	03000693          	li	a3,48
1c00beca:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00becc:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00bece:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00bed0:	02010a23          	sb	zero,52(sp)
1c00bed4:	381010ef          	jal	ra,1c00da54 <pi_fs_copy_async>
1c00bed8:	03410783          	lb	a5,52(sp)
1c00bedc:	ef89                	bnez	a5,1c00bef6 <cnn_ssdCNN_Construct+0x442>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00bede:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00bee2:	4585                	li	a1,1
1c00bee4:	01c00513          	li	a0,28
1c00bee8:	0e7040ef          	jal	ra,1c0107ce <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00beec:	300a9073          	csrw	mstatus,s5
1c00bef0:	03410783          	lb	a5,52(sp)
1c00bef4:	d7ed                	beqz	a5,1c00bede <cnn_ssdCNN_Construct+0x42a>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 762128), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 58336), 128, 0, &UchanHF1);
1c00bef6:	00092583          	lw	a1,0(s2)
1c00befa:	6639                	lui	a2,0xe
1c00befc:	f709a503          	lw	a0,-144(s3)
1c00bf00:	3e060613          	addi	a2,a2,992 # e3e0 <__rt_stack_size+0xdbe0>
1c00bf04:	962e                	add	a2,a2,a1
1c00bf06:	000ba5b7          	lui	a1,0xba
1c00bf0a:	11058593          	addi	a1,a1,272 # ba110 <__L2+0x3a110>
1c00bf0e:	95aa                	add	a1,a1,a0
1c00bf10:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00bf12:	4805                	li	a6,1
1c00bf14:	101c                	addi	a5,sp,32
1c00bf16:	4705                	li	a4,1
1c00bf18:	08000693          	li	a3,128
1c00bf1c:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00bf1e:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00bf20:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00bf22:	02010a23          	sb	zero,52(sp)
1c00bf26:	32f010ef          	jal	ra,1c00da54 <pi_fs_copy_async>
1c00bf2a:	03410783          	lb	a5,52(sp)
1c00bf2e:	ef89                	bnez	a5,1c00bf48 <cnn_ssdCNN_Construct+0x494>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00bf30:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00bf34:	4585                	li	a1,1
1c00bf36:	01c00513          	li	a0,28
1c00bf3a:	095040ef          	jal	ra,1c0107ce <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00bf3e:	300a9073          	csrw	mstatus,s5
1c00bf42:	03410783          	lb	a5,52(sp)
1c00bf46:	d7ed                	beqz	a5,1c00bf30 <cnn_ssdCNN_Construct+0x47c>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 762548), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 58756), 36, 0, &UchanHF1);
1c00bf48:	00092583          	lw	a1,0(s2)
1c00bf4c:	6639                	lui	a2,0xe
1c00bf4e:	f709a503          	lw	a0,-144(s3)
1c00bf52:	58460613          	addi	a2,a2,1412 # e584 <__rt_stack_size+0xdd84>
1c00bf56:	962e                	add	a2,a2,a1
1c00bf58:	000ba5b7          	lui	a1,0xba
1c00bf5c:	2b458593          	addi	a1,a1,692 # ba2b4 <__L2+0x3a2b4>
1c00bf60:	95aa                	add	a1,a1,a0
1c00bf62:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00bf64:	4805                	li	a6,1
1c00bf66:	101c                	addi	a5,sp,32
1c00bf68:	4705                	li	a4,1
1c00bf6a:	02400693          	li	a3,36
1c00bf6e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00bf70:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00bf72:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00bf74:	02010a23          	sb	zero,52(sp)
1c00bf78:	2dd010ef          	jal	ra,1c00da54 <pi_fs_copy_async>
1c00bf7c:	03410783          	lb	a5,52(sp)
1c00bf80:	ef89                	bnez	a5,1c00bf9a <cnn_ssdCNN_Construct+0x4e6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00bf82:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00bf86:	4585                	li	a1,1
1c00bf88:	01c00513          	li	a0,28
1c00bf8c:	043040ef          	jal	ra,1c0107ce <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00bf90:	300a9073          	csrw	mstatus,s5
1c00bf94:	03410783          	lb	a5,52(sp)
1c00bf98:	d7ed                	beqz	a5,1c00bf82 <cnn_ssdCNN_Construct+0x4ce>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 672768), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 30176), 27648, 0, &UchanHF1);
1c00bf9a:	00092583          	lw	a1,0(s2)
1c00bf9e:	669d                	lui	a3,0x7
1c00bfa0:	f709a503          	lw	a0,-144(s3)
1c00bfa4:	5e068613          	addi	a2,a3,1504 # 75e0 <__rt_stack_size+0x6de0>
1c00bfa8:	962e                	add	a2,a2,a1
1c00bfaa:	000a45b7          	lui	a1,0xa4
1c00bfae:	40058593          	addi	a1,a1,1024 # a4400 <__L2+0x24400>
1c00bfb2:	95aa                	add	a1,a1,a0
1c00bfb4:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00bfb6:	4805                	li	a6,1
1c00bfb8:	101c                	addi	a5,sp,32
1c00bfba:	4705                	li	a4,1
1c00bfbc:	c0068693          	addi	a3,a3,-1024
1c00bfc0:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00bfc2:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00bfc4:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00bfc6:	02010a23          	sb	zero,52(sp)
1c00bfca:	28b010ef          	jal	ra,1c00da54 <pi_fs_copy_async>
1c00bfce:	03410783          	lb	a5,52(sp)
1c00bfd2:	ef89                	bnez	a5,1c00bfec <cnn_ssdCNN_Construct+0x538>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00bfd4:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00bfd8:	4585                	li	a1,1
1c00bfda:	01c00513          	li	a0,28
1c00bfde:	7f0040ef          	jal	ra,1c0107ce <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00bfe2:	300a9073          	csrw	mstatus,s5
1c00bfe6:	03410783          	lb	a5,52(sp)
1c00bfea:	d7ed                	beqz	a5,1c00bfd4 <cnn_ssdCNN_Construct+0x520>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 762368), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 58576), 48, 0, &UchanHF1);
1c00bfec:	00092583          	lw	a1,0(s2)
1c00bff0:	6639                	lui	a2,0xe
1c00bff2:	f709a503          	lw	a0,-144(s3)
1c00bff6:	4d060613          	addi	a2,a2,1232 # e4d0 <__rt_stack_size+0xdcd0>
1c00bffa:	962e                	add	a2,a2,a1
1c00bffc:	000ba5b7          	lui	a1,0xba
1c00c000:	20058593          	addi	a1,a1,512 # ba200 <__L2+0x3a200>
1c00c004:	95aa                	add	a1,a1,a0
1c00c006:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00c008:	4805                	li	a6,1
1c00c00a:	101c                	addi	a5,sp,32
1c00c00c:	4705                	li	a4,1
1c00c00e:	03000693          	li	a3,48
1c00c012:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00c014:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00c016:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00c018:	02010a23          	sb	zero,52(sp)
1c00c01c:	239010ef          	jal	ra,1c00da54 <pi_fs_copy_async>
1c00c020:	03410783          	lb	a5,52(sp)
1c00c024:	ef89                	bnez	a5,1c00c03e <cnn_ssdCNN_Construct+0x58a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00c026:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00c02a:	4585                	li	a1,1
1c00c02c:	01c00513          	li	a0,28
1c00c030:	79e040ef          	jal	ra,1c0107ce <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00c034:	300a9073          	csrw	mstatus,s5
1c00c038:	03410783          	lb	a5,52(sp)
1c00c03c:	d7ed                	beqz	a5,1c00c026 <cnn_ssdCNN_Construct+0x572>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 761472), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 57824), 256, 0, &UchanHF1);
1c00c03e:	00092583          	lw	a1,0(s2)
1c00c042:	6639                	lui	a2,0xe
1c00c044:	f709a503          	lw	a0,-144(s3)
1c00c048:	1e060613          	addi	a2,a2,480 # e1e0 <__rt_stack_size+0xd9e0>
1c00c04c:	962e                	add	a2,a2,a1
1c00c04e:	000ba5b7          	lui	a1,0xba
1c00c052:	e8058593          	addi	a1,a1,-384 # b9e80 <__L2+0x39e80>
1c00c056:	95aa                	add	a1,a1,a0
1c00c058:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00c05a:	4805                	li	a6,1
1c00c05c:	101c                	addi	a5,sp,32
1c00c05e:	4705                	li	a4,1
1c00c060:	10000693          	li	a3,256
1c00c064:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00c066:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00c068:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00c06a:	02010a23          	sb	zero,52(sp)
1c00c06e:	1e7010ef          	jal	ra,1c00da54 <pi_fs_copy_async>
1c00c072:	03410783          	lb	a5,52(sp)
1c00c076:	ef89                	bnez	a5,1c00c090 <cnn_ssdCNN_Construct+0x5dc>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00c078:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00c07c:	4585                	li	a1,1
1c00c07e:	01c00513          	li	a0,28
1c00c082:	74c040ef          	jal	ra,1c0107ce <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00c086:	300a9073          	csrw	mstatus,s5
1c00c08a:	03410783          	lb	a5,52(sp)
1c00c08e:	d7ed                	beqz	a5,1c00c078 <cnn_ssdCNN_Construct+0x5c4>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 762584), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 58792), 36, 0, &UchanHF1);
1c00c090:	00092583          	lw	a1,0(s2)
1c00c094:	6639                	lui	a2,0xe
1c00c096:	f709a503          	lw	a0,-144(s3)
1c00c09a:	5a860613          	addi	a2,a2,1448 # e5a8 <__rt_stack_size+0xdda8>
1c00c09e:	962e                	add	a2,a2,a1
1c00c0a0:	000ba5b7          	lui	a1,0xba
1c00c0a4:	2d858593          	addi	a1,a1,728 # ba2d8 <__L2+0x3a2d8>
1c00c0a8:	95aa                	add	a1,a1,a0
1c00c0aa:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00c0ac:	4805                	li	a6,1
1c00c0ae:	101c                	addi	a5,sp,32
1c00c0b0:	4705                	li	a4,1
1c00c0b2:	02400693          	li	a3,36
1c00c0b6:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00c0b8:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00c0ba:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00c0bc:	02010a23          	sb	zero,52(sp)
1c00c0c0:	195010ef          	jal	ra,1c00da54 <pi_fs_copy_async>
1c00c0c4:	03410783          	lb	a5,52(sp)
1c00c0c8:	ef89                	bnez	a5,1c00c0e2 <cnn_ssdCNN_Construct+0x62e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00c0ca:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00c0ce:	4585                	li	a1,1
1c00c0d0:	01c00513          	li	a0,28
1c00c0d4:	6fa040ef          	jal	ra,1c0107ce <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00c0d8:	300a9073          	csrw	mstatus,s5
1c00c0dc:	03410783          	lb	a5,52(sp)
1c00c0e0:	d7ed                	beqz	a5,1c00c0ca <cnn_ssdCNN_Construct+0x616>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 762416), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 58624), 48, 0, &UchanHF1);
1c00c0e2:	00092583          	lw	a1,0(s2)
1c00c0e6:	6639                	lui	a2,0xe
1c00c0e8:	f709a503          	lw	a0,-144(s3)
1c00c0ec:	50060613          	addi	a2,a2,1280 # e500 <__rt_stack_size+0xdd00>
1c00c0f0:	962e                	add	a2,a2,a1
1c00c0f2:	000ba5b7          	lui	a1,0xba
1c00c0f6:	23058593          	addi	a1,a1,560 # ba230 <__L2+0x3a230>
1c00c0fa:	95aa                	add	a1,a1,a0
1c00c0fc:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00c0fe:	4805                	li	a6,1
1c00c100:	101c                	addi	a5,sp,32
1c00c102:	4705                	li	a4,1
1c00c104:	03000693          	li	a3,48
1c00c108:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00c10a:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00c10c:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00c10e:	02010a23          	sb	zero,52(sp)
1c00c112:	143010ef          	jal	ra,1c00da54 <pi_fs_copy_async>
1c00c116:	03410783          	lb	a5,52(sp)
1c00c11a:	ef89                	bnez	a5,1c00c134 <cnn_ssdCNN_Construct+0x680>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00c11c:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00c120:	4585                	li	a1,1
1c00c122:	01c00513          	li	a0,28
1c00c126:	6a8040ef          	jal	ra,1c0107ce <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00c12a:	300a9073          	csrw	mstatus,s5
1c00c12e:	03410783          	lb	a5,52(sp)
1c00c132:	d7ed                	beqz	a5,1c00c11c <cnn_ssdCNN_Construct+0x668>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 761728), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 58080), 256, 0, &UchanHF1);
1c00c134:	00092583          	lw	a1,0(s2)
1c00c138:	6639                	lui	a2,0xe
1c00c13a:	f709a503          	lw	a0,-144(s3)
1c00c13e:	2e060613          	addi	a2,a2,736 # e2e0 <__rt_stack_size+0xdae0>
1c00c142:	962e                	add	a2,a2,a1
1c00c144:	000ba5b7          	lui	a1,0xba
1c00c148:	f8058593          	addi	a1,a1,-128 # b9f80 <__L2+0x39f80>
1c00c14c:	95aa                	add	a1,a1,a0
1c00c14e:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00c150:	4805                	li	a6,1
1c00c152:	101c                	addi	a5,sp,32
1c00c154:	4705                	li	a4,1
1c00c156:	10000693          	li	a3,256
1c00c15a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00c15c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00c15e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00c160:	02010a23          	sb	zero,52(sp)
1c00c164:	0f1010ef          	jal	ra,1c00da54 <pi_fs_copy_async>
1c00c168:	03410783          	lb	a5,52(sp)
1c00c16c:	ef89                	bnez	a5,1c00c186 <cnn_ssdCNN_Construct+0x6d2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00c16e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00c172:	4585                	li	a1,1
1c00c174:	01c00513          	li	a0,28
1c00c178:	656040ef          	jal	ra,1c0107ce <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00c17c:	300a9073          	csrw	mstatus,s5
1c00c180:	03410783          	lb	a5,52(sp)
1c00c184:	d7ed                	beqz	a5,1c00c16e <cnn_ssdCNN_Construct+0x6ba>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 762620), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 58828), 36, 0, &UchanHF1);
1c00c186:	00092583          	lw	a1,0(s2)
1c00c18a:	6639                	lui	a2,0xe
1c00c18c:	f709a503          	lw	a0,-144(s3)
1c00c190:	5cc60613          	addi	a2,a2,1484 # e5cc <__rt_stack_size+0xddcc>
1c00c194:	962e                	add	a2,a2,a1
1c00c196:	000ba5b7          	lui	a1,0xba
1c00c19a:	2fc58593          	addi	a1,a1,764 # ba2fc <__L2+0x3a2fc>
1c00c19e:	95aa                	add	a1,a1,a0
1c00c1a0:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00c1a2:	4805                	li	a6,1
1c00c1a4:	101c                	addi	a5,sp,32
1c00c1a6:	4705                	li	a4,1
1c00c1a8:	02400693          	li	a3,36
1c00c1ac:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00c1ae:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00c1b0:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00c1b2:	02010a23          	sb	zero,52(sp)
1c00c1b6:	09f010ef          	jal	ra,1c00da54 <pi_fs_copy_async>
1c00c1ba:	03410783          	lb	a5,52(sp)
1c00c1be:	ef89                	bnez	a5,1c00c1d8 <cnn_ssdCNN_Construct+0x724>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00c1c0:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00c1c4:	4585                	li	a1,1
1c00c1c6:	01c00513          	li	a0,28
1c00c1ca:	604040ef          	jal	ra,1c0107ce <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00c1ce:	300a9073          	csrw	mstatus,s5
1c00c1d2:	03410783          	lb	a5,52(sp)
1c00c1d6:	d7ed                	beqz	a5,1c00c1c0 <cnn_ssdCNN_Construct+0x70c>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 762464), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 58672), 48, 0, &UchanHF1);
1c00c1d8:	00092583          	lw	a1,0(s2)
1c00c1dc:	6639                	lui	a2,0xe
1c00c1de:	f709a883          	lw	a7,-144(s3)
1c00c1e2:	53060613          	addi	a2,a2,1328 # e530 <__rt_stack_size+0xdd30>
1c00c1e6:	962e                	add	a2,a2,a1
1c00c1e8:	4c88                	lw	a0,24(s1)
1c00c1ea:	000ba5b7          	lui	a1,0xba
1c00c1ee:	26058593          	addi	a1,a1,608 # ba260 <__L2+0x3a260>
  task->id = PI_TASK_NONE_ID;
1c00c1f2:	4805                	li	a6,1
1c00c1f4:	101c                	addi	a5,sp,32
1c00c1f6:	4705                	li	a4,1
1c00c1f8:	03000693          	li	a3,48
1c00c1fc:	95c6                	add	a1,a1,a7
1c00c1fe:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00c200:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00c202:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00c204:	02010a23          	sb	zero,52(sp)
1c00c208:	04d010ef          	jal	ra,1c00da54 <pi_fs_copy_async>
1c00c20c:	03410783          	lb	a5,52(sp)
1c00c210:	900790e3          	bnez	a5,1c00bb10 <cnn_ssdCNN_Construct+0x5c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00c214:	300474f3          	csrrci	s1,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00c218:	4585                	li	a1,1
1c00c21a:	01c00513          	li	a0,28
1c00c21e:	5b0040ef          	jal	ra,1c0107ce <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00c222:	30049073          	csrw	mstatus,s1
1c00c226:	03410783          	lb	a5,52(sp)
1c00c22a:	d7ed                	beqz	a5,1c00c214 <cnn_ssdCNN_Construct+0x760>
1c00c22c:	8e5ff06f          	j	1c00bb10 <cnn_ssdCNN_Construct+0x5c>
	if (cnn_ssd_L2_Memory == 0) return 3;
1c00c230:	4a0d                	li	s4,3
1c00c232:	8dfff06f          	j	1c00bb10 <cnn_ssdCNN_Construct+0x5c>
	if (cnn_ssd_L1_Memory == 0) return 4;
1c00c236:	4a11                	li	s4,4
1c00c238:	8d9ff06f          	j	1c00bb10 <cnn_ssdCNN_Construct+0x5c>
  {
    pi_fs_unmount(&file->fs);
1c00c23c:	cf890513          	addi	a0,s2,-776
1c00c240:	7a0010ef          	jal	ra,1c00d9e0 <pi_fs_unmount>
1c00c244:	8c3ff06f          	j	1c00bb06 <cnn_ssdCNN_Construct+0x52>

1c00c248 <cnn_ssdCNN_Destruct>:
int cnn_ssdCNN_Destruct()

{
	AT_L2_FREE(0, cnn_ssd_L2_Memory, 196592);
1c00c248:	1c0157b7          	lui	a5,0x1c015
1c00c24c:	a807a503          	lw	a0,-1408(a5) # 1c014a80 <cnn_ssd_L2_Memory>
1c00c250:	000305b7          	lui	a1,0x30
{
1c00c254:	1141                	addi	sp,sp,-16
	AT_L2_FREE(0, cnn_ssd_L2_Memory, 196592);
1c00c256:	15c1                	addi	a1,a1,-16
{
1c00c258:	c606                	sw	ra,12(sp)
1c00c25a:	c422                	sw	s0,8(sp)
1c00c25c:	c226                	sw	s1,4(sp)
	AT_L2_FREE(0, cnn_ssd_L2_Memory, 196592);
1c00c25e:	02b040ef          	jal	ra,1c010a88 <pi_l2_free>
	AT_L1_FREE(0, cnn_ssd_L1_Memory, 47792);
1c00c262:	100007b7          	lui	a5,0x10000
1c00c266:	0207a583          	lw	a1,32(a5) # 10000020 <cnn_ssd_L1_Memory>
1c00c26a:	6631                	lui	a2,0xc
1c00c26c:	ab060613          	addi	a2,a2,-1360 # bab0 <__rt_stack_size+0xb2b0>
    file->file->size = 4*1024*1024;
}

static inline void __at_hyperflash_fs_close(AT_HYPERFLASH_FS_T *file)
{
  pi_fs_close(file->file);
1c00c270:	1c0154b7          	lui	s1,0x1c015
1c00c274:	4501                	li	a0,0
1c00c276:	7f8040ef          	jal	ra,1c010a6e <pi_cl_l1_free>
1c00c27a:	cf848413          	addi	s0,s1,-776 # 1c014cf8 <HyperFlash>
1c00c27e:	4c08                	lw	a0,24(s0)
1c00c280:	770010ef          	jal	ra,1c00d9f0 <pi_fs_close>
  pi_fs_unmount(&file->fs);
1c00c284:	cf848513          	addi	a0,s1,-776
1c00c288:	758010ef          	jal	ra,1c00d9e0 <pi_fs_unmount>
1c00c28c:	445c                	lw	a5,12(s0)
1c00c28e:	00c40513          	addi	a0,s0,12
1c00c292:	43dc                	lw	a5,4(a5)
1c00c294:	9782                	jalr	a5
	AT_HYPERFLASH_FS_CLOSE(&HyperFlash);
	return 0;
}
1c00c296:	40b2                	lw	ra,12(sp)
1c00c298:	4422                	lw	s0,8(sp)
1c00c29a:	4492                	lw	s1,4(sp)
1c00c29c:	4501                	li	a0,0
1c00c29e:	0141                	addi	sp,sp,16
1c00c2a0:	8082                	ret

1c00c2a2 <cnn_ssdCNN>:
		signed short * __restrict__ Output_5,
		signed short * __restrict__ Output_6,
		signed short * __restrict__ Output_7,
		signed short * __restrict__ Output_8)

{
1c00c2a2:	7171                	addi	sp,sp,-176
1c00c2a4:	d326                	sw	s1,164(sp)
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }

static inline uint32_t timer_cfg_hi_get(uint32_t base) { return ARCHI_READ(base, TIMER_CFG_HI_OFFSET); }
static inline void timer_cfg_hi_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_HI_OFFSET, value); }

static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c00c2a6:	102004b7          	lui	s1,0x10200
1c00c2aa:	c366                	sw	s9,132(sp)
1c00c2ac:	c16a                	sw	s10,128(sp)
1c00c2ae:	deee                	sw	s11,124(sp)
1c00c2b0:	40048493          	addi	s1,s1,1024 # 10200400 <__l1_end+0x2003d8>
1c00c2b4:	8dbe                	mv	s11,a5
1c00c2b6:	8d42                	mv	s10,a6
1c00c2b8:	8cc6                	mv	s9,a7
1c00c2ba:	d706                	sw	ra,172(sp)
1c00c2bc:	d522                	sw	s0,168(sp)
1c00c2be:	d14a                	sw	s2,160(sp)
1c00c2c0:	cf4e                	sw	s3,156(sp)
1c00c2c2:	cd52                	sw	s4,152(sp)
1c00c2c4:	cb56                	sw	s5,148(sp)
1c00c2c6:	c95a                	sw	s6,144(sp)
1c00c2c8:	c75e                	sw	s7,140(sp)
1c00c2ca:	c562                	sw	s8,136(sp)
1c00c2cc:	c82e                	sw	a1,16(sp)
1c00c2ce:	ca32                	sw	a2,20(sp)
1c00c2d0:	cc36                	sw	a3,24(sp)
1c00c2d2:	ce3a                	sw	a4,28(sp)
1c00c2d4:	0084a703          	lw	a4,8(s1)
	AT_HYPERFLASH_FS_CL_EVENT UchanHF0;
	AT_HYPERFLASH_FS_CL_EVENT UchanHF1;
	AT_GraphPerf[0] = gap_cl_readhwtimer();
	S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu(
1c00c2d8:	1c015837          	lui	a6,0x1c015
1c00c2dc:	a8080a93          	addi	s5,a6,-1408 # 1c014a80 <cnn_ssd_L2_Memory>
1c00c2e0:	000aa783          	lw	a5,0(s5)
		((signed short * __restrict__) Input_1), /* In */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+29952)), /* Filter */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+30160)), /* Bias */
1c00c2e4:	6c1d                	lui	s8,0x7
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58864)) /* Out */
1c00c2e6:	6bb9                	lui	s7,0xe
1c00c2e8:	5f0b8a13          	addi	s4,s7,1520 # e5f0 <__rt_stack_size+0xddf0>
		((signed short * __restrict__) (cnn_ssd_L2_Memory+30160)), /* Bias */
1c00c2ec:	5d0c0613          	addi	a2,s8,1488 # 75d0 <__rt_stack_size+0x6dd0>
		((signed short * __restrict__) (cnn_ssd_L2_Memory+29952)), /* Filter */
1c00c2f0:	500c0593          	addi	a1,s8,1280
	AT_GraphPerf[0] = gap_cl_readhwtimer();
1c00c2f4:	1c015437          	lui	s0,0x1c015
	S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu(
1c00c2f8:	014786b3          	add	a3,a5,s4
1c00c2fc:	963e                	add	a2,a2,a5
1c00c2fe:	95be                	add	a1,a1,a5
	AT_GraphPerf[0] = gap_cl_readhwtimer();
1c00c300:	fee42a23          	sw	a4,-12(s0) # 1c014ff4 <AT_GraphPerf>
	S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu(
1c00c304:	cb0f90ef          	jal	ra,1c0057b4 <S3_Conv2d_8x1x3x3_MaxPool_2x2_Relu>
1c00c308:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[0] = gap_cl_readhwtimer() - AT_GraphPerf[0];
1c00c30c:	ff442703          	lw	a4,-12(s0)
1c00c310:	8f99                	sub	a5,a5,a4
1c00c312:	fef42a23          	sw	a5,-12(s0)
1c00c316:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[1] = gap_cl_readhwtimer();
	S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu(
1c00c31a:	000aa503          	lw	a0,0(s5)
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58864)), /* In */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+27648)), /* Filter */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+30096)), /* Bias */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+140784)) /* Out */
1c00c31e:	00022e37          	lui	t3,0x22
1c00c322:	5f0e0b13          	addi	s6,t3,1520 # 225f0 <__L1Cl+0x125f0>
		((signed short * __restrict__) (cnn_ssd_L2_Memory+30096)), /* Bias */
1c00c326:	590c0613          	addi	a2,s8,1424
		((signed short * __restrict__) (cnn_ssd_L2_Memory+27648)), /* Filter */
1c00c32a:	c00c0593          	addi	a1,s8,-1024
	S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu(
1c00c32e:	016506b3          	add	a3,a0,s6
1c00c332:	962a                	add	a2,a2,a0
1c00c334:	95aa                	add	a1,a1,a0
	AT_GraphPerf[1] = gap_cl_readhwtimer();
1c00c336:	ff440413          	addi	s0,s0,-12
	S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu(
1c00c33a:	9552                	add	a0,a0,s4
	AT_GraphPerf[1] = gap_cl_readhwtimer();
1c00c33c:	c05c                	sw	a5,4(s0)
	S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu(
1c00c33e:	ae9f90ef          	jal	ra,1c005e26 <S6_Conv2d_16x8x3x3_MaxPool_2x2_Relu>
1c00c342:	0084ae83          	lw	t4,8(s1)
	);
	AT_GraphPerf[1] = gap_cl_readhwtimer() - AT_GraphPerf[1];
	/* Moving Conv_14_weights, size 36864 from HyperFlash at 635904 to (size 36864) L2 at 99824 using event 0 */
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 635904), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 99824), 36864, 0, &UchanHF0);
1c00c346:	000aa583          	lw	a1,0(s5)
1c00c34a:	1c015937          	lui	s2,0x1c015
1c00c34e:	1c0159b7          	lui	s3,0x1c015
1c00c352:	6661                	lui	a2,0x18
	AT_GraphPerf[1] = gap_cl_readhwtimer() - AT_GraphPerf[1];
1c00c354:	405c                	lw	a5,4(s0)
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 635904), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 99824), 36864, 0, &UchanHF0);
1c00c356:	f7092f03          	lw	t5,-144(s2) # 1c014f70 <cnn_ssd_L3_Flash>
1c00c35a:	cf898993          	addi	s3,s3,-776 # 1c014cf8 <HyperFlash>
1c00c35e:	5f060613          	addi	a2,a2,1520 # 185f0 <__L1Cl+0x85f0>
1c00c362:	962e                	add	a2,a2,a1
1c00c364:	0189a503          	lw	a0,24(s3)
1c00c368:	0009b5b7          	lui	a1,0x9b
1c00c36c:	40058593          	addi	a1,a1,1024 # 9b400 <__L2+0x1b400>
	AT_GraphPerf[1] = gap_cl_readhwtimer() - AT_GraphPerf[1];
1c00c370:	40fe8eb3          	sub	t4,t4,a5
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 635904), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 99824), 36864, 0, &UchanHF0);
1c00c374:	4705                	li	a4,1
1c00c376:	101c                	addi	a5,sp,32
1c00c378:	66a5                	lui	a3,0x9
1c00c37a:	95fa                	add	a1,a1,t5
	AT_GraphPerf[1] = gap_cl_readhwtimer() - AT_GraphPerf[1];
1c00c37c:	01d42223          	sw	t4,4(s0)
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 635904), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 99824), 36864, 0, &UchanHF0);
1c00c380:	772010ef          	jal	ra,1c00daf2 <pi_cl_fs_copy>
1c00c384:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[2] = gap_cl_readhwtimer();
	S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu(
1c00c388:	000aa503          	lw	a0,0(s5)
1c00c38c:	6599                	lui	a1,0x6
		((signed short * __restrict__) (cnn_ssd_L2_Memory+140784)), /* In */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+23040)), /* Filter */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+30128)), /* Bias */
1c00c38e:	5b0c0613          	addi	a2,s8,1456
	S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu(
1c00c392:	a0058593          	addi	a1,a1,-1536 # 5a00 <__rt_stack_size+0x5200>
1c00c396:	014506b3          	add	a3,a0,s4
1c00c39a:	962a                	add	a2,a2,a0
1c00c39c:	95aa                	add	a1,a1,a0
1c00c39e:	955a                	add	a0,a0,s6
	AT_GraphPerf[2] = gap_cl_readhwtimer();
1c00c3a0:	c41c                	sw	a5,8(s0)
	S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu(
1c00c3a2:	966fa0ef          	jal	ra,1c006508 <S9_Conv2d_16x16x3x3_MaxPool_2x2_Relu>
1c00c3a6:	0084a883          	lw	a7,8(s1)
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58864)) /* Out */
	);
	AT_GraphPerf[2] = gap_cl_readhwtimer() - AT_GraphPerf[2];
	/* Moving Conv_21_weights, size 41472 from HyperFlash at 552960 to (size 41472) L2 at 155120 using event 1 */
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 552960), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 155120), 41472, 0, &UchanHF1);
1c00c3aa:	000aae03          	lw	t3,0(s5)
	AT_GraphPerf[2] = gap_cl_readhwtimer() - AT_GraphPerf[2];
1c00c3ae:	441c                	lw	a5,8(s0)
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 552960), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 155120), 41472, 0, &UchanHF1);
1c00c3b0:	f7092583          	lw	a1,-144(s2)
1c00c3b4:	00026637          	lui	a2,0x26
1c00c3b8:	0189a503          	lw	a0,24(s3)
1c00c3bc:	df060613          	addi	a2,a2,-528 # 25df0 <__L1Cl+0x15df0>
1c00c3c0:	9672                	add	a2,a2,t3
1c00c3c2:	66a9                	lui	a3,0xa
1c00c3c4:	00087e37          	lui	t3,0x87
	AT_GraphPerf[2] = gap_cl_readhwtimer() - AT_GraphPerf[2];
1c00c3c8:	40f888b3          	sub	a7,a7,a5
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 552960), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 155120), 41472, 0, &UchanHF1);
1c00c3cc:	4705                	li	a4,1
1c00c3ce:	00bc                	addi	a5,sp,72
1c00c3d0:	20068693          	addi	a3,a3,512 # a200 <__rt_stack_size+0x9a00>
1c00c3d4:	95f2                	add	a1,a1,t3
	AT_GraphPerf[2] = gap_cl_readhwtimer() - AT_GraphPerf[2];
1c00c3d6:	01142423          	sw	a7,8(s0)
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 552960), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 155120), 41472, 0, &UchanHF1);
1c00c3da:	718010ef          	jal	ra,1c00daf2 <pi_cl_fs_copy>
1c00c3de:	0084a703          	lw	a4,8(s1)
	AT_GraphPerf[3] = gap_cl_readhwtimer();
	S12_Conv2d_32x16x3x3_Relu(
1c00c3e2:	000aa503          	lw	a0,0(s5)
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58864)), /* In */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+13824)), /* Filter */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58464)), /* Bias */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+69104)) /* Out */
1c00c3e6:	67c5                	lui	a5,0x11
	S12_Conv2d_32x16x3x3_Relu(
1c00c3e8:	658d                	lui	a1,0x3
		((signed short * __restrict__) (cnn_ssd_L2_Memory+69104)) /* Out */
1c00c3ea:	df078b13          	addi	s6,a5,-528 # 10df0 <__L1Cl+0xdf0>
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58464)), /* Bias */
1c00c3ee:	460b8613          	addi	a2,s7,1120
	S12_Conv2d_32x16x3x3_Relu(
1c00c3f2:	60058593          	addi	a1,a1,1536 # 3600 <__rt_stack_size+0x2e00>
1c00c3f6:	016506b3          	add	a3,a0,s6
1c00c3fa:	962a                	add	a2,a2,a0
1c00c3fc:	95aa                	add	a1,a1,a0
1c00c3fe:	9552                	add	a0,a0,s4
	AT_GraphPerf[3] = gap_cl_readhwtimer();
1c00c400:	c458                	sw	a4,12(s0)
	S12_Conv2d_32x16x3x3_Relu(
1c00c402:	fd8fa0ef          	jal	ra,1c006bda <S12_Conv2d_32x16x3x3_Relu>
1c00c406:	0084a703          	lw	a4,8(s1)
	);
	AT_GraphPerf[3] = gap_cl_readhwtimer() - AT_GraphPerf[3];
1c00c40a:	4454                	lw	a3,12(s0)
1c00c40c:	8f15                	sub	a4,a4,a3
1c00c40e:	c458                	sw	a4,12(s0)
1c00c410:	0084a703          	lw	a4,8(s1)
	AT_GraphPerf[4] = gap_cl_readhwtimer();
	S13_MaxPool_2x2(
1c00c414:	000aa503          	lw	a0,0(s5)
	AT_GraphPerf[4] = gap_cl_readhwtimer();
1c00c418:	c818                	sw	a4,16(s0)
	S13_MaxPool_2x2(
1c00c41a:	014505b3          	add	a1,a0,s4
1c00c41e:	955a                	add	a0,a0,s6
1c00c420:	e3dfa0ef          	jal	ra,1c00725c <S13_MaxPool_2x2>
1c00c424:	0084a483          	lw	s1,8(s1)
		((signed short * __restrict__) (cnn_ssd_L2_Memory+69104)), /* In */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58864)) /* Out */
	);
	AT_GraphPerf[4] = gap_cl_readhwtimer() - AT_GraphPerf[4];
1c00c428:	4818                	lw	a4,16(s0)
    while ((*(volatile char *)done) == 0)
1c00c42a:	03014783          	lbu	a5,48(sp)
1c00c42e:	8c99                	sub	s1,s1,a4
1c00c430:	c804                	sw	s1,16(s0)
1c00c432:	0ff7f793          	andi	a5,a5,255
1c00c436:	ef99                	bnez	a5,1c00c454 <cnn_ssdCNN+0x1b2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00c438:	4689                	li	a3,2
1c00c43a:	00204737          	lui	a4,0x204
1c00c43e:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00c442:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00c446:	00d72223          	sw	a3,4(a4)
1c00c44a:	03014783          	lbu	a5,48(sp)
1c00c44e:	0ff7f793          	andi	a5,a5,255
1c00c452:	d7f5                	beqz	a5,1c00c43e <cnn_ssdCNN+0x19c>
1c00c454:	102004b7          	lui	s1,0x10200
1c00c458:	40048493          	addi	s1,s1,1024 # 10200400 <__l1_end+0x2003d8>
1c00c45c:	0084a303          	lw	t1,8(s1)
	/* Waiting completion of transfer of Conv_14_weights using event 0 */
	AT_HYPERFLASH_FS_CL_WAIT(&HyperFlash, &UchanHF0);
	AT_GraphPerf[5] = gap_cl_readhwtimer();
	S24_Conv2d_64x32x3x3_Relu(
1c00c460:	000aa503          	lw	a0,0(s5)
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58864)), /* In */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+99824)), /* Filter */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58336)), /* Bias */
1c00c464:	6b39                	lui	s6,0xe
		((signed short * __restrict__) (cnn_ssd_L2_Memory+89584)) /* Out */
1c00c466:	67d9                	lui	a5,0x16
		((signed short * __restrict__) (cnn_ssd_L2_Memory+99824)), /* Filter */
1c00c468:	6a61                	lui	s4,0x18
		((signed short * __restrict__) (cnn_ssd_L2_Memory+89584)) /* Out */
1c00c46a:	df078793          	addi	a5,a5,-528 # 15df0 <__L1Cl+0x5df0>
		((signed short * __restrict__) (cnn_ssd_L2_Memory+99824)), /* Filter */
1c00c46e:	5f0a0a13          	addi	s4,s4,1520 # 185f0 <__L1Cl+0x85f0>
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58336)), /* Bias */
1c00c472:	3e0b0613          	addi	a2,s6,992 # e3e0 <__rt_stack_size+0xdbe0>
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58864)), /* In */
1c00c476:	5f0b0b93          	addi	s7,s6,1520
	S24_Conv2d_64x32x3x3_Relu(
1c00c47a:	00f506b3          	add	a3,a0,a5
1c00c47e:	962a                	add	a2,a2,a0
1c00c480:	014505b3          	add	a1,a0,s4
	AT_GraphPerf[5] = gap_cl_readhwtimer();
1c00c484:	00642a23          	sw	t1,20(s0)
	S24_Conv2d_64x32x3x3_Relu(
1c00c488:	955e                	add	a0,a0,s7
1c00c48a:	c63e                	sw	a5,12(sp)
1c00c48c:	deffb0ef          	jal	ra,1c00827a <S24_Conv2d_64x32x3x3_Relu>
1c00c490:	0084a683          	lw	a3,8(s1)
	);
	AT_GraphPerf[5] = gap_cl_readhwtimer() - AT_GraphPerf[5];
1c00c494:	4850                	lw	a2,20(s0)
1c00c496:	8e91                	sub	a3,a3,a2
1c00c498:	c854                	sw	a3,20(s0)
1c00c49a:	0084a683          	lw	a3,8(s1)
	AT_GraphPerf[6] = gap_cl_readhwtimer();
	S25_MaxPool_2x2(
1c00c49e:	000aa503          	lw	a0,0(s5)
1c00c4a2:	47b2                	lw	a5,12(sp)
	AT_GraphPerf[6] = gap_cl_readhwtimer();
1c00c4a4:	cc14                	sw	a3,24(s0)
	S25_MaxPool_2x2(
1c00c4a6:	017505b3          	add	a1,a0,s7
1c00c4aa:	953e                	add	a0,a0,a5
1c00c4ac:	adefc0ef          	jal	ra,1c00878a <S25_MaxPool_2x2>
1c00c4b0:	0084a783          	lw	a5,8(s1)
		((signed short * __restrict__) (cnn_ssd_L2_Memory+89584)), /* In */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58864)) /* Out */
	);
	AT_GraphPerf[6] = gap_cl_readhwtimer() - AT_GraphPerf[6];
1c00c4b4:	4c14                	lw	a3,24(s0)
1c00c4b6:	8f95                	sub	a5,a5,a3
1c00c4b8:	cc1c                	sw	a5,24(s0)
1c00c4ba:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[7] = gap_cl_readhwtimer();
	S36_Conv2d_128x64x3x3_Relu(
1c00c4be:	000aa503          	lw	a0,0(s5)
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58864)), /* In */
		((signed short * __restrict__) (cnn_ssd_L3_Flash+294912)), /* Filter */
1c00c4c2:	f7092583          	lw	a1,-144(s2)
	S36_Conv2d_128x64x3x3_Relu(
1c00c4c6:	66bd                	lui	a3,0xf
1c00c4c8:	00048337          	lui	t1,0x48
		((signed short * __restrict__) (cnn_ssd_L2_Memory+57824)), /* Bias */
1c00c4cc:	1e0b0613          	addi	a2,s6,480
	S36_Conv2d_128x64x3x3_Relu(
1c00c4d0:	16c1                	addi	a3,a3,-16
1c00c4d2:	96aa                	add	a3,a3,a0
1c00c4d4:	962a                	add	a2,a2,a0
1c00c4d6:	959a                	add	a1,a1,t1
1c00c4d8:	955e                	add	a0,a0,s7
	AT_GraphPerf[7] = gap_cl_readhwtimer();
1c00c4da:	cc5c                	sw	a5,28(s0)
	S36_Conv2d_128x64x3x3_Relu(
1c00c4dc:	ed9fc0ef          	jal	ra,1c0093b4 <S36_Conv2d_128x64x3x3_Relu>
1c00c4e0:	0084a483          	lw	s1,8(s1)
		((signed short * __restrict__) (cnn_ssd_L2_Memory+61424)) /* Out */
	);
	AT_GraphPerf[7] = gap_cl_readhwtimer() - AT_GraphPerf[7];
1c00c4e4:	4c5c                	lw	a5,28(s0)
	/* Moving Conv_22_weights, size 55296 from HyperFlash at 442368 to (size 55296) L2 at 99824 using event 0 */
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 442368), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 99824), 55296, 0, &UchanHF0);
1c00c4e6:	000aa603          	lw	a2,0(s5)
1c00c4ea:	f7092583          	lw	a1,-144(s2)
1c00c4ee:	0189a503          	lw	a0,24(s3)
1c00c4f2:	0006c8b7          	lui	a7,0x6c
	AT_GraphPerf[7] = gap_cl_readhwtimer() - AT_GraphPerf[7];
1c00c4f6:	8c9d                	sub	s1,s1,a5
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 442368), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 99824), 55296, 0, &UchanHF0);
1c00c4f8:	4705                	li	a4,1
1c00c4fa:	101c                	addi	a5,sp,32
1c00c4fc:	800b0693          	addi	a3,s6,-2048
1c00c500:	9652                	add	a2,a2,s4
1c00c502:	95c6                	add	a1,a1,a7
	AT_GraphPerf[7] = gap_cl_readhwtimer() - AT_GraphPerf[7];
1c00c504:	cc44                	sw	s1,28(s0)
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 442368), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 99824), 55296, 0, &UchanHF0);
1c00c506:	5ec010ef          	jal	ra,1c00daf2 <pi_cl_fs_copy>
1c00c50a:	05814783          	lbu	a5,88(sp)
1c00c50e:	0ff7f793          	andi	a5,a5,255
1c00c512:	ef99                	bnez	a5,1c00c530 <cnn_ssdCNN+0x28e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00c514:	4689                	li	a3,2
1c00c516:	00204737          	lui	a4,0x204
1c00c51a:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00c51e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00c522:	00d72223          	sw	a3,4(a4)
1c00c526:	05814783          	lbu	a5,88(sp)
1c00c52a:	0ff7f793          	andi	a5,a5,255
1c00c52e:	d7f5                	beqz	a5,1c00c51a <cnn_ssdCNN+0x278>
1c00c530:	102004b7          	lui	s1,0x10200
1c00c534:	40048493          	addi	s1,s1,1024 # 10200400 <__l1_end+0x2003d8>
1c00c538:	0084a703          	lw	a4,8(s1)
	/* Waiting completion of transfer of Conv_21_weights using event 1 */
	AT_HYPERFLASH_FS_CL_WAIT(&HyperFlash, &UchanHF1);
	AT_GraphPerf[8] = gap_cl_readhwtimer();
	S40_Conv2d_18x128x3x3(
1c00c53c:	000aa503          	lw	a0,0(s5)
1c00c540:	6639                	lui	a2,0xe
1c00c542:	000265b7          	lui	a1,0x26
1c00c546:	67bd                	lui	a5,0xf
1c00c548:	17c1                	addi	a5,a5,-16
1c00c54a:	5a860613          	addi	a2,a2,1448 # e5a8 <__rt_stack_size+0xdda8>
1c00c54e:	df058593          	addi	a1,a1,-528 # 25df0 <__L1Cl+0x15df0>
1c00c552:	962a                	add	a2,a2,a0
1c00c554:	95aa                	add	a1,a1,a0
1c00c556:	86ee                	mv	a3,s11
1c00c558:	953e                	add	a0,a0,a5
	AT_GraphPerf[8] = gap_cl_readhwtimer();
1c00c55a:	d018                	sw	a4,32(s0)
	S40_Conv2d_18x128x3x3(
1c00c55c:	e50fd0ef          	jal	ra,1c009bac <S40_Conv2d_18x128x3x3>
1c00c560:	0084a483          	lw	s1,8(s1)
		((signed short * __restrict__) (cnn_ssd_L2_Memory+61424)), /* In */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+155120)), /* Filter */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58792)), /* Bias */
		((signed short * __restrict__) Output_5) /* Out */
	);
	AT_GraphPerf[8] = gap_cl_readhwtimer() - AT_GraphPerf[8];
1c00c564:	5018                	lw	a4,32(s0)
1c00c566:	03014783          	lbu	a5,48(sp)
1c00c56a:	8c99                	sub	s1,s1,a4
1c00c56c:	d004                	sw	s1,32(s0)
1c00c56e:	0ff7f793          	andi	a5,a5,255
1c00c572:	ef99                	bnez	a5,1c00c590 <cnn_ssdCNN+0x2ee>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00c574:	4689                	li	a3,2
1c00c576:	00204737          	lui	a4,0x204
1c00c57a:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00c57e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00c582:	00d72223          	sw	a3,4(a4)
1c00c586:	03014783          	lbu	a5,48(sp)
1c00c58a:	0ff7f793          	andi	a5,a5,255
1c00c58e:	d7f5                	beqz	a5,1c00c57a <cnn_ssdCNN+0x2d8>
1c00c590:	102004b7          	lui	s1,0x10200
1c00c594:	40048493          	addi	s1,s1,1024 # 10200400 <__l1_end+0x2003d8>
1c00c598:	0084a783          	lw	a5,8(s1)
	/* Waiting completion of transfer of Conv_22_weights using event 0 */
	AT_HYPERFLASH_FS_CL_WAIT(&HyperFlash, &UchanHF0);
	AT_GraphPerf[9] = gap_cl_readhwtimer();
	S44_Conv2d_24x128x3x3(
1c00c59c:	000aa503          	lw	a0,0(s5)
		((signed short * __restrict__) (cnn_ssd_L2_Memory+61424)), /* In */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+99824)), /* Filter */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58624)), /* Bias */
1c00c5a0:	6a39                	lui	s4,0xe
		((signed short * __restrict__) (cnn_ssd_L2_Memory+61424)), /* In */
1c00c5a2:	6dbd                	lui	s11,0xf
	S44_Conv2d_24x128x3x3(
1c00c5a4:	65e1                	lui	a1,0x18
		((signed short * __restrict__) (cnn_ssd_L2_Memory+61424)), /* In */
1c00c5a6:	ff0d8313          	addi	t1,s11,-16 # eff0 <__rt_stack_size+0xe7f0>
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58624)), /* Bias */
1c00c5aa:	500a0613          	addi	a2,s4,1280 # e500 <__rt_stack_size+0xdd00>
	S44_Conv2d_24x128x3x3(
1c00c5ae:	5f058593          	addi	a1,a1,1520 # 185f0 <__L1Cl+0x85f0>
1c00c5b2:	962a                	add	a2,a2,a0
1c00c5b4:	95aa                	add	a1,a1,a0
	AT_GraphPerf[9] = gap_cl_readhwtimer();
1c00c5b6:	d05c                	sw	a5,36(s0)
	S44_Conv2d_24x128x3x3(
1c00c5b8:	86ea                	mv	a3,s10
1c00c5ba:	951a                	add	a0,a0,t1
1c00c5bc:	c61a                	sw	t1,12(sp)
1c00c5be:	da3fd0ef          	jal	ra,1c00a360 <S44_Conv2d_24x128x3x3>
1c00c5c2:	0084a883          	lw	a7,8(s1)
		((signed short * __restrict__) Output_6) /* Out */
	);
	AT_GraphPerf[9] = gap_cl_readhwtimer() - AT_GraphPerf[9];
	/* Moving Conv_16_weights, size 20736 from HyperFlash at 700416 to (size 20736) L2 at 144752 using event 0 */
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 700416), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 144752), 20736, 0, &UchanHF0);
1c00c5c6:	000aae03          	lw	t3,0(s5)
	AT_GraphPerf[9] = gap_cl_readhwtimer() - AT_GraphPerf[9];
1c00c5ca:	505c                	lw	a5,36(s0)
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 700416), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 144752), 20736, 0, &UchanHF0);
1c00c5cc:	f7092583          	lw	a1,-144(s2)
1c00c5d0:	00023637          	lui	a2,0x23
1c00c5d4:	0189a503          	lw	a0,24(s3)
1c00c5d8:	57060613          	addi	a2,a2,1392 # 23570 <__L1Cl+0x13570>
1c00c5dc:	9672                	add	a2,a2,t3
1c00c5de:	6695                	lui	a3,0x5
1c00c5e0:	000abe37          	lui	t3,0xab
	AT_GraphPerf[9] = gap_cl_readhwtimer() - AT_GraphPerf[9];
1c00c5e4:	40f888b3          	sub	a7,a7,a5
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 700416), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 144752), 20736, 0, &UchanHF0);
1c00c5e8:	4705                	li	a4,1
1c00c5ea:	101c                	addi	a5,sp,32
1c00c5ec:	10068693          	addi	a3,a3,256 # 5100 <__rt_stack_size+0x4900>
1c00c5f0:	95f2                	add	a1,a1,t3
	AT_GraphPerf[9] = gap_cl_readhwtimer() - AT_GraphPerf[9];
1c00c5f2:	03142223          	sw	a7,36(s0)
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 700416), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 144752), 20736, 0, &UchanHF0);
1c00c5f6:	4fc010ef          	jal	ra,1c00daf2 <pi_cl_fs_copy>
1c00c5fa:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[10] = gap_cl_readhwtimer();
	S37_MaxPool_2x2(
1c00c5fe:	000aa503          	lw	a0,0(s5)
1c00c602:	4332                	lw	t1,12(sp)
		((signed short * __restrict__) (cnn_ssd_L2_Memory+61424)), /* In */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58864)) /* Out */
1c00c604:	5f0a0d13          	addi	s10,s4,1520
	S37_MaxPool_2x2(
1c00c608:	01a505b3          	add	a1,a0,s10
1c00c60c:	951a                	add	a0,a0,t1
	AT_GraphPerf[10] = gap_cl_readhwtimer();
1c00c60e:	d41c                	sw	a5,40(s0)
	S37_MaxPool_2x2(
1c00c610:	bb6fd0ef          	jal	ra,1c0099c6 <S37_MaxPool_2x2>
1c00c614:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[10] = gap_cl_readhwtimer() - AT_GraphPerf[10];
1c00c618:	5414                	lw	a3,40(s0)
1c00c61a:	8f95                	sub	a5,a5,a3
1c00c61c:	d41c                	sw	a5,40(s0)
1c00c61e:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[11] = gap_cl_readhwtimer();
	S48_Conv2d_128x128x3x3_Relu(
1c00c622:	000aa503          	lw	a0,0(s5)
1c00c626:	f7092583          	lw	a1,-144(s2)
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58864)), /* In */
		((signed short * __restrict__) (cnn_ssd_L3_Flash+0)), /* Filter */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58080)), /* Bias */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+59888)) /* Out */
1c00c62a:	9f0d8d93          	addi	s11,s11,-1552
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58080)), /* Bias */
1c00c62e:	2e0a0613          	addi	a2,s4,736
	S48_Conv2d_128x128x3x3_Relu(
1c00c632:	01b506b3          	add	a3,a0,s11
1c00c636:	962a                	add	a2,a2,a0
1c00c638:	956a                	add	a0,a0,s10
	AT_GraphPerf[11] = gap_cl_readhwtimer();
1c00c63a:	d45c                	sw	a5,44(s0)
	S48_Conv2d_128x128x3x3_Relu(
1c00c63c:	b14fe0ef          	jal	ra,1c00a950 <S48_Conv2d_128x128x3x3_Relu>
1c00c640:	0084a783          	lw	a5,8(s1)
	);
	AT_GraphPerf[11] = gap_cl_readhwtimer() - AT_GraphPerf[11];
1c00c644:	5458                	lw	a4,44(s0)
1c00c646:	8f99                	sub	a5,a5,a4
1c00c648:	d45c                	sw	a5,44(s0)
1c00c64a:	0084a703          	lw	a4,8(s1)
	AT_GraphPerf[12] = gap_cl_readhwtimer();
	S51_Conv2d_18x128x3x3(
1c00c64e:	000aa503          	lw	a0,0(s5)
		((signed short * __restrict__) (cnn_ssd_L2_Memory+59888)), /* In */
		((signed short * __restrict__) (cnn_ssd_L3_Flash+594432)), /* Filter */
1c00c652:	f7092583          	lw	a1,-144(s2)
	S51_Conv2d_18x128x3x3(
1c00c656:	000917b7          	lui	a5,0x91
1c00c65a:	20078793          	addi	a5,a5,512 # 91200 <__L2+0x11200>
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58828)), /* Bias */
1c00c65e:	5cca0613          	addi	a2,s4,1484
	S51_Conv2d_18x128x3x3(
1c00c662:	962a                	add	a2,a2,a0
1c00c664:	86e6                	mv	a3,s9
1c00c666:	95be                	add	a1,a1,a5
1c00c668:	956e                	add	a0,a0,s11
	AT_GraphPerf[12] = gap_cl_readhwtimer();
1c00c66a:	d818                	sw	a4,48(s0)
	S51_Conv2d_18x128x3x3(
1c00c66c:	8e3fe0ef          	jal	ra,1c00af4e <S51_Conv2d_18x128x3x3>
1c00c670:	0084a783          	lw	a5,8(s1)
		((signed short * __restrict__) Output_7) /* Out */
	);
	AT_GraphPerf[12] = gap_cl_readhwtimer() - AT_GraphPerf[12];
1c00c674:	5818                	lw	a4,48(s0)
1c00c676:	8f99                	sub	a5,a5,a4
1c00c678:	d81c                	sw	a5,48(s0)
1c00c67a:	0084a703          	lw	a4,8(s1)
	AT_GraphPerf[13] = gap_cl_readhwtimer();
	S55_Conv2d_24x128x3x3(
1c00c67e:	000aa503          	lw	a0,0(s5)
		((signed short * __restrict__) (cnn_ssd_L2_Memory+59888)), /* In */
		((signed short * __restrict__) (cnn_ssd_L3_Flash+497664)), /* Filter */
1c00c682:	f7092583          	lw	a1,-144(s2)
	S55_Conv2d_24x128x3x3(
1c00c686:	56ca                	lw	a3,176(sp)
1c00c688:	0007a7b7          	lui	a5,0x7a
1c00c68c:	80078793          	addi	a5,a5,-2048 # 79800 <__L1Cl+0x69800>
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58672)), /* Bias */
1c00c690:	530a0613          	addi	a2,s4,1328
	S55_Conv2d_24x128x3x3(
1c00c694:	962a                	add	a2,a2,a0
1c00c696:	95be                	add	a1,a1,a5
1c00c698:	956e                	add	a0,a0,s11
	AT_GraphPerf[13] = gap_cl_readhwtimer();
1c00c69a:	d858                	sw	a4,52(s0)
	S55_Conv2d_24x128x3x3(
1c00c69c:	d8ffe0ef          	jal	ra,1c00b42a <S55_Conv2d_24x128x3x3>
1c00c6a0:	0084a483          	lw	s1,8(s1)
		((signed short * __restrict__) Output_8) /* Out */
	);
	AT_GraphPerf[13] = gap_cl_readhwtimer() - AT_GraphPerf[13];
	/* Moving Conv_11_weights, size 10368 from HyperFlash at 734976 to (size 10368) L2 at 127472 using event 1 */
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 734976), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 127472), 10368, 0, &UchanHF1);
1c00c6a4:	000aa583          	lw	a1,0(s5)
1c00c6a8:	667d                	lui	a2,0x1f
	AT_GraphPerf[13] = gap_cl_readhwtimer() - AT_GraphPerf[13];
1c00c6aa:	585c                	lw	a5,52(s0)
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 734976), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 127472), 10368, 0, &UchanHF1);
1c00c6ac:	f7092883          	lw	a7,-144(s2)
1c00c6b0:	1f060613          	addi	a2,a2,496 # 1f1f0 <__L1Cl+0xf1f0>
1c00c6b4:	962e                	add	a2,a2,a1
1c00c6b6:	0189a503          	lw	a0,24(s3)
1c00c6ba:	000b35b7          	lui	a1,0xb3
1c00c6be:	668d                	lui	a3,0x3
1c00c6c0:	70058593          	addi	a1,a1,1792 # b3700 <__L2+0x33700>
	AT_GraphPerf[13] = gap_cl_readhwtimer() - AT_GraphPerf[13];
1c00c6c4:	8c9d                	sub	s1,s1,a5
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 734976), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 127472), 10368, 0, &UchanHF1);
1c00c6c6:	4705                	li	a4,1
1c00c6c8:	00bc                	addi	a5,sp,72
1c00c6ca:	88068693          	addi	a3,a3,-1920 # 2880 <__rt_stack_size+0x2080>
1c00c6ce:	95c6                	add	a1,a1,a7
	AT_GraphPerf[13] = gap_cl_readhwtimer() - AT_GraphPerf[13];
1c00c6d0:	d844                	sw	s1,52(s0)
	AT_HYPERFLASH_FS_CL_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) cnn_ssd_L3_Flash + 734976), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) cnn_ssd_L2_Memory + 127472), 10368, 0, &UchanHF1);
1c00c6d2:	420010ef          	jal	ra,1c00daf2 <pi_cl_fs_copy>
1c00c6d6:	03014783          	lbu	a5,48(sp)
1c00c6da:	0ff7f793          	andi	a5,a5,255
1c00c6de:	ef99                	bnez	a5,1c00c6fc <cnn_ssdCNN+0x45a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00c6e0:	4689                	li	a3,2
1c00c6e2:	00204737          	lui	a4,0x204
1c00c6e6:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00c6ea:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00c6ee:	00d72223          	sw	a3,4(a4)
1c00c6f2:	03014783          	lbu	a5,48(sp)
1c00c6f6:	0ff7f793          	andi	a5,a5,255
1c00c6fa:	d7f5                	beqz	a5,1c00c6e6 <cnn_ssdCNN+0x444>
1c00c6fc:	102004b7          	lui	s1,0x10200
1c00c700:	40048493          	addi	s1,s1,1024 # 10200400 <__l1_end+0x2003d8>
1c00c704:	0084a783          	lw	a5,8(s1)
	/* Waiting completion of transfer of Conv_16_weights using event 0 */
	AT_HYPERFLASH_FS_CL_WAIT(&HyperFlash, &UchanHF0);
	AT_GraphPerf[14] = gap_cl_readhwtimer();
	S28_Conv2d_18x64x3x3(
1c00c708:	000aa503          	lw	a0,0(s5)
		((signed short * __restrict__) (cnn_ssd_L2_Memory+89584)), /* In */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+144752)), /* Filter */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58756)), /* Bias */
1c00c70c:	69b9                	lui	s3,0xe
	S28_Conv2d_18x64x3x3(
1c00c70e:	46e2                	lw	a3,24(sp)
		((signed short * __restrict__) (cnn_ssd_L2_Memory+89584)), /* In */
1c00c710:	6959                	lui	s2,0x16
	S28_Conv2d_18x64x3x3(
1c00c712:	000235b7          	lui	a1,0x23
		((signed short * __restrict__) (cnn_ssd_L2_Memory+89584)), /* In */
1c00c716:	df090913          	addi	s2,s2,-528 # 15df0 <__L1Cl+0x5df0>
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58756)), /* Bias */
1c00c71a:	58498613          	addi	a2,s3,1412 # e584 <__rt_stack_size+0xdd84>
	S28_Conv2d_18x64x3x3(
1c00c71e:	57058593          	addi	a1,a1,1392 # 23570 <__L1Cl+0x13570>
1c00c722:	962a                	add	a2,a2,a0
1c00c724:	95aa                	add	a1,a1,a0
1c00c726:	954a                	add	a0,a0,s2
	AT_GraphPerf[14] = gap_cl_readhwtimer();
1c00c728:	dc1c                	sw	a5,56(s0)
	S28_Conv2d_18x64x3x3(
1c00c72a:	a4efc0ef          	jal	ra,1c008978 <S28_Conv2d_18x64x3x3>
1c00c72e:	0084a783          	lw	a5,8(s1)
		((signed short * __restrict__) Output_3) /* Out */
	);
	AT_GraphPerf[14] = gap_cl_readhwtimer() - AT_GraphPerf[14];
1c00c732:	5c18                	lw	a4,56(s0)
1c00c734:	8f99                	sub	a5,a5,a4
1c00c736:	dc1c                	sw	a5,56(s0)
1c00c738:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[15] = gap_cl_readhwtimer();
	S32_Conv2d_24x64x3x3(
1c00c73c:	000aa503          	lw	a0,0(s5)
1c00c740:	46f2                	lw	a3,28(sp)
1c00c742:	659d                	lui	a1,0x7
		((signed short * __restrict__) (cnn_ssd_L2_Memory+89584)), /* In */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+30176)), /* Filter */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58576)), /* Bias */
1c00c744:	4d098613          	addi	a2,s3,1232
	S32_Conv2d_24x64x3x3(
1c00c748:	5e058593          	addi	a1,a1,1504 # 75e0 <__rt_stack_size+0x6de0>
1c00c74c:	962a                	add	a2,a2,a0
1c00c74e:	95aa                	add	a1,a1,a0
1c00c750:	954a                	add	a0,a0,s2
	AT_GraphPerf[15] = gap_cl_readhwtimer();
1c00c752:	dc5c                	sw	a5,60(s0)
	S32_Conv2d_24x64x3x3(
1c00c754:	e66fc0ef          	jal	ra,1c008dba <S32_Conv2d_24x64x3x3>
1c00c758:	0084a483          	lw	s1,8(s1)
		((signed short * __restrict__) Output_4) /* Out */
	);
	AT_GraphPerf[15] = gap_cl_readhwtimer() - AT_GraphPerf[15];
1c00c75c:	5c58                	lw	a4,60(s0)
1c00c75e:	05814783          	lbu	a5,88(sp)
1c00c762:	8c99                	sub	s1,s1,a4
1c00c764:	dc44                	sw	s1,60(s0)
1c00c766:	0ff7f793          	andi	a5,a5,255
1c00c76a:	ef99                	bnez	a5,1c00c788 <cnn_ssdCNN+0x4e6>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00c76c:	4689                	li	a3,2
1c00c76e:	00204737          	lui	a4,0x204
1c00c772:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00c776:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00c77a:	00d72223          	sw	a3,4(a4)
1c00c77e:	05814783          	lbu	a5,88(sp)
1c00c782:	0ff7f793          	andi	a5,a5,255
1c00c786:	d7f5                	beqz	a5,1c00c772 <cnn_ssdCNN+0x4d0>
1c00c788:	102004b7          	lui	s1,0x10200
1c00c78c:	40048493          	addi	s1,s1,1024 # 10200400 <__l1_end+0x2003d8>
1c00c790:	0084a783          	lw	a5,8(s1)
	/* Waiting completion of transfer of Conv_11_weights using event 1 */
	AT_HYPERFLASH_FS_CL_WAIT(&HyperFlash, &UchanHF1);
	AT_GraphPerf[16] = gap_cl_readhwtimer();
	S16_Conv2d_18x32x3x3(
1c00c794:	000aa503          	lw	a0,0(s5)
		((signed short * __restrict__) (cnn_ssd_L2_Memory+69104)), /* In */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+127472)), /* Filter */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58720)), /* Bias */
1c00c798:	69b9                	lui	s3,0xe
	S16_Conv2d_18x32x3x3(
1c00c79a:	46c2                	lw	a3,16(sp)
		((signed short * __restrict__) (cnn_ssd_L2_Memory+69104)), /* In */
1c00c79c:	6945                	lui	s2,0x11
	S16_Conv2d_18x32x3x3(
1c00c79e:	65fd                	lui	a1,0x1f
		((signed short * __restrict__) (cnn_ssd_L2_Memory+69104)), /* In */
1c00c7a0:	df090913          	addi	s2,s2,-528 # 10df0 <__L1Cl+0xdf0>
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58720)), /* Bias */
1c00c7a4:	56098613          	addi	a2,s3,1376 # e560 <__rt_stack_size+0xdd60>
	S16_Conv2d_18x32x3x3(
1c00c7a8:	1f058593          	addi	a1,a1,496 # 1f1f0 <__L1Cl+0xf1f0>
1c00c7ac:	962a                	add	a2,a2,a0
1c00c7ae:	95aa                	add	a1,a1,a0
1c00c7b0:	954a                	add	a0,a0,s2
	AT_GraphPerf[16] = gap_cl_readhwtimer();
1c00c7b2:	c03c                	sw	a5,64(s0)
	S16_Conv2d_18x32x3x3(
1c00c7b4:	c81fa0ef          	jal	ra,1c007434 <S16_Conv2d_18x32x3x3>
1c00c7b8:	0084a783          	lw	a5,8(s1)
		((signed short * __restrict__) Output_1) /* Out */
	);
	AT_GraphPerf[16] = gap_cl_readhwtimer() - AT_GraphPerf[16];
1c00c7bc:	4038                	lw	a4,64(s0)
1c00c7be:	8f99                	sub	a5,a5,a4
1c00c7c0:	c03c                	sw	a5,64(s0)
1c00c7c2:	0084a783          	lw	a5,8(s1)
	AT_GraphPerf[17] = gap_cl_readhwtimer();
	S20_Conv2d_24x32x3x3(
1c00c7c6:	000aa583          	lw	a1,0(s5)
1c00c7ca:	46d2                	lw	a3,20(sp)
		((signed short * __restrict__) (cnn_ssd_L2_Memory+69104)), /* In */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+0)), /* Filter */
		((signed short * __restrict__) (cnn_ssd_L2_Memory+58528)), /* Bias */
1c00c7cc:	4a098613          	addi	a2,s3,1184
	S20_Conv2d_24x32x3x3(
1c00c7d0:	962e                	add	a2,a2,a1
1c00c7d2:	01258533          	add	a0,a1,s2
	AT_GraphPerf[17] = gap_cl_readhwtimer();
1c00c7d6:	c07c                	sw	a5,68(s0)
	S20_Conv2d_24x32x3x3(
1c00c7d8:	b9cfb0ef          	jal	ra,1c007b74 <S20_Conv2d_24x32x3x3>
1c00c7dc:	0084a483          	lw	s1,8(s1)
		((signed short * __restrict__) Output_2) /* Out */
	);
	AT_GraphPerf[17] = gap_cl_readhwtimer() - AT_GraphPerf[17];
1c00c7e0:	407c                	lw	a5,68(s0)
	return 0;
}
1c00c7e2:	50ba                	lw	ra,172(sp)
1c00c7e4:	590a                	lw	s2,160(sp)
	AT_GraphPerf[17] = gap_cl_readhwtimer() - AT_GraphPerf[17];
1c00c7e6:	8c9d                	sub	s1,s1,a5
1c00c7e8:	c064                	sw	s1,68(s0)
}
1c00c7ea:	542a                	lw	s0,168(sp)
1c00c7ec:	549a                	lw	s1,164(sp)
1c00c7ee:	49fa                	lw	s3,156(sp)
1c00c7f0:	4a6a                	lw	s4,152(sp)
1c00c7f2:	4ada                	lw	s5,148(sp)
1c00c7f4:	4b4a                	lw	s6,144(sp)
1c00c7f6:	4bba                	lw	s7,140(sp)
1c00c7f8:	4c2a                	lw	s8,136(sp)
1c00c7fa:	4c9a                	lw	s9,132(sp)
1c00c7fc:	4d0a                	lw	s10,128(sp)
1c00c7fe:	5df6                	lw	s11,124(sp)
1c00c800:	4501                	li	a0,0
1c00c802:	614d                	addi	sp,sp,176
1c00c804:	8082                	ret

1c00c806 <KerReductIO_Compact_fp>:
		int Input1 = AT_NORM(Input*LEAK_CONSTANT, LEAK_CONSTANT_FORMAT);
		int Acc0 = gap_clip(Neg*Input1+Pos*Input, 15);
		Os[i] = Acc0;
	}
	gap_waitbarrier(0);
}
1c00c806:	1101                	addi	sp,sp,-32
1c00c808:	cc26                	sw	s1,24(sp)
1c00c80a:	f14024f3          	csrr	s1,mhartid
1c00c80e:	f83637b3          	p.bclr	a5,a2,28,3
1c00c812:	00365713          	srli	a4,a2,0x3
1c00c816:	00f037b3          	snez	a5,a5
1c00c81a:	97ba                	add	a5,a5,a4
1c00c81c:	c80494b3          	p.extractu	s1,s1,4,0
1c00c820:	02f48733          	mul	a4,s1,a5
1c00c824:	ce22                	sw	s0,28(sp)
1c00c826:	ca4a                	sw	s2,20(sp)
1c00c828:	c84e                	sw	s3,16(sp)
1c00c82a:	c652                	sw	s4,12(sp)
1c00c82c:	c456                	sw	s5,8(sp)
1c00c82e:	c25a                	sw	s6,4(sp)
1c00c830:	c05e                	sw	s7,0(sp)
1c00c832:	00f70e33          	add	t3,a4,a5
1c00c836:	04ce4e33          	p.min	t3,t3,a2
1c00c83a:	40ee0e33          	sub	t3,t3,a4
1c00c83e:	0cd65263          	ble	a3,a2,1c00c902 <KerReductIO_Compact_fp+0xfc>
1c00c842:	800004b7          	lui	s1,0x80000
1c00c846:	040e6e33          	p.max	t3,t3,zero
1c00c84a:	fff4c493          	not	s1,s1
1c00c84e:	002e5913          	srli	s2,t3,0x2
1c00c852:	c20e3fb3          	p.bclr	t6,t3,1,0
1c00c856:	94f2                	add	s1,s1,t3
1c00c858:	00171393          	slli	t2,a4,0x1
1c00c85c:	94ba                	add	s1,s1,a4
1c00c85e:	9fba                	add	t6,t6,a4
1c00c860:	00261a13          	slli	s4,a2,0x2
1c00c864:	00161993          	slli	s3,a2,0x1
1c00c868:	00391a93          	slli	s5,s2,0x3
1c00c86c:	00149793          	slli	a5,s1,0x1
1c00c870:	001f9713          	slli	a4,t6,0x1
1c00c874:	014582b3          	add	t0,a1,s4
1c00c878:	01350fb3          	add	t6,a0,s3
1c00c87c:	9a9e                	add	s5,s5,t2
1c00c87e:	00438493          	addi	s1,t2,4
1c00c882:	00204bb7          	lui	s7,0x204
1c00c886:	002e7b13          	andi	s6,t3,2
1c00c88a:	00f28f33          	add	t5,t0,a5
1c00c88e:	00ff8eb3          	add	t4,t6,a5
1c00c892:	fc1e3e33          	p.bclr	t3,t3,30,1
1c00c896:	92ba                	add	t0,t0,a4
1c00c898:	9fba                	add	t6,t6,a4
1c00c89a:	40fa8ab3          	sub	s5,s5,a5
1c00c89e:	8432                	mv	s0,a2
1c00c8a0:	40f383b3          	sub	t2,t2,a5
1c00c8a4:	8c9d                	sub	s1,s1,a5
1c00c8a6:	200b8b93          	addi	s7,s7,512 # 204200 <__L2+0x184200>
1c00c8aa:	02090963          	beqz	s2,1c00c8dc <KerReductIO_Compact_fp+0xd6>
1c00c8ae:	407a87b3          	sub	a5,s5,t2
1c00c8b2:	17e1                	addi	a5,a5,-8
1c00c8b4:	838d                	srli	a5,a5,0x3
1c00c8b6:	007e8833          	add	a6,t4,t2
1c00c8ba:	009f0533          	add	a0,t5,s1
1c00c8be:	01d485b3          	add	a1,s1,t4
1c00c8c2:	007f0733          	add	a4,t5,t2
1c00c8c6:	0785                	addi	a5,a5,1
1c00c8c8:	0087c0fb          	lp.setup	x1,a5,1c00c8d8 <KerReductIO_Compact_fp+0xd2>
1c00c8cc:	0087230b          	p.lw	t1,8(a4!)
1c00c8d0:	0085288b          	p.lw	a7,8(a0!) # 30008 <__L1Cl+0x20008>
1c00c8d4:	0068242b          	p.sw	t1,8(a6!)
1c00c8d8:	0115a42b          	p.sw	a7,8(a1!)
1c00c8dc:	000b0663          	beqz	s6,1c00c8e8 <KerReductIO_Compact_fp+0xe2>
1c00c8e0:	0002d783          	lhu	a5,0(t0)
1c00c8e4:	00ff9023          	sh	a5,0(t6)
1c00c8e8:	020e0763          	beqz	t3,1c00c916 <KerReductIO_Compact_fp+0x110>
1c00c8ec:	414f778b          	p.lbu	a5,s4(t5!)
1c00c8f0:	00fec9ab          	p.sb	a5,s3(t4!)
1c00c8f4:	01cbe783          	p.elw	a5,28(s7)
1c00c8f8:	9432                	add	s0,s0,a2
1c00c8fa:	92d2                	add	t0,t0,s4
1c00c8fc:	9fce                	add	t6,t6,s3
1c00c8fe:	fad446e3          	blt	s0,a3,1c00c8aa <KerReductIO_Compact_fp+0xa4>
1c00c902:	4472                	lw	s0,28(sp)
1c00c904:	44e2                	lw	s1,24(sp)
1c00c906:	4952                	lw	s2,20(sp)
1c00c908:	49c2                	lw	s3,16(sp)
1c00c90a:	4a32                	lw	s4,12(sp)
1c00c90c:	4aa2                	lw	s5,8(sp)
1c00c90e:	4b12                	lw	s6,4(sp)
1c00c910:	4b82                	lw	s7,0(sp)
1c00c912:	6105                	addi	sp,sp,32
1c00c914:	8082                	ret
1c00c916:	01cbe783          	p.elw	a5,28(s7)
1c00c91a:	9432                	add	s0,s0,a2
1c00c91c:	9f52                	add	t5,t5,s4
1c00c91e:	9ece                	add	t4,t4,s3
1c00c920:	92d2                	add	t0,t0,s4
1c00c922:	9fce                	add	t6,t6,s3
1c00c924:	f8d443e3          	blt	s0,a3,1c00c8aa <KerReductIO_Compact_fp+0xa4>
1c00c928:	bfe9                	j	1c00c902 <KerReductIO_Compact_fp+0xfc>

1c00c92a <KerParSetBias_DP_fp>:
1c00c92a:	00855603          	lhu	a2,8(a0)
1c00c92e:	f14026f3          	csrr	a3,mhartid
1c00c932:	4118                	lw	a4,0(a0)
1c00c934:	f83637b3          	p.bclr	a5,a2,28,3
1c00c938:	00365593          	srli	a1,a2,0x3
1c00c93c:	00f037b3          	snez	a5,a5
1c00c940:	97ae                	add	a5,a5,a1
1c00c942:	c80696b3          	p.extractu	a3,a3,4,0
1c00c946:	02f686b3          	mul	a3,a3,a5
1c00c94a:	00455303          	lhu	t1,4(a0)
1c00c94e:	00655583          	lhu	a1,6(a0)
1c00c952:	00c52803          	lw	a6,12(a0)
1c00c956:	00a50e83          	lb	t4,10(a0)
1c00c95a:	97b6                	add	a5,a5,a3
1c00c95c:	04c7c7b3          	p.min	a5,a5,a2
1c00c960:	06f6f863          	bleu	a5,a3,1c00c9d0 <KerParSetBias_DP_fp+0xa6>
1c00c964:	02b30333          	mul	t1,t1,a1
1c00c968:	00169613          	slli	a2,a3,0x1
1c00c96c:	00179593          	slli	a1,a5,0x1
1c00c970:	8d91                	sub	a1,a1,a2
1c00c972:	15f9                	addi	a1,a1,-2
1c00c974:	8185                	srli	a1,a1,0x1
1c00c976:	4e11                	li	t3,4
1c00c978:	9832                	add	a6,a6,a2
1c00c97a:	0585                	addi	a1,a1,1
1c00c97c:	00231f93          	slli	t6,t1,0x2
1c00c980:	ffcf8893          	addi	a7,t6,-4
1c00c984:	8546                	mv	a0,a7
1c00c986:	42df8533          	p.mac	a0,t6,a3
1c00c98a:	00135313          	srli	t1,t1,0x1
1c00c98e:	00331f13          	slli	t5,t1,0x3
1c00c992:	411f0f33          	sub	t5,t5,a7
1c00c996:	411e0e33          	sub	t3,t3,a7
1c00c99a:	953a                	add	a0,a0,a4
1c00c99c:	0195c07b          	lp.setup	x0,a1,1c00c9ce <KerParSetBias_DP_fp+0xa4>
1c00c9a0:	0028170b          	p.lh	a4,2(a6!)
1c00c9a4:	01d71733          	sll	a4,a4,t4
1c00c9a8:	02030163          	beqz	t1,1c00c9ca <KerParSetBias_DP_fp+0xa0>
1c00c9ac:	01e887b3          	add	a5,a7,t5
1c00c9b0:	17e1                	addi	a5,a5,-8
1c00c9b2:	838d                	srli	a5,a5,0x3
1c00c9b4:	00ae0633          	add	a2,t3,a0
1c00c9b8:	411506b3          	sub	a3,a0,a7
1c00c9bc:	0785                	addi	a5,a5,1
1c00c9be:	0047c0fb          	lp.setup	x1,a5,1c00c9c6 <KerParSetBias_DP_fp+0x9c>
1c00c9c2:	00e6a42b          	p.sw	a4,8(a3!)
1c00c9c6:	00e6242b          	p.sw	a4,8(a2!)
1c00c9ca:	00e56fab          	p.sw	a4,t6(a0!)
1c00c9ce:	0001                	nop
1c00c9d0:	002047b7          	lui	a5,0x204
1c00c9d4:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00c9d8:	01c7e703          	p.elw	a4,28(a5)
1c00c9dc:	8082                	ret

1c00c9de <KerDP_fp>:
1c00c9de:	00655703          	lhu	a4,6(a0)
1c00c9e2:	00455803          	lhu	a6,4(a0)
1c00c9e6:	00e55783          	lhu	a5,14(a0)
1c00c9ea:	f14025f3          	csrr	a1,mhartid
1c00c9ee:	00e8085b          	p.mac	a6,a6,a4,zero
1c00c9f2:	00052e03          	lw	t3,0(a0)
1c00c9f6:	c80595b3          	p.extractu	a1,a1,4,0
1c00c9fa:	00852f03          	lw	t5,8(a0)
1c00c9fe:	01052303          	lw	t1,16(a0)
1c00ca02:	01452883          	lw	a7,20(a0)
1c00ca06:	00c54e83          	lbu	t4,12(a0)
1c00ca0a:	02f80833          	mul	a6,a6,a5
1c00ca0e:	f83837b3          	p.bclr	a5,a6,28,3
1c00ca12:	00385713          	srli	a4,a6,0x3
1c00ca16:	00f037b3          	snez	a5,a5
1c00ca1a:	97ba                	add	a5,a5,a4
1c00ca1c:	02f585b3          	mul	a1,a1,a5
1c00ca20:	97ae                	add	a5,a5,a1
1c00ca22:	0507c833          	p.min	a6,a5,a6
1c00ca26:	40b80fb3          	sub	t6,a6,a1
1c00ca2a:	040fefb3          	p.max	t6,t6,zero
1c00ca2e:	01ffd793          	srli	a5,t6,0x1f
1c00ca32:	00259513          	slli	a0,a1,0x2
1c00ca36:	03f7a7db          	p.addn	a5,a5,t6,1
1c00ca3a:	9572                	add	a0,a0,t3
1c00ca3c:	0586                	slli	a1,a1,0x1
1c00ca3e:	04f05163          	blez	a5,1c00ca80 <KerDP_fp+0xa2>
1c00ca42:	00379693          	slli	a3,a5,0x3
1c00ca46:	16e1                	addi	a3,a3,-8
1c00ca48:	828d                	srli	a3,a3,0x3
1c00ca4a:	8676                	mv	a2,t4
1c00ca4c:	95fa                	add	a1,a1,t5
1c00ca4e:	00450293          	addi	t0,a0,4
1c00ca52:	0685                	addi	a3,a3,1
1c00ca54:	0146c0fb          	lp.setup	x1,a3,1c00ca7c <KerDP_fp+0x9e>
1c00ca58:	0082a70b          	p.lw	a4,8(t0!)
1c00ca5c:	0085278b          	p.lw	a5,8(a0!)
1c00ca60:	40c0675b          	p.mac.zh.sl	a4,zero,a2,zero
1c00ca64:	40c067db          	p.mac.zh.sl	a5,zero,a2,zero
1c00ca68:	0467e7b3          	p.max	a5,a5,t1
1c00ca6c:	04676733          	p.max	a4,a4,t1
1c00ca70:	0517c7b3          	p.min	a5,a5,a7
1c00ca74:	05174733          	p.min	a4,a4,a7
1c00ca78:	d0f707d7          	pv.pack.h	a5,a4,a5
1c00ca7c:	00f5a22b          	p.sw	a5,4(a1!)
1c00ca80:	fc1fbfb3          	p.bclr	t6,t6,30,1
1c00ca84:	020f8163          	beqz	t6,1c00caa6 <KerDP_fp+0xc8>
1c00ca88:	00281793          	slli	a5,a6,0x2
1c00ca8c:	17f1                	addi	a5,a5,-4
1c00ca8e:	20fe7e03          	p.lw	t3,a5(t3)
1c00ca92:	0806                	slli	a6,a6,0x1
1c00ca94:	1879                	addi	a6,a6,-2
1c00ca96:	41d06e5b          	p.mac.zh.sl	t3,zero,t4,zero
1c00ca9a:	046e6333          	p.max	t1,t3,t1
1c00ca9e:	051348b3          	p.min	a7,t1,a7
1c00caa2:	011f5823          	p.sh	a7,a6(t5)
1c00caa6:	002047b7          	lui	a5,0x204
1c00caaa:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00caae:	01c7e703          	p.elw	a4,28(a5)
1c00cab2:	8082                	ret

1c00cab4 <KerDP_IO_fp>:
	   NormBias: m
	   LB, UB: in o format
	*/
	int * __restrict__ In = Arg->In;
	short int * __restrict__ Out = Arg->Out;
	int S = Arg->W*Arg->H*Arg->InFeatures;
1c00cab4:	00455683          	lhu	a3,4(a0)
1c00cab8:	00655703          	lhu	a4,6(a0)
1c00cabc:	00e55783          	lhu	a5,14(a0)
	int LB = Arg->LB, UB = Arg->UB;
	unsigned int Norm = Arg->Norm;
	int i,j,k,U,A,B,Log2Core;
       	unsigned int CoreId = gap_coreid();
1c00cac0:	f14028f3          	csrr	a7,mhartid
	int S = Arg->W*Arg->H*Arg->InFeatures;
1c00cac4:	00e686db          	p.mac	a3,a3,a4,zero
	int * __restrict__ In = Arg->In;
1c00cac8:	410c                	lw	a1,0(a0)
       	unsigned int CoreId = gap_coreid();
1c00caca:	c80898b3          	p.extractu	a7,a7,4,0
	int LB = Arg->LB, UB = Arg->UB;
1c00cace:	01052e83          	lw	t4,16(a0)
1c00cad2:	01452e03          	lw	t3,20(a0)
	unsigned int Norm = Arg->Norm;
1c00cad6:	00c54383          	lbu	t2,12(a0)
	int S = Arg->W*Arg->H*Arg->InFeatures;
1c00cada:	02f686b3          	mul	a3,a3,a5
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c00cade:	f836b633          	p.bclr	a2,a3,28,3
1c00cae2:	0036d793          	srli	a5,a3,0x3
1c00cae6:	00c03633          	snez	a2,a2
1c00caea:	963e                	add	a2,a2,a5
       	unsigned int ChunkCell = ChunkSize(S);
       	unsigned int First = CoreId*ChunkCell;
1c00caec:	02c888b3          	mul	a7,a7,a2
       	unsigned int Last  = Min(First+ChunkCell, S);
1c00caf0:	00c88333          	add	t1,a7,a2
1c00caf4:	04d34333          	p.min	t1,t1,a3
	int Size = Max(0, Last-First);
1c00caf8:	41130333          	sub	t1,t1,a7
1c00cafc:	04036333          	p.max	t1,t1,zero

	/* First normalize In, each parallel chunk overwrites it's own input
	   After we are done In contains groups of contiguous normalized values
	   each group beeing followed by an empty group of exactly the same size, these
	   one need to be supressed, second step is taking care of this reduction */
	for (i=0; i<(Size/2); i++) {
1c00cb00:	01f35793          	srli	a5,t1,0x1f
	int *I = &In[First];
1c00cb04:	088a                	slli	a7,a7,0x2
	for (i=0; i<(Size/2); i++) {
1c00cb06:	0267a7db          	p.addn	a5,a5,t1,1
	int *I = &In[First];
1c00cb0a:	98ae                	add	a7,a7,a1
	for (i=0; i<(Size/2); i++) {
1c00cb0c:	04f05263          	blez	a5,1c00cb50 <KerDP_IO_fp+0x9c>
1c00cb10:	00379513          	slli	a0,a5,0x3
1c00cb14:	1561                	addi	a0,a0,-8
1c00cb16:	810d                	srli	a0,a0,0x3
1c00cb18:	881e                	mv	a6,t2
1c00cb1a:	82c6                	mv	t0,a7
1c00cb1c:	00488f93          	addi	t6,a7,4 # 6c004 <__L1Cl+0x5c004>
1c00cb20:	8f46                	mv	t5,a7
1c00cb22:	0505                	addi	a0,a0,1
1c00cb24:	014540fb          	lp.setup	x1,a0,1c00cb4c <KerDP_IO_fp+0x98>
		int Acc0 = I[2*i], Acc1 = I[2*i+1];
1c00cb28:	008fa70b          	p.lw	a4,8(t6!)
		Acc0 = Min(Max(AT_NORM(Acc0, Norm), LB), UB); Acc1 = Min(Max(AT_NORM(Acc1, Norm), LB), UB);
1c00cb2c:	008f278b          	p.lw	a5,8(t5!)
1c00cb30:	4100675b          	p.mac.zh.sl	a4,zero,a6,zero
1c00cb34:	410067db          	p.mac.zh.sl	a5,zero,a6,zero
1c00cb38:	05d7e7b3          	p.max	a5,a5,t4
1c00cb3c:	05d76733          	p.max	a4,a4,t4
1c00cb40:	05c7c7b3          	p.min	a5,a5,t3
1c00cb44:	05c74733          	p.min	a4,a4,t3
		O[i] = gap_pack2(Acc0, Acc1);
1c00cb48:	d0f707d7          	pv.pack.h	a5,a4,a5
1c00cb4c:	00f2a22b          	p.sw	a5,4(t0!)
	}
	if (Size&0x1) ((short int *)I)[Size-1] = Min(Max(AT_NORM(I[Size-1], Norm), LB), UB);
1c00cb50:	fc1337b3          	p.bclr	a5,t1,30,1
1c00cb54:	c385                	beqz	a5,1c00cb74 <KerDP_IO_fp+0xc0>
1c00cb56:	00231793          	slli	a5,t1,0x2
1c00cb5a:	17f1                	addi	a5,a5,-4
1c00cb5c:	20f8f783          	p.lw	a5,a5(a7)
1c00cb60:	0306                	slli	t1,t1,0x1
1c00cb62:	1379                	addi	t1,t1,-2
1c00cb64:	407067db          	p.mac.zh.sl	a5,zero,t2,zero
1c00cb68:	05d7eeb3          	p.max	t4,a5,t4
1c00cb6c:	05cece33          	p.min	t3,t4,t3
1c00cb70:	01c8d323          	p.sh	t3,t1(a7)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00cb74:	002047b7          	lui	a5,0x204
1c00cb78:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00cb7c:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);
	/* Now this is the reduction phase */

	KerReductIO_Compact_fp((short int *__restrict__)In, (short int *__restrict__)In, ChunkCell, S);
1c00cb80:	852e                	mv	a0,a1
1c00cb82:	c85ff06f          	j	1c00c806 <KerReductIO_Compact_fp>

1c00cb86 <KerConv2x3from3x3Stride1_V_DP_fp>:
	int Ho_F = Min(Ho, FirstDefinedOutput(FSy, PadIn[2], Sy)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FSy, PadIn[2], Sy));

	unsigned int InFeatures = Arg->InFeatures;
		
	for (unsigned int of=First; of<Last; of++) 
		for (unsigned int If=0; If<InFeatures; If++) {
1c00cb86:	1141                	addi	sp,sp,-16
1c00cb88:	4e52                	lw	t3,20(sp)
1c00cb8a:	c622                	sw	s0,12(sp)
1c00cb8c:	c426                	sw	s1,8(sp)
1c00cb8e:	c24a                	sw	s2,4(sp)
1c00cb90:	c04e                	sw	s3,0(sp)
1c00cb92:	4342                	lw	t1,16(sp)
1c00cb94:	0a0e0063          	beqz	t3,1c00cc34 <KerConv2x3from3x3Stride1_V_DP_fp+0xae>
1c00cb98:	00032383          	lw	t2,0(t1) # 48000 <__L1Cl+0x38000>
1c00cb9c:	00632283          	lw	t0,6(t1)
1c00cba0:	00c32403          	lw	s0,12(t1)
1c00cba4:	00159493          	slli	s1,a1,0x1
1c00cba8:	0a17a063          	p.beqimm	a5,1,1c00cc48 <KerConv2x3from3x3Stride1_V_DP_fp+0xc2>
1c00cbac:	40c78633          	sub	a2,a5,a2
1c00cbb0:	02b60633          	mul	a2,a2,a1
1c00cbb4:	893e                	mv	s2,a5
1c00cbb6:	02d787b3          	mul	a5,a5,a3
1c00cbba:	0606                	slli	a2,a2,0x1
1c00cbbc:	9532                	add	a0,a0,a2
1c00cbbe:	20957e0b          	p.lw	t3,s1(a0!)
1c00cbc2:	2095760b          	p.lw	a2,s1(a0!)
1c00cbc6:	078a                	slli	a5,a5,0x2
1c00cbc8:	98be                	add	a7,a7,a5
1c00cbca:	05097063          	bleu	a6,s2,1c00cc0a <KerConv2x3from3x3Stride1_V_DP_fp+0x84>
1c00cbce:	00269993          	slli	s3,a3,0x2
1c00cbd2:	8fca                	mv	t6,s2
1c00cbd4:	8f46                	mv	t5,a7
1c00cbd6:	86aa                	mv	a3,a0
1c00cbd8:	41280eb3          	sub	t4,a6,s2
1c00cbdc:	010ec0fb          	lp.setup	x1,t4,1c00cbfc <KerConv2x3from3x3Stride1_V_DP_fp+0x76>
1c00cbe0:	000f2783          	lw	a5,0(t5)
1c00cbe4:	2096f30b          	p.lw	t1,s1(a3!)
1c00cbe8:	0f85                	addi	t6,t6,1
1c00cbea:	b87e07d7          	pv.sdotsp.h	a5,t3,t2
1c00cbee:	b85607d7          	pv.sdotsp.h	a5,a2,t0
1c00cbf2:	b88307d7          	pv.sdotsp.h	a5,t1,s0
1c00cbf6:	00ff69ab          	p.sw	a5,s3(t5!)
1c00cbfa:	8e32                	mv	t3,a2
1c00cbfc:	861a                	mv	a2,t1
1c00cbfe:	412f8fb3          	sub	t6,t6,s2
1c00cc02:	43f48533          	p.mac	a0,s1,t6
1c00cc06:	43f988b3          	p.mac	a7,s3,t6
1c00cc0a:	01070f63          	beq	a4,a6,1c00cc28 <KerConv2x3from3x3Stride1_V_DP_fp+0xa2>
1c00cc0e:	058a                	slli	a1,a1,0x2
1c00cc10:	8d0d                	sub	a0,a0,a1
1c00cc12:	0008a783          	lw	a5,0(a7)
1c00cc16:	4118                	lw	a4,0(a0)
1c00cc18:	20957503          	p.lw	a0,s1(a0)
1c00cc1c:	b87707d7          	pv.sdotsp.h	a5,a4,t2
1c00cc20:	b85507d7          	pv.sdotsp.h	a5,a0,t0
1c00cc24:	00f8a023          	sw	a5,0(a7)
1c00cc28:	4432                	lw	s0,12(sp)
1c00cc2a:	44a2                	lw	s1,8(sp)
1c00cc2c:	4912                	lw	s2,4(sp)
1c00cc2e:	4982                	lw	s3,0(sp)
1c00cc30:	0141                	addi	sp,sp,16
1c00cc32:	8082                	ret
1c00cc34:	00232383          	lw	t2,2(t1)
1c00cc38:	00832283          	lw	t0,8(t1)
1c00cc3c:	00e32403          	lw	s0,14(t1)
1c00cc40:	00159493          	slli	s1,a1,0x1
1c00cc44:	f617b4e3          	p.bneimm	a5,1,1c00cbac <KerConv2x3from3x3Stride1_V_DP_fp+0x26>
1c00cc48:	2095760b          	p.lw	a2,s1(a0!)
1c00cc4c:	4901                	li	s2,0
1c00cc4e:	00006e57          	pv.add.sci.h	t3,zero,0
1c00cc52:	bfa5                	j	1c00cbca <KerConv2x3from3x3Stride1_V_DP_fp+0x44>

1c00cc54 <KerConv3x3Stride1_Body_DP_fp.isra.60>:
1c00cc54:	7179                	addi	sp,sp,-48
1c00cc56:	ca5a                	sw	s6,20(sp)
1c00cc58:	8b3e                	mv	s6,a5
1c00cc5a:	43170b33          	p.mac	s6,a4,a7
1c00cc5e:	5352                	lw	t1,52(sp)
1c00cc60:	00465f83          	lhu	t6,4(a2)
1c00cc64:	00a65e83          	lhu	t4,10(a2)
1c00cc68:	01065283          	lhu	t0,16(a2)
1c00cc6c:	d622                	sw	s0,44(sp)
1c00cc6e:	d426                	sw	s1,40(sp)
1c00cc70:	00062383          	lw	t2,0(a2)
1c00cc74:	00662403          	lw	s0,6(a2)
1c00cc78:	4644                	lw	s1,12(a2)
1c00cc7a:	0b0a                	slli	s6,s6,0x2
1c00cc7c:	4601                	li	a2,0
1c00cc7e:	d24a                	sw	s2,36(sp)
1c00cc80:	d04e                	sw	s3,32(sp)
1c00cc82:	ce52                	sw	s4,28(sp)
1c00cc84:	cc56                	sw	s5,24(sp)
1c00cc86:	c85e                	sw	s7,16(sp)
1c00cc88:	c662                	sw	s8,12(sp)
1c00cc8a:	c466                	sw	s9,8(sp)
1c00cc8c:	c26a                	sw	s10,4(sp)
1c00cc8e:	c06e                	sw	s11,0(sp)
1c00cc90:	78037e57          	pv.extract.b	t3,t1,0
1c00cc94:	d1fe8fd7          	pv.pack.h	t6,t4,t6
1c00cc98:	78137357          	pv.extract.b	t1,t1,2
1c00cc9c:	d05602d7          	pv.pack.h	t0,a2,t0
1c00cca0:	9b2e                	add	s6,s6,a1
1c00cca2:	0d07fd63          	bleu	a6,a5,1c00cd7c <KerConv3x3Stride1_Body_DP_fp.isra.60+0x128>
1c00cca6:	10035333          	p.exthz	t1,t1
1c00ccaa:	40688333          	sub	t1,a7,t1
1c00ccae:	02d30333          	mul	t1,t1,a3
1c00ccb2:	80000637          	lui	a2,0x80000
1c00ccb6:	ffe64613          	xori	a2,a2,-2
1c00ccba:	96b2                	add	a3,a3,a2
1c00ccbc:	5642                	lw	a2,48(sp)
1c00ccbe:	100e5e33          	p.exthz	t3,t3
1c00ccc2:	00169c93          	slli	s9,a3,0x1
1c00ccc6:	00271d13          	slli	s10,a4,0x2
1c00ccca:	004c8d93          	addi	s11,s9,4
1c00ccce:	41c30733          	sub	a4,t1,t3
1c00ccd2:	0ac8f563          	bleu	a2,a7,1c00cd7c <KerConv3x3Stride1_Body_DP_fp.isra.60+0x128>
1c00ccd6:	00278a93          	addi	s5,a5,2
1c00ccda:	9aba                	add	s5,s5,a4
1c00ccdc:	01070933          	add	s2,a4,a6
1c00cce0:	0a86                	slli	s5,s5,0x1
1c00cce2:	0906                	slli	s2,s2,0x1
1c00cce4:	00450613          	addi	a2,a0,4
1c00cce8:	9aaa                	add	s5,s5,a0
1c00ccea:	9932                	add	s2,s2,a2
1c00ccec:	00e78a33          	add	s4,a5,a4
1c00ccf0:	41590933          	sub	s2,s2,s5
1c00ccf4:	1c0147b7          	lui	a5,0x1c014
1c00ccf8:	0a06                	slli	s4,s4,0x1
1c00ccfa:	008c8993          	addi	s3,s9,8
1c00ccfe:	1979                	addi	s2,s2,-2
1c00cd00:	6047a583          	lw	a1,1540(a5) # 1c014604 <IntegerExpLUT+0xbc>
1c00cd04:	014d8bb3          	add	s7,s11,s4
1c00cd08:	99d2                	add	s3,s3,s4
1c00cd0a:	068a                	slli	a3,a3,0x2
1c00cd0c:	00195913          	srli	s2,s2,0x1
1c00cd10:	9a2a                	add	s4,s4,a0
1c00cd12:	9baa                	add	s7,s7,a0
1c00cd14:	99aa                	add	s3,s3,a0
1c00cd16:	00868c13          	addi	s8,a3,8
1c00cd1a:	0905                	addi	s2,s2,1
1c00cd1c:	02f9407b          	lp.setup	x0,s2,1c00cd7a <KerConv3x3Stride1_Body_DP_fp.isra.60+0x126>
1c00cd20:	8ed6                	mv	t4,s5
1c00cd22:	0009a783          	lw	a5,0(s3)
1c00cd26:	218ef70b          	p.lw	a4,s8(t4!)
1c00cd2a:	000a2e03          	lw	t3,0(s4)
1c00cd2e:	000ba683          	lw	a3,0(s7)
1c00cd32:	d0e7c757          	pv.pack.l.h	a4,a5,a4
1c00cd36:	57c2                	lw	a5,48(sp)
1c00cd38:	013c8f33          	add	t5,s9,s3
1c00cd3c:	835a                	mv	t1,s6
1c00cd3e:	41178833          	sub	a6,a5,a7
1c00cd42:	017840fb          	lp.setup	x1,a6,1c00cd70 <KerConv3x3Stride1_Body_DP_fp.isra.60+0x11c>
1c00cd46:	00032783          	lw	a5,0(t1)
1c00cd4a:	21bf760b          	p.lw	a2,s11(t5!)
1c00cd4e:	21bef50b          	p.lw	a0,s11(t4!)
1c00cd52:	b87e07d7          	pv.sdotsp.h	a5,t3,t2
1c00cd56:	b88687d7          	pv.sdotsp.h	a5,a3,s0
1c00cd5a:	b9f707d7          	pv.sdotsp.h	a5,a4,t6
1c00cd5e:	b89607d7          	pv.sdotsp.h	a5,a2,s1
1c00cd62:	b85507d7          	pv.sdotsp.h	a5,a0,t0
1c00cd66:	00f36d2b          	p.sw	a5,s10(t1!)
1c00cd6a:	8e36                	mv	t3,a3
1c00cd6c:	c8b50757          	pv.shuffle2.h	a4,a0,a1
1c00cd70:	86b2                	mv	a3,a2
1c00cd72:	0b11                	addi	s6,s6,4
1c00cd74:	0a09                	addi	s4,s4,2
1c00cd76:	0b89                	addi	s7,s7,2
1c00cd78:	0a89                	addi	s5,s5,2
1c00cd7a:	0989                	addi	s3,s3,2
1c00cd7c:	5432                	lw	s0,44(sp)
1c00cd7e:	54a2                	lw	s1,40(sp)
1c00cd80:	5912                	lw	s2,36(sp)
1c00cd82:	5982                	lw	s3,32(sp)
1c00cd84:	4a72                	lw	s4,28(sp)
1c00cd86:	4ae2                	lw	s5,24(sp)
1c00cd88:	4b52                	lw	s6,20(sp)
1c00cd8a:	4bc2                	lw	s7,16(sp)
1c00cd8c:	4c32                	lw	s8,12(sp)
1c00cd8e:	4ca2                	lw	s9,8(sp)
1c00cd90:	4d12                	lw	s10,4(sp)
1c00cd92:	4d82                	lw	s11,0(sp)
1c00cd94:	6145                	addi	sp,sp,48
1c00cd96:	8082                	ret

1c00cd98 <KerConv3x2from3x3Stride1_H_DP_fp.isra.61>:
1c00cd98:	40c68633          	sub	a2,a3,a2
1c00cd9c:	0606                	slli	a2,a2,0x1
1c00cd9e:	9532                	add	a0,a0,a2
1c00cda0:	00682303          	lw	t1,6(a6)
1c00cda4:	00a81e03          	lh	t3,10(a6)
1c00cda8:	06088063          	beqz	a7,1c00ce08 <KerConv3x2from3x3Stride1_H_DP_fp.isra.61+0x70>
1c00cdac:	00082603          	lw	a2,0(a6)
1c00cdb0:	00485803          	lhu	a6,4(a6)
1c00cdb4:	d0c34f57          	pv.pack.l.h	t5,t1,a2
1c00cdb8:	d10e0e57          	pv.pack.h	t3,t3,a6
1c00cdbc:	d0c36357          	pv.pack.h.h	t1,t1,a2
1c00cdc0:	0586                	slli	a1,a1,0x1
1c00cdc2:	00052803          	lw	a6,0(a0)
1c00cdc6:	20b57603          	p.lw	a2,a1(a0)
1c00cdca:	00450e93          	addi	t4,a0,4
1c00cdce:	d10648d7          	pv.pack.l.h	a7,a2,a6
1c00cdd2:	d1066857          	pv.pack.h.h	a6,a2,a6
1c00cdd6:	02e6f863          	bleu	a4,a3,1c00ce06 <KerConv3x2from3x3Stride1_H_DP_fp.isra.61+0x6e>
1c00cdda:	0591                	addi	a1,a1,4
1c00cddc:	952e                	add	a0,a0,a1
1c00cdde:	8f15                	sub	a4,a4,a3
1c00cde0:	012740fb          	lp.setup	x1,a4,1c00ce04 <KerConv3x2from3x3Stride1_H_DP_fp.isra.61+0x6c>
1c00cde4:	4390                	lw	a2,0(a5)
1c00cde6:	002e958b          	p.lh	a1,2(t4!)
1c00cdea:	0025168b          	p.lh	a3,2(a0!)
1c00cdee:	b9e88657          	pv.sdotsp.h	a2,a7,t5
1c00cdf2:	b8680657          	pv.sdotsp.h	a2,a6,t1
1c00cdf6:	d0b685d7          	pv.pack.h	a1,a3,a1
1c00cdfa:	b9c58657          	pv.sdotsp.h	a2,a1,t3
1c00cdfe:	00c7a22b          	p.sw	a2,4(a5!)
1c00ce02:	88c2                	mv	a7,a6
1c00ce04:	882e                	mv	a6,a1
1c00ce06:	8082                	ret
1c00ce08:	00c82603          	lw	a2,12(a6)
1c00ce0c:	01085803          	lhu	a6,16(a6)
1c00ce10:	d0664f57          	pv.pack.l.h	t5,a2,t1
1c00ce14:	d1c80e57          	pv.pack.h	t3,a6,t3
1c00ce18:	d0666357          	pv.pack.h.h	t1,a2,t1
1c00ce1c:	b755                	j	1c00cdc0 <KerConv3x2from3x3Stride1_H_DP_fp.isra.61+0x28>

1c00ce1e <KerConv3x3BorderStride1_DP_fp.isra.62>:
1c00ce1e:	711d                	addi	sp,sp,-96
1c00ce20:	5326                	lw	t1,104(sp)
1c00ce22:	5e36                	lw	t3,108(sp)
1c00ce24:	cca2                	sw	s0,88(sp)
1c00ce26:	caa6                	sw	s1,84(sp)
1c00ce28:	c8ca                	sw	s2,80(sp)
1c00ce2a:	c6ce                	sw	s3,76(sp)
1c00ce2c:	c4d2                	sw	s4,72(sp)
1c00ce2e:	c2d6                	sw	s5,68(sp)
1c00ce30:	c0da                	sw	s6,64(sp)
1c00ce32:	de5e                	sw	s7,60(sp)
1c00ce34:	dc62                	sw	s8,56(sp)
1c00ce36:	da66                	sw	s9,52(sp)
1c00ce38:	d86a                	sw	s10,48(sp)
1c00ce3a:	d66e                	sw	s11,44(sp)
1c00ce3c:	ce86                	sw	ra,92(sp)
1c00ce3e:	78037ed7          	pv.extract.b	t4,t1,0
1c00ce42:	780e7cd7          	pv.extract.b	s9,t3,0
1c00ce46:	781e74d7          	pv.extract.b	s1,t3,2
1c00ce4a:	8c2a                	mv	s8,a0
1c00ce4c:	8aae                	mv	s5,a1
1c00ce4e:	8b32                	mv	s6,a2
1c00ce50:	8936                	mv	s2,a3
1c00ce52:	8bba                	mv	s7,a4
1c00ce54:	89be                	mv	s3,a5
1c00ce56:	8d42                	mv	s10,a6
1c00ce58:	8f46                	mv	t5,a7
1c00ce5a:	5f86                	lw	t6,96(sp)
1c00ce5c:	5a16                	lw	s4,100(sp)
1c00ce5e:	7a037e57          	pv.extract.b	t3,t1,1
1c00ce62:	78137dd7          	pv.extract.b	s11,t1,2
1c00ce66:	7a137457          	pv.extract.b	s0,t1,3
1c00ce6a:	0a0e9863          	bnez	t4,1c00cf1a <KerConv3x3BorderStride1_DP_fp.isra.62+0xfc>
1c00ce6e:	080e1063          	bnez	t3,1c00ceee <KerConv3x3BorderStride1_DP_fp.isra.62+0xd0>
1c00ce72:	020d9263          	bnez	s11,1c00ce96 <KerConv3x3BorderStride1_DP_fp.isra.62+0x78>
1c00ce76:	ec05                	bnez	s0,1c00ceae <KerConv3x3BorderStride1_DP_fp.isra.62+0x90>
1c00ce78:	40f6                	lw	ra,92(sp)
1c00ce7a:	4466                	lw	s0,88(sp)
1c00ce7c:	44d6                	lw	s1,84(sp)
1c00ce7e:	4946                	lw	s2,80(sp)
1c00ce80:	49b6                	lw	s3,76(sp)
1c00ce82:	4a26                	lw	s4,72(sp)
1c00ce84:	4a96                	lw	s5,68(sp)
1c00ce86:	4b06                	lw	s6,64(sp)
1c00ce88:	5bf2                	lw	s7,60(sp)
1c00ce8a:	5c62                	lw	s8,56(sp)
1c00ce8c:	5cd2                	lw	s9,52(sp)
1c00ce8e:	5d42                	lw	s10,48(sp)
1c00ce90:	5db2                	lw	s11,44(sp)
1c00ce92:	6125                	addi	sp,sp,96
1c00ce94:	8082                	ret
1c00ce96:	00299793          	slli	a5,s3,0x2
1c00ce9a:	4881                	li	a7,0
1c00ce9c:	885a                	mv	a6,s6
1c00ce9e:	97d6                	add	a5,a5,s5
1c00cea0:	876a                	mv	a4,s10
1c00cea2:	86ce                	mv	a3,s3
1c00cea4:	8666                	mv	a2,s9
1c00cea6:	85ca                	mv	a1,s2
1c00cea8:	8562                	mv	a0,s8
1c00ceaa:	35fd                	jal	1c00cd98 <KerConv3x2from3x3Stride1_H_DP_fp.isra.61>
1c00ceac:	d471                	beqz	s0,1c00ce78 <KerConv3x3BorderStride1_DP_fp.isra.62+0x5a>
1c00ceae:	409a0533          	sub	a0,s4,s1
1c00ceb2:	87ce                	mv	a5,s3
1c00ceb4:	434b87b3          	p.mac	a5,s7,s4
1c00ceb8:	4466                	lw	s0,88(sp)
1c00ceba:	40f6                	lw	ra,92(sp)
1c00cebc:	44d6                	lw	s1,84(sp)
1c00cebe:	4a26                	lw	s4,72(sp)
1c00cec0:	5bf2                	lw	s7,60(sp)
1c00cec2:	5db2                	lw	s11,44(sp)
1c00cec4:	885a                	mv	a6,s6
1c00cec6:	876a                	mv	a4,s10
1c00cec8:	4b06                	lw	s6,64(sp)
1c00ceca:	03250533          	mul	a0,a0,s2
1c00cece:	078a                	slli	a5,a5,0x2
1c00ced0:	5d42                	lw	s10,48(sp)
1c00ced2:	86ce                	mv	a3,s3
1c00ced4:	8666                	mv	a2,s9
1c00ced6:	49b6                	lw	s3,76(sp)
1c00ced8:	5cd2                	lw	s9,52(sp)
1c00ceda:	85ca                	mv	a1,s2
1c00cedc:	97d6                	add	a5,a5,s5
1c00cede:	4946                	lw	s2,80(sp)
1c00cee0:	0506                	slli	a0,a0,0x1
1c00cee2:	4a96                	lw	s5,68(sp)
1c00cee4:	9562                	add	a0,a0,s8
1c00cee6:	5c62                	lw	s8,56(sp)
1c00cee8:	4885                	li	a7,1
1c00ceea:	6125                	addi	sp,sp,96
1c00ceec:	b575                	j	1c00cd98 <KerConv3x2from3x3Stride1_H_DP_fp.isra.61>
1c00ceee:	002b9893          	slli	a7,s7,0x2
1c00cef2:	419d0533          	sub	a0,s10,s9
1c00cef6:	4785                	li	a5,1
1c00cef8:	18f1                	addi	a7,a7,-4
1c00cefa:	0506                	slli	a0,a0,0x1
1c00cefc:	c23e                	sw	a5,4(sp)
1c00cefe:	c05a                	sw	s6,0(sp)
1c00cf00:	98d6                	add	a7,a7,s5
1c00cf02:	8852                	mv	a6,s4
1c00cf04:	87fe                	mv	a5,t6
1c00cf06:	877a                	mv	a4,t5
1c00cf08:	86de                	mv	a3,s7
1c00cf0a:	8626                	mv	a2,s1
1c00cf0c:	85ca                	mv	a1,s2
1c00cf0e:	9562                	add	a0,a0,s8
1c00cf10:	c77ff0ef          	jal	ra,1c00cb86 <KerConv2x3from3x3Stride1_V_DP_fp>
1c00cf14:	f60d81e3          	beqz	s11,1c00ce76 <KerConv3x3BorderStride1_DP_fp.isra.62+0x58>
1c00cf18:	bfbd                	j	1c00ce96 <KerConv3x3BorderStride1_DP_fp.isra.62+0x78>
1c00cf1a:	c032                	sw	a2,0(sp)
1c00cf1c:	88ae                	mv	a7,a1
1c00cf1e:	87fe                	mv	a5,t6
1c00cf20:	877a                	mv	a4,t5
1c00cf22:	c202                	sw	zero,4(sp)
1c00cf24:	8852                	mv	a6,s4
1c00cf26:	86de                	mv	a3,s7
1c00cf28:	8626                	mv	a2,s1
1c00cf2a:	85ca                	mv	a1,s2
1c00cf2c:	ce72                	sw	t3,28(sp)
1c00cf2e:	cc7a                	sw	t5,24(sp)
1c00cf30:	ca7e                	sw	t6,20(sp)
1c00cf32:	c55ff0ef          	jal	ra,1c00cb86 <KerConv2x3from3x3Stride1_V_DP_fp>
1c00cf36:	4e72                	lw	t3,28(sp)
1c00cf38:	4fd2                	lw	t6,20(sp)
1c00cf3a:	4f62                	lw	t5,24(sp)
1c00cf3c:	f20e0be3          	beqz	t3,1c00ce72 <KerConv3x3BorderStride1_DP_fp.isra.62+0x54>
1c00cf40:	b77d                	j	1c00ceee <KerConv3x3BorderStride1_DP_fp.isra.62+0xd0>

1c00cf42 <KerParConv3x3Stride1_DP_fp>:
	unsigned int FS=3, S=1;
	short int * __restrict__ In = Arg->In;
	unsigned int W = Arg->W;
	unsigned int H = Arg->H;
	int TotalInFeatures = Arg->TotalInFeatures;
	unsigned int OutFeatures = Arg->OutFeatures;
1c00cf42:	00e55683          	lhu	a3,14(a0)
{
1c00cf46:	7119                	addi	sp,sp,-128
1c00cf48:	cae6                	sw	s9,84(sp)
	short int * __restrict__ Filter = Arg->Filter;
	int * __restrict__ Out = Arg->Out;
	unsigned int CoreId = gap_coreid();
1c00cf4a:	f1402cf3          	csrr	s9,mhartid
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c00cf4e:	f836b7b3          	p.bclr	a5,a3,28,3
1c00cf52:	0036d713          	srli	a4,a3,0x3
1c00cf56:	00f037b3          	snez	a5,a5
1c00cf5a:	97ba                	add	a5,a5,a4
	unsigned int CoreId = gap_coreid();
1c00cf5c:	c80c9cb3          	p.extractu	s9,s9,4,0
	unsigned int Chunk = ChunkSize(OutFeatures);
	unsigned int First = Chunk*CoreId;
1c00cf60:	02fc8cb3          	mul	s9,s9,a5
{
1c00cf64:	daa6                	sw	s1,116(sp)
1c00cf66:	d8ca                	sw	s2,112(sp)
1c00cf68:	d6ce                	sw	s3,108(sp)
1c00cf6a:	d4d2                	sw	s4,104(sp)
1c00cf6c:	d2d6                	sw	s5,100(sp)
1c00cf6e:	d0da                	sw	s6,96(sp)
1c00cf70:	cede                	sw	s7,92(sp)
1c00cf72:	cce2                	sw	s8,88(sp)
1c00cf74:	c6ee                	sw	s11,76(sp)
1c00cf76:	de86                	sw	ra,124(sp)
1c00cf78:	dca2                	sw	s0,120(sp)
1c00cf7a:	c8ea                	sw	s10,80(sp)
	unsigned int Last = Min(First+Chunk, OutFeatures);
	v4s PadIn = Arg->Pad;
1c00cf7c:	4d40                	lw	s0,28(a0)


	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00cf7e:	00a55b03          	lhu	s6,10(a0)
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00cf82:	00655a03          	lhu	s4,6(a0)
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00cf86:	78147ad7          	pv.extract.b	s5,s0,2
1c00cf8a:	ffeb0613          	addi	a2,s6,-2
	unsigned int Last = Min(First+Chunk, OutFeatures);
1c00cf8e:	97e6                	add	a5,a5,s9
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00cf90:	9656                	add	a2,a2,s5
	unsigned int Last = Min(First+Chunk, OutFeatures);
1c00cf92:	04d7c7b3          	p.min	a5,a5,a3
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00cf96:	7a147857          	pv.extract.b	a6,s0,3
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00cf9a:	780479d7          	pv.extract.b	s3,s0,0
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00cf9e:	9832                	add	a6,a6,a2
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00cfa0:	ffea0913          	addi	s2,s4,-2
	unsigned int Last = Min(First+Chunk, OutFeatures);
1c00cfa4:	d43e                	sw	a5,40(sp)
	short int * __restrict__ In = Arg->In;
1c00cfa6:	4110                	lw	a2,0(a0)
	unsigned int W = Arg->W;
1c00cfa8:	00455b83          	lhu	s7,4(a0)
	unsigned int H = Arg->H;
1c00cfac:	00855c03          	lhu	s8,8(a0)
	int TotalInFeatures = Arg->TotalInFeatures;
1c00cfb0:	01051783          	lh	a5,16(a0)
	short int * __restrict__ Filter = Arg->Filter;
1c00cfb4:	01452d83          	lw	s11,20(a0)
	int * __restrict__ Out = Arg->Out;
1c00cfb8:	4d04                	lw	s1,24(a0)
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));

	unsigned int InFeatures = Arg->InFeatures;
1c00cfba:	00c55503          	lhu	a0,12(a0)
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00cfbe:	4709                	li	a4,2
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00cfc0:	994e                	add	s2,s2,s3
1c00cfc2:	7a0475d7          	pv.extract.b	a1,s0,1
		
	for (unsigned int of=First; of<Last; of++) 
1c00cfc6:	56a2                	lw	a3,40(sp)
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00cfc8:	992e                	add	s2,s2,a1
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00cfca:	413705b3          	sub	a1,a4,s3
1c00cfce:	41570733          	sub	a4,a4,s5
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c00cfd2:	053949b3          	p.min	s3,s2,s3
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00cfd6:	40ba0a33          	sub	s4,s4,a1
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c00cfda:	05584ab3          	p.min	s5,a6,s5
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00cfde:	40eb0b33          	sub	s6,s6,a4
	unsigned int First = Chunk*CoreId;
1c00cfe2:	ce66                	sw	s9,28(sp)
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00cfe4:	d042                	sw	a6,32(sp)
	short int * __restrict__ In = Arg->In;
1c00cfe6:	da32                	sw	a2,52(sp)
	unsigned int InFeatures = Arg->InFeatures;
1c00cfe8:	d22a                	sw	a0,36(sp)
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c00cfea:	0549ea33          	p.max	s4,s3,s4
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c00cfee:	056aeb33          	p.max	s6,s5,s6
	for (unsigned int of=First; of<Last; of++) 
1c00cff2:	08dcf063          	bleu	a3,s9,1c00d072 <KerParConv3x3Stride1_DP_fp+0x130>
		for (unsigned int If=0; If<InFeatures; If++) {
			short int *in = In+W*H*If, *filter = Filter+FS*FS*(TotalInFeatures*of + If);
			int *out = Out+Wo*Ho*(of);
1c00cff6:	03090733          	mul	a4,s2,a6
1c00cffa:	00379693          	slli	a3,a5,0x3
1c00cffe:	96be                	add	a3,a3,a5
1c00d000:	00351793          	slli	a5,a0,0x3
1c00d004:	97aa                	add	a5,a5,a0
1c00d006:	0686                	slli	a3,a3,0x1
1c00d008:	0786                	slli	a5,a5,0x1
1c00d00a:	de3e                	sw	a5,60(sp)
1c00d00c:	d836                	sw	a3,48(sp)
			KerConv3x3Stride1_Body_DP_fp(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
			if ((int)PadIn) KerConv3x3BorderStride1_DP_fp(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c00d00e:	dc22                	sw	s0,56(sp)
1c00d010:	00271793          	slli	a5,a4,0x2
			short int *in = In+W*H*If, *filter = Filter+FS*FS*(TotalInFeatures*of + If);
1c00d014:	038b8c33          	mul	s8,s7,s8
1c00d018:	d63e                	sw	a5,44(sp)
1c00d01a:	42dc8db3          	p.mac	s11,s9,a3
1c00d01e:	0c06                	slli	s8,s8,0x1
1c00d020:	42fc84b3          	p.mac	s1,s9,a5
1c00d024:	cc6e                	sw	s11,24(sp)
		for (unsigned int If=0; If<InFeatures; If++) {
1c00d026:	5712                	lw	a4,36(sp)
1c00d028:	cb0d                	beqz	a4,1c00d05a <KerParConv3x3Stride1_DP_fp+0x118>
1c00d02a:	5762                	lw	a4,56(sp)
1c00d02c:	eb25                	bnez	a4,1c00d09c <KerParConv3x3Stride1_DP_fp+0x15a>
1c00d02e:	47e2                	lw	a5,24(sp)
1c00d030:	58f2                	lw	a7,60(sp)
1c00d032:	5d52                	lw	s10,52(sp)
			int *out = Out+Wo*Ho*(of);
1c00d034:	8dbe                	mv	s11,a5
1c00d036:	01178cb3          	add	s9,a5,a7
			KerConv3x3Stride1_Body_DP_fp(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
1c00d03a:	866e                	mv	a2,s11
1c00d03c:	856a                	mv	a0,s10
1c00d03e:	c222                	sw	s0,4(sp)
1c00d040:	c05a                	sw	s6,0(sp)
1c00d042:	88d6                	mv	a7,s5
1c00d044:	8852                	mv	a6,s4
1c00d046:	87ce                	mv	a5,s3
1c00d048:	874a                	mv	a4,s2
1c00d04a:	86de                	mv	a3,s7
1c00d04c:	85a6                	mv	a1,s1
1c00d04e:	0dc9                	addi	s11,s11,18
1c00d050:	c05ff0ef          	jal	ra,1c00cc54 <KerConv3x3Stride1_Body_DP_fp.isra.60>
1c00d054:	9d62                	add	s10,s10,s8
		for (unsigned int If=0; If<InFeatures; If++) {
1c00d056:	ff9d92e3          	bne	s11,s9,1c00d03a <KerParConv3x3Stride1_DP_fp+0xf8>
	for (unsigned int of=First; of<Last; of++) 
1c00d05a:	4772                	lw	a4,28(sp)
1c00d05c:	47e2                	lw	a5,24(sp)
1c00d05e:	58c2                	lw	a7,48(sp)
1c00d060:	5632                	lw	a2,44(sp)
1c00d062:	56a2                	lw	a3,40(sp)
1c00d064:	0705                	addi	a4,a4,1
1c00d066:	97c6                	add	a5,a5,a7
1c00d068:	ce3a                	sw	a4,28(sp)
1c00d06a:	cc3e                	sw	a5,24(sp)
1c00d06c:	94b2                	add	s1,s1,a2
1c00d06e:	fae69ce3          	bne	a3,a4,1c00d026 <KerParConv3x3Stride1_DP_fp+0xe4>
1c00d072:	002047b7          	lui	a5,0x204
1c00d076:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00d07a:	01c7e703          	p.elw	a4,28(a5)
		}
	gap_waitbarrier(0);
}
1c00d07e:	50f6                	lw	ra,124(sp)
1c00d080:	5466                	lw	s0,120(sp)
1c00d082:	54d6                	lw	s1,116(sp)
1c00d084:	5946                	lw	s2,112(sp)
1c00d086:	59b6                	lw	s3,108(sp)
1c00d088:	5a26                	lw	s4,104(sp)
1c00d08a:	5a96                	lw	s5,100(sp)
1c00d08c:	5b06                	lw	s6,96(sp)
1c00d08e:	4bf6                	lw	s7,92(sp)
1c00d090:	4c66                	lw	s8,88(sp)
1c00d092:	4cd6                	lw	s9,84(sp)
1c00d094:	4d46                	lw	s10,80(sp)
1c00d096:	4db6                	lw	s11,76(sp)
1c00d098:	6109                	addi	sp,sp,128
1c00d09a:	8082                	ret
1c00d09c:	4662                	lw	a2,24(sp)
1c00d09e:	56f2                	lw	a3,60(sp)
1c00d0a0:	5dd2                	lw	s11,52(sp)
			int *out = Out+Wo*Ho*(of);
1c00d0a2:	8cb2                	mv	s9,a2
1c00d0a4:	00d60d33          	add	s10,a2,a3
1c00d0a8:	87ea                	mv	a5,s10
1c00d0aa:	8d6e                	mv	s10,s11
1c00d0ac:	8dbe                	mv	s11,a5
			KerConv3x3Stride1_Body_DP_fp(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
1c00d0ae:	8666                	mv	a2,s9
1c00d0b0:	856a                	mv	a0,s10
1c00d0b2:	88d6                	mv	a7,s5
1c00d0b4:	8852                	mv	a6,s4
1c00d0b6:	87ce                	mv	a5,s3
1c00d0b8:	874a                	mv	a4,s2
1c00d0ba:	86de                	mv	a3,s7
1c00d0bc:	85a6                	mv	a1,s1
1c00d0be:	c222                	sw	s0,4(sp)
1c00d0c0:	c05a                	sw	s6,0(sp)
1c00d0c2:	b93ff0ef          	jal	ra,1c00cc54 <KerConv3x3Stride1_Body_DP_fp.isra.60>
			if ((int)PadIn) KerConv3x3BorderStride1_DP_fp(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c00d0c6:	5882                	lw	a7,32(sp)
1c00d0c8:	8666                	mv	a2,s9
1c00d0ca:	856a                	mv	a0,s10
1c00d0cc:	c622                	sw	s0,12(sp)
1c00d0ce:	c422                	sw	s0,8(sp)
1c00d0d0:	c25a                	sw	s6,4(sp)
1c00d0d2:	c056                	sw	s5,0(sp)
1c00d0d4:	8852                	mv	a6,s4
1c00d0d6:	87ce                	mv	a5,s3
1c00d0d8:	874a                	mv	a4,s2
1c00d0da:	86de                	mv	a3,s7
1c00d0dc:	85a6                	mv	a1,s1
1c00d0de:	0cc9                	addi	s9,s9,18
1c00d0e0:	d3fff0ef          	jal	ra,1c00ce1e <KerConv3x3BorderStride1_DP_fp.isra.62>
1c00d0e4:	9d62                	add	s10,s10,s8
		for (unsigned int If=0; If<InFeatures; If++) {
1c00d0e6:	fdbc94e3          	bne	s9,s11,1c00d0ae <KerParConv3x3Stride1_DP_fp+0x16c>
1c00d0ea:	bf85                	j	1c00d05a <KerParConv3x3Stride1_DP_fp+0x118>

1c00d0ec <KerMaxPool2x2Stride2_fp>:
1c00d0ec:	7139                	addi	sp,sp,-64
1c00d0ee:	4326                	lw	t1,72(sp)
1c00d0f0:	d652                	sw	s4,44(sp)
1c00d0f2:	4a36                	lw	s4,76(sp)
1c00d0f4:	dc26                	sw	s1,56(sp)
1c00d0f6:	d25a                	sw	s6,36(sp)
1c00d0f8:	cc66                	sw	s9,24(sp)
1c00d0fa:	78037b57          	pv.extract.b	s6,t1,0
1c00d0fe:	7a037cd7          	pv.extract.b	s9,t1,1
1c00d102:	781374d7          	pv.extract.b	s1,t1,2
1c00d106:	7a137357          	pv.extract.b	t1,t1,3
1c00d10a:	d05e                	sw	s7,32(sp)
1c00d10c:	ca6a                	sw	s10,20(sp)
1c00d10e:	de22                	sw	s0,60(sp)
1c00d110:	da4a                	sw	s2,52(sp)
1c00d112:	d84e                	sw	s3,48(sp)
1c00d114:	d456                	sw	s5,40(sp)
1c00d116:	ce62                	sw	s8,28(sp)
1c00d118:	c86e                	sw	s11,16(sp)
1c00d11a:	c61a                	sw	t1,12(sp)
1c00d11c:	780a7d57          	pv.extract.b	s10,s4,0
1c00d120:	04015383          	lhu	t2,64(sp)
1c00d124:	04415b83          	lhu	s7,68(sp)
1c00d128:	05015f03          	lhu	t5,80(sp)
1c00d12c:	781a7a57          	pv.extract.b	s4,s4,2
1c00d130:	040b0763          	beqz	s6,1c00d17e <KerMaxPool2x2Stride2_fp+0x92>
1c00d134:	0573f563          	bleu	s7,t2,1c00d17e <KerMaxPool2x2Stride2_fp+0x92>
1c00d138:	00139e13          	slli	t3,t2,0x1
1c00d13c:	414e0fb3          	sub	t6,t3,s4
1c00d140:	00159313          	slli	t1,a1,0x1
1c00d144:	8e7e                	mv	t3,t6
1c00d146:	82aa                	mv	t0,a0
1c00d148:	0f85                	addi	t6,t6,1
1c00d14a:	00171913          	slli	s2,a4,0x1
1c00d14e:	842a                	mv	s0,a0
1c00d150:	426f82b3          	p.mac	t0,t6,t1
1c00d154:	8fb6                	mv	t6,a3
1c00d156:	00259993          	slli	s3,a1,0x2
1c00d15a:	407b8eb3          	sub	t4,s7,t2
1c00d15e:	426e0433          	p.mac	s0,t3,t1
1c00d162:	42790fb3          	p.mac	t6,s2,t2
1c00d166:	00aec0fb          	lp.setup	x1,t4,1c00d17a <KerMaxPool2x2Stride2_fp+0x8e>
1c00d16a:	1134730b          	p.lh	t1,s3(s0!)
1c00d16e:	1132fe0b          	p.lh	t3,s3(t0!)
1c00d172:	04036333          	p.max	t1,t1,zero
1c00d176:	05c36333          	p.max	t1,t1,t3
1c00d17a:	006fd92b          	p.sh	t1,s2(t6!)
1c00d17e:	c8b1                	beqz	s1,1c00d1d2 <KerMaxPool2x2Stride2_fp+0xe6>
1c00d180:	00179293          	slli	t0,a5,0x1
1c00d184:	41a28fb3          	sub	t6,t0,s10
1c00d188:	40f80333          	sub	t1,a6,a5
1c00d18c:	0f86                	slli	t6,t6,0x1
1c00d18e:	02030863          	beqz	t1,1c00d1be <KerMaxPool2x2Stride2_fp+0xd2>
1c00d192:	00231e93          	slli	t4,t1,0x2
1c00d196:	1ef1                	addi	t4,t4,-4
1c00d198:	002ede93          	srli	t4,t4,0x2
1c00d19c:	92b6                	add	t0,t0,a3
1c00d19e:	9faa                	add	t6,t6,a0
1c00d1a0:	0e85                	addi	t4,t4,1
1c00d1a2:	00cec0fb          	lp.setup	x1,t4,1c00d1ba <KerMaxPool2x2Stride2_fp+0xce>
1c00d1a6:	004fa30b          	p.lw	t1,4(t6!)
1c00d1aa:	30036357          	pv.max.sci.h	t1,t1,0
1c00d1ae:	78036e57          	pv.extract.h	t3,t1,0
1c00d1b2:	7a036357          	pv.extract.h	t1,t1,1
1c00d1b6:	046e6333          	p.max	t1,t3,t1
1c00d1ba:	0062912b          	p.sh	t1,2(t0!)
1c00d1be:	000b0863          	beqz	s6,1c00d1ce <KerMaxPool2x2Stride2_fp+0xe2>
1c00d1c2:	00051303          	lh	t1,0(a0)
1c00d1c6:	04036333          	p.max	t1,t1,zero
1c00d1ca:	00669023          	sh	t1,0(a3)
1c00d1ce:	240c9163          	bnez	s9,1c00d410 <KerMaxPool2x2Stride2_fp+0x324>
1c00d1d2:	1a0f0c63          	beqz	t5,1c00d38a <KerMaxPool2x2Stride2_fp+0x29e>
1c00d1d6:	0f73f963          	bleu	s7,t2,1c00d2c8 <KerMaxPool2x2Stride2_fp+0x1dc>
1c00d1da:	00179413          	slli	s0,a5,0x1
1c00d1de:	40f80c33          	sub	s8,a6,a5
1c00d1e2:	41a40433          	sub	s0,s0,s10
1c00d1e6:	060c0c63          	beqz	s8,1c00d25e <KerMaxPool2x2Stride2_fp+0x172>
1c00d1ea:	00139313          	slli	t1,t2,0x1
1c00d1ee:	41430e33          	sub	t3,t1,s4
1c00d1f2:	8372                	mv	t1,t3
1c00d1f4:	8922                	mv	s2,s0
1c00d1f6:	0e05                	addi	t3,t3,1
1c00d1f8:	84be                	mv	s1,a5
1c00d1fa:	42b30933          	p.mac	s2,t1,a1
1c00d1fe:	00259a93          	slli	s5,a1,0x2
1c00d202:	00171d93          	slli	s11,a4,0x1
1c00d206:	0c0a                	slli	s8,s8,0x2
1c00d208:	407b89b3          	sub	s3,s7,t2
1c00d20c:	42be0433          	p.mac	s0,t3,a1
1c00d210:	0906                	slli	s2,s2,0x1
1c00d212:	992a                	add	s2,s2,a0
1c00d214:	427704b3          	p.mac	s1,a4,t2
1c00d218:	0406                	slli	s0,s0,0x1
1c00d21a:	942a                	add	s0,s0,a0
1c00d21c:	0486                	slli	s1,s1,0x1
1c00d21e:	94b6                	add	s1,s1,a3
1c00d220:	01e9c07b          	lp.setup	x0,s3,1c00d25c <KerMaxPool2x2Stride2_fp+0x170>
1c00d224:	ffcc0e13          	addi	t3,s8,-4
1c00d228:	002e5e13          	srli	t3,t3,0x2
1c00d22c:	8fa6                	mv	t6,s1
1c00d22e:	8f22                	mv	t5,s0
1c00d230:	8eca                	mv	t4,s2
1c00d232:	0e05                	addi	t3,t3,1
1c00d234:	010e40fb          	lp.setup	x1,t3,1c00d254 <KerMaxPool2x2Stride2_fp+0x168>
1c00d238:	004f230b          	p.lw	t1,4(t5!)
1c00d23c:	004ea28b          	p.lw	t0,4(t4!)
1c00d240:	306282d7          	pv.max.h	t0,t0,t1
1c00d244:	7802e357          	pv.extract.h	t1,t0,0
1c00d248:	7a02e2d7          	pv.extract.h	t0,t0,1
1c00d24c:	04536333          	p.max	t1,t1,t0
1c00d250:	04036333          	p.max	t1,t1,zero
1c00d254:	006f912b          	p.sh	t1,2(t6!)
1c00d258:	9956                	add	s2,s2,s5
1c00d25a:	9456                	add	s0,s0,s5
1c00d25c:	94ee                	add	s1,s1,s11
1c00d25e:	060c8563          	beqz	s9,1c00d2c8 <KerMaxPool2x2Stride2_fp+0x1dc>
1c00d262:	00139313          	slli	t1,t2,0x1
1c00d266:	80000eb7          	lui	t4,0x80000
1c00d26a:	fffece93          	not	t4,t4
1c00d26e:	00130e13          	addi	t3,t1,1
1c00d272:	0309                	addi	t1,t1,2
1c00d274:	414e0e33          	sub	t3,t3,s4
1c00d278:	8476                	mv	s0,t4
1c00d27a:	41430a33          	sub	s4,t1,s4
1c00d27e:	8f76                	mv	t5,t4
1c00d280:	00138313          	addi	t1,t2,1
1c00d284:	42be0433          	p.mac	s0,t3,a1
1c00d288:	00259293          	slli	t0,a1,0x2
1c00d28c:	00171f93          	slli	t6,a4,0x1
1c00d290:	407b83b3          	sub	t2,s7,t2
1c00d294:	42ba0f33          	p.mac	t5,s4,a1
1c00d298:	0406                	slli	s0,s0,0x1
1c00d29a:	942a                	add	s0,s0,a0
1c00d29c:	42e30eb3          	p.mac	t4,t1,a4
1c00d2a0:	0f06                	slli	t5,t5,0x1
1c00d2a2:	9f2a                	add	t5,t5,a0
1c00d2a4:	0e86                	slli	t4,t4,0x1
1c00d2a6:	9eb6                	add	t4,t4,a3
1c00d2a8:	186be563          	bltu	s7,t1,1c00d432 <KerMaxPool2x2Stride2_fp+0x346>
1c00d2ac:	180b8363          	beqz	s7,1c00d432 <KerMaxPool2x2Stride2_fp+0x346>
1c00d2b0:	00a3c0fb          	lp.setup	x1,t2,1c00d2c4 <KerMaxPool2x2Stride2_fp+0x1d8>
1c00d2b4:	1054730b          	p.lh	t1,t0(s0!)
1c00d2b8:	105f7e0b          	p.lh	t3,t0(t5!)
1c00d2bc:	04036333          	p.max	t1,t1,zero
1c00d2c0:	05c36333          	p.max	t1,t1,t3
1c00d2c4:	006edfab          	p.sh	t1,t6(t4!)
1c00d2c8:	4332                	lw	t1,12(sp)
1c00d2ca:	0a030263          	beqz	t1,1c00d36e <KerMaxPool2x2Stride2_fp+0x282>
1c00d2ce:	167d                	addi	a2,a2,-1
1c00d2d0:	02b60633          	mul	a2,a2,a1
1c00d2d4:	00179e13          	slli	t3,a5,0x1
1c00d2d8:	40f80833          	sub	a6,a6,a5
1c00d2dc:	9e32                	add	t3,t3,a2
1c00d2de:	41ae0d33          	sub	s10,t3,s10
1c00d2e2:	0d06                	slli	s10,s10,0x1
1c00d2e4:	02080f63          	beqz	a6,1c00d322 <KerMaxPool2x2Stride2_fp+0x236>
1c00d2e8:	fff88313          	addi	t1,a7,-1
1c00d2ec:	42e307b3          	p.mac	a5,t1,a4
1c00d2f0:	080a                	slli	a6,a6,0x2
1c00d2f2:	ffc80313          	addi	t1,a6,-4
1c00d2f6:	00235313          	srli	t1,t1,0x2
1c00d2fa:	01a50e33          	add	t3,a0,s10
1c00d2fe:	0305                	addi	t1,t1,1
1c00d300:	00179e93          	slli	t4,a5,0x1
1c00d304:	9eb6                	add	t4,t4,a3
1c00d306:	00c340fb          	lp.setup	x1,t1,1c00d31e <KerMaxPool2x2Stride2_fp+0x232>
1c00d30a:	004e278b          	p.lw	a5,4(t3!) # ab004 <__L2+0x2b004>
1c00d30e:	3007e7d7          	pv.max.sci.h	a5,a5,0
1c00d312:	7807e857          	pv.extract.h	a6,a5,0
1c00d316:	7a07e7d7          	pv.extract.h	a5,a5,1
1c00d31a:	04f867b3          	p.max	a5,a6,a5
1c00d31e:	00fe912b          	p.sh	a5,2(t4!) # 80000002 <pulp__FC+0x80000003>
1c00d322:	020b0063          	beqz	s6,1c00d342 <KerMaxPool2x2Stride2_fp+0x256>
1c00d326:	fff88793          	addi	a5,a7,-1
1c00d32a:	02e787b3          	mul	a5,a5,a4
1c00d32e:	00161813          	slli	a6,a2,0x1
1c00d332:	982a                	add	a6,a6,a0
1c00d334:	00081803          	lh	a6,0(a6)
1c00d338:	04086833          	p.max	a6,a6,zero
1c00d33c:	0786                	slli	a5,a5,0x1
1c00d33e:	0106d7a3          	p.sh	a6,a5(a3)
1c00d342:	020c8663          	beqz	s9,1c00d36e <KerMaxPool2x2Stride2_fp+0x282>
1c00d346:	800007b7          	lui	a5,0x80000
1c00d34a:	fff7c813          	not	a6,a5
1c00d34e:	87c2                	mv	a5,a6
1c00d350:	431707b3          	p.mac	a5,a4,a7
1c00d354:	873e                	mv	a4,a5
1c00d356:	00c587b3          	add	a5,a1,a2
1c00d35a:	97c2                	add	a5,a5,a6
1c00d35c:	0786                	slli	a5,a5,0x1
1c00d35e:	953e                	add	a0,a0,a5
1c00d360:	00051783          	lh	a5,0(a0)
1c00d364:	0706                	slli	a4,a4,0x1
1c00d366:	0407e7b3          	p.max	a5,a5,zero
1c00d36a:	00f6d723          	p.sh	a5,a4(a3)
1c00d36e:	5472                	lw	s0,60(sp)
1c00d370:	54e2                	lw	s1,56(sp)
1c00d372:	5952                	lw	s2,52(sp)
1c00d374:	59c2                	lw	s3,48(sp)
1c00d376:	5a32                	lw	s4,44(sp)
1c00d378:	5aa2                	lw	s5,40(sp)
1c00d37a:	5b12                	lw	s6,36(sp)
1c00d37c:	5b82                	lw	s7,32(sp)
1c00d37e:	4c72                	lw	s8,28(sp)
1c00d380:	4ce2                	lw	s9,24(sp)
1c00d382:	4d52                	lw	s10,20(sp)
1c00d384:	4dc2                	lw	s11,16(sp)
1c00d386:	6121                	addi	sp,sp,64
1c00d388:	8082                	ret
1c00d38a:	f373ffe3          	bleu	s7,t2,1c00d2c8 <KerMaxPool2x2Stride2_fp+0x1dc>
1c00d38e:	00179413          	slli	s0,a5,0x1
1c00d392:	40f80c33          	sub	s8,a6,a5
1c00d396:	41a40433          	sub	s0,s0,s10
1c00d39a:	ec0c02e3          	beqz	s8,1c00d25e <KerMaxPool2x2Stride2_fp+0x172>
1c00d39e:	00139313          	slli	t1,t2,0x1
1c00d3a2:	41430e33          	sub	t3,t1,s4
1c00d3a6:	8372                	mv	t1,t3
1c00d3a8:	8922                	mv	s2,s0
1c00d3aa:	0e05                	addi	t3,t3,1
1c00d3ac:	84be                	mv	s1,a5
1c00d3ae:	42b30933          	p.mac	s2,t1,a1
1c00d3b2:	00259a93          	slli	s5,a1,0x2
1c00d3b6:	00171d93          	slli	s11,a4,0x1
1c00d3ba:	0c0a                	slli	s8,s8,0x2
1c00d3bc:	407b89b3          	sub	s3,s7,t2
1c00d3c0:	42be0433          	p.mac	s0,t3,a1
1c00d3c4:	0906                	slli	s2,s2,0x1
1c00d3c6:	992a                	add	s2,s2,a0
1c00d3c8:	427704b3          	p.mac	s1,a4,t2
1c00d3cc:	0406                	slli	s0,s0,0x1
1c00d3ce:	942a                	add	s0,s0,a0
1c00d3d0:	0486                	slli	s1,s1,0x1
1c00d3d2:	94b6                	add	s1,s1,a3
1c00d3d4:	01c9c07b          	lp.setup	x0,s3,1c00d40c <KerMaxPool2x2Stride2_fp+0x320>
1c00d3d8:	ffcc0e13          	addi	t3,s8,-4
1c00d3dc:	002e5e13          	srli	t3,t3,0x2
1c00d3e0:	8fa6                	mv	t6,s1
1c00d3e2:	8f22                	mv	t5,s0
1c00d3e4:	8eca                	mv	t4,s2
1c00d3e6:	0e05                	addi	t3,t3,1
1c00d3e8:	00ee40fb          	lp.setup	x1,t3,1c00d404 <KerMaxPool2x2Stride2_fp+0x318>
1c00d3ec:	004f228b          	p.lw	t0,4(t5!)
1c00d3f0:	004ea30b          	p.lw	t1,4(t4!)
1c00d3f4:	30530357          	pv.max.h	t1,t1,t0
1c00d3f8:	780362d7          	pv.extract.h	t0,t1,0
1c00d3fc:	7a036357          	pv.extract.h	t1,t1,1
1c00d400:	0462e333          	p.max	t1,t0,t1
1c00d404:	006f912b          	p.sh	t1,2(t6!)
1c00d408:	9956                	add	s2,s2,s5
1c00d40a:	9456                	add	s0,s0,s5
1c00d40c:	94ee                	add	s1,s1,s11
1c00d40e:	bd81                	j	1c00d25e <KerMaxPool2x2Stride2_fp+0x172>
1c00d410:	80000337          	lui	t1,0x80000
1c00d414:	fff34313          	not	t1,t1
1c00d418:	00658e33          	add	t3,a1,t1
1c00d41c:	0e06                	slli	t3,t3,0x1
1c00d41e:	9e2a                	add	t3,t3,a0
1c00d420:	000e1e03          	lh	t3,0(t3)
1c00d424:	933a                	add	t1,t1,a4
1c00d426:	0306                	slli	t1,t1,0x1
1c00d428:	040e6e33          	p.max	t3,t3,zero
1c00d42c:	01c6d323          	p.sh	t3,t1(a3)
1c00d430:	b34d                	j	1c00d1d2 <KerMaxPool2x2Stride2_fp+0xe6>
1c00d432:	4385                	li	t2,1
1c00d434:	bdb5                	j	1c00d2b0 <KerMaxPool2x2Stride2_fp+0x1c4>

1c00d436 <KerAvgPool2x2Stride2_fp>:
1c00d436:	715d                	addi	sp,sp,-80
1c00d438:	4366                	lw	t1,88(sp)
1c00d43a:	da5a                	sw	s6,52(sp)
1c00d43c:	06015f83          	lhu	t6,96(sp)
1c00d440:	4b76                	lw	s6,92(sp)
1c00d442:	d85e                	sw	s7,48(sp)
1c00d444:	d06e                	sw	s11,32(sp)
1c00d446:	78037bd7          	pv.extract.b	s7,t1,0
1c00d44a:	7a037dd7          	pv.extract.b	s11,t1,1
1c00d44e:	78137f57          	pv.extract.b	t5,t1,2
1c00d452:	7a137357          	pv.extract.b	t1,t1,3
1c00d456:	001fbf93          	seqz	t6,t6
1c00d45a:	ca1a                	sw	t1,20(sp)
1c00d45c:	780b7357          	pv.extract.b	t1,s6,0
1c00d460:	c2ca                	sw	s2,68(sp)
1c00d462:	d662                	sw	s8,44(sp)
1c00d464:	41f00fb3          	neg	t6,t6
1c00d468:	c6a2                	sw	s0,76(sp)
1c00d46a:	c4a6                	sw	s1,72(sp)
1c00d46c:	c0ce                	sw	s3,64(sp)
1c00d46e:	de52                	sw	s4,60(sp)
1c00d470:	dc56                	sw	s5,56(sp)
1c00d472:	d466                	sw	s9,40(sp)
1c00d474:	d26a                	sw	s10,36(sp)
1c00d476:	ce32                	sw	a2,28(sp)
1c00d478:	cc46                	sw	a7,24(sp)
1c00d47a:	c61a                	sw	t1,12(sp)
1c00d47c:	05015903          	lhu	s2,80(sp)
1c00d480:	05415c03          	lhu	s8,84(sp)
1c00d484:	781b7b57          	pv.extract.b	s6,s6,2
1c00d488:	fc0fbfb3          	p.bclr	t6,t6,30,0
1c00d48c:	260b8263          	beqz	s7,1c00d6f0 <KerAvgPool2x2Stride2_fp+0x2ba>
1c00d490:	27897063          	bleu	s8,s2,1c00d6f0 <KerAvgPool2x2Stride2_fp+0x2ba>
1c00d494:	00191d13          	slli	s10,s2,0x1
1c00d498:	416d0333          	sub	t1,s10,s6
1c00d49c:	889a                	mv	a7,t1
1c00d49e:	00159613          	slli	a2,a1,0x1
1c00d4a2:	0305                	addi	t1,t1,1
1c00d4a4:	8e2a                	mv	t3,a0
1c00d4a6:	00171a93          	slli	s5,a4,0x1
1c00d4aa:	42c30e33          	p.mac	t3,t1,a2
1c00d4ae:	8336                	mv	t1,a3
1c00d4b0:	8eaa                	mv	t4,a0
1c00d4b2:	00259993          	slli	s3,a1,0x2
1c00d4b6:	432a8333          	p.mac	t1,s5,s2
1c00d4ba:	42c88eb3          	p.mac	t4,a7,a2
1c00d4be:	412c08b3          	sub	a7,s8,s2
1c00d4c2:	00a8c0fb          	lp.setup	x1,a7,1c00d4d6 <KerAvgPool2x2Stride2_fp+0xa0>
1c00d4c6:	113ef60b          	p.lh	a2,s3(t4!)
1c00d4ca:	113e728b          	p.lh	t0,s3(t3!)
1c00d4ce:	0456265b          	p.addn	a2,a2,t0,2
1c00d4d2:	04cfe633          	p.max	a2,t6,a2
1c00d4d6:	00c35aab          	p.sh	a2,s5(t1!)
1c00d4da:	060f0263          	beqz	t5,1c00d53e <KerAvgPool2x2Stride2_fp+0x108>
1c00d4de:	4632                	lw	a2,12(sp)
1c00d4e0:	00179e13          	slli	t3,a5,0x1
1c00d4e4:	40ce08b3          	sub	a7,t3,a2
1c00d4e8:	40f80633          	sub	a2,a6,a5
1c00d4ec:	00189313          	slli	t1,a7,0x1
1c00d4f0:	c605                	beqz	a2,1c00d518 <KerAvgPool2x2Stride2_fp+0xe2>
1c00d4f2:	00261893          	slli	a7,a2,0x2
1c00d4f6:	18f1                	addi	a7,a7,-4
1c00d4f8:	0028d893          	srli	a7,a7,0x2
1c00d4fc:	9e36                	add	t3,t3,a3
1c00d4fe:	932a                	add	t1,t1,a0
1c00d500:	0885                	addi	a7,a7,1
1c00d502:	0098c0fb          	lp.setup	x1,a7,1c00d514 <KerAvgPool2x2Stride2_fp+0xde>
1c00d506:	0043260b          	p.lw	a2,4(t1!) # 80000004 <pulp__FC+0x80000005>
1c00d50a:	9a066657          	pv.dotsp.sci.h	a2,a2,1
1c00d50e:	8609                	srai	a2,a2,0x2
1c00d510:	04cfe633          	p.max	a2,t6,a2
1c00d514:	00ce112b          	p.sh	a2,2(t3!)
1c00d518:	000b8963          	beqz	s7,1c00d52a <KerAvgPool2x2Stride2_fp+0xf4>
1c00d51c:	00051603          	lh	a2,0(a0)
1c00d520:	8609                	srai	a2,a2,0x2
1c00d522:	05f66633          	p.max	a2,a2,t6
1c00d526:	00c69023          	sh	a2,0(a3)
1c00d52a:	1e0d9163          	bnez	s11,1c00d70c <KerAvgPool2x2Stride2_fp+0x2d6>
1c00d52e:	0f897b63          	bleu	s8,s2,1c00d624 <KerAvgPool2x2Stride2_fp+0x1ee>
1c00d532:	00171a93          	slli	s5,a4,0x1
1c00d536:	00259993          	slli	s3,a1,0x2
1c00d53a:	00191d13          	slli	s10,s2,0x1
1c00d53e:	001d0613          	addi	a2,s10,1
1c00d542:	41660633          	sub	a2,a2,s6
1c00d546:	02b60633          	mul	a2,a2,a1
1c00d54a:	4e32                	lw	t3,12(sp)
1c00d54c:	00179893          	slli	a7,a5,0x1
1c00d550:	416d0333          	sub	t1,s10,s6
1c00d554:	41c888b3          	sub	a7,a7,t3
1c00d558:	8446                	mv	s0,a7
1c00d55a:	83be                	mv	t2,a5
1c00d55c:	40f80a33          	sub	s4,a6,a5
1c00d560:	002a1c93          	slli	s9,s4,0x2
1c00d564:	412c04b3          	sub	s1,s8,s2
1c00d568:	42b30433          	p.mac	s0,t1,a1
1c00d56c:	c832                	sw	a2,16(sp)
1c00d56e:	4342                	lw	t1,16(sp)
1c00d570:	00190613          	addi	a2,s2,1
1c00d574:	006882b3          	add	t0,a7,t1
1c00d578:	0286                	slli	t0,t0,0x1
1c00d57a:	92aa                	add	t0,t0,a0
1c00d57c:	432703b3          	p.mac	t2,a4,s2
1c00d580:	0406                	slli	s0,s0,0x1
1c00d582:	942a                	add	s0,s0,a0
1c00d584:	0386                	slli	t2,t2,0x1
1c00d586:	93b6                	add	t2,t2,a3
1c00d588:	1acc6763          	bltu	s8,a2,1c00d736 <KerAvgPool2x2Stride2_fp+0x300>
1c00d58c:	1a0c0563          	beqz	s8,1c00d736 <KerAvgPool2x2Stride2_fp+0x300>
1c00d590:	01d4c07b          	lp.setup	x0,s1,1c00d5ca <KerAvgPool2x2Stride2_fp+0x194>
1c00d594:	020a0963          	beqz	s4,1c00d5c6 <KerAvgPool2x2Stride2_fp+0x190>
1c00d598:	ffcc8893          	addi	a7,s9,-4
1c00d59c:	0028d893          	srli	a7,a7,0x2
1c00d5a0:	8e9e                	mv	t4,t2
1c00d5a2:	8e16                	mv	t3,t0
1c00d5a4:	8322                	mv	t1,s0
1c00d5a6:	0885                	addi	a7,a7,1
1c00d5a8:	00d8c0fb          	lp.setup	x1,a7,1c00d5c2 <KerAvgPool2x2Stride2_fp+0x18c>
1c00d5ac:	0043260b          	p.lw	a2,4(t1!)
1c00d5b0:	004e2f0b          	p.lw	t5,4(t3!)
1c00d5b4:	9a066657          	pv.dotsp.sci.h	a2,a2,1
1c00d5b8:	ba0f6657          	pv.sdotsp.sci.h	a2,t5,1
1c00d5bc:	8609                	srai	a2,a2,0x2
1c00d5be:	04cfe633          	p.max	a2,t6,a2
1c00d5c2:	00ce912b          	p.sh	a2,2(t4!)
1c00d5c6:	944e                	add	s0,s0,s3
1c00d5c8:	92ce                	add	t0,t0,s3
1c00d5ca:	93d6                	add	t2,t2,s5
1c00d5cc:	040d8c63          	beqz	s11,1c00d624 <KerAvgPool2x2Stride2_fp+0x1ee>
1c00d5d0:	4342                	lw	t1,16(sp)
1c00d5d2:	80000637          	lui	a2,0x80000
1c00d5d6:	fff64613          	not	a2,a2
1c00d5da:	0d09                	addi	s10,s10,2
1c00d5dc:	00190893          	addi	a7,s2,1
1c00d5e0:	8eb2                	mv	t4,a2
1c00d5e2:	416d0b33          	sub	s6,s10,s6
1c00d5e6:	00c30e33          	add	t3,t1,a2
1c00d5ea:	42bb0eb3          	p.mac	t4,s6,a1
1c00d5ee:	0e06                	slli	t3,t3,0x1
1c00d5f0:	9e2a                	add	t3,t3,a0
1c00d5f2:	412c0933          	sub	s2,s8,s2
1c00d5f6:	42e88633          	p.mac	a2,a7,a4
1c00d5fa:	0e86                	slli	t4,t4,0x1
1c00d5fc:	9eaa                	add	t4,t4,a0
1c00d5fe:	00161313          	slli	t1,a2,0x1
1c00d602:	9336                	add	t1,t1,a3
1c00d604:	131c6763          	bltu	s8,a7,1c00d732 <KerAvgPool2x2Stride2_fp+0x2fc>
1c00d608:	120c0563          	beqz	s8,1c00d732 <KerAvgPool2x2Stride2_fp+0x2fc>
1c00d60c:	00a940fb          	lp.setup	x1,s2,1c00d620 <KerAvgPool2x2Stride2_fp+0x1ea>
1c00d610:	113e760b          	p.lh	a2,s3(t3!)
1c00d614:	113ef88b          	p.lh	a7,s3(t4!)
1c00d618:	0516265b          	p.addn	a2,a2,a7,2
1c00d61c:	04cfe633          	p.max	a2,t6,a2
1c00d620:	00c35aab          	p.sh	a2,s5(t1!)
1c00d624:	4652                	lw	a2,20(sp)
1c00d626:	c65d                	beqz	a2,1c00d6d4 <KerAvgPool2x2Stride2_fp+0x29e>
1c00d628:	4e72                	lw	t3,28(sp)
1c00d62a:	4332                	lw	t1,12(sp)
1c00d62c:	00179613          	slli	a2,a5,0x1
1c00d630:	fffe0893          	addi	a7,t3,-1
1c00d634:	02b888b3          	mul	a7,a7,a1
1c00d638:	40f80833          	sub	a6,a6,a5
1c00d63c:	9646                	add	a2,a2,a7
1c00d63e:	40660633          	sub	a2,a2,t1
1c00d642:	00161313          	slli	t1,a2,0x1
1c00d646:	02080c63          	beqz	a6,1c00d67e <KerAvgPool2x2Stride2_fp+0x248>
1c00d64a:	4e62                	lw	t3,24(sp)
1c00d64c:	fffe0613          	addi	a2,t3,-1
1c00d650:	42e607b3          	p.mac	a5,a2,a4
1c00d654:	00281613          	slli	a2,a6,0x2
1c00d658:	1671                	addi	a2,a2,-4
1c00d65a:	8209                	srli	a2,a2,0x2
1c00d65c:	00650833          	add	a6,a0,t1
1c00d660:	0605                	addi	a2,a2,1
1c00d662:	00179313          	slli	t1,a5,0x1
1c00d666:	9336                	add	t1,t1,a3
1c00d668:	009640fb          	lp.setup	x1,a2,1c00d67a <KerAvgPool2x2Stride2_fp+0x244>
1c00d66c:	0048278b          	p.lw	a5,4(a6!)
1c00d670:	9a07e7d7          	pv.dotsp.sci.h	a5,a5,1
1c00d674:	8789                	srai	a5,a5,0x2
1c00d676:	04ffe7b3          	p.max	a5,t6,a5
1c00d67a:	00f3112b          	p.sh	a5,2(t1!)
1c00d67e:	020b8263          	beqz	s7,1c00d6a2 <KerAvgPool2x2Stride2_fp+0x26c>
1c00d682:	4362                	lw	t1,24(sp)
1c00d684:	00189793          	slli	a5,a7,0x1
1c00d688:	97aa                	add	a5,a5,a0
1c00d68a:	fff30613          	addi	a2,t1,-1
1c00d68e:	02e60633          	mul	a2,a2,a4
1c00d692:	00079783          	lh	a5,0(a5) # 80000000 <pulp__FC+0x80000001>
1c00d696:	8789                	srai	a5,a5,0x2
1c00d698:	04ffe7b3          	p.max	a5,t6,a5
1c00d69c:	0606                	slli	a2,a2,0x1
1c00d69e:	00f6d623          	p.sh	a5,a2(a3)
1c00d6a2:	020d8963          	beqz	s11,1c00d6d4 <KerAvgPool2x2Stride2_fp+0x29e>
1c00d6a6:	800007b7          	lui	a5,0x80000
1c00d6aa:	4862                	lw	a6,24(sp)
1c00d6ac:	fff7c613          	not	a2,a5
1c00d6b0:	87b2                	mv	a5,a2
1c00d6b2:	430707b3          	p.mac	a5,a4,a6
1c00d6b6:	873e                	mv	a4,a5
1c00d6b8:	011587b3          	add	a5,a1,a7
1c00d6bc:	97b2                	add	a5,a5,a2
1c00d6be:	0786                	slli	a5,a5,0x1
1c00d6c0:	953e                	add	a0,a0,a5
1c00d6c2:	00051783          	lh	a5,0(a0)
1c00d6c6:	8789                	srai	a5,a5,0x2
1c00d6c8:	04ffefb3          	p.max	t6,t6,a5
1c00d6cc:	00171793          	slli	a5,a4,0x1
1c00d6d0:	01f6d7a3          	p.sh	t6,a5(a3)
1c00d6d4:	4436                	lw	s0,76(sp)
1c00d6d6:	44a6                	lw	s1,72(sp)
1c00d6d8:	4916                	lw	s2,68(sp)
1c00d6da:	4986                	lw	s3,64(sp)
1c00d6dc:	5a72                	lw	s4,60(sp)
1c00d6de:	5ae2                	lw	s5,56(sp)
1c00d6e0:	5b52                	lw	s6,52(sp)
1c00d6e2:	5bc2                	lw	s7,48(sp)
1c00d6e4:	5c32                	lw	s8,44(sp)
1c00d6e6:	5ca2                	lw	s9,40(sp)
1c00d6e8:	5d12                	lw	s10,36(sp)
1c00d6ea:	5d82                	lw	s11,32(sp)
1c00d6ec:	6161                	addi	sp,sp,80
1c00d6ee:	8082                	ret
1c00d6f0:	e20f0fe3          	beqz	t5,1c00d52e <KerAvgPool2x2Stride2_fp+0xf8>
1c00d6f4:	4632                	lw	a2,12(sp)
1c00d6f6:	00179e13          	slli	t3,a5,0x1
1c00d6fa:	40ce08b3          	sub	a7,t3,a2
1c00d6fe:	40f80633          	sub	a2,a6,a5
1c00d702:	00189313          	slli	t1,a7,0x1
1c00d706:	de0616e3          	bnez	a2,1c00d4f2 <KerAvgPool2x2Stride2_fp+0xbc>
1c00d70a:	b539                	j	1c00d518 <KerAvgPool2x2Stride2_fp+0xe2>
1c00d70c:	80000637          	lui	a2,0x80000
1c00d710:	fff64613          	not	a2,a2
1c00d714:	00c588b3          	add	a7,a1,a2
1c00d718:	0886                	slli	a7,a7,0x1
1c00d71a:	98aa                	add	a7,a7,a0
1c00d71c:	00089883          	lh	a7,0(a7)
1c00d720:	963a                	add	a2,a2,a4
1c00d722:	0606                	slli	a2,a2,0x1
1c00d724:	4028d893          	srai	a7,a7,0x2
1c00d728:	05f8e8b3          	p.max	a7,a7,t6
1c00d72c:	0116d623          	p.sh	a7,a2(a3)
1c00d730:	bbfd                	j	1c00d52e <KerAvgPool2x2Stride2_fp+0xf8>
1c00d732:	4905                	li	s2,1
1c00d734:	bde1                	j	1c00d60c <KerAvgPool2x2Stride2_fp+0x1d6>
1c00d736:	4485                	li	s1,1
1c00d738:	bda1                	j	1c00d590 <KerAvgPool2x2Stride2_fp+0x15a>

1c00d73a <KerParPool2x2Stride2_fp>:

{
	unsigned int FS=2,S=2;
	short int * __restrict__ In = Arg->In;
	unsigned int W = Arg->W, H = Arg->H;
	unsigned int OutFeatures = Arg->OutFeatures;
1c00d73a:	00c55703          	lhu	a4,12(a0)
{
1c00d73e:	7159                	addi	sp,sp,-112
	short int * __restrict__ Out = Arg->Out;
	int PoolMax = ((Arg->Oper&0x2)==0);
	int ReLU = ((int)Arg->Oper&0x1);

	unsigned int CoreId = gap_coreid();
1c00d740:	f1402373          	csrr	t1,mhartid
{
1c00d744:	d4a2                	sw	s0,104(sp)
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c00d746:	f8373433          	p.bclr	s0,a4,28,3
1c00d74a:	00375793          	srli	a5,a4,0x3
1c00d74e:	00803433          	snez	s0,s0
1c00d752:	943e                	add	s0,s0,a5
	unsigned int CoreId = gap_coreid();
1c00d754:	c8031333          	p.extractu	t1,t1,4,0
{
1c00d758:	d2a6                	sw	s1,100(sp)
1c00d75a:	d0ca                	sw	s2,96(sp)
1c00d75c:	cece                	sw	s3,92(sp)
1c00d75e:	ccd2                	sw	s4,88(sp)
1c00d760:	cad6                	sw	s5,84(sp)
1c00d762:	c6de                	sw	s7,76(sp)
1c00d764:	de6e                	sw	s11,60(sp)
1c00d766:	d686                	sw	ra,108(sp)
1c00d768:	c8da                	sw	s6,80(sp)
1c00d76a:	c4e2                	sw	s8,72(sp)
1c00d76c:	c2e6                	sw	s9,68(sp)
1c00d76e:	c0ea                	sw	s10,64(sp)
	unsigned int Chunk = ChunkSize(OutFeatures);
	unsigned int First = Chunk*CoreId;
1c00d770:	02830db3          	mul	s11,t1,s0
	unsigned int Last = Min(First+Chunk, OutFeatures);
	v4s PadIn = Arg->Pad;
1c00d774:	01452b03          	lw	s6,20(a0)

	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00d778:	00655603          	lhu	a2,6(a0)
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00d77c:	00a55683          	lhu	a3,10(a0)
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00d780:	780b79d7          	pv.extract.b	s3,s6,0
1c00d784:	ffe60793          	addi	a5,a2,-2 # 7ffffffe <pulp__FC+0x7fffffff>
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00d788:	964e                	add	a2,a2,s3
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00d78a:	781b7957          	pv.extract.b	s2,s6,2
	return ((Pad+Stride-1)/Stride);
1c00d78e:	00198813          	addi	a6,s3,1
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00d792:	ffe68493          	addi	s1,a3,-2
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00d796:	97ce                	add	a5,a5,s3
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00d798:	01f65993          	srli	s3,a2,0x1f
	return ((Pad+Stride-1)/Stride);
1c00d79c:	00190593          	addi	a1,s2,1
	int PoolMax = ((Arg->Oper&0x2)==0);
1c00d7a0:	01b54c03          	lbu	s8,27(a0)
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00d7a4:	7a0b7e57          	pv.extract.b	t3,s6,1
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00d7a8:	94ca                	add	s1,s1,s2
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00d7aa:	02c9a9db          	p.addn	s3,s3,a2,1
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00d7ae:	7a1b78d7          	pv.extract.b	a7,s6,3
	unsigned int W = Arg->W, H = Arg->H;
1c00d7b2:	00855603          	lhu	a2,8(a0)
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00d7b6:	96ca                	add	a3,a3,s2
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00d7b8:	83c7a7db          	p.addun	a5,a5,t3,1
	return ((Pad+Stride-1)/Stride);
1c00d7bc:	01f85a93          	srli	s5,a6,0x1f
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00d7c0:	8314a4db          	p.addun	s1,s1,a7,1
	return ((Pad+Stride-1)/Stride);
1c00d7c4:	01f5da13          	srli	s4,a1,0x1f
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00d7c8:	01f6d913          	srli	s2,a3,0x1f
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00d7cc:	0785                	addi	a5,a5,1
	return ((Pad+Stride-1)/Stride);
1c00d7ce:	030aaadb          	p.addn	s5,s5,a6,1
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00d7d2:	0485                	addi	s1,s1,1
	return ((Pad+Stride-1)/Stride);
1c00d7d4:	02ba2a5b          	p.addn	s4,s4,a1,1
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00d7d8:	02d9295b          	p.addn	s2,s2,a3,1
	unsigned int Last = Min(First+Chunk, OutFeatures);
1c00d7dc:	946e                	add	s0,s0,s11
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c00d7de:	0557cab3          	p.min	s5,a5,s5
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c00d7e2:	0544ca33          	p.min	s4,s1,s4

	if (PoolMax) for (unsigned int of=First; of<Last; of++) KerMaxPool2x2Stride2_fp(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn, ReLU);
1c00d7e6:	002c7693          	andi	a3,s8,2
	unsigned int W = Arg->W, H = Arg->H;
1c00d7ea:	d032                	sw	a2,32(sp)
	short int * __restrict__ In = Arg->In;
1c00d7ec:	00052e83          	lw	t4,0(a0)
	unsigned int W = Arg->W, H = Arg->H;
1c00d7f0:	00455b83          	lhu	s7,4(a0)
	short int * __restrict__ Out = Arg->Out;
1c00d7f4:	01052e03          	lw	t3,16(a0)
1c00d7f8:	fc1c3c33          	p.bclr	s8,s8,30,1
	unsigned int Last = Min(First+Chunk, OutFeatures);
1c00d7fc:	04e44433          	p.min	s0,s0,a4
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c00d800:	053ae9b3          	p.max	s3,s5,s3
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c00d804:	052a6933          	p.max	s2,s4,s2
	if (PoolMax) for (unsigned int of=First; of<Last; of++) KerMaxPool2x2Stride2_fp(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn, ReLU);
1c00d808:	cad1                	beqz	a3,1c00d89c <KerParPool2x2Stride2_fp+0x162>
	else	 for (unsigned int of=First; of<Last; of++) KerAvgPool2x2Stride2_fp(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn, ReLU);
1c00d80a:	068df463          	bleu	s0,s11,1c00d872 <KerParPool2x2Stride2_fp+0x138>
1c00d80e:	02cb8cb3          	mul	s9,s7,a2
1c00d812:	1004d633          	p.exthz	a2,s1
1c00d816:	10095933          	p.exthz	s2,s2
1c00d81a:	d64a                	sw	s2,44(sp)
1c00d81c:	8d72                	mv	s10,t3
1c00d81e:	8976                	mv	s2,t4
1c00d820:	1007d733          	p.exthz	a4,a5
1c00d824:	d23a                	sw	a4,36(sp)
1c00d826:	100adab3          	p.exthz	s5,s5
1c00d82a:	1009d9b3          	p.exthz	s3,s3
1c00d82e:	029784b3          	mul	s1,a5,s1
1c00d832:	0c86                	slli	s9,s9,0x1
1c00d834:	d432                	sw	a2,40(sp)
1c00d836:	100a5a33          	p.exthz	s4,s4
1c00d83a:	100c5c33          	p.exthz	s8,s8
1c00d83e:	0486                	slli	s1,s1,0x1
1c00d840:	439d8933          	p.mac	s2,s11,s9
1c00d844:	429d8d33          	p.mac	s10,s11,s1
1c00d848:	5732                	lw	a4,44(sp)
1c00d84a:	58a2                	lw	a7,40(sp)
1c00d84c:	5602                	lw	a2,32(sp)
1c00d84e:	c23a                	sw	a4,4(sp)
1c00d850:	5712                	lw	a4,36(sp)
1c00d852:	86ea                	mv	a3,s10
1c00d854:	854a                	mv	a0,s2
1c00d856:	c862                	sw	s8,16(sp)
1c00d858:	c65a                	sw	s6,12(sp)
1c00d85a:	c45a                	sw	s6,8(sp)
1c00d85c:	c052                	sw	s4,0(sp)
1c00d85e:	884e                	mv	a6,s3
1c00d860:	87d6                	mv	a5,s5
1c00d862:	85de                	mv	a1,s7
1c00d864:	0d85                	addi	s11,s11,1
1c00d866:	bd1ff0ef          	jal	ra,1c00d436 <KerAvgPool2x2Stride2_fp>
1c00d86a:	9966                	add	s2,s2,s9
1c00d86c:	9d26                	add	s10,s10,s1
1c00d86e:	fdb41de3          	bne	s0,s11,1c00d848 <KerParPool2x2Stride2_fp+0x10e>
1c00d872:	002047b7          	lui	a5,0x204
1c00d876:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00d87a:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);

}
1c00d87e:	50b6                	lw	ra,108(sp)
1c00d880:	5426                	lw	s0,104(sp)
1c00d882:	5496                	lw	s1,100(sp)
1c00d884:	5906                	lw	s2,96(sp)
1c00d886:	49f6                	lw	s3,92(sp)
1c00d888:	4a66                	lw	s4,88(sp)
1c00d88a:	4ad6                	lw	s5,84(sp)
1c00d88c:	4b46                	lw	s6,80(sp)
1c00d88e:	4bb6                	lw	s7,76(sp)
1c00d890:	4c26                	lw	s8,72(sp)
1c00d892:	4c96                	lw	s9,68(sp)
1c00d894:	4d06                	lw	s10,64(sp)
1c00d896:	5df2                	lw	s11,60(sp)
1c00d898:	6165                	addi	sp,sp,112
1c00d89a:	8082                	ret
	if (PoolMax) for (unsigned int of=First; of<Last; of++) KerMaxPool2x2Stride2_fp(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn, ReLU);
1c00d89c:	fc8dfbe3          	bleu	s0,s11,1c00d872 <KerParPool2x2Stride2_fp+0x138>
1c00d8a0:	02cb8cb3          	mul	s9,s7,a2
1c00d8a4:	1004d733          	p.exthz	a4,s1
1c00d8a8:	10095933          	p.exthz	s2,s2
1c00d8ac:	d64a                	sw	s2,44(sp)
1c00d8ae:	8d72                	mv	s10,t3
1c00d8b0:	8976                	mv	s2,t4
1c00d8b2:	1007d633          	p.exthz	a2,a5
1c00d8b6:	d232                	sw	a2,36(sp)
1c00d8b8:	100adab3          	p.exthz	s5,s5
1c00d8bc:	1009d9b3          	p.exthz	s3,s3
1c00d8c0:	029784b3          	mul	s1,a5,s1
1c00d8c4:	0c86                	slli	s9,s9,0x1
1c00d8c6:	d43a                	sw	a4,40(sp)
1c00d8c8:	100a5a33          	p.exthz	s4,s4
1c00d8cc:	100c5c33          	p.exthz	s8,s8
1c00d8d0:	0486                	slli	s1,s1,0x1
1c00d8d2:	43bc8933          	p.mac	s2,s9,s11
1c00d8d6:	43b48d33          	p.mac	s10,s1,s11
1c00d8da:	57b2                	lw	a5,44(sp)
1c00d8dc:	58a2                	lw	a7,40(sp)
1c00d8de:	5712                	lw	a4,36(sp)
1c00d8e0:	5602                	lw	a2,32(sp)
1c00d8e2:	86ea                	mv	a3,s10
1c00d8e4:	854a                	mv	a0,s2
1c00d8e6:	c23e                	sw	a5,4(sp)
1c00d8e8:	c862                	sw	s8,16(sp)
1c00d8ea:	c65a                	sw	s6,12(sp)
1c00d8ec:	c45a                	sw	s6,8(sp)
1c00d8ee:	c052                	sw	s4,0(sp)
1c00d8f0:	884e                	mv	a6,s3
1c00d8f2:	87d6                	mv	a5,s5
1c00d8f4:	85de                	mv	a1,s7
1c00d8f6:	0d85                	addi	s11,s11,1
1c00d8f8:	ff4ff0ef          	jal	ra,1c00d0ec <KerMaxPool2x2Stride2_fp>
1c00d8fc:	9966                	add	s2,s2,s9
1c00d8fe:	9d26                	add	s10,s10,s1
1c00d900:	fdb41de3          	bne	s0,s11,1c00d8da <KerParPool2x2Stride2_fp+0x1a0>
1c00d904:	b7bd                	j	1c00d872 <KerParPool2x2Stride2_fp+0x138>

1c00d906 <pi_flash_open>:


int pi_flash_open(struct pi_device *device)
{
  struct pi_flash_conf *conf = (struct pi_flash_conf *)device->config;
  pi_flash_api_t *api = (pi_flash_api_t *)conf->api;
1c00d906:	415c                	lw	a5,4(a0)
1c00d908:	439c                	lw	a5,0(a5)
  device->api = (struct pi_device_api *)api;
  return api->open(device);
1c00d90a:	0007a303          	lw	t1,0(a5)
  device->api = (struct pi_device_api *)api;
1c00d90e:	c11c                	sw	a5,0(a0)
  return api->open(device);
1c00d910:	8302                	jr	t1

1c00d912 <__flash_conf_init>:
}


void __flash_conf_init(struct pi_flash_conf *conf)
{
}
1c00d912:	8082                	ret

1c00d914 <rt_event_enqueue>:
}


static inline void pi_cl_send_callback_to_fc(pi_callback_t *callback)
{
  __rt_cluster_push_fc_event((rt_event_t *)(((unsigned int)callback) | 0x1));
1c00d914:	300476f3          	csrrci	a3,mstatus,8
1c00d918:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
1c00d91c:	00052023          	sw	zero,0(a0)
1c00d920:	01c00713          	li	a4,28
1c00d924:	c619                	beqz	a2,1c00d932 <rt_event_enqueue+0x1e>
1c00d926:	435c                	lw	a5,4(a4)
1c00d928:	c388                	sw	a0,0(a5)
1c00d92a:	c348                	sw	a0,4(a4)
1c00d92c:	30069073          	csrw	mstatus,a3
1c00d930:	8082                	ret
1c00d932:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00d936:	bfd5                	j	1c00d92a <rt_event_enqueue+0x16>

1c00d938 <__pi_cl_fs_copy_req>:
1c00d938:	411c                	lw	a5,0(a0)
1c00d93a:	4b9c                	lw	a5,16(a5)
1c00d93c:	4398                	lw	a4,0(a5)
1c00d93e:	e70d                	bnez	a4,1c00d968 <__pi_cl_fs_copy_req+0x30>
1c00d940:	c388                	sw	a0,0(a5)
1c00d942:	c3c8                	sw	a0,4(a5)
1c00d944:	00052223          	sw	zero,4(a0)
1c00d948:	e31d                	bnez	a4,1c00d96e <__pi_cl_fs_copy_req+0x36>
1c00d94a:	1c00e737          	lui	a4,0x1c00e
1c00d94e:	a6870713          	addi	a4,a4,-1432 # 1c00da68 <__pi_cl_fs_copy_req_exec>
1c00d952:	c7d8                	sw	a4,12(a5)
1c00d954:	4705                	li	a4,1
1c00d956:	cb88                	sw	a0,16(a5)
1c00d958:	0207a023          	sw	zero,32(a5)
1c00d95c:	db98                	sw	a4,48(a5)
1c00d95e:	00078e23          	sb	zero,28(a5)
1c00d962:	00878513          	addi	a0,a5,8
1c00d966:	b77d                	j	1c00d914 <rt_event_enqueue>
1c00d968:	43d4                	lw	a3,4(a5)
1c00d96a:	c2c8                	sw	a0,4(a3)
1c00d96c:	bfd9                	j	1c00d942 <__pi_cl_fs_copy_req+0xa>
1c00d96e:	8082                	ret

1c00d970 <pi_task_wait_on.isra.3>:
1c00d970:	1141                	addi	sp,sp,-16
1c00d972:	c422                	sw	s0,8(sp)
1c00d974:	c226                	sw	s1,4(sp)
1c00d976:	c606                	sw	ra,12(sp)
1c00d978:	c04a                	sw	s2,0(sp)
1c00d97a:	842a                	mv	s0,a0
1c00d97c:	00040783          	lb	a5,0(s0)
1c00d980:	c799                	beqz	a5,1c00d98e <pi_task_wait_on.isra.3+0x1e>
1c00d982:	40b2                	lw	ra,12(sp)
1c00d984:	4422                	lw	s0,8(sp)
1c00d986:	4492                	lw	s1,4(sp)
1c00d988:	4902                	lw	s2,0(sp)
1c00d98a:	0141                	addi	sp,sp,16
1c00d98c:	8082                	ret
1c00d98e:	30047973          	csrrci	s2,mstatus,8
1c00d992:	4585                	li	a1,1
1c00d994:	01c00513          	li	a0,28
1c00d998:	637020ef          	jal	ra,1c0107ce <__rt_event_execute>
1c00d99c:	30091073          	csrw	mstatus,s2
1c00d9a0:	bff1                	j	1c00d97c <pi_task_wait_on.isra.3+0xc>

1c00d9a2 <pi_fs_conf_init>:
1c00d9a2:	00052023          	sw	zero,0(a0)
1c00d9a6:	00052423          	sw	zero,8(a0)
1c00d9aa:	00050623          	sb	zero,12(a0)
1c00d9ae:	00052823          	sw	zero,16(a0)
1c00d9b2:	8082                	ret

1c00d9b4 <pi_fs_mount>:
1c00d9b4:	4158                	lw	a4,4(a0)
1c00d9b6:	4b1c                	lw	a5,16(a4)
1c00d9b8:	eb89                	bnez	a5,1c00d9ca <pi_fs_mount+0x16>
1c00d9ba:	431c                	lw	a5,0(a4)
1c00d9bc:	cb99                	beqz	a5,1c00d9d2 <pi_fs_mount+0x1e>
1c00d9be:	0017bf63          	p.bneimm	a5,1,1c00d9dc <pi_fs_mount+0x28>
1c00d9c2:	1c0157b7          	lui	a5,0x1c015
1c00d9c6:	8bc78793          	addi	a5,a5,-1860 # 1c0148bc <__pi_host_fs_api>
1c00d9ca:	0007a303          	lw	t1,0(a5)
1c00d9ce:	c11c                	sw	a5,0(a0)
1c00d9d0:	8302                	jr	t1
1c00d9d2:	1c0157b7          	lui	a5,0x1c015
1c00d9d6:	89478793          	addi	a5,a5,-1900 # 1c014894 <__pi_read_fs_api>
1c00d9da:	bfc5                	j	1c00d9ca <pi_fs_mount+0x16>
1c00d9dc:	557d                	li	a0,-1
1c00d9de:	8082                	ret

1c00d9e0 <pi_fs_unmount>:
1c00d9e0:	411c                	lw	a5,0(a0)
1c00d9e2:	0047a303          	lw	t1,4(a5)
1c00d9e6:	8302                	jr	t1

1c00d9e8 <pi_fs_open>:
1c00d9e8:	411c                	lw	a5,0(a0)
1c00d9ea:	0087a303          	lw	t1,8(a5)
1c00d9ee:	8302                	jr	t1

1c00d9f0 <pi_fs_close>:
1c00d9f0:	415c                	lw	a5,4(a0)
1c00d9f2:	00c7a303          	lw	t1,12(a5)
1c00d9f6:	8302                	jr	t1

1c00d9f8 <pi_fs_read_async>:
1c00d9f8:	415c                	lw	a5,4(a0)
1c00d9fa:	0107a303          	lw	t1,16(a5)
1c00d9fe:	8302                	jr	t1

1c00da00 <pi_fs_read>:
1c00da00:	7175                	addi	sp,sp,-144
1c00da02:	4785                	li	a5,1
1c00da04:	868a                	mv	a3,sp
1c00da06:	c706                	sw	ra,140(sp)
1c00da08:	c522                	sw	s0,136(sp)
1c00da0a:	cc3e                	sw	a5,24(sp)
1c00da0c:	d43e                	sw	a5,40(sp)
1c00da0e:	c202                	sw	zero,4(sp)
1c00da10:	00010a23          	sb	zero,20(sp)
1c00da14:	37d5                	jal	1c00d9f8 <pi_fs_read_async>
1c00da16:	842a                	mv	s0,a0
1c00da18:	0848                	addi	a0,sp,20
1c00da1a:	3f99                	jal	1c00d970 <pi_task_wait_on.isra.3>
1c00da1c:	8522                	mv	a0,s0
1c00da1e:	40ba                	lw	ra,140(sp)
1c00da20:	442a                	lw	s0,136(sp)
1c00da22:	6149                	addi	sp,sp,144
1c00da24:	8082                	ret

1c00da26 <pi_fs_write_async>:
1c00da26:	415c                	lw	a5,4(a0)
1c00da28:	0187a303          	lw	t1,24(a5)
1c00da2c:	8302                	jr	t1

1c00da2e <pi_fs_write>:
1c00da2e:	7175                	addi	sp,sp,-144
1c00da30:	4785                	li	a5,1
1c00da32:	868a                	mv	a3,sp
1c00da34:	c706                	sw	ra,140(sp)
1c00da36:	c522                	sw	s0,136(sp)
1c00da38:	cc3e                	sw	a5,24(sp)
1c00da3a:	d43e                	sw	a5,40(sp)
1c00da3c:	c202                	sw	zero,4(sp)
1c00da3e:	00010a23          	sb	zero,20(sp)
1c00da42:	37d5                	jal	1c00da26 <pi_fs_write_async>
1c00da44:	842a                	mv	s0,a0
1c00da46:	0848                	addi	a0,sp,20
1c00da48:	3725                	jal	1c00d970 <pi_task_wait_on.isra.3>
1c00da4a:	8522                	mv	a0,s0
1c00da4c:	40ba                	lw	ra,140(sp)
1c00da4e:	442a                	lw	s0,136(sp)
1c00da50:	6149                	addi	sp,sp,144
1c00da52:	8082                	ret

1c00da54 <pi_fs_copy_async>:
1c00da54:	00452803          	lw	a6,4(a0)
1c00da58:	02082303          	lw	t1,32(a6)
1c00da5c:	8302                	jr	t1

1c00da5e <pi_fs_copy_2d_async>:
1c00da5e:	00452303          	lw	t1,4(a0)
1c00da62:	02432303          	lw	t1,36(t1)
1c00da66:	8302                	jr	t1

1c00da68 <__pi_cl_fs_copy_req_exec>:
1c00da68:	411c                	lw	a5,0(a0)
1c00da6a:	1141                	addi	sp,sp,-16
1c00da6c:	c422                	sw	s0,8(sp)
1c00da6e:	4b98                	lw	a4,16(a5)
1c00da70:	c606                	sw	ra,12(sp)
1c00da72:	4785                	li	a5,1
1c00da74:	00070e23          	sb	zero,28(a4)
1c00da78:	db1c                	sw	a5,48(a4)
1c00da7a:	1c00e6b7          	lui	a3,0x1c00e
1c00da7e:	515c                	lw	a5,36(a0)
1c00da80:	ab868693          	addi	a3,a3,-1352 # 1c00dab8 <__pi_cl_fs_copy_req_done>
1c00da84:	842a                	mv	s0,a0
1c00da86:	c754                	sw	a3,12(a4)
1c00da88:	cb08                	sw	a0,16(a4)
1c00da8a:	02072023          	sw	zero,32(a4)
1c00da8e:	00870893          	addi	a7,a4,8
1c00da92:	4108                	lw	a0,0(a0)
1c00da94:	01344703          	lbu	a4,19(s0)
1c00da98:	4c14                	lw	a3,24(s0)
1c00da9a:	4850                	lw	a2,20(s0)
1c00da9c:	4c4c                	lw	a1,28(s0)
1c00da9e:	cb91                	beqz	a5,1c00dab2 <__pi_cl_fs_copy_req_exec+0x4a>
1c00daa0:	883a                	mv	a6,a4
1c00daa2:	5018                	lw	a4,32(s0)
1c00daa4:	3f6d                	jal	1c00da5e <pi_fs_copy_2d_async>
1c00daa6:	00a408a3          	sb	a0,17(s0)
1c00daaa:	40b2                	lw	ra,12(sp)
1c00daac:	4422                	lw	s0,8(sp)
1c00daae:	0141                	addi	sp,sp,16
1c00dab0:	8082                	ret
1c00dab2:	87c6                	mv	a5,a7
1c00dab4:	3745                	jal	1c00da54 <pi_fs_copy_async>
1c00dab6:	bfc5                	j	1c00daa6 <__pi_cl_fs_copy_req_exec+0x3e>

1c00dab8 <__pi_cl_fs_copy_req_done>:
1c00dab8:	411c                	lw	a5,0(a0)
1c00daba:	4705                	li	a4,1
1c00dabc:	4b94                	lw	a3,16(a5)
1c00dabe:	01254783          	lbu	a5,18(a0)
1c00dac2:	00e50823          	sb	a4,16(a0)
1c00dac6:	00201737          	lui	a4,0x201
1c00daca:	04078793          	addi	a5,a5,64
1c00dace:	07da                	slli	a5,a5,0x16
1c00dad0:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00dad4:	0007e723          	p.sw	zero,a4(a5)
1c00dad8:	300477f3          	csrrci	a5,mstatus,8
1c00dadc:	4148                	lw	a0,4(a0)
1c00dade:	c288                	sw	a0,0(a3)
1c00dae0:	30079073          	csrw	mstatus,a5
1c00dae4:	c111                	beqz	a0,1c00dae8 <__pi_cl_fs_copy_req_done+0x30>
1c00dae6:	b749                	j	1c00da68 <__pi_cl_fs_copy_req_exec>
1c00dae8:	8082                	ret

1c00daea <pi_fs_seek>:
1c00daea:	415c                	lw	a5,4(a0)
1c00daec:	01c7a303          	lw	t1,28(a5)
1c00daf0:	8302                	jr	t1

1c00daf2 <pi_cl_fs_copy>:
{
    req->file = file;
    req->copy.index = index;
    req->copy.buffer = buffer;
    req->copy.size = size;
    req->copy.ext2loc = ext2loc;
1c00daf2:	00e789a3          	sb	a4,19(a5)
    req->copy.length = 0;
    req->copy.done = 0;
1c00daf6:	f0000713          	li	a4,-256
1c00dafa:	00e79823          	sh	a4,16(a5)
}

static inline unsigned int cluster_id() {  int hart_id;
#if RISCV_VERSION >= 4 && !defined(RISCV_1_7)
#if PULP_CHIP_FAMILY == CHIP_GAP
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00dafe:	01402773          	csrr	a4,uhartid
#endif
#else
  asm("csrr %0, 0xF10" : "=r" (hart_id) : );
#endif
  // in PULP the hart id is {22'b0, cluster_id, core_id}
  return (hart_id >> 5) & 0x3f;
1c00db02:	8715                	srai	a4,a4,0x5
1c00db04:	f2673733          	p.bclr	a4,a4,25,6
    req->copy.result = -1;
    req->copy.cid = pi_cluster_id();
1c00db08:	00e78923          	sb	a4,18(a5)

static inline pi_callback_t *pi_callback_init(pi_callback_t *callback,
                                              pi_callback_func_t function,
                                              void *arg)
{
    callback->entry = function;
1c00db0c:	1c00e737          	lui	a4,0x1c00e
1c00db10:	93870713          	addi	a4,a4,-1736 # 1c00d938 <__pi_cl_fs_copy_req>
    req->file = file;
1c00db14:	c388                	sw	a0,0(a5)
    req->copy.index = index;
1c00db16:	cfcc                	sw	a1,28(a5)
    req->copy.buffer = buffer;
1c00db18:	cbd0                	sw	a2,20(a5)
    req->copy.size = size;
1c00db1a:	cf94                	sw	a3,24(a5)
    req->copy.length = 0;
1c00db1c:	0207a223          	sw	zero,36(a5)
1c00db20:	c798                	sw	a4,8(a5)
    callback->arg = arg;
    callback->next = NULL;
1c00db22:	0007a223          	sw	zero,4(a5)
    callback->arg = arg;
1c00db26:	c7dc                	sw	a5,12(a5)

    pi_callback_init(&(req->callback), __pi_cl_fs_copy_req, (void *) req);
1c00db28:	0791                	addi	a5,a5,4
1c00db2a:	c007c533          	p.bset	a0,a5,0,0
1c00db2e:	3730306f          	j	1c0116a0 <__rt_cluster_push_fc_event>

1c00db32 <pi_flash_read_async>:
}

static inline void pi_flash_read_async(struct pi_device *device, uint32_t pi_flash_addr, void *data, uint32_t size, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  api->read_async(device, pi_flash_addr, data, size, task);
1c00db32:	411c                	lw	a5,0(a0)
1c00db34:	00c7a303          	lw	t1,12(a5)
1c00db38:	8302                	jr	t1

1c00db3a <__pi_read_fs_write>:
    return block_size;
}

static int32_t __pi_read_fs_write(pi_fs_file_t *_file, void *buffer, uint32_t size, pi_task_t *task)
{
    pi_read_fs_t *fs = (pi_read_fs_t *) _file->fs->data;
1c00db3a:	411c                	lw	a5,0(a0)
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    
    int real_size = size;
    unsigned int addr = file->addr + file->offset;
1c00db3c:	01852803          	lw	a6,24(a0)
{
1c00db40:	8736                	mv	a4,a3
    pi_read_fs_t *fs = (pi_read_fs_t *) _file->fs->data;
1c00db42:	4794                	lw	a3,8(a5)
    unsigned int addr = file->addr + file->offset;
1c00db44:	495c                	lw	a5,20(a0)
{
1c00db46:	88ae                	mv	a7,a1
1c00db48:	1141                	addi	sp,sp,-16
    unsigned int addr = file->addr + file->offset;
1c00db4a:	010785b3          	add	a1,a5,a6
    if(file->offset + size > file->fs_file.size)
1c00db4e:	00c52803          	lw	a6,12(a0)
{
1c00db52:	c606                	sw	ra,12(sp)
    if(file->offset + size > file->fs_file.size)
1c00db54:	00c78333          	add	t1,a5,a2
1c00db58:	00687463          	bleu	t1,a6,1c00db60 <__pi_read_fs_write+0x26>
    {
        real_size = file->fs_file.size - file->offset;
1c00db5c:	40f80633          	sub	a2,a6,a5
    }
    file->offset += real_size;
1c00db60:	97b2                	add	a5,a5,a2
1c00db62:	c95c                	sw	a5,20(a0)
    
    pi_flash_program_async(fs->flash, addr, (void *) buffer, real_size, task);
1c00db64:	4288                	lw	a0,0(a3)
}

static inline void pi_flash_program_async(struct pi_device *device, uint32_t pi_flash_addr, const void *data, uint32_t size, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  api->program_async(device, pi_flash_addr, data, size, task);
1c00db66:	86b2                	mv	a3,a2
1c00db68:	8646                	mv	a2,a7
1c00db6a:	411c                	lw	a5,0(a0)
1c00db6c:	4b9c                	lw	a5,16(a5)
1c00db6e:	9782                	jalr	a5
    
    return 0;
}
1c00db70:	40b2                	lw	ra,12(sp)
1c00db72:	4501                	li	a0,0
1c00db74:	0141                	addi	sp,sp,16
1c00db76:	8082                	ret

1c00db78 <__pi_read_fs_seek>:
static int32_t __pi_read_fs_seek(pi_fs_file_t *_file, unsigned int offset)
{
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    //printf("[FS] File seek (file: %p, offset: 0x%x)\n", file, offset);
    
    if(offset < file->fs_file.size)
1c00db78:	455c                	lw	a5,12(a0)
1c00db7a:	00f5f563          	bleu	a5,a1,1c00db84 <__pi_read_fs_seek+0xc>
    {
        file->offset = offset;
1c00db7e:	c94c                	sw	a1,20(a0)
        return 0;
1c00db80:	4501                	li	a0,0
1c00db82:	8082                	ret
    }
    return -1;
1c00db84:	557d                	li	a0,-1
}
1c00db86:	8082                	ret

1c00db88 <__pi_read_fs_direct_read_async>:
}

static int32_t __pi_read_fs_direct_read_async(pi_fs_file_t *_file, void *buffer, uint32_t size, pi_task_t *event)
{
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c00db88:	411c                	lw	a5,0(a0)
{
1c00db8a:	1141                	addi	sp,sp,-16
1c00db8c:	c422                	sw	s0,8(sp)
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c00db8e:	0087a803          	lw	a6,8(a5)
{
1c00db92:	8432                	mv	s0,a2
    // Mask interrupt to update file current position and get information
    //int irq = pi_irq_disable();
    
    int real_size = size;
    unsigned int addr = file->addr + file->offset;
1c00db94:	495c                	lw	a5,20(a0)
1c00db96:	4d10                	lw	a2,24(a0)
{
1c00db98:	88ae                	mv	a7,a1
1c00db9a:	8736                	mv	a4,a3
    unsigned int addr = file->addr + file->offset;
1c00db9c:	00c785b3          	add	a1,a5,a2
    if(file->offset + size > file->fs_file.size)
1c00dba0:	4550                	lw	a2,12(a0)
{
1c00dba2:	c606                	sw	ra,12(sp)
    if(file->offset + size > file->fs_file.size)
1c00dba4:	008786b3          	add	a3,a5,s0
1c00dba8:	00d67463          	bleu	a3,a2,1c00dbb0 <__pi_read_fs_direct_read_async+0x28>
    {
        real_size = file->fs_file.size - file->offset;
1c00dbac:	40f60433          	sub	s0,a2,a5
    }
    file->offset += real_size;
1c00dbb0:	97a2                	add	a5,a5,s0
1c00dbb2:	c95c                	sw	a5,20(a0)
    
    //pi_irq_restore(irq);
    
    pi_flash_read_async(fs->flash, addr, (void *) buffer, real_size, event);
1c00dbb4:	00082503          	lw	a0,0(a6)
1c00dbb8:	86a2                	mv	a3,s0
1c00dbba:	8646                	mv	a2,a7
1c00dbbc:	3f9d                	jal	1c00db32 <pi_flash_read_async>
    
    return real_size;
}
1c00dbbe:	8522                	mv	a0,s0
1c00dbc0:	40b2                	lw	ra,12(sp)
1c00dbc2:	4422                	lw	s0,8(sp)
1c00dbc4:	0141                	addi	sp,sp,16
1c00dbc6:	8082                	ret

1c00dbc8 <__pi_read_fs_copy_async>:


static int32_t
__pi_read_fs_copy_async(pi_fs_file_t *_file, uint32_t index, void *buffer, uint32_t size, int32_t ext2loc,
                        pi_task_t *task)
{
1c00dbc8:	882a                	mv	a6,a0
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c00dbca:	4108                	lw	a0,0(a0)
    return pi_flash_copy_async(fs->flash, file->addr + index, buffer, size, ext2loc, task);
1c00dbcc:	01882803          	lw	a6,24(a6)
1c00dbd0:	4508                	lw	a0,8(a0)
}

static inline int pi_flash_copy_async(struct pi_device *device, uint32_t pi_flash_addr, void *buffer, uint32_t size, int ext2loc, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  return api->copy_async(device, pi_flash_addr, buffer, size, ext2loc, task);
1c00dbd2:	95c2                	add	a1,a1,a6
1c00dbd4:	4108                	lw	a0,0(a0)
1c00dbd6:	00052883          	lw	a7,0(a0)
1c00dbda:	0288a303          	lw	t1,40(a7)
1c00dbde:	8302                	jr	t1

1c00dbe0 <__pi_read_fs_copy_2d_async>:
}

static int32_t
__pi_read_fs_copy_2d_async(pi_fs_file_t *_file, uint32_t index, void *buffer, uint32_t size, uint32_t stride,
                           uint32_t length, int32_t ext2loc, pi_task_t *task)
{
1c00dbe0:	832a                	mv	t1,a0
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c00dbe2:	4108                	lw	a0,0(a0)
    return pi_flash_copy_2d_async(fs->flash, file->addr + index, buffer, size, stride, length, ext2loc, task);
1c00dbe4:	01832e03          	lw	t3,24(t1)
1c00dbe8:	4508                	lw	a0,8(a0)
}

static inline int pi_flash_copy_2d_async(struct pi_device *device, uint32_t pi_flash_addr, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int ext2loc, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  return api->copy_2d_async(device, pi_flash_addr, buffer, size, stride, length, ext2loc, task);
1c00dbea:	95f2                	add	a1,a1,t3
1c00dbec:	4108                	lw	a0,0(a0)
1c00dbee:	00052303          	lw	t1,0(a0)
1c00dbf2:	02c32303          	lw	t1,44(t1)
1c00dbf6:	8302                	jr	t1

1c00dbf8 <rt_event_enqueue>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00dbf8:	300476f3          	csrrci	a3,mstatus,8
  if (sched->first) {
1c00dbfc:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c00dc00:	00052023          	sw	zero,0(a0)
1c00dc04:	01c00713          	li	a4,28
  if (sched->first) {
1c00dc08:	c619                	beqz	a2,1c00dc16 <rt_event_enqueue+0x1e>
    sched->last->next = event;
1c00dc0a:	435c                	lw	a5,4(a4)
1c00dc0c:	c388                	sw	a0,0(a5)
  sched->last = event;
1c00dc0e:	c348                	sw	a0,4(a4)
  __builtin_pulp_spr_write(reg, val);
1c00dc10:	30069073          	csrw	mstatus,a3
}
1c00dc14:	8082                	ret
    sched->first = event;
1c00dc16:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00dc1a:	bfd5                	j	1c00dc0e <rt_event_enqueue+0x16>

1c00dc1c <__pi_fs_free>:
    if(fs != NULL)
1c00dc1c:	c91d                	beqz	a0,1c00dc52 <__pi_fs_free+0x36>
{
1c00dc1e:	1141                	addi	sp,sp,-16
1c00dc20:	c422                	sw	s0,8(sp)
1c00dc22:	842a                	mv	s0,a0
        if(fs->pi_fs_info) pmsis_l2_malloc_free(fs->pi_fs_info, fs->pi_fs_l2->pi_fs_size);
1c00dc24:	09c52503          	lw	a0,156(a0)
{
1c00dc28:	c606                	sw	ra,12(sp)
        if(fs->pi_fs_info) pmsis_l2_malloc_free(fs->pi_fs_info, fs->pi_fs_l2->pi_fs_size);
1c00dc2a:	c511                	beqz	a0,1c00dc36 <__pi_fs_free+0x1a>
1c00dc2c:	09842783          	lw	a5,152(s0)
1c00dc30:	438c                	lw	a1,0(a5)
1c00dc32:	657020ef          	jal	ra,1c010a88 <pi_l2_free>
        if(fs->pi_fs_l2) pmsis_l2_malloc_free(fs->pi_fs_l2, sizeof(pi_fs_l2_t));
1c00dc36:	09842503          	lw	a0,152(s0)
1c00dc3a:	c501                	beqz	a0,1c00dc42 <__pi_fs_free+0x26>
1c00dc3c:	45a1                	li	a1,8
1c00dc3e:	64b020ef          	jal	ra,1c010a88 <pi_l2_free>
        pmsis_l2_malloc_free(fs, sizeof(pi_read_fs_t));
1c00dc42:	8522                	mv	a0,s0
}
1c00dc44:	4422                	lw	s0,8(sp)
1c00dc46:	40b2                	lw	ra,12(sp)
        pmsis_l2_malloc_free(fs, sizeof(pi_read_fs_t));
1c00dc48:	1b800593          	li	a1,440
}
1c00dc4c:	0141                	addi	sp,sp,16
        pmsis_l2_malloc_free(fs, sizeof(pi_read_fs_t));
1c00dc4e:	63b0206f          	j	1c010a88 <pi_l2_free>
1c00dc52:	8082                	ret

1c00dc54 <__pi_read_fs_unmount>:
    __pi_fs_free(fs);
1c00dc54:	4508                	lw	a0,8(a0)
1c00dc56:	b7d9                	j	1c00dc1c <__pi_fs_free>

1c00dc58 <__pi_read_fs_open>:
{
1c00dc58:	1101                	addi	sp,sp,-32
1c00dc5a:	ca26                	sw	s1,20(sp)
1c00dc5c:	c452                	sw	s4,8(sp)
1c00dc5e:	c256                	sw	s5,4(sp)
1c00dc60:	ce06                	sw	ra,28(sp)
1c00dc62:	cc22                	sw	s0,24(sp)
1c00dc64:	c84a                	sw	s2,16(sp)
1c00dc66:	c64e                	sw	s3,12(sp)
1c00dc68:	c05a                	sw	s6,0(sp)
1c00dc6a:	8a2a                	mv	s4,a0
1c00dc6c:	8aae                	mv	s5,a1
    pi_read_fs_t *fs = (pi_read_fs_t *) device->data;
1c00dc6e:	4504                	lw	s1,8(a0)
    if(flags == PI_FS_FLAGS_WRITE)
1c00dc70:	08163f63          	p.bneimm	a2,1,1c00dd0e <__pi_read_fs_open+0xb6>
        if(fs->last_created_file)
1c00dc74:	12c4a783          	lw	a5,300(s1) # 8000012c <pulp__FC+0x8000012d>
1c00dc78:	c399                	beqz	a5,1c00dc7e <__pi_read_fs_open+0x26>
    return NULL;
1c00dc7a:	4501                	li	a0,0
1c00dc7c:	a8bd                	j	1c00dcfa <__pi_read_fs_open+0xa2>
        file = pmsis_l2_malloc(sizeof(pi_read_fs_file_t));
1c00dc7e:	0c000513          	li	a0,192
1c00dc82:	5f9020ef          	jal	ra,1c010a7a <pi_l2_malloc>
1c00dc86:	842a                	mv	s0,a0
        if(file == NULL) return NULL;
1c00dc88:	d96d                	beqz	a0,1c00dc7a <__pi_read_fs_open+0x22>
        int str_len = strlen(file_name);
1c00dc8a:	8556                	mv	a0,s5
1c00dc8c:	3c3040ef          	jal	ra,1c01284e <strlen>
        int header_size = ((str_len + 7) & ~0x7) + 12;
1c00dc90:	00750913          	addi	s2,a0,7
1c00dc94:	c4093933          	p.bclr	s2,s2,2,0
1c00dc98:	0931                	addi	s2,s2,12
        int str_len = strlen(file_name);
1c00dc9a:	89aa                	mv	s3,a0
        uint8_t *header = pmsis_l2_malloc(header_size);
1c00dc9c:	854a                	mv	a0,s2
1c00dc9e:	5dd020ef          	jal	ra,1c010a7a <pi_l2_malloc>
        if(header == NULL)
1c00dca2:	e519                	bnez	a0,1c00dcb0 <__pi_read_fs_open+0x58>
    pmsis_l2_malloc_free(file, sizeof(pi_read_fs_file_t));
1c00dca4:	0c000593          	li	a1,192
1c00dca8:	8522                	mv	a0,s0
1c00dcaa:	5df020ef          	jal	ra,1c010a88 <pi_l2_free>
1c00dcae:	b7f1                	j	1c00dc7a <__pi_read_fs_open+0x22>
        file->header = header;
1c00dcb0:	0aa42a23          	sw	a0,180(s0)
        file->header_size = header_size;
1c00dcb4:	0b242c23          	sw	s2,184(s0)
        memcpy(&file->header[12], file_name, str_len);
1c00dcb8:	864e                	mv	a2,s3
1c00dcba:	85d6                	mv	a1,s5
1c00dcbc:	0531                	addi	a0,a0,12
1c00dcbe:	3b7040ef          	jal	ra,1c012874 <memcpy>
        *(uint32_t *) &file->header[8] = str_len;
1c00dcc2:	0b442783          	lw	a5,180(s0)
1c00dcc6:	0137a423          	sw	s3,8(a5)
        file->addr = fs->free_flash_area + header_size;
1c00dcca:	1284a783          	lw	a5,296(s1)
        file->fs_file.size = 0;
1c00dcce:	00042623          	sw	zero,12(s0)
        file->offset = 0;
1c00dcd2:	00042a23          	sw	zero,20(s0)
        file->addr = fs->free_flash_area + header_size;
1c00dcd6:	993e                	add	s2,s2,a5
        file->cache_addr = -1;
1c00dcd8:	57fd                	li	a5,-1
        file->addr = fs->free_flash_area + header_size;
1c00dcda:	01242c23          	sw	s2,24(s0)
        file->cache_addr = -1;
1c00dcde:	0af42823          	sw	a5,176(s0)
        fs->last_created_file = file;
1c00dce2:	1284a623          	sw	s0,300(s1)
    file->fs_file.api = (pi_fs_api_t *) device->api;
1c00dce6:	000a2783          	lw	a5,0(s4)
    file->fs_file.fs_data = &fs->fs_data;
1c00dcea:	13048493          	addi	s1,s1,304
    file->fs_file.data = file;
1c00dcee:	c400                	sw	s0,8(s0)
    file->fs_file.api = (pi_fs_api_t *) device->api;
1c00dcf0:	c05c                	sw	a5,4(s0)
    file->fs_file.fs = device;
1c00dcf2:	01442023          	sw	s4,0(s0)
    file->fs_file.fs_data = &fs->fs_data;
1c00dcf6:	c804                	sw	s1,16(s0)
    return &file->fs_file;
1c00dcf8:	8522                	mv	a0,s0
}
1c00dcfa:	40f2                	lw	ra,28(sp)
1c00dcfc:	4462                	lw	s0,24(sp)
1c00dcfe:	44d2                	lw	s1,20(sp)
1c00dd00:	4942                	lw	s2,16(sp)
1c00dd02:	49b2                	lw	s3,12(sp)
1c00dd04:	4a22                	lw	s4,8(sp)
1c00dd06:	4a92                	lw	s5,4(sp)
1c00dd08:	4b02                	lw	s6,0(sp)
1c00dd0a:	6105                	addi	sp,sp,32
1c00dd0c:	8082                	ret
        unsigned int *pi_fs_info = fs->pi_fs_info;
1c00dd0e:	09c4a783          	lw	a5,156(s1)
        for (i = 0; i < nb_comps; i++)
1c00dd12:	4981                	li	s3,0
        pi_fs_desc_t *desc = NULL;
1c00dd14:	4901                	li	s2,0
        int nb_comps = *pi_fs_info++;
1c00dd16:	0007ab03          	lw	s6,0(a5)
1c00dd1a:	00478413          	addi	s0,a5,4
        for (i = 0; i < nb_comps; i++)
1c00dd1e:	0569c163          	blt	s3,s6,1c00dd60 <__pi_read_fs_open+0x108>
        if(i == nb_comps) goto error;
1c00dd22:	f5698ce3          	beq	s3,s6,1c00dc7a <__pi_read_fs_open+0x22>
        file = pmsis_l2_malloc(sizeof(pi_read_fs_file_t));
1c00dd26:	0c000513          	li	a0,192
1c00dd2a:	551020ef          	jal	ra,1c010a7a <pi_l2_malloc>
1c00dd2e:	842a                	mv	s0,a0
        if(file == NULL) goto error;
1c00dd30:	d529                	beqz	a0,1c00dc7a <__pi_read_fs_open+0x22>
        file->cache = pmsis_l2_malloc(READ_FS_THRESHOLD_BLOCK_FULL);
1c00dd32:	08800513          	li	a0,136
1c00dd36:	545020ef          	jal	ra,1c010a7a <pi_l2_malloc>
1c00dd3a:	0aa42623          	sw	a0,172(s0)
        if(file->cache == NULL) goto error1;
1c00dd3e:	d13d                	beqz	a0,1c00dca4 <__pi_read_fs_open+0x4c>
        file->fs_file.size = desc->size;
1c00dd40:	00492783          	lw	a5,4(s2)
        file->addr = desc->addr + fs->partition_offset;
1c00dd44:	4498                	lw	a4,8(s1)
        file->header = NULL;
1c00dd46:	0a042a23          	sw	zero,180(s0)
        file->fs_file.size = desc->size;
1c00dd4a:	c45c                	sw	a5,12(s0)
        file->addr = desc->addr + fs->partition_offset;
1c00dd4c:	00092783          	lw	a5,0(s2)
        file->offset = 0;
1c00dd50:	00042a23          	sw	zero,20(s0)
        file->addr = desc->addr + fs->partition_offset;
1c00dd54:	97ba                	add	a5,a5,a4
1c00dd56:	cc1c                	sw	a5,24(s0)
        file->cache_addr = -1;
1c00dd58:	57fd                	li	a5,-1
1c00dd5a:	0af42823          	sw	a5,176(s0)
1c00dd5e:	b761                	j	1c00dce6 <__pi_read_fs_open+0x8e>
            if(strcmp(desc->name, file_name) == 0) break;
1c00dd60:	85d6                	mv	a1,s5
1c00dd62:	00c40513          	addi	a0,s0,12
1c00dd66:	2b5040ef          	jal	ra,1c01281a <strcmp>
1c00dd6a:	c901                	beqz	a0,1c00dd7a <__pi_read_fs_open+0x122>
            pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c00dd6c:	441c                	lw	a5,8(s0)
        for (i = 0; i < nb_comps; i++)
1c00dd6e:	8922                	mv	s2,s0
1c00dd70:	0985                	addi	s3,s3,1
            pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c00dd72:	97a2                	add	a5,a5,s0
1c00dd74:	00c78413          	addi	s0,a5,12
1c00dd78:	b75d                	j	1c00dd1e <__pi_read_fs_open+0xc6>
1c00dd7a:	8922                	mv	s2,s0
1c00dd7c:	b76d                	j	1c00dd26 <__pi_read_fs_open+0xce>

1c00dd7e <__pi_fs_mount_step>:
{
1c00dd7e:	7179                	addi	sp,sp,-48
1c00dd80:	d226                	sw	s1,36(sp)
    switch (fs->mount_step)
1c00dd82:	09052483          	lw	s1,144(a0)
{
1c00dd86:	d422                	sw	s0,40(sp)
1c00dd88:	d606                	sw	ra,44(sp)
1c00dd8a:	d04a                	sw	s2,32(sp)
    const pi_partition_table_t partition_table = NULL;
1c00dd8c:	ce02                	sw	zero,28(sp)
{
1c00dd8e:	842a                	mv	s0,a0
    switch (fs->mount_step)
1c00dd90:	0834a563          	p.beqimm	s1,3,1c00de1a <__pi_fs_mount_step+0x9c>
1c00dd94:	0c44aa63          	p.beqimm	s1,4,1c00de68 <__pi_fs_mount_step+0xea>
1c00dd98:	0614bb63          	p.bneimm	s1,1,1c00de0e <__pi_fs_mount_step+0x90>
            rc = pi_partition_table_load(fs->flash, &partition_table);
1c00dd9c:	4108                	lw	a0,0(a0)
1c00dd9e:	086c                	addi	a1,sp,28
1c00dda0:	390010ef          	jal	ra,1c00f130 <pi_partition_table_load>
            if(rc != PI_OK) goto error;
1c00dda4:	ed09                	bnez	a0,1c00ddbe <__pi_fs_mount_step+0x40>
            readfs_partition = pi_partition_find_first(partition_table, PI_PARTITION_TYPE_DATA,
1c00dda6:	4054                	lw	a3,4(s0)
1c00dda8:	4572                	lw	a0,28(sp)
1c00ddaa:	08100613          	li	a2,129
1c00ddae:	4585                	li	a1,1
1c00ddb0:	384010ef          	jal	ra,1c00f134 <pi_partition_find_first>
1c00ddb4:	892a                	mv	s2,a0
            if(readfs_partition == NULL)
1c00ddb6:	e901                	bnez	a0,1c00ddc6 <__pi_fs_mount_step+0x48>
                pi_partition_table_free(partition_table);
1c00ddb8:	4572                	lw	a0,28(sp)
1c00ddba:	374010ef          	jal	ra,1c00f12e <pi_partition_table_free>
    fs->error = -1;
1c00ddbe:	57fd                	li	a5,-1
1c00ddc0:	12f42223          	sw	a5,292(s0)
1c00ddc4:	a0d1                	j	1c00de88 <__pi_fs_mount_step+0x10a>
            fs->partition_offset = pi_partition_get_flash_offset(readfs_partition);
1c00ddc6:	35e010ef          	jal	ra,1c00f124 <pi_partition_get_flash_offset>

/// @cond IMPLEM

static inline pi_err_t pi_partition_close(const pi_partition_t *partition)
{
    pi_l2_free((pi_partition_t *) partition, sizeof(pi_partition_t));
1c00ddca:	02800593          	li	a1,40
1c00ddce:	c408                	sw	a0,8(s0)
1c00ddd0:	854a                	mv	a0,s2
1c00ddd2:	4b7020ef          	jal	ra,1c010a88 <pi_l2_free>
            pi_partition_table_free(partition_table);
1c00ddd6:	4572                	lw	a0,28(sp)
1c00ddd8:	356010ef          	jal	ra,1c00f12e <pi_partition_table_free>
            fs->mount_step++;
1c00dddc:	09042783          	lw	a5,144(s0)
            pi_flash_read_async(fs->flash, fs->partition_offset, &fs->pi_fs_l2->pi_fs_size, 8,
1c00dde0:	4008                	lw	a0,0(s0)
1c00dde2:	440c                	lw	a1,8(s0)
            fs->mount_step++;
1c00dde4:	0789                	addi	a5,a5,2
1c00dde6:	08f42823          	sw	a5,144(s0)
            pi_flash_read_async(fs->flash, fs->partition_offset, &fs->pi_fs_l2->pi_fs_size, 8,
1c00ddea:	09842603          	lw	a2,152(s0)


struct pi_task *pi_task_callback(struct pi_task *task, void (*callback)(void*), void *arg)
{
  task->id = PI_TASK_CALLBACK_ID;
  task->arg[0] = (uint32_t)callback;
1c00ddee:	1c00e7b7          	lui	a5,0x1c00e
1c00ddf2:	d7e78793          	addi	a5,a5,-642 # 1c00dd7e <__pi_fs_mount_step>
  task->id = PI_TASK_CALLBACK_ID;
1c00ddf6:	02042223          	sw	zero,36(s0)
  task->arg[0] = (uint32_t)callback;
1c00ddfa:	c81c                	sw	a5,16(s0)
  task->arg[1] = (uint32_t)arg;
1c00ddfc:	c840                	sw	s0,20(s0)
  task->implem.keep = 1;
1c00ddfe:	d844                	sw	s1,52(s0)
  task->done = 0;
1c00de00:	02040023          	sb	zero,32(s0)
1c00de04:	00c40713          	addi	a4,s0,12
1c00de08:	46a1                	li	a3,8
            pi_flash_read_async(fs->flash, pi_fs_offset + 8, (void *) fs->pi_fs_info, pi_fs_size,
1c00de0a:	d29ff0ef          	jal	ra,1c00db32 <pi_flash_read_async>
}
1c00de0e:	50b2                	lw	ra,44(sp)
1c00de10:	5422                	lw	s0,40(sp)
1c00de12:	5492                	lw	s1,36(sp)
1c00de14:	5902                	lw	s2,32(sp)
1c00de16:	6145                	addi	sp,sp,48
1c00de18:	8082                	ret
            int pi_fs_size = ((fs->pi_fs_l2->pi_fs_size + 7) & ~7);
1c00de1a:	09852783          	lw	a5,152(a0)
            int pi_fs_offset = fs->partition_offset;
1c00de1e:	4504                	lw	s1,8(a0)
            int pi_fs_size = ((fs->pi_fs_l2->pi_fs_size + 7) & ~7);
1c00de20:	4394                	lw	a3,0(a5)
1c00de22:	069d                	addi	a3,a3,7
1c00de24:	c406b6b3          	p.bclr	a3,a3,2,0
            fs->pi_fs_info = pmsis_l2_malloc(pi_fs_size);
1c00de28:	8536                	mv	a0,a3
1c00de2a:	c636                	sw	a3,12(sp)
1c00de2c:	44f020ef          	jal	ra,1c010a7a <pi_l2_malloc>
1c00de30:	08a42e23          	sw	a0,156(s0)
1c00de34:	862a                	mv	a2,a0
            if(fs->pi_fs_info == NULL)
1c00de36:	46b2                	lw	a3,12(sp)
1c00de38:	d159                	beqz	a0,1c00ddbe <__pi_fs_mount_step+0x40>
            fs->mount_step++;
1c00de3a:	09042783          	lw	a5,144(s0)
            pi_flash_read_async(fs->flash, pi_fs_offset + 8, (void *) fs->pi_fs_info, pi_fs_size,
1c00de3e:	4008                	lw	a0,0(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c00de40:	02042223          	sw	zero,36(s0)
            fs->mount_step++;
1c00de44:	0785                	addi	a5,a5,1
1c00de46:	08f42823          	sw	a5,144(s0)
  task->arg[0] = (uint32_t)callback;
1c00de4a:	1c00e7b7          	lui	a5,0x1c00e
1c00de4e:	d7e78793          	addi	a5,a5,-642 # 1c00dd7e <__pi_fs_mount_step>
1c00de52:	c81c                	sw	a5,16(s0)
  task->implem.keep = 1;
1c00de54:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c00de56:	c840                	sw	s0,20(s0)
  task->implem.keep = 1;
1c00de58:	d85c                	sw	a5,52(s0)
1c00de5a:	02040023          	sb	zero,32(s0)
            pi_flash_read_async(fs->flash, pi_fs_offset + 8, (void *) fs->pi_fs_info, pi_fs_size,
1c00de5e:	00c40713          	addi	a4,s0,12
1c00de62:	00848593          	addi	a1,s1,8
1c00de66:	b755                	j	1c00de0a <__pi_fs_mount_step+0x8c>
            unsigned int *pi_fs_info = fs->pi_fs_info;
1c00de68:	09c52703          	lw	a4,156(a0)
            for (i = 0; i < nb_comps; i++)
1c00de6c:	4681                	li	a3,0
            int nb_comps = *pi_fs_info++;
1c00de6e:	00470793          	addi	a5,a4,4
1c00de72:	430c                	lw	a1,0(a4)
            pi_fs_desc_t *desc = NULL;
1c00de74:	4701                	li	a4,0
            for (i = 0; i < nb_comps; i++)
1c00de76:	00b6ce63          	blt	a3,a1,1c00de92 <__pi_fs_mount_step+0x114>
            if(desc == NULL)
1c00de7a:	e31d                	bnez	a4,1c00dea0 <__pi_fs_mount_step+0x122>
                fs->free_flash_area = desc->addr + desc->size;
1c00de7c:	12f42423          	sw	a5,296(s0)
            fs->last_created_file = NULL;
1c00de80:	12042623          	sw	zero,300(s0)
            fs->error = 0;
1c00de84:	12042223          	sw	zero,292(s0)
  rt_event_enqueue(task);
1c00de88:	08c42503          	lw	a0,140(s0)
1c00de8c:	d6dff0ef          	jal	ra,1c00dbf8 <rt_event_enqueue>
1c00de90:	bfbd                	j	1c00de0e <__pi_fs_mount_step+0x90>
                pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c00de92:	4790                	lw	a2,8(a5)
            for (i = 0; i < nb_comps; i++)
1c00de94:	873e                	mv	a4,a5
1c00de96:	0685                	addi	a3,a3,1
                pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c00de98:	963e                	add	a2,a2,a5
1c00de9a:	00c60793          	addi	a5,a2,12
1c00de9e:	bfe1                	j	1c00de76 <__pi_fs_mount_step+0xf8>
                fs->free_flash_area = desc->addr + desc->size;
1c00dea0:	431c                	lw	a5,0(a4)
1c00dea2:	4358                	lw	a4,4(a4)
1c00dea4:	97ba                	add	a5,a5,a4
1c00dea6:	bfd9                	j	1c00de7c <__pi_fs_mount_step+0xfe>

1c00dea8 <__pi_read_fs_close>:
    if(file->header == NULL)
1c00dea8:	0b452603          	lw	a2,180(a0)
{
1c00deac:	1141                	addi	sp,sp,-16
1c00deae:	c422                	sw	s0,8(sp)
1c00deb0:	c606                	sw	ra,12(sp)
1c00deb2:	842a                	mv	s0,a0
    if(file->header == NULL)
1c00deb4:	ee19                	bnez	a2,1c00ded2 <__pi_read_fs_close+0x2a>
        pmsis_l2_malloc_free(file->cache, READ_FS_THRESHOLD_BLOCK_FULL);
1c00deb6:	0ac52503          	lw	a0,172(a0)
1c00deba:	08800593          	li	a1,136
        pi_l2_free((void *) file->header, file->header_size);
1c00debe:	3cb020ef          	jal	ra,1c010a88 <pi_l2_free>
        pi_l2_free((void *) file, sizeof(pi_read_fs_file_t));
1c00dec2:	8522                	mv	a0,s0
}
1c00dec4:	4422                	lw	s0,8(sp)
1c00dec6:	40b2                	lw	ra,12(sp)
        pi_l2_free((void *) file, sizeof(pi_read_fs_file_t));
1c00dec8:	0c000593          	li	a1,192
}
1c00decc:	0141                	addi	sp,sp,16
        pi_l2_free((void *) file, sizeof(pi_read_fs_file_t));
1c00dece:	3bb0206f          	j	1c010a88 <pi_l2_free>
        pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c00ded2:	411c                	lw	a5,0(a0)
        *(uint32_t *) &file->header[0] = file->addr;
1c00ded4:	4d0c                	lw	a1,24(a0)
        *(uint32_t *) &file->header[4] = file->fs_file.size;
1c00ded6:	4558                	lw	a4,12(a0)
        pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c00ded8:	479c                	lw	a5,8(a5)
  api->program(device, pi_flash_addr, data, size);
1c00deda:	0b842683          	lw	a3,184(s0)
        *(uint32_t *) &file->header[0] = file->addr;
1c00dede:	c20c                	sw	a1,0(a2)
        pi_flash_program(fs->flash, file->addr - file->header_size, (void *) file->header, file->header_size);
1c00dee0:	4388                	lw	a0,0(a5)
1c00dee2:	8d95                	sub	a1,a1,a3
        *(uint32_t *) &file->header[4] = file->fs_file.size;
1c00dee4:	c258                	sw	a4,4(a2)
1c00dee6:	411c                	lw	a5,0(a0)
1c00dee8:	5bdc                	lw	a5,52(a5)
1c00deea:	9782                	jalr	a5
        pi_l2_free((void *) file->header, file->header_size);
1c00deec:	0b842583          	lw	a1,184(s0)
1c00def0:	0b442503          	lw	a0,180(s0)
1c00def4:	b7e9                	j	1c00debe <__pi_read_fs_close+0x16>

1c00def6 <__pi_read_fs_mount>:
{
1c00def6:	7175                	addi	sp,sp,-144
1c00def8:	c326                	sw	s1,132(sp)
1c00defa:	c14a                	sw	s2,128(sp)
1c00defc:	84aa                	mv	s1,a0
    struct pi_fs_conf *conf = (struct pi_fs_conf *) device->config;
1c00defe:	00452903          	lw	s2,4(a0)
    pi_read_fs_t *fs = pmsis_l2_malloc(sizeof(pi_read_fs_t));
1c00df02:	1b800513          	li	a0,440
{
1c00df06:	c522                	sw	s0,136(sp)
1c00df08:	c706                	sw	ra,140(sp)
    pi_read_fs_t *fs = pmsis_l2_malloc(sizeof(pi_read_fs_t));
1c00df0a:	371020ef          	jal	ra,1c010a7a <pi_l2_malloc>
1c00df0e:	842a                	mv	s0,a0
    if(fs == NULL) goto error;
1c00df10:	e919                	bnez	a0,1c00df26 <__pi_read_fs_mount+0x30>
    __pi_fs_free(fs);
1c00df12:	8522                	mv	a0,s0
1c00df14:	d09ff0ef          	jal	ra,1c00dc1c <__pi_fs_free>
    return -1;
1c00df18:	557d                	li	a0,-1
}
1c00df1a:	40ba                	lw	ra,140(sp)
1c00df1c:	442a                	lw	s0,136(sp)
1c00df1e:	449a                	lw	s1,132(sp)
1c00df20:	490a                	lw	s2,128(sp)
1c00df22:	6149                	addi	sp,sp,144
1c00df24:	8082                	ret
    fs->flash = conf->flash;
1c00df26:	00492783          	lw	a5,4(s2)
    fs->pi_fs_l2 = NULL;
1c00df2a:	08052c23          	sw	zero,152(a0)
    fs->pi_fs_info = NULL;
1c00df2e:	08052e23          	sw	zero,156(a0)
    fs->flash = conf->flash;
1c00df32:	c11c                	sw	a5,0(a0)
    fs->fs_data.cluster_reqs_first = NULL;
1c00df34:	12052823          	sw	zero,304(a0)
    fs->pi_fs_l2 = pmsis_l2_malloc(sizeof(pi_fs_l2_t));
1c00df38:	4521                	li	a0,8
1c00df3a:	341020ef          	jal	ra,1c010a7a <pi_l2_malloc>
1c00df3e:	08a42c23          	sw	a0,152(s0)
    if(fs->pi_fs_l2 == NULL) goto error;
1c00df42:	d961                	beqz	a0,1c00df12 <__pi_read_fs_mount+0x1c>
    fs->mount_step = 1;
1c00df44:	4785                	li	a5,1
1c00df46:	08f42823          	sw	a5,144(s0)
  task->id = PI_TASK_NONE_ID;
1c00df4a:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c00df4c:	d43e                	sw	a5,40(sp)
1c00df4e:	00010a23          	sb	zero,20(sp)
    fs->pending_event = pi_task_block(&task);
1c00df52:	00010793          	mv	a5,sp
1c00df56:	08f42623          	sw	a5,140(s0)
    fs->partition_name = conf->partition_name;
1c00df5a:	00892783          	lw	a5,8(s2)
  task->arg[0] = (uint32_t)0;
1c00df5e:	c202                	sw	zero,4(sp)
    fs->pi_fs_info = NULL;
1c00df60:	08042e23          	sw	zero,156(s0)
    fs->partition_name = conf->partition_name;
1c00df64:	c05c                	sw	a5,4(s0)
    device->data = (void *) fs;
1c00df66:	c480                	sw	s0,8(s1)
    __pi_fs_mount_step((void *) fs);
1c00df68:	8522                	mv	a0,s0
1c00df6a:	e15ff0ef          	jal	ra,1c00dd7e <__pi_fs_mount_step>
  while(!task->done)
1c00df6e:	01410783          	lb	a5,20(sp)
1c00df72:	c791                	beqz	a5,1c00df7e <__pi_read_fs_mount+0x88>
    if(fs->error)
1c00df74:	12442783          	lw	a5,292(s0)
1c00df78:	ffc9                	bnez	a5,1c00df12 <__pi_read_fs_mount+0x1c>
    return 0;
1c00df7a:	4501                	li	a0,0
1c00df7c:	bf79                	j	1c00df1a <__pi_read_fs_mount+0x24>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00df7e:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00df82:	4585                	li	a1,1
1c00df84:	01c00513          	li	a0,28
1c00df88:	047020ef          	jal	ra,1c0107ce <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00df8c:	30091073          	csrw	mstatus,s2
1c00df90:	bff9                	j	1c00df6e <__pi_read_fs_mount+0x78>

1c00df92 <__pi_fs_read_cached>:
{
1c00df92:	88ae                	mv	a7,a1
    if(addr < file->cache_addr || addr + size > file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c00df94:	0b052583          	lw	a1,176(a0)
{
1c00df98:	1141                	addi	sp,sp,-16
1c00df9a:	c226                	sw	s1,4(sp)
1c00df9c:	c606                	sw	ra,12(sp)
1c00df9e:	c422                	sw	s0,8(sp)
1c00dfa0:	84ba                	mv	s1,a4
1c00dfa2:	0ac52803          	lw	a6,172(a0)
    if(addr < file->cache_addr || addr + size > file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c00dfa6:	00b66f63          	bltu	a2,a1,1c00dfc4 <__pi_fs_read_cached+0x32>
    if(size > READ_FS_THRESHOLD_BLOCK_FULL - (addr & 0x7)) size = READ_FS_THRESHOLD_BLOCK_FULL - (addr & 0x7);
1c00dfaa:	f8363733          	p.bclr	a4,a2,28,3
1c00dfae:	08800413          	li	s0,136
1c00dfb2:	8c19                	sub	s0,s0,a4
1c00dfb4:	04d45433          	p.minu	s0,s0,a3
    if(addr < file->cache_addr || addr + size > file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c00dfb8:	008606b3          	add	a3,a2,s0
1c00dfbc:	08858713          	addi	a4,a1,136
1c00dfc0:	02d77a63          	bleu	a3,a4,1c00dff4 <__pi_fs_read_cached+0x62>
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c00dfc4:	4118                	lw	a4,0(a0)
        file->cache_addr = addr & ~0x7;
1c00dfc6:	c40635b3          	p.bclr	a1,a2,2,0
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c00dfca:	08800693          	li	a3,136
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c00dfce:	00872883          	lw	a7,8(a4)
        file->cache_addr = addr & ~0x7;
1c00dfd2:	0ab52823          	sw	a1,176(a0)
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c00dfd6:	873e                	mv	a4,a5
1c00dfd8:	0008a503          	lw	a0,0(a7)
1c00dfdc:	8642                	mv	a2,a6
        return 0;
1c00dfde:	4401                	li	s0,0
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c00dfe0:	b53ff0ef          	jal	ra,1c00db32 <pi_flash_read_async>
        *pending = 1;
1c00dfe4:	4785                	li	a5,1
1c00dfe6:	c09c                	sw	a5,0(s1)
}
1c00dfe8:	8522                	mv	a0,s0
1c00dfea:	40b2                	lw	ra,12(sp)
1c00dfec:	4422                	lw	s0,8(sp)
1c00dfee:	4492                	lw	s1,4(sp)
1c00dff0:	0141                	addi	sp,sp,16
1c00dff2:	8082                	ret
    memcpy((void *) buffer, &file->cache[addr - file->cache_addr], size);
1c00dff4:	40b605b3          	sub	a1,a2,a1
1c00dff8:	95c2                	add	a1,a1,a6
1c00dffa:	8622                	mv	a2,s0
1c00dffc:	8546                	mv	a0,a7
1c00dffe:	077040ef          	jal	ra,1c012874 <memcpy>
    return __pi_fs_read_from_cache(file, buffer, addr, size);
1c00e002:	b7dd                	j	1c00dfe8 <__pi_fs_read_cached+0x56>

1c00e004 <__pi_fs_read>:
{
1c00e004:	7179                	addi	sp,sp,-48
1c00e006:	d422                	sw	s0,40(sp)
1c00e008:	d226                	sw	s1,36(sp)
1c00e00a:	d04a                	sw	s2,32(sp)
1c00e00c:	ca56                	sw	s5,20(sp)
1c00e00e:	c85a                	sw	s6,16(sp)
1c00e010:	d606                	sw	ra,44(sp)
1c00e012:	8b3e                	mv	s6,a5
1c00e014:	ce4e                	sw	s3,28(sp)
1c00e016:	cc52                	sw	s4,24(sp)
1c00e018:	c65e                	sw	s7,12(sp)
    int use_cache = size <= READ_FS_THRESHOLD || (addr & 0x7) != (buffer & 0x7);
1c00e01a:	47c1                	li	a5,16
{
1c00e01c:	892e                	mv	s2,a1
1c00e01e:	8432                	mv	s0,a2
1c00e020:	84b6                	mv	s1,a3
1c00e022:	8aba                	mv	s5,a4
    int use_cache = size <= READ_FS_THRESHOLD || (addr & 0x7) != (buffer & 0x7);
1c00e024:	06d7d163          	ble	a3,a5,1c00e086 <__pi_fs_read+0x82>
1c00e028:	00b647b3          	xor	a5,a2,a1
1c00e02c:	f837b7b3          	p.bclr	a5,a5,28,3
1c00e030:	ebb9                	bnez	a5,1c00e086 <__pi_fs_read+0x82>
    if(size <= READ_FS_THRESHOLD_BLOCK_FULL &&
1c00e032:	08800793          	li	a5,136
1c00e036:	06d7d963          	ble	a3,a5,1c00e0a8 <__pi_fs_read+0xa4>
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c00e03a:	411c                	lw	a5,0(a0)
1c00e03c:	0087ab83          	lw	s7,8(a5)
    int prefix_size = addr & 0x7;
1c00e040:	f83437b3          	p.bclr	a5,s0,28,3
    if(prefix_size)
1c00e044:	c39d                	beqz	a5,1c00e06a <__pi_fs_read+0x66>
        prefix_size = 4 - prefix_size;
1c00e046:	4991                	li	s3,4
1c00e048:	40f989b3          	sub	s3,s3,a5
        int read_size = __pi_fs_read_cached(file, buffer, addr, prefix_size, pending, event);
1c00e04c:	8756                	mv	a4,s5
1c00e04e:	87da                	mv	a5,s6
1c00e050:	86ce                	mv	a3,s3
1c00e052:	8622                	mv	a2,s0
1c00e054:	85ca                	mv	a1,s2
1c00e056:	f3dff0ef          	jal	ra,1c00df92 <__pi_fs_read_cached>
        if(*pending) return read_size;
1c00e05a:	000aa783          	lw	a5,0(s5)
        int read_size = __pi_fs_read_cached(file, buffer, addr, prefix_size, pending, event);
1c00e05e:	8a2a                	mv	s4,a0
        if(*pending) return read_size;
1c00e060:	eba5                	bnez	a5,1c00e0d0 <__pi_fs_read+0xcc>
        addr += prefix_size;
1c00e062:	944e                	add	s0,s0,s3
        buffer += prefix_size;
1c00e064:	994e                	add	s2,s2,s3
        size -= prefix_size;
1c00e066:	413484b3          	sub	s1,s1,s3
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c00e06a:	000ba503          	lw	a0,0(s7)
    int block_size = size & ~0x7;
1c00e06e:	c404ba33          	p.bclr	s4,s1,2,0
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c00e072:	875a                	mv	a4,s6
1c00e074:	86d2                	mv	a3,s4
1c00e076:	864a                	mv	a2,s2
1c00e078:	85a2                	mv	a1,s0
1c00e07a:	ab9ff0ef          	jal	ra,1c00db32 <pi_flash_read_async>
    *pending = 1;
1c00e07e:	4785                	li	a5,1
1c00e080:	00faa023          	sw	a5,0(s5)
    return block_size;
1c00e084:	a0b1                	j	1c00e0d0 <__pi_fs_read+0xcc>
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c00e086:	8622                	mv	a2,s0
}
1c00e088:	5422                	lw	s0,40(sp)
1c00e08a:	50b2                	lw	ra,44(sp)
1c00e08c:	49f2                	lw	s3,28(sp)
1c00e08e:	4a62                	lw	s4,24(sp)
1c00e090:	4bb2                	lw	s7,12(sp)
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c00e092:	87da                	mv	a5,s6
1c00e094:	8756                	mv	a4,s5
}
1c00e096:	4b42                	lw	s6,16(sp)
1c00e098:	4ad2                	lw	s5,20(sp)
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c00e09a:	86a6                	mv	a3,s1
1c00e09c:	85ca                	mv	a1,s2
}
1c00e09e:	5492                	lw	s1,36(sp)
1c00e0a0:	5902                	lw	s2,32(sp)
1c00e0a2:	6145                	addi	sp,sp,48
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c00e0a4:	eefff06f          	j	1c00df92 <__pi_fs_read_cached>
       addr >= file->cache_addr &&
1c00e0a8:	0b052583          	lw	a1,176(a0)
    if(size <= READ_FS_THRESHOLD_BLOCK_FULL &&
1c00e0ac:	f8b667e3          	bltu	a2,a1,1c00e03a <__pi_fs_read+0x36>
       addr + size < file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c00e0b0:	00c687b3          	add	a5,a3,a2
1c00e0b4:	08858713          	addi	a4,a1,136
       addr >= file->cache_addr &&
1c00e0b8:	f8e7f1e3          	bleu	a4,a5,1c00e03a <__pi_fs_read+0x36>
    memcpy((void *) buffer, &file->cache[addr - file->cache_addr], size);
1c00e0bc:	40b60433          	sub	s0,a2,a1
1c00e0c0:	0ac52583          	lw	a1,172(a0)
1c00e0c4:	8636                	mv	a2,a3
1c00e0c6:	854a                	mv	a0,s2
1c00e0c8:	95a2                	add	a1,a1,s0
1c00e0ca:	7aa040ef          	jal	ra,1c012874 <memcpy>
        return __pi_fs_read_from_cache(file, buffer, addr, size);
1c00e0ce:	8a26                	mv	s4,s1
}
1c00e0d0:	50b2                	lw	ra,44(sp)
1c00e0d2:	5422                	lw	s0,40(sp)
1c00e0d4:	8552                	mv	a0,s4
1c00e0d6:	5492                	lw	s1,36(sp)
1c00e0d8:	5902                	lw	s2,32(sp)
1c00e0da:	49f2                	lw	s3,28(sp)
1c00e0dc:	4a62                	lw	s4,24(sp)
1c00e0de:	4ad2                	lw	s5,20(sp)
1c00e0e0:	4b42                	lw	s6,16(sp)
1c00e0e2:	4bb2                	lw	s7,12(sp)
1c00e0e4:	6145                	addi	sp,sp,48
1c00e0e6:	8082                	ret

1c00e0e8 <__pi_read_fs_try_read>:
    if(file->pending_size == 0)
1c00e0e8:	0a852683          	lw	a3,168(a0)
{
1c00e0ec:	7179                	addi	sp,sp,-48
1c00e0ee:	d422                	sw	s0,40(sp)
1c00e0f0:	d606                	sw	ra,44(sp)
1c00e0f2:	d226                	sw	s1,36(sp)
1c00e0f4:	d04a                	sw	s2,32(sp)
1c00e0f6:	ce4e                	sw	s3,28(sp)
    int pending = 0;
1c00e0f8:	c602                	sw	zero,12(sp)
{
1c00e0fa:	842a                	mv	s0,a0
    if(file->pending_size == 0)
1c00e0fc:	ee99                	bnez	a3,1c00e11a <__pi_read_fs_try_read+0x32>
            file->pending_event->implem.data[0] = file->first_read_size;
1c00e0fe:	501c                	lw	a5,32(s0)
1c00e100:	0bc42703          	lw	a4,188(s0)
1c00e104:	df98                	sw	a4,56(a5)
  rt_event_enqueue(task);
1c00e106:	5008                	lw	a0,32(s0)
1c00e108:	af1ff0ef          	jal	ra,1c00dbf8 <rt_event_enqueue>
}
1c00e10c:	50b2                	lw	ra,44(sp)
1c00e10e:	5422                	lw	s0,40(sp)
1c00e110:	5492                	lw	s1,36(sp)
1c00e112:	5902                	lw	s2,32(sp)
1c00e114:	49f2                	lw	s3,28(sp)
1c00e116:	6145                	addi	sp,sp,48
1c00e118:	8082                	ret
  task->arg[0] = (uint32_t)callback;
1c00e11a:	1c00e4b7          	lui	s1,0x1c00e
1c00e11e:	0e848493          	addi	s1,s1,232 # 1c00e0e8 <__pi_read_fs_try_read>
  task->id = PI_TASK_CALLBACK_ID;
1c00e122:	02052e23          	sw	zero,60(a0)
  task->arg[0] = (uint32_t)callback;
1c00e126:	d504                	sw	s1,40(a0)
    int size = __pi_fs_read(
1c00e128:	4d50                	lw	a2,28(a0)
1c00e12a:	0a452583          	lw	a1,164(a0)
  task->arg[1] = (uint32_t)arg;
1c00e12e:	d448                	sw	a0,44(s0)
            pi_task_callback(&file->step_event, __pi_read_fs_try_read, (void *) file)
1c00e130:	02450913          	addi	s2,a0,36
  task->implem.keep = 1;
1c00e134:	4985                	li	s3,1
    int size = __pi_fs_read(
1c00e136:	87ca                	mv	a5,s2
1c00e138:	05352623          	sw	s3,76(a0)
  task->done = 0;
1c00e13c:	02050c23          	sb	zero,56(a0)
1c00e140:	0078                	addi	a4,sp,12
1c00e142:	ec3ff0ef          	jal	ra,1c00e004 <__pi_fs_read>
    file->pending_addr += size;
1c00e146:	4c5c                	lw	a5,28(s0)
1c00e148:	97aa                	add	a5,a5,a0
1c00e14a:	cc5c                	sw	a5,28(s0)
    file->pending_buffer += size;
1c00e14c:	0a442783          	lw	a5,164(s0)
1c00e150:	97aa                	add	a5,a5,a0
1c00e152:	0af42223          	sw	a5,164(s0)
    file->pending_size -= size;
1c00e156:	0a842783          	lw	a5,168(s0)
1c00e15a:	40a78533          	sub	a0,a5,a0
    if(!pending)
1c00e15e:	47b2                	lw	a5,12(sp)
    file->pending_size -= size;
1c00e160:	0aa42423          	sw	a0,168(s0)
    if(!pending)
1c00e164:	f7c5                	bnez	a5,1c00e10c <__pi_read_fs_try_read+0x24>
        if(file->pending_size == 0)
1c00e166:	dd41                	beqz	a0,1c00e0fe <__pi_read_fs_try_read+0x16>
  task->id = PI_TASK_CALLBACK_ID;
1c00e168:	02042e23          	sw	zero,60(s0)
  task->arg[0] = (uint32_t)callback;
1c00e16c:	d404                	sw	s1,40(s0)
  task->arg[1] = (uint32_t)arg;
1c00e16e:	d440                	sw	s0,44(s0)
  task->implem.keep = 1;
1c00e170:	05342623          	sw	s3,76(s0)
1c00e174:	02040c23          	sb	zero,56(s0)
  rt_event_enqueue(task);
1c00e178:	854a                	mv	a0,s2
1c00e17a:	b779                	j	1c00e108 <__pi_read_fs_try_read+0x20>

1c00e17c <__pi_read_fs_read_async>:
    if(file->offset + size > file->fs_file.size)
1c00e17c:	495c                	lw	a5,20(a0)
1c00e17e:	4558                	lw	a4,12(a0)
{
1c00e180:	1101                	addi	sp,sp,-32
1c00e182:	ce06                	sw	ra,28(sp)
    if(file->offset + size > file->fs_file.size)
1c00e184:	00c78833          	add	a6,a5,a2
1c00e188:	01077463          	bleu	a6,a4,1c00e190 <__pi_read_fs_read_async+0x14>
        real_size = file->fs_file.size - file->offset;
1c00e18c:	40f70633          	sub	a2,a4,a5
    file->first_read_size = real_size;
1c00e190:	0ac52e23          	sw	a2,188(a0)
1c00e194:	00068a23          	sb	zero,20(a3)
    file->pending_addr = file->addr + file->offset;
1c00e198:	495c                	lw	a5,20(a0)
1c00e19a:	4d18                	lw	a4,24(a0)
    file->pending_size = real_size;
1c00e19c:	0ac52423          	sw	a2,168(a0)
    file->pending_event = event;
1c00e1a0:	d114                	sw	a3,32(a0)
    file->pending_addr = file->addr + file->offset;
1c00e1a2:	973e                	add	a4,a4,a5
    file->offset += real_size;
1c00e1a4:	97b2                	add	a5,a5,a2
    file->pending_buffer = (unsigned int) buffer;
1c00e1a6:	0ab52223          	sw	a1,164(a0)
    file->pending_addr = file->addr + file->offset;
1c00e1aa:	cd58                	sw	a4,28(a0)
    file->offset += real_size;
1c00e1ac:	c95c                	sw	a5,20(a0)
    __pi_read_fs_try_read((void *) file);
1c00e1ae:	c632                	sw	a2,12(sp)
1c00e1b0:	f39ff0ef          	jal	ra,1c00e0e8 <__pi_read_fs_try_read>
}
1c00e1b4:	4632                	lw	a2,12(sp)
1c00e1b6:	40f2                	lw	ra,28(sp)
1c00e1b8:	8532                	mv	a0,a2
1c00e1ba:	6105                	addi	sp,sp,32
1c00e1bc:	8082                	ret

1c00e1be <__pi_host_fs_mount>:
  int fd;
} pi_host_fs_file_t;

static int32_t __pi_host_fs_mount(struct pi_device *device)
{
  bsp_fs_data.cluster_reqs_first = NULL;
1c00e1be:	1c0157b7          	lui	a5,0x1c015
1c00e1c2:	d007aa23          	sw	zero,-748(a5) # 1c014d14 <bsp_fs_data>
  return 0;
}
1c00e1c6:	4501                	li	a0,0
1c00e1c8:	8082                	ret

1c00e1ca <__pi_host_fs_unmount>:

static void __pi_host_fs_unmount(struct pi_device *device)
{
}
1c00e1ca:	8082                	ret

1c00e1cc <rt_event_enqueue>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00e1cc:	300476f3          	csrrci	a3,mstatus,8
  if (sched->first) {
1c00e1d0:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c00e1d4:	00052023          	sw	zero,0(a0)
1c00e1d8:	01c00713          	li	a4,28
  if (sched->first) {
1c00e1dc:	c619                	beqz	a2,1c00e1ea <rt_event_enqueue+0x1e>
    sched->last->next = event;
1c00e1de:	435c                	lw	a5,4(a4)
1c00e1e0:	c388                	sw	a0,0(a5)
  sched->last = event;
1c00e1e2:	c348                	sw	a0,4(a4)
  __builtin_pulp_spr_write(reg, val);
1c00e1e4:	30069073          	csrw	mstatus,a3
}
1c00e1e8:	8082                	ret
    sched->first = event;
1c00e1ea:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00e1ee:	bfd5                	j	1c00e1e2 <rt_event_enqueue+0x16>

1c00e1f0 <__pi_host_fs_seek>:
}

static int32_t __pi_host_fs_seek(pi_fs_file_t *arg, unsigned int offset)
{
  pi_host_fs_file_t *file = (pi_host_fs_file_t *)arg;
  return semihost_seek(file->fd, offset);
1c00e1f0:	4948                	lw	a0,20(a0)
1c00e1f2:	50b0106f          	j	1c00fefc <semihost_seek>

1c00e1f6 <__pi_host_fs_copy_2d_async>:
  else
    return __pi_host_fs_write_async(arg, buffer, size, task);
}

static int32_t __pi_host_fs_copy_2d_async(pi_fs_file_t *file, uint32_t index, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int32_t ext2loc, pi_task_t *task)
{
1c00e1f6:	7179                	addi	sp,sp,-48
1c00e1f8:	d422                	sw	s0,40(sp)
1c00e1fa:	d226                	sw	s1,36(sp)
1c00e1fc:	d04a                	sw	s2,32(sp)
1c00e1fe:	ce4e                	sw	s3,28(sp)
1c00e200:	cc52                	sw	s4,24(sp)
1c00e202:	ca56                	sw	s5,20(sp)
1c00e204:	c85a                	sw	s6,16(sp)
1c00e206:	c65e                	sw	s7,12(sp)
1c00e208:	c462                	sw	s8,8(sp)
1c00e20a:	d606                	sw	ra,44(sp)
1c00e20c:	89aa                	mv	s3,a0
1c00e20e:	8a2e                	mv	s4,a1
1c00e210:	84b2                	mv	s1,a2
1c00e212:	8b36                	mv	s6,a3
1c00e214:	8bba                	mv	s7,a4
1c00e216:	843e                	mv	s0,a5
1c00e218:	8c42                	mv	s8,a6
1c00e21a:	8ac6                	mv	s5,a7
  unsigned int chunk;
  for (chunk=0; chunk<size; chunk+=length)
1c00e21c:	4901                	li	s2,0
1c00e21e:	03696163          	bltu	s2,s6,1c00e240 <__pi_host_fs_copy_2d_async+0x4a>
1c00e222:	8556                	mv	a0,s5
1c00e224:	3765                	jal	1c00e1cc <rt_event_enqueue>

    buffer = ((char *)buffer) + length;
    index += stride;
  }
  pi_task_push(task);
  return 0;
1c00e226:	4501                	li	a0,0

error:
  pi_task_push(task);
  return -1;
}
1c00e228:	50b2                	lw	ra,44(sp)
1c00e22a:	5422                	lw	s0,40(sp)
1c00e22c:	5492                	lw	s1,36(sp)
1c00e22e:	5902                	lw	s2,32(sp)
1c00e230:	49f2                	lw	s3,28(sp)
1c00e232:	4a62                	lw	s4,24(sp)
1c00e234:	4ad2                	lw	s5,20(sp)
1c00e236:	4b42                	lw	s6,16(sp)
1c00e238:	4bb2                	lw	s7,12(sp)
1c00e23a:	4c22                	lw	s8,8(sp)
1c00e23c:	6145                	addi	sp,sp,48
1c00e23e:	8082                	ret
    if (__pi_host_fs_seek(file, index))
1c00e240:	85d2                	mv	a1,s4
1c00e242:	854e                	mv	a0,s3
1c00e244:	05645433          	p.minu	s0,s0,s6
1c00e248:	3765                	jal	1c00e1f0 <__pi_host_fs_seek>
1c00e24a:	e10d                	bnez	a0,1c00e26c <__pi_host_fs_copy_2d_async+0x76>
      if (pi_fs_read(file, buffer, length) != (int)length)
1c00e24c:	8622                	mv	a2,s0
1c00e24e:	85a6                	mv	a1,s1
1c00e250:	854e                	mv	a0,s3
    if (ext2loc)
1c00e252:	000c0a63          	beqz	s8,1c00e266 <__pi_host_fs_copy_2d_async+0x70>
      if (pi_fs_read(file, buffer, length) != (int)length)
1c00e256:	faaff0ef          	jal	ra,1c00da00 <pi_fs_read>
1c00e25a:	00851963          	bne	a0,s0,1c00e26c <__pi_host_fs_copy_2d_async+0x76>
    buffer = ((char *)buffer) + length;
1c00e25e:	94a2                	add	s1,s1,s0
    index += stride;
1c00e260:	9a5e                	add	s4,s4,s7
  for (chunk=0; chunk<size; chunk+=length)
1c00e262:	9922                	add	s2,s2,s0
1c00e264:	bf6d                	j	1c00e21e <__pi_host_fs_copy_2d_async+0x28>
      if (pi_fs_write(file, buffer, length) != (int)length)
1c00e266:	fc8ff0ef          	jal	ra,1c00da2e <pi_fs_write>
1c00e26a:	bfc5                	j	1c00e25a <__pi_host_fs_copy_2d_async+0x64>
1c00e26c:	8556                	mv	a0,s5
1c00e26e:	f5fff0ef          	jal	ra,1c00e1cc <rt_event_enqueue>
  return -1;
1c00e272:	557d                	li	a0,-1
1c00e274:	bf55                	j	1c00e228 <__pi_host_fs_copy_2d_async+0x32>

1c00e276 <__pi_host_fs_write_async>:
  int result = size - semihost_write(file->fd, buffer, size);
1c00e276:	4948                	lw	a0,20(a0)
{
1c00e278:	1101                	addi	sp,sp,-32
1c00e27a:	ce06                	sw	ra,28(sp)
1c00e27c:	cc22                	sw	s0,24(sp)
1c00e27e:	ca26                	sw	s1,20(sp)
  int result = size - semihost_write(file->fd, buffer, size);
1c00e280:	c636                	sw	a3,12(sp)
{
1c00e282:	84b2                	mv	s1,a2
  int result = size - semihost_write(file->fd, buffer, size);
1c00e284:	45b010ef          	jal	ra,1c00fede <semihost_write>
1c00e288:	46b2                	lw	a3,12(sp)
1c00e28a:	842a                	mv	s0,a0
1c00e28c:	8536                	mv	a0,a3
1c00e28e:	f3fff0ef          	jal	ra,1c00e1cc <rt_event_enqueue>
}
1c00e292:	40848533          	sub	a0,s1,s0
1c00e296:	40f2                	lw	ra,28(sp)
1c00e298:	4462                	lw	s0,24(sp)
1c00e29a:	44d2                	lw	s1,20(sp)
1c00e29c:	6105                	addi	sp,sp,32
1c00e29e:	8082                	ret

1c00e2a0 <__pi_host_fs_read_async>:
  int result = size - semihost_read(file->fd, buffer, size);
1c00e2a0:	4948                	lw	a0,20(a0)
{
1c00e2a2:	1101                	addi	sp,sp,-32
1c00e2a4:	ce06                	sw	ra,28(sp)
1c00e2a6:	cc22                	sw	s0,24(sp)
  int result = size - semihost_read(file->fd, buffer, size);
1c00e2a8:	c636                	sw	a3,12(sp)
{
1c00e2aa:	8432                	mv	s0,a2
  int result = size - semihost_read(file->fd, buffer, size);
1c00e2ac:	415010ef          	jal	ra,1c00fec0 <semihost_read>
  task->implem.data[0] = result;
1c00e2b0:	46b2                	lw	a3,12(sp)
  int result = size - semihost_read(file->fd, buffer, size);
1c00e2b2:	8c09                	sub	s0,s0,a0
  task->implem.data[0] = result;
1c00e2b4:	de80                	sw	s0,56(a3)
1c00e2b6:	8536                	mv	a0,a3
1c00e2b8:	f15ff0ef          	jal	ra,1c00e1cc <rt_event_enqueue>
}
1c00e2bc:	8522                	mv	a0,s0
1c00e2be:	40f2                	lw	ra,28(sp)
1c00e2c0:	4462                	lw	s0,24(sp)
1c00e2c2:	6105                	addi	sp,sp,32
1c00e2c4:	8082                	ret

1c00e2c6 <__pi_host_fs_copy_async>:
{
1c00e2c6:	1101                	addi	sp,sp,-32
1c00e2c8:	cc22                	sw	s0,24(sp)
1c00e2ca:	ca26                	sw	s1,20(sp)
  if (__pi_host_fs_seek(arg, index))
1c00e2cc:	c636                	sw	a3,12(sp)
{
1c00e2ce:	84b2                	mv	s1,a2
  if (__pi_host_fs_seek(arg, index))
1c00e2d0:	c43a                	sw	a4,8(sp)
{
1c00e2d2:	ce06                	sw	ra,28(sp)
1c00e2d4:	842a                	mv	s0,a0
  if (__pi_host_fs_seek(arg, index))
1c00e2d6:	c23e                	sw	a5,4(sp)
1c00e2d8:	f19ff0ef          	jal	ra,1c00e1f0 <__pi_host_fs_seek>
1c00e2dc:	4632                	lw	a2,12(sp)
1c00e2de:	4692                	lw	a3,4(sp)
1c00e2e0:	4722                	lw	a4,8(sp)
1c00e2e2:	ed19                	bnez	a0,1c00e300 <__pi_host_fs_copy_async+0x3a>
    return __pi_host_fs_read_async(arg, buffer, size, task);
1c00e2e4:	85a6                	mv	a1,s1
1c00e2e6:	8522                	mv	a0,s0
  if (ext2loc)
1c00e2e8:	c711                	beqz	a4,1c00e2f4 <__pi_host_fs_copy_async+0x2e>
}
1c00e2ea:	4462                	lw	s0,24(sp)
1c00e2ec:	40f2                	lw	ra,28(sp)
1c00e2ee:	44d2                	lw	s1,20(sp)
1c00e2f0:	6105                	addi	sp,sp,32
    return __pi_host_fs_read_async(arg, buffer, size, task);
1c00e2f2:	b77d                	j	1c00e2a0 <__pi_host_fs_read_async>
}
1c00e2f4:	4462                	lw	s0,24(sp)
1c00e2f6:	40f2                	lw	ra,28(sp)
1c00e2f8:	44d2                	lw	s1,20(sp)
1c00e2fa:	6105                	addi	sp,sp,32
    return __pi_host_fs_write_async(arg, buffer, size, task);
1c00e2fc:	f7bff06f          	j	1c00e276 <__pi_host_fs_write_async>
}
1c00e300:	40f2                	lw	ra,28(sp)
1c00e302:	4462                	lw	s0,24(sp)
1c00e304:	44d2                	lw	s1,20(sp)
1c00e306:	557d                	li	a0,-1
1c00e308:	6105                	addi	sp,sp,32
1c00e30a:	8082                	ret

1c00e30c <__pi_host_fs_direct_read_async>:
1c00e30c:	f95ff06f          	j	1c00e2a0 <__pi_host_fs_read_async>

1c00e310 <__pi_host_fs_close>:
{
1c00e310:	1141                	addi	sp,sp,-16
1c00e312:	c422                	sw	s0,8(sp)
1c00e314:	842a                	mv	s0,a0
  semihost_close(file->fd);
1c00e316:	4948                	lw	a0,20(a0)
{
1c00e318:	c606                	sw	ra,12(sp)
  semihost_close(file->fd);
1c00e31a:	39f010ef          	jal	ra,1c00feb8 <semihost_close>
  pmsis_l2_malloc_free(file, sizeof(pi_host_fs_file_t));
1c00e31e:	8522                	mv	a0,s0
}
1c00e320:	4422                	lw	s0,8(sp)
1c00e322:	40b2                	lw	ra,12(sp)
  pmsis_l2_malloc_free(file, sizeof(pi_host_fs_file_t));
1c00e324:	45e1                	li	a1,24
}
1c00e326:	0141                	addi	sp,sp,16
  pmsis_l2_malloc_free(file, sizeof(pi_host_fs_file_t));
1c00e328:	7600206f          	j	1c010a88 <pi_l2_free>

1c00e32c <__pi_host_fs_open>:
{
1c00e32c:	1101                	addi	sp,sp,-32
1c00e32e:	ca26                	sw	s1,20(sp)
1c00e330:	84aa                	mv	s1,a0
  pi_host_fs_file_t *file = pmsis_l2_malloc(sizeof(pi_host_fs_file_t));
1c00e332:	4561                	li	a0,24
{
1c00e334:	c84a                	sw	s2,16(sp)
  pi_host_fs_file_t *file = pmsis_l2_malloc(sizeof(pi_host_fs_file_t));
1c00e336:	c632                	sw	a2,12(sp)
{
1c00e338:	ce06                	sw	ra,28(sp)
1c00e33a:	cc22                	sw	s0,24(sp)
1c00e33c:	892e                	mv	s2,a1
  pi_host_fs_file_t *file = pmsis_l2_malloc(sizeof(pi_host_fs_file_t));
1c00e33e:	73c020ef          	jal	ra,1c010a7a <pi_l2_malloc>
  if (file == NULL) goto error;
1c00e342:	4632                	lw	a2,12(sp)
1c00e344:	e909                	bnez	a0,1c00e356 <__pi_host_fs_open+0x2a>
  return NULL;
1c00e346:	4401                	li	s0,0
}
1c00e348:	8522                	mv	a0,s0
1c00e34a:	40f2                	lw	ra,28(sp)
1c00e34c:	4462                	lw	s0,24(sp)
1c00e34e:	44d2                	lw	s1,20(sp)
1c00e350:	4942                	lw	s2,16(sp)
1c00e352:	6105                	addi	sp,sp,32
1c00e354:	8082                	ret
  file->header.fs = device;
1c00e356:	c104                	sw	s1,0(a0)
1c00e358:	842a                	mv	s0,a0
  file->fd = semihost_open(file_name, flags == PI_FS_FLAGS_WRITE ? 6 : flags == PI_FS_FLAGS_APPEND ? 8 : 0);
1c00e35a:	4599                	li	a1,6
1c00e35c:	00162663          	p.beqimm	a2,1,1c00e368 <__pi_host_fs_open+0x3c>
1c00e360:	45a1                	li	a1,8
1c00e362:	00262363          	p.beqimm	a2,2,1c00e368 <__pi_host_fs_open+0x3c>
1c00e366:	4581                	li	a1,0
1c00e368:	854a                	mv	a0,s2
1c00e36a:	323010ef          	jal	ra,1c00fe8c <semihost_open>
1c00e36e:	c848                	sw	a0,20(s0)
  if (file->fd == -1)
1c00e370:	fdf52be3          	p.beqimm	a0,-1,1c00e346 <__pi_host_fs_open+0x1a>
  file->header.api = (pi_fs_api_t *)device->api;
1c00e374:	409c                	lw	a5,0(s1)
  file->header.data = file;
1c00e376:	c400                	sw	s0,8(s0)
  file->header.fs = device;
1c00e378:	c004                	sw	s1,0(s0)
  file->header.api = (pi_fs_api_t *)device->api;
1c00e37a:	c05c                	sw	a5,4(s0)
  file->header.fs_data = &bsp_fs_data;
1c00e37c:	1c0157b7          	lui	a5,0x1c015
1c00e380:	d1478793          	addi	a5,a5,-748 # 1c014d14 <bsp_fs_data>
1c00e384:	c81c                	sw	a5,16(s0)
  return (pi_fs_file_t *)file;
1c00e386:	b7c9                	j	1c00e348 <__pi_host_fs_open+0x1c>

1c00e388 <__rt_event_enqueue>:

    // Wait wakeup time
    pi_time_wait_us(300);

    // Don't know why on RTL, the flash model needs a SW reset
    hyperflash_set_reg_exec(hyperflash, 0x000<<1, 0xF0);
1c00e388:	01c02683          	lw	a3,28(zero) # 1c <__rt_sched>
1c00e38c:	00052023          	sw	zero,0(a0)
1c00e390:	01c00713          	li	a4,28
1c00e394:	c689                	beqz	a3,1c00e39e <__rt_event_enqueue+0x16>
1c00e396:	435c                	lw	a5,4(a4)
1c00e398:	c388                	sw	a0,0(a5)
1c00e39a:	c348                	sw	a0,4(a4)
1c00e39c:	8082                	ret
1c00e39e:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c00e3a2:	bfe5                	j	1c00e39a <__rt_event_enqueue+0x12>

1c00e3a4 <hyperflash_ioctl>:
1c00e3a4:	e589                	bnez	a1,1c00e3ae <hyperflash_ioctl+0xa>
1c00e3a6:	000407b7          	lui	a5,0x40
1c00e3aa:	c21c                	sw	a5,0(a2)
1c00e3ac:	c25c                	sw	a5,4(a2)
1c00e3ae:	4501                	li	a0,0
1c00e3b0:	8082                	ret

1c00e3b2 <hyperflash_set_reg_exec>:
1c00e3b2:	00c51623          	sh	a2,12(a0)
1c00e3b6:	4689                	li	a3,2
1c00e3b8:	00c50613          	addi	a2,a0,12
1c00e3bc:	2630306f          	j	1c011e1e <pi_hyper_write>

1c00e3c0 <hyperflash_stall_task>:
1c00e3c0:	30047373          	csrrci	t1,mstatus,8
1c00e3c4:	01852e03          	lw	t3,24(a0)
1c00e3c8:	020e0763          	beqz	t3,1c00e3f6 <hyperflash_stall_task+0x36>
1c00e3cc:	dd90                	sw	a2,56(a1)
1c00e3ce:	ddd4                	sw	a3,60(a1)
1c00e3d0:	c1b8                	sw	a4,64(a1)
1c00e3d2:	c1fc                	sw	a5,68(a1)
1c00e3d4:	0505a423          	sw	a6,72(a1)
1c00e3d8:	0515a623          	sw	a7,76(a1)
1c00e3dc:	491c                	lw	a5,16(a0)
1c00e3de:	cb91                	beqz	a5,1c00e3f2 <hyperflash_stall_task+0x32>
1c00e3e0:	495c                	lw	a5,20(a0)
1c00e3e2:	cfcc                	sw	a1,28(a5)
1c00e3e4:	c94c                	sw	a1,20(a0)
1c00e3e6:	0005ae23          	sw	zero,28(a1)
1c00e3ea:	30031073          	csrw	mstatus,t1
1c00e3ee:	4505                	li	a0,1
1c00e3f0:	8082                	ret
1c00e3f2:	c90c                	sw	a1,16(a0)
1c00e3f4:	bfc5                	j	1c00e3e4 <hyperflash_stall_task+0x24>
1c00e3f6:	cd0c                	sw	a1,24(a0)
1c00e3f8:	30031073          	csrw	mstatus,t1
1c00e3fc:	4501                	li	a0,0
1c00e3fe:	8082                	ret

1c00e400 <hyperflash_read_2d_async>:
1c00e400:	1101                	addi	sp,sp,-32
1c00e402:	cc22                	sw	s0,24(sp)
1c00e404:	4500                	lw	s0,8(a0)
1c00e406:	ca26                	sw	s1,20(sp)
1c00e408:	84ae                	mv	s1,a1
1c00e40a:	c84a                	sw	s2,16(sp)
1c00e40c:	c64e                	sw	s3,12(sp)
1c00e40e:	c452                	sw	s4,8(sp)
1c00e410:	c256                	sw	s5,4(sp)
1c00e412:	c05a                	sw	s6,0(sp)
1c00e414:	8932                	mv	s2,a2
1c00e416:	8b2a                	mv	s6,a0
1c00e418:	89b6                	mv	s3,a3
1c00e41a:	8a3a                	mv	s4,a4
1c00e41c:	8abe                	mv	s5,a5
1c00e41e:	85c2                	mv	a1,a6
1c00e420:	88be                	mv	a7,a5
1c00e422:	883a                	mv	a6,a4
1c00e424:	87b6                	mv	a5,a3
1c00e426:	8732                	mv	a4,a2
1c00e428:	86a6                	mv	a3,s1
1c00e42a:	4619                	li	a2,6
1c00e42c:	8522                	mv	a0,s0
1c00e42e:	ce06                	sw	ra,28(sp)
1c00e430:	f91ff0ef          	jal	ra,1c00e3c0 <hyperflash_stall_task>
1c00e434:	e129                	bnez	a0,1c00e476 <hyperflash_read_2d_async+0x76>
1c00e436:	1c00e7b7          	lui	a5,0x1c00e
1c00e43a:	68c78793          	addi	a5,a5,1676 # 1c00e68c <hyperflash_handle_pending_task>
1c00e43e:	02040e23          	sb	zero,60(s0)
1c00e442:	d45c                	sw	a5,44(s0)
1c00e444:	4785                	li	a5,1
1c00e446:	03642823          	sw	s6,48(s0)
1c00e44a:	c83c                	sw	a5,80(s0)
1c00e44c:	04042023          	sw	zero,64(s0)
1c00e450:	02840813          	addi	a6,s0,40
1c00e454:	8522                	mv	a0,s0
1c00e456:	4462                	lw	s0,24(sp)
1c00e458:	40f2                	lw	ra,28(sp)
1c00e45a:	4b02                	lw	s6,0(sp)
1c00e45c:	87d6                	mv	a5,s5
1c00e45e:	8752                	mv	a4,s4
1c00e460:	4a92                	lw	s5,4(sp)
1c00e462:	4a22                	lw	s4,8(sp)
1c00e464:	86ce                	mv	a3,s3
1c00e466:	864a                	mv	a2,s2
1c00e468:	49b2                	lw	s3,12(sp)
1c00e46a:	4942                	lw	s2,16(sp)
1c00e46c:	85a6                	mv	a1,s1
1c00e46e:	44d2                	lw	s1,20(sp)
1c00e470:	6105                	addi	sp,sp,32
1c00e472:	5550306f          	j	1c0121c6 <pi_hyper_read_2d_async>
1c00e476:	40f2                	lw	ra,28(sp)
1c00e478:	4462                	lw	s0,24(sp)
1c00e47a:	44d2                	lw	s1,20(sp)
1c00e47c:	4942                	lw	s2,16(sp)
1c00e47e:	49b2                	lw	s3,12(sp)
1c00e480:	4a22                	lw	s4,8(sp)
1c00e482:	4a92                	lw	s5,4(sp)
1c00e484:	4b02                	lw	s6,0(sp)
1c00e486:	6105                	addi	sp,sp,32
1c00e488:	8082                	ret

1c00e48a <hyperflash_copy_2d_async>:
1c00e48a:	00080b63          	beqz	a6,1c00e4a0 <hyperflash_copy_2d_async+0x16>
1c00e48e:	1141                	addi	sp,sp,-16
1c00e490:	8846                	mv	a6,a7
1c00e492:	c606                	sw	ra,12(sp)
1c00e494:	f6dff0ef          	jal	ra,1c00e400 <hyperflash_read_2d_async>
1c00e498:	40b2                	lw	ra,12(sp)
1c00e49a:	4501                	li	a0,0
1c00e49c:	0141                	addi	sp,sp,16
1c00e49e:	8082                	ret
1c00e4a0:	557d                	li	a0,-1
1c00e4a2:	8082                	ret

1c00e4a4 <hyperflash_erase_sector_async>:
1c00e4a4:	1101                	addi	sp,sp,-32
1c00e4a6:	cc22                	sw	s0,24(sp)
1c00e4a8:	4500                	lw	s0,8(a0)
1c00e4aa:	c64e                	sw	s3,12(sp)
1c00e4ac:	89ae                	mv	s3,a1
1c00e4ae:	c84a                	sw	s2,16(sp)
1c00e4b0:	85b2                	mv	a1,a2
1c00e4b2:	892a                	mv	s2,a0
1c00e4b4:	4881                	li	a7,0
1c00e4b6:	4801                	li	a6,0
1c00e4b8:	4781                	li	a5,0
1c00e4ba:	4701                	li	a4,0
1c00e4bc:	86ce                	mv	a3,s3
1c00e4be:	4609                	li	a2,2
1c00e4c0:	8522                	mv	a0,s0
1c00e4c2:	ce06                	sw	ra,28(sp)
1c00e4c4:	ca26                	sw	s1,20(sp)
1c00e4c6:	efbff0ef          	jal	ra,1c00e3c0 <hyperflash_stall_task>
1c00e4ca:	e549                	bnez	a0,1c00e554 <hyperflash_erase_sector_async+0xb0>
1c00e4cc:	6485                	lui	s1,0x1
1c00e4ce:	aaa48593          	addi	a1,s1,-1366 # aaa <__rt_stack_size+0x2aa>
1c00e4d2:	8522                	mv	a0,s0
1c00e4d4:	0aa00613          	li	a2,170
1c00e4d8:	edbff0ef          	jal	ra,1c00e3b2 <hyperflash_set_reg_exec>
1c00e4dc:	8522                	mv	a0,s0
1c00e4de:	05500613          	li	a2,85
1c00e4e2:	55400593          	li	a1,1364
1c00e4e6:	ecdff0ef          	jal	ra,1c00e3b2 <hyperflash_set_reg_exec>
1c00e4ea:	aaa48593          	addi	a1,s1,-1366
1c00e4ee:	8522                	mv	a0,s0
1c00e4f0:	08000613          	li	a2,128
1c00e4f4:	ebfff0ef          	jal	ra,1c00e3b2 <hyperflash_set_reg_exec>
1c00e4f8:	aaa48593          	addi	a1,s1,-1366
1c00e4fc:	8522                	mv	a0,s0
1c00e4fe:	0aa00613          	li	a2,170
1c00e502:	eb1ff0ef          	jal	ra,1c00e3b2 <hyperflash_set_reg_exec>
1c00e506:	8522                	mv	a0,s0
1c00e508:	05500613          	li	a2,85
1c00e50c:	55400593          	li	a1,1364
1c00e510:	ea3ff0ef          	jal	ra,1c00e3b2 <hyperflash_set_reg_exec>
1c00e514:	85ce                	mv	a1,s3
1c00e516:	8522                	mv	a0,s0
1c00e518:	03000613          	li	a2,48
1c00e51c:	e97ff0ef          	jal	ra,1c00e3b2 <hyperflash_set_reg_exec>
1c00e520:	1c00f7b7          	lui	a5,0x1c00f
1c00e524:	cc078793          	addi	a5,a5,-832 # 1c00ecc0 <hyperflash_check_erase>
1c00e528:	02040e23          	sb	zero,60(s0)
1c00e52c:	d45c                	sw	a5,44(s0)
1c00e52e:	4785                	li	a5,1
1c00e530:	03242823          	sw	s2,48(s0)
1c00e534:	04042023          	sw	zero,64(s0)
1c00e538:	c83c                	sw	a5,80(s0)
1c00e53a:	02840513          	addi	a0,s0,40
1c00e53e:	4462                	lw	s0,24(sp)
1c00e540:	40f2                	lw	ra,28(sp)
1c00e542:	44d2                	lw	s1,20(sp)
1c00e544:	4942                	lw	s2,16(sp)
1c00e546:	49b2                	lw	s3,12(sp)
1c00e548:	6589                	lui	a1,0x2
1c00e54a:	71058593          	addi	a1,a1,1808 # 2710 <__rt_stack_size+0x1f10>
1c00e54e:	6105                	addi	sp,sp,32
1c00e550:	33c0206f          	j	1c01088c <pi_task_push_delayed_us>
1c00e554:	40f2                	lw	ra,28(sp)
1c00e556:	4462                	lw	s0,24(sp)
1c00e558:	44d2                	lw	s1,20(sp)
1c00e55a:	4942                	lw	s2,16(sp)
1c00e55c:	49b2                	lw	s3,12(sp)
1c00e55e:	6105                	addi	sp,sp,32
1c00e560:	8082                	ret

1c00e562 <hyperflash_erase_chip_async>:
1c00e562:	1141                	addi	sp,sp,-16
1c00e564:	c422                	sw	s0,8(sp)
1c00e566:	4500                	lw	s0,8(a0)
1c00e568:	c04a                	sw	s2,0(sp)
1c00e56a:	4881                	li	a7,0
1c00e56c:	892a                	mv	s2,a0
1c00e56e:	4801                	li	a6,0
1c00e570:	4781                	li	a5,0
1c00e572:	4701                	li	a4,0
1c00e574:	4681                	li	a3,0
1c00e576:	4605                	li	a2,1
1c00e578:	8522                	mv	a0,s0
1c00e57a:	c606                	sw	ra,12(sp)
1c00e57c:	c226                	sw	s1,4(sp)
1c00e57e:	e43ff0ef          	jal	ra,1c00e3c0 <hyperflash_stall_task>
1c00e582:	e541                	bnez	a0,1c00e60a <hyperflash_erase_chip_async+0xa8>
1c00e584:	6485                	lui	s1,0x1
1c00e586:	aaa48593          	addi	a1,s1,-1366 # aaa <__rt_stack_size+0x2aa>
1c00e58a:	8522                	mv	a0,s0
1c00e58c:	0aa00613          	li	a2,170
1c00e590:	e23ff0ef          	jal	ra,1c00e3b2 <hyperflash_set_reg_exec>
1c00e594:	8522                	mv	a0,s0
1c00e596:	05500613          	li	a2,85
1c00e59a:	55400593          	li	a1,1364
1c00e59e:	e15ff0ef          	jal	ra,1c00e3b2 <hyperflash_set_reg_exec>
1c00e5a2:	aaa48593          	addi	a1,s1,-1366
1c00e5a6:	8522                	mv	a0,s0
1c00e5a8:	08000613          	li	a2,128
1c00e5ac:	e07ff0ef          	jal	ra,1c00e3b2 <hyperflash_set_reg_exec>
1c00e5b0:	aaa48593          	addi	a1,s1,-1366
1c00e5b4:	8522                	mv	a0,s0
1c00e5b6:	0aa00613          	li	a2,170
1c00e5ba:	df9ff0ef          	jal	ra,1c00e3b2 <hyperflash_set_reg_exec>
1c00e5be:	8522                	mv	a0,s0
1c00e5c0:	05500613          	li	a2,85
1c00e5c4:	55400593          	li	a1,1364
1c00e5c8:	debff0ef          	jal	ra,1c00e3b2 <hyperflash_set_reg_exec>
1c00e5cc:	aaa48593          	addi	a1,s1,-1366
1c00e5d0:	8522                	mv	a0,s0
1c00e5d2:	4641                	li	a2,16
1c00e5d4:	ddfff0ef          	jal	ra,1c00e3b2 <hyperflash_set_reg_exec>
1c00e5d8:	1c00f7b7          	lui	a5,0x1c00f
1c00e5dc:	cc078793          	addi	a5,a5,-832 # 1c00ecc0 <hyperflash_check_erase>
1c00e5e0:	02040e23          	sb	zero,60(s0)
1c00e5e4:	d45c                	sw	a5,44(s0)
1c00e5e6:	4785                	li	a5,1
1c00e5e8:	03242823          	sw	s2,48(s0)
1c00e5ec:	04042023          	sw	zero,64(s0)
1c00e5f0:	c83c                	sw	a5,80(s0)
1c00e5f2:	02840513          	addi	a0,s0,40
1c00e5f6:	4422                	lw	s0,8(sp)
1c00e5f8:	40b2                	lw	ra,12(sp)
1c00e5fa:	4492                	lw	s1,4(sp)
1c00e5fc:	4902                	lw	s2,0(sp)
1c00e5fe:	65e1                	lui	a1,0x18
1c00e600:	6a058593          	addi	a1,a1,1696 # 186a0 <__L1Cl+0x86a0>
1c00e604:	0141                	addi	sp,sp,16
1c00e606:	2860206f          	j	1c01088c <pi_task_push_delayed_us>
1c00e60a:	40b2                	lw	ra,12(sp)
1c00e60c:	4422                	lw	s0,8(sp)
1c00e60e:	4492                	lw	s1,4(sp)
1c00e610:	4902                	lw	s2,0(sp)
1c00e612:	0141                	addi	sp,sp,16
1c00e614:	8082                	ret

1c00e616 <hyperflash_read_async>:
1c00e616:	1101                	addi	sp,sp,-32
1c00e618:	cc22                	sw	s0,24(sp)
1c00e61a:	4500                	lw	s0,8(a0)
1c00e61c:	ca26                	sw	s1,20(sp)
1c00e61e:	84ae                	mv	s1,a1
1c00e620:	c84a                	sw	s2,16(sp)
1c00e622:	c64e                	sw	s3,12(sp)
1c00e624:	c452                	sw	s4,8(sp)
1c00e626:	8932                	mv	s2,a2
1c00e628:	8a2a                	mv	s4,a0
1c00e62a:	89b6                	mv	s3,a3
1c00e62c:	85ba                	mv	a1,a4
1c00e62e:	87b6                	mv	a5,a3
1c00e630:	8732                	mv	a4,a2
1c00e632:	4881                	li	a7,0
1c00e634:	4801                	li	a6,0
1c00e636:	86a6                	mv	a3,s1
1c00e638:	4615                	li	a2,5
1c00e63a:	8522                	mv	a0,s0
1c00e63c:	ce06                	sw	ra,28(sp)
1c00e63e:	d83ff0ef          	jal	ra,1c00e3c0 <hyperflash_stall_task>
1c00e642:	ed0d                	bnez	a0,1c00e67c <hyperflash_read_async+0x66>
1c00e644:	1c00e7b7          	lui	a5,0x1c00e
1c00e648:	68c78793          	addi	a5,a5,1676 # 1c00e68c <hyperflash_handle_pending_task>
1c00e64c:	02040e23          	sb	zero,60(s0)
1c00e650:	d45c                	sw	a5,44(s0)
1c00e652:	4785                	li	a5,1
1c00e654:	03442823          	sw	s4,48(s0)
1c00e658:	04042023          	sw	zero,64(s0)
1c00e65c:	c83c                	sw	a5,80(s0)
1c00e65e:	02840713          	addi	a4,s0,40
1c00e662:	8522                	mv	a0,s0
1c00e664:	4462                	lw	s0,24(sp)
1c00e666:	40f2                	lw	ra,28(sp)
1c00e668:	4a22                	lw	s4,8(sp)
1c00e66a:	86ce                	mv	a3,s3
1c00e66c:	864a                	mv	a2,s2
1c00e66e:	49b2                	lw	s3,12(sp)
1c00e670:	4942                	lw	s2,16(sp)
1c00e672:	85a6                	mv	a1,s1
1c00e674:	44d2                	lw	s1,20(sp)
1c00e676:	6105                	addi	sp,sp,32
1c00e678:	7560306f          	j	1c011dce <pi_hyper_read_async>
1c00e67c:	40f2                	lw	ra,28(sp)
1c00e67e:	4462                	lw	s0,24(sp)
1c00e680:	44d2                	lw	s1,20(sp)
1c00e682:	4942                	lw	s2,16(sp)
1c00e684:	49b2                	lw	s3,12(sp)
1c00e686:	4a22                	lw	s4,8(sp)
1c00e688:	6105                	addi	sp,sp,32
1c00e68a:	8082                	ret

1c00e68c <hyperflash_handle_pending_task>:
1c00e68c:	1101                	addi	sp,sp,-32
1c00e68e:	ca26                	sw	s1,20(sp)
1c00e690:	4504                	lw	s1,8(a0)
1c00e692:	cc22                	sw	s0,24(sp)
1c00e694:	842a                	mv	s0,a0
1c00e696:	ce06                	sw	ra,28(sp)
1c00e698:	c84a                	sw	s2,16(sp)
1c00e69a:	c64e                	sw	s3,12(sp)
1c00e69c:	30047973          	csrrci	s2,mstatus,8
1c00e6a0:	4c88                	lw	a0,24(s1)
1c00e6a2:	300479f3          	csrrci	s3,mstatus,8
1c00e6a6:	ce3ff0ef          	jal	ra,1c00e388 <__rt_event_enqueue>
1c00e6aa:	30099073          	csrw	mstatus,s3
1c00e6ae:	4898                	lw	a4,16(s1)
1c00e6b0:	0004ac23          	sw	zero,24(s1)
1c00e6b4:	c319                	beqz	a4,1c00e6ba <hyperflash_handle_pending_task+0x2e>
1c00e6b6:	4f5c                	lw	a5,28(a4)
1c00e6b8:	c89c                	sw	a5,16(s1)
1c00e6ba:	30091073          	csrw	mstatus,s2
1c00e6be:	c379                	beqz	a4,1c00e784 <hyperflash_handle_pending_task+0xf8>
1c00e6c0:	5f1c                	lw	a5,56(a4)
1c00e6c2:	ef81                	bnez	a5,1c00e6da <hyperflash_handle_pending_task+0x4e>
1c00e6c4:	8522                	mv	a0,s0
1c00e6c6:	4462                	lw	s0,24(sp)
1c00e6c8:	40f2                	lw	ra,28(sp)
1c00e6ca:	44d2                	lw	s1,20(sp)
1c00e6cc:	4942                	lw	s2,16(sp)
1c00e6ce:	49b2                	lw	s3,12(sp)
1c00e6d0:	4374                	lw	a3,68(a4)
1c00e6d2:	4330                	lw	a2,64(a4)
1c00e6d4:	5f4c                	lw	a1,60(a4)
1c00e6d6:	6105                	addi	sp,sp,32
1c00e6d8:	a40d                	j	1c00e8fa <hyperflash_program_async>
1c00e6da:	0017bc63          	p.bneimm	a5,1,1c00e6f2 <hyperflash_handle_pending_task+0x66>
1c00e6de:	8522                	mv	a0,s0
1c00e6e0:	4462                	lw	s0,24(sp)
1c00e6e2:	40f2                	lw	ra,28(sp)
1c00e6e4:	44d2                	lw	s1,20(sp)
1c00e6e6:	4942                	lw	s2,16(sp)
1c00e6e8:	49b2                	lw	s3,12(sp)
1c00e6ea:	85ba                	mv	a1,a4
1c00e6ec:	6105                	addi	sp,sp,32
1c00e6ee:	e75ff06f          	j	1c00e562 <hyperflash_erase_chip_async>
1c00e6f2:	0027bd63          	p.bneimm	a5,2,1c00e70c <hyperflash_handle_pending_task+0x80>
1c00e6f6:	8522                	mv	a0,s0
1c00e6f8:	4462                	lw	s0,24(sp)
1c00e6fa:	40f2                	lw	ra,28(sp)
1c00e6fc:	44d2                	lw	s1,20(sp)
1c00e6fe:	4942                	lw	s2,16(sp)
1c00e700:	49b2                	lw	s3,12(sp)
1c00e702:	5f4c                	lw	a1,60(a4)
1c00e704:	863a                	mv	a2,a4
1c00e706:	6105                	addi	sp,sp,32
1c00e708:	d9dff06f          	j	1c00e4a4 <hyperflash_erase_sector_async>
1c00e70c:	0037bd63          	p.bneimm	a5,3,1c00e726 <hyperflash_handle_pending_task+0x9a>
1c00e710:	8522                	mv	a0,s0
1c00e712:	4462                	lw	s0,24(sp)
1c00e714:	40f2                	lw	ra,28(sp)
1c00e716:	44d2                	lw	s1,20(sp)
1c00e718:	4942                	lw	s2,16(sp)
1c00e71a:	49b2                	lw	s3,12(sp)
1c00e71c:	4330                	lw	a2,64(a4)
1c00e71e:	5f4c                	lw	a1,60(a4)
1c00e720:	86ba                	mv	a3,a4
1c00e722:	6105                	addi	sp,sp,32
1c00e724:	a0f9                	j	1c00e7f2 <hyperflash_reg_set_async>
1c00e726:	0047bd63          	p.bneimm	a5,4,1c00e740 <hyperflash_handle_pending_task+0xb4>
1c00e72a:	8522                	mv	a0,s0
1c00e72c:	4462                	lw	s0,24(sp)
1c00e72e:	40f2                	lw	ra,28(sp)
1c00e730:	44d2                	lw	s1,20(sp)
1c00e732:	4942                	lw	s2,16(sp)
1c00e734:	49b2                	lw	s3,12(sp)
1c00e736:	4330                	lw	a2,64(a4)
1c00e738:	5f4c                	lw	a1,60(a4)
1c00e73a:	86ba                	mv	a3,a4
1c00e73c:	6105                	addi	sp,sp,32
1c00e73e:	a891                	j	1c00e792 <hyperflash_reg_get_async>
1c00e740:	0057be63          	p.bneimm	a5,5,1c00e75c <hyperflash_handle_pending_task+0xd0>
1c00e744:	8522                	mv	a0,s0
1c00e746:	4462                	lw	s0,24(sp)
1c00e748:	40f2                	lw	ra,28(sp)
1c00e74a:	44d2                	lw	s1,20(sp)
1c00e74c:	4942                	lw	s2,16(sp)
1c00e74e:	49b2                	lw	s3,12(sp)
1c00e750:	4374                	lw	a3,68(a4)
1c00e752:	4330                	lw	a2,64(a4)
1c00e754:	5f4c                	lw	a1,60(a4)
1c00e756:	6105                	addi	sp,sp,32
1c00e758:	ebfff06f          	j	1c00e616 <hyperflash_read_async>
1c00e75c:	0267b463          	p.bneimm	a5,6,1c00e784 <hyperflash_handle_pending_task+0xf8>
1c00e760:	883a                	mv	a6,a4
1c00e762:	8522                	mv	a0,s0
1c00e764:	4462                	lw	s0,24(sp)
1c00e766:	477c                	lw	a5,76(a4)
1c00e768:	40f2                	lw	ra,28(sp)
1c00e76a:	44d2                	lw	s1,20(sp)
1c00e76c:	4942                	lw	s2,16(sp)
1c00e76e:	49b2                	lw	s3,12(sp)
1c00e770:	4738                	lw	a4,72(a4)
1c00e772:	04482683          	lw	a3,68(a6)
1c00e776:	04082603          	lw	a2,64(a6)
1c00e77a:	03c82583          	lw	a1,60(a6)
1c00e77e:	6105                	addi	sp,sp,32
1c00e780:	c81ff06f          	j	1c00e400 <hyperflash_read_2d_async>
1c00e784:	40f2                	lw	ra,28(sp)
1c00e786:	4462                	lw	s0,24(sp)
1c00e788:	44d2                	lw	s1,20(sp)
1c00e78a:	4942                	lw	s2,16(sp)
1c00e78c:	49b2                	lw	s3,12(sp)
1c00e78e:	6105                	addi	sp,sp,32
1c00e790:	8082                	ret

1c00e792 <hyperflash_reg_get_async>:
1c00e792:	1101                	addi	sp,sp,-32
1c00e794:	cc22                	sw	s0,24(sp)
1c00e796:	4500                	lw	s0,8(a0)
1c00e798:	c64e                	sw	s3,12(sp)
1c00e79a:	89ae                	mv	s3,a1
1c00e79c:	ca26                	sw	s1,20(sp)
1c00e79e:	c84a                	sw	s2,16(sp)
1c00e7a0:	84aa                	mv	s1,a0
1c00e7a2:	8932                	mv	s2,a2
1c00e7a4:	85b6                	mv	a1,a3
1c00e7a6:	8732                	mv	a4,a2
1c00e7a8:	4881                	li	a7,0
1c00e7aa:	4801                	li	a6,0
1c00e7ac:	4781                	li	a5,0
1c00e7ae:	86ce                	mv	a3,s3
1c00e7b0:	4611                	li	a2,4
1c00e7b2:	8522                	mv	a0,s0
1c00e7b4:	ce06                	sw	ra,28(sp)
1c00e7b6:	c0bff0ef          	jal	ra,1c00e3c0 <hyperflash_stall_task>
1c00e7ba:	e50d                	bnez	a0,1c00e7e4 <hyperflash_reg_get_async+0x52>
1c00e7bc:	8522                	mv	a0,s0
1c00e7be:	00c40613          	addi	a2,s0,12
1c00e7c2:	85ce                	mv	a1,s3
1c00e7c4:	4691                	li	a3,4
1c00e7c6:	61e030ef          	jal	ra,1c011de4 <pi_hyper_read>
1c00e7ca:	00c45783          	lhu	a5,12(s0)
1c00e7ce:	4462                	lw	s0,24(sp)
1c00e7d0:	40f2                	lw	ra,28(sp)
1c00e7d2:	00f91023          	sh	a5,0(s2)
1c00e7d6:	49b2                	lw	s3,12(sp)
1c00e7d8:	4942                	lw	s2,16(sp)
1c00e7da:	8526                	mv	a0,s1
1c00e7dc:	44d2                	lw	s1,20(sp)
1c00e7de:	6105                	addi	sp,sp,32
1c00e7e0:	eadff06f          	j	1c00e68c <hyperflash_handle_pending_task>
1c00e7e4:	40f2                	lw	ra,28(sp)
1c00e7e6:	4462                	lw	s0,24(sp)
1c00e7e8:	44d2                	lw	s1,20(sp)
1c00e7ea:	4942                	lw	s2,16(sp)
1c00e7ec:	49b2                	lw	s3,12(sp)
1c00e7ee:	6105                	addi	sp,sp,32
1c00e7f0:	8082                	ret

1c00e7f2 <hyperflash_reg_set_async>:
1c00e7f2:	1101                	addi	sp,sp,-32
1c00e7f4:	ca26                	sw	s1,20(sp)
1c00e7f6:	4504                	lw	s1,8(a0)
1c00e7f8:	c84a                	sw	s2,16(sp)
1c00e7fa:	892e                	mv	s2,a1
1c00e7fc:	cc22                	sw	s0,24(sp)
1c00e7fe:	c64e                	sw	s3,12(sp)
1c00e800:	842a                	mv	s0,a0
1c00e802:	89b2                	mv	s3,a2
1c00e804:	85b6                	mv	a1,a3
1c00e806:	8732                	mv	a4,a2
1c00e808:	4881                	li	a7,0
1c00e80a:	4801                	li	a6,0
1c00e80c:	4781                	li	a5,0
1c00e80e:	86ca                	mv	a3,s2
1c00e810:	460d                	li	a2,3
1c00e812:	8526                	mv	a0,s1
1c00e814:	ce06                	sw	ra,28(sp)
1c00e816:	babff0ef          	jal	ra,1c00e3c0 <hyperflash_stall_task>
1c00e81a:	e105                	bnez	a0,1c00e83a <hyperflash_reg_set_async+0x48>
1c00e81c:	0009d603          	lhu	a2,0(s3)
1c00e820:	8526                	mv	a0,s1
1c00e822:	85ca                	mv	a1,s2
1c00e824:	b8fff0ef          	jal	ra,1c00e3b2 <hyperflash_set_reg_exec>
1c00e828:	8522                	mv	a0,s0
1c00e82a:	4462                	lw	s0,24(sp)
1c00e82c:	40f2                	lw	ra,28(sp)
1c00e82e:	44d2                	lw	s1,20(sp)
1c00e830:	4942                	lw	s2,16(sp)
1c00e832:	49b2                	lw	s3,12(sp)
1c00e834:	6105                	addi	sp,sp,32
1c00e836:	e57ff06f          	j	1c00e68c <hyperflash_handle_pending_task>
1c00e83a:	40f2                	lw	ra,28(sp)
1c00e83c:	4462                	lw	s0,24(sp)
1c00e83e:	44d2                	lw	s1,20(sp)
1c00e840:	4942                	lw	s2,16(sp)
1c00e842:	49b2                	lw	s3,12(sp)
1c00e844:	6105                	addi	sp,sp,32
1c00e846:	8082                	ret

1c00e848 <hyperflash_program_resume>:
1c00e848:	1101                	addi	sp,sp,-32
1c00e84a:	cc22                	sw	s0,24(sp)
1c00e84c:	4500                	lw	s0,8(a0)
1c00e84e:	ce06                	sw	ra,28(sp)
1c00e850:	ca26                	sw	s1,20(sp)
1c00e852:	13042683          	lw	a3,304(s0)
1c00e856:	c84a                	sw	s2,16(sp)
1c00e858:	ea81                	bnez	a3,1c00e868 <hyperflash_program_resume+0x20>
1c00e85a:	4462                	lw	s0,24(sp)
1c00e85c:	40f2                	lw	ra,28(sp)
1c00e85e:	44d2                	lw	s1,20(sp)
1c00e860:	4942                	lw	s2,16(sp)
1c00e862:	6105                	addi	sp,sp,32
1c00e864:	e29ff06f          	j	1c00e68c <hyperflash_handle_pending_task>
1c00e868:	12842783          	lw	a5,296(s0)
1c00e86c:	6905                	lui	s2,0x1
1c00e86e:	84aa                	mv	s1,a0
1c00e870:	ec97b733          	p.bclr	a4,a5,22,9
1c00e874:	20000793          	li	a5,512
1c00e878:	8f99                	sub	a5,a5,a4
1c00e87a:	04f6d6b3          	p.minu	a3,a3,a5
1c00e87e:	aaa90593          	addi	a1,s2,-1366 # aaa <__rt_stack_size+0x2aa>
1c00e882:	8522                	mv	a0,s0
1c00e884:	0aa00613          	li	a2,170
1c00e888:	c636                	sw	a3,12(sp)
1c00e88a:	b29ff0ef          	jal	ra,1c00e3b2 <hyperflash_set_reg_exec>
1c00e88e:	8522                	mv	a0,s0
1c00e890:	05500613          	li	a2,85
1c00e894:	55400593          	li	a1,1364
1c00e898:	b1bff0ef          	jal	ra,1c00e3b2 <hyperflash_set_reg_exec>
1c00e89c:	aaa90593          	addi	a1,s2,-1366
1c00e8a0:	8522                	mv	a0,s0
1c00e8a2:	0a000613          	li	a2,160
1c00e8a6:	b0dff0ef          	jal	ra,1c00e3b2 <hyperflash_set_reg_exec>
1c00e8aa:	46b2                	lw	a3,12(sp)
1c00e8ac:	12842583          	lw	a1,296(s0)
1c00e8b0:	12c42603          	lw	a2,300(s0)
1c00e8b4:	02040e23          	sb	zero,60(s0)
1c00e8b8:	00d587b3          	add	a5,a1,a3
1c00e8bc:	12f42423          	sw	a5,296(s0)
1c00e8c0:	00d607b3          	add	a5,a2,a3
1c00e8c4:	12f42623          	sw	a5,300(s0)
1c00e8c8:	13042783          	lw	a5,304(s0)
1c00e8cc:	d804                	sw	s1,48(s0)
1c00e8ce:	04042023          	sw	zero,64(s0)
1c00e8d2:	8f95                	sub	a5,a5,a3
1c00e8d4:	12f42823          	sw	a5,304(s0)
1c00e8d8:	1c00f7b7          	lui	a5,0x1c00f
1c00e8dc:	d1478793          	addi	a5,a5,-748 # 1c00ed14 <hyperflash_check_program>
1c00e8e0:	d45c                	sw	a5,44(s0)
1c00e8e2:	4785                	li	a5,1
1c00e8e4:	c83c                	sw	a5,80(s0)
1c00e8e6:	02840713          	addi	a4,s0,40
1c00e8ea:	8522                	mv	a0,s0
1c00e8ec:	4462                	lw	s0,24(sp)
1c00e8ee:	40f2                	lw	ra,28(sp)
1c00e8f0:	44d2                	lw	s1,20(sp)
1c00e8f2:	4942                	lw	s2,16(sp)
1c00e8f4:	6105                	addi	sp,sp,32
1c00e8f6:	5100306f          	j	1c011e06 <pi_hyper_write_async>

1c00e8fa <hyperflash_program_async>:
1c00e8fa:	1101                	addi	sp,sp,-32
1c00e8fc:	cc22                	sw	s0,24(sp)
1c00e8fe:	4500                	lw	s0,8(a0)
1c00e900:	c452                	sw	s4,8(sp)
1c00e902:	8a2e                	mv	s4,a1
1c00e904:	ca26                	sw	s1,20(sp)
1c00e906:	c84a                	sw	s2,16(sp)
1c00e908:	c64e                	sw	s3,12(sp)
1c00e90a:	84aa                	mv	s1,a0
1c00e90c:	89b2                	mv	s3,a2
1c00e90e:	8936                	mv	s2,a3
1c00e910:	85ba                	mv	a1,a4
1c00e912:	87b6                	mv	a5,a3
1c00e914:	8732                	mv	a4,a2
1c00e916:	4881                	li	a7,0
1c00e918:	4801                	li	a6,0
1c00e91a:	86d2                	mv	a3,s4
1c00e91c:	4601                	li	a2,0
1c00e91e:	8522                	mv	a0,s0
1c00e920:	ce06                	sw	ra,28(sp)
1c00e922:	a9fff0ef          	jal	ra,1c00e3c0 <hyperflash_stall_task>
1c00e926:	e10d                	bnez	a0,1c00e948 <hyperflash_program_async+0x4e>
1c00e928:	13442423          	sw	s4,296(s0)
1c00e92c:	13342623          	sw	s3,300(s0)
1c00e930:	13242823          	sw	s2,304(s0)
1c00e934:	4462                	lw	s0,24(sp)
1c00e936:	40f2                	lw	ra,28(sp)
1c00e938:	4942                	lw	s2,16(sp)
1c00e93a:	49b2                	lw	s3,12(sp)
1c00e93c:	4a22                	lw	s4,8(sp)
1c00e93e:	8526                	mv	a0,s1
1c00e940:	44d2                	lw	s1,20(sp)
1c00e942:	6105                	addi	sp,sp,32
1c00e944:	f05ff06f          	j	1c00e848 <hyperflash_program_resume>
1c00e948:	40f2                	lw	ra,28(sp)
1c00e94a:	4462                	lw	s0,24(sp)
1c00e94c:	44d2                	lw	s1,20(sp)
1c00e94e:	4942                	lw	s2,16(sp)
1c00e950:	49b2                	lw	s3,12(sp)
1c00e952:	4a22                	lw	s4,8(sp)
1c00e954:	6105                	addi	sp,sp,32
1c00e956:	8082                	ret

1c00e958 <hyperflash_copy_async>:
1c00e958:	1141                	addi	sp,sp,-16
1c00e95a:	c606                	sw	ra,12(sp)
1c00e95c:	eb01                	bnez	a4,1c00e96c <hyperflash_copy_async+0x14>
1c00e95e:	873e                	mv	a4,a5
1c00e960:	f9bff0ef          	jal	ra,1c00e8fa <hyperflash_program_async>
1c00e964:	40b2                	lw	ra,12(sp)
1c00e966:	4501                	li	a0,0
1c00e968:	0141                	addi	sp,sp,16
1c00e96a:	8082                	ret
1c00e96c:	873e                	mv	a4,a5
1c00e96e:	ca9ff0ef          	jal	ra,1c00e616 <hyperflash_read_async>
1c00e972:	bfcd                	j	1c00e964 <hyperflash_copy_async+0xc>

1c00e974 <hyperflash_close>:
1c00e974:	1141                	addi	sp,sp,-16
1c00e976:	c422                	sw	s0,8(sp)
1c00e978:	4500                	lw	s0,8(a0)
1c00e97a:	c606                	sw	ra,12(sp)
1c00e97c:	8522                	mv	a0,s0
1c00e97e:	2be030ef          	jal	ra,1c011c3c <pi_hyper_close>
1c00e982:	8522                	mv	a0,s0
1c00e984:	4422                	lw	s0,8(sp)
1c00e986:	40b2                	lw	ra,12(sp)
1c00e988:	13c00593          	li	a1,316
1c00e98c:	0141                	addi	sp,sp,16
1c00e98e:	0fa0206f          	j	1c010a88 <pi_l2_free>

1c00e992 <hyperflash_open>:
1c00e992:	7179                	addi	sp,sp,-48
1c00e994:	d226                	sw	s1,36(sp)
1c00e996:	d04a                	sw	s2,32(sp)
1c00e998:	84aa                	mv	s1,a0
1c00e99a:	00452903          	lw	s2,4(a0)
1c00e99e:	13c00513          	li	a0,316
1c00e9a2:	d606                	sw	ra,44(sp)
1c00e9a4:	d422                	sw	s0,40(sp)
1c00e9a6:	0d4020ef          	jal	ra,1c010a7a <pi_l2_malloc>
1c00e9aa:	c535                	beqz	a0,1c00ea16 <hyperflash_open+0x84>
1c00e9ac:	c488                	sw	a0,8(s1)
1c00e9ae:	842a                	mv	s0,a0
1c00e9b0:	854a                	mv	a0,s2
1c00e9b2:	5d6010ef          	jal	ra,1c00ff88 <bsp_hyperflash_open>
1c00e9b6:	84aa                	mv	s1,a0
1c00e9b8:	e921                	bnez	a0,1c00ea08 <hyperflash_open+0x76>
1c00e9ba:	4671                	li	a2,28
1c00e9bc:	4581                	li	a1,0
1c00e9be:	0048                	addi	a0,sp,4
1c00e9c0:	6a5030ef          	jal	ra,1c012864 <memset>
1c00e9c4:	0048                	addi	a0,sp,4
1c00e9c6:	106030ef          	jal	ra,1c011acc <pi_hyper_conf_init>
1c00e9ca:	00492783          	lw	a5,4(s2)
1c00e9ce:	8522                	mv	a0,s0
1c00e9d0:	004c                	addi	a1,sp,4
1c00e9d2:	00f10423          	sb	a5,8(sp)
1c00e9d6:	00892783          	lw	a5,8(s2)
1c00e9da:	c802                	sw	zero,16(sp)
1c00e9dc:	c63e                	sw	a5,12(sp)
1c00e9de:	770010ef          	jal	ra,1c01014e <pi_open_from_conf>
1c00e9e2:	8522                	mv	a0,s0
1c00e9e4:	0f8030ef          	jal	ra,1c011adc <pi_hyper_open>
1c00e9e8:	e105                	bnez	a0,1c00ea08 <hyperflash_open+0x76>
1c00e9ea:	00042c23          	sw	zero,24(s0)
1c00e9ee:	00042823          	sw	zero,16(s0)
1c00e9f2:	02042223          	sw	zero,36(s0)
1c00e9f6:	00042e23          	sw	zero,28(s0)
1c00e9fa:	50b2                	lw	ra,44(sp)
1c00e9fc:	5422                	lw	s0,40(sp)
1c00e9fe:	8526                	mv	a0,s1
1c00ea00:	5902                	lw	s2,32(sp)
1c00ea02:	5492                	lw	s1,36(sp)
1c00ea04:	6145                	addi	sp,sp,48
1c00ea06:	8082                	ret
1c00ea08:	13c00593          	li	a1,316
1c00ea0c:	8522                	mv	a0,s0
1c00ea0e:	07a020ef          	jal	ra,1c010a88 <pi_l2_free>
1c00ea12:	54f9                	li	s1,-2
1c00ea14:	b7dd                	j	1c00e9fa <hyperflash_open+0x68>
1c00ea16:	54fd                	li	s1,-1
1c00ea18:	b7cd                	j	1c00e9fa <hyperflash_open+0x68>

1c00ea1a <pi_task_wait_on.isra.3>:
1c00ea1a:	1141                	addi	sp,sp,-16
1c00ea1c:	c422                	sw	s0,8(sp)
1c00ea1e:	c226                	sw	s1,4(sp)
1c00ea20:	c606                	sw	ra,12(sp)
1c00ea22:	c04a                	sw	s2,0(sp)
1c00ea24:	842a                	mv	s0,a0
1c00ea26:	00040783          	lb	a5,0(s0)
1c00ea2a:	c799                	beqz	a5,1c00ea38 <pi_task_wait_on.isra.3+0x1e>
1c00ea2c:	40b2                	lw	ra,12(sp)
1c00ea2e:	4422                	lw	s0,8(sp)
1c00ea30:	4492                	lw	s1,4(sp)
1c00ea32:	4902                	lw	s2,0(sp)
1c00ea34:	0141                	addi	sp,sp,16
1c00ea36:	8082                	ret
1c00ea38:	30047973          	csrrci	s2,mstatus,8
1c00ea3c:	4585                	li	a1,1
1c00ea3e:	01c00513          	li	a0,28
1c00ea42:	58d010ef          	jal	ra,1c0107ce <__rt_event_execute>
1c00ea46:	30091073          	csrw	mstatus,s2
1c00ea4a:	bff1                	j	1c00ea26 <pi_task_wait_on.isra.3+0xc>

1c00ea4c <hyperflash_copy_2d>:
1c00ea4c:	7175                	addi	sp,sp,-144
1c00ea4e:	4885                	li	a7,1
1c00ea50:	c706                	sw	ra,140(sp)
1c00ea52:	cc46                	sw	a7,24(sp)
1c00ea54:	c202                	sw	zero,4(sp)
1c00ea56:	d446                	sw	a7,40(sp)
1c00ea58:	00010a23          	sb	zero,20(sp)
1c00ea5c:	00080c63          	beqz	a6,1c00ea74 <hyperflash_copy_2d+0x28>
1c00ea60:	880a                	mv	a6,sp
1c00ea62:	99fff0ef          	jal	ra,1c00e400 <hyperflash_read_2d_async>
1c00ea66:	0848                	addi	a0,sp,20
1c00ea68:	fb3ff0ef          	jal	ra,1c00ea1a <pi_task_wait_on.isra.3>
1c00ea6c:	4501                	li	a0,0
1c00ea6e:	40ba                	lw	ra,140(sp)
1c00ea70:	6149                	addi	sp,sp,144
1c00ea72:	8082                	ret
1c00ea74:	557d                	li	a0,-1
1c00ea76:	bfe5                	j	1c00ea6e <hyperflash_copy_2d+0x22>

1c00ea78 <hyperflash_erase_sector>:
1c00ea78:	7175                	addi	sp,sp,-144
1c00ea7a:	4785                	li	a5,1
1c00ea7c:	860a                	mv	a2,sp
1c00ea7e:	c706                	sw	ra,140(sp)
1c00ea80:	cc3e                	sw	a5,24(sp)
1c00ea82:	d43e                	sw	a5,40(sp)
1c00ea84:	c202                	sw	zero,4(sp)
1c00ea86:	00010a23          	sb	zero,20(sp)
1c00ea8a:	a1bff0ef          	jal	ra,1c00e4a4 <hyperflash_erase_sector_async>
1c00ea8e:	0848                	addi	a0,sp,20
1c00ea90:	f8bff0ef          	jal	ra,1c00ea1a <pi_task_wait_on.isra.3>
1c00ea94:	40ba                	lw	ra,140(sp)
1c00ea96:	4501                	li	a0,0
1c00ea98:	6149                	addi	sp,sp,144
1c00ea9a:	8082                	ret

1c00ea9c <hyperflash_erase_chip>:
1c00ea9c:	7175                	addi	sp,sp,-144
1c00ea9e:	4785                	li	a5,1
1c00eaa0:	858a                	mv	a1,sp
1c00eaa2:	c706                	sw	ra,140(sp)
1c00eaa4:	cc3e                	sw	a5,24(sp)
1c00eaa6:	d43e                	sw	a5,40(sp)
1c00eaa8:	c202                	sw	zero,4(sp)
1c00eaaa:	00010a23          	sb	zero,20(sp)
1c00eaae:	ab5ff0ef          	jal	ra,1c00e562 <hyperflash_erase_chip_async>
1c00eab2:	0848                	addi	a0,sp,20
1c00eab4:	f67ff0ef          	jal	ra,1c00ea1a <pi_task_wait_on.isra.3>
1c00eab8:	40ba                	lw	ra,140(sp)
1c00eaba:	4501                	li	a0,0
1c00eabc:	6149                	addi	sp,sp,144
1c00eabe:	8082                	ret

1c00eac0 <hyperflash_read>:
1c00eac0:	7175                	addi	sp,sp,-144
1c00eac2:	4785                	li	a5,1
1c00eac4:	870a                	mv	a4,sp
1c00eac6:	c706                	sw	ra,140(sp)
1c00eac8:	cc3e                	sw	a5,24(sp)
1c00eaca:	d43e                	sw	a5,40(sp)
1c00eacc:	c202                	sw	zero,4(sp)
1c00eace:	00010a23          	sb	zero,20(sp)
1c00ead2:	b45ff0ef          	jal	ra,1c00e616 <hyperflash_read_async>
1c00ead6:	0848                	addi	a0,sp,20
1c00ead8:	f43ff0ef          	jal	ra,1c00ea1a <pi_task_wait_on.isra.3>
1c00eadc:	40ba                	lw	ra,140(sp)
1c00eade:	4501                	li	a0,0
1c00eae0:	6149                	addi	sp,sp,144
1c00eae2:	8082                	ret

1c00eae4 <hyperflash_reg_get>:
1c00eae4:	7175                	addi	sp,sp,-144
1c00eae6:	4785                	li	a5,1
1c00eae8:	868a                	mv	a3,sp
1c00eaea:	c706                	sw	ra,140(sp)
1c00eaec:	cc3e                	sw	a5,24(sp)
1c00eaee:	d43e                	sw	a5,40(sp)
1c00eaf0:	c202                	sw	zero,4(sp)
1c00eaf2:	00010a23          	sb	zero,20(sp)
1c00eaf6:	c9dff0ef          	jal	ra,1c00e792 <hyperflash_reg_get_async>
1c00eafa:	0848                	addi	a0,sp,20
1c00eafc:	f1fff0ef          	jal	ra,1c00ea1a <pi_task_wait_on.isra.3>
1c00eb00:	40ba                	lw	ra,140(sp)
1c00eb02:	4501                	li	a0,0
1c00eb04:	6149                	addi	sp,sp,144
1c00eb06:	8082                	ret

1c00eb08 <hyperflash_reg_set>:
1c00eb08:	7175                	addi	sp,sp,-144
1c00eb0a:	4785                	li	a5,1
1c00eb0c:	868a                	mv	a3,sp
1c00eb0e:	c706                	sw	ra,140(sp)
1c00eb10:	cc3e                	sw	a5,24(sp)
1c00eb12:	d43e                	sw	a5,40(sp)
1c00eb14:	c202                	sw	zero,4(sp)
1c00eb16:	00010a23          	sb	zero,20(sp)
1c00eb1a:	cd9ff0ef          	jal	ra,1c00e7f2 <hyperflash_reg_set_async>
1c00eb1e:	0848                	addi	a0,sp,20
1c00eb20:	efbff0ef          	jal	ra,1c00ea1a <pi_task_wait_on.isra.3>
1c00eb24:	40ba                	lw	ra,140(sp)
1c00eb26:	4501                	li	a0,0
1c00eb28:	6149                	addi	sp,sp,144
1c00eb2a:	8082                	ret

1c00eb2c <hyperflash_program>:
1c00eb2c:	7175                	addi	sp,sp,-144
1c00eb2e:	4785                	li	a5,1
1c00eb30:	870a                	mv	a4,sp
1c00eb32:	c706                	sw	ra,140(sp)
1c00eb34:	cc3e                	sw	a5,24(sp)
1c00eb36:	d43e                	sw	a5,40(sp)
1c00eb38:	c202                	sw	zero,4(sp)
1c00eb3a:	00010a23          	sb	zero,20(sp)
1c00eb3e:	dbdff0ef          	jal	ra,1c00e8fa <hyperflash_program_async>
1c00eb42:	0848                	addi	a0,sp,20
1c00eb44:	ed7ff0ef          	jal	ra,1c00ea1a <pi_task_wait_on.isra.3>
1c00eb48:	40ba                	lw	ra,140(sp)
1c00eb4a:	4501                	li	a0,0
1c00eb4c:	6149                	addi	sp,sp,144
1c00eb4e:	8082                	ret

1c00eb50 <hyperflash_copy>:
1c00eb50:	7175                	addi	sp,sp,-144
1c00eb52:	4785                	li	a5,1
1c00eb54:	cc3e                	sw	a5,24(sp)
1c00eb56:	d43e                	sw	a5,40(sp)
1c00eb58:	878a                	mv	a5,sp
1c00eb5a:	c522                	sw	s0,136(sp)
1c00eb5c:	c706                	sw	ra,140(sp)
1c00eb5e:	c202                	sw	zero,4(sp)
1c00eb60:	00010a23          	sb	zero,20(sp)
1c00eb64:	df5ff0ef          	jal	ra,1c00e958 <hyperflash_copy_async>
1c00eb68:	547d                	li	s0,-1
1c00eb6a:	e509                	bnez	a0,1c00eb74 <hyperflash_copy+0x24>
1c00eb6c:	842a                	mv	s0,a0
1c00eb6e:	0848                	addi	a0,sp,20
1c00eb70:	eabff0ef          	jal	ra,1c00ea1a <pi_task_wait_on.isra.3>
1c00eb74:	8522                	mv	a0,s0
1c00eb76:	40ba                	lw	ra,140(sp)
1c00eb78:	442a                	lw	s0,136(sp)
1c00eb7a:	6149                	addi	sp,sp,144
1c00eb7c:	8082                	ret

1c00eb7e <hyperflash_erase_resume>:
1c00eb7e:	1101                	addi	sp,sp,-32
1c00eb80:	cc22                	sw	s0,24(sp)
1c00eb82:	4500                	lw	s0,8(a0)
1c00eb84:	ca26                	sw	s1,20(sp)
1c00eb86:	c84a                	sw	s2,16(sp)
1c00eb88:	13842483          	lw	s1,312(s0)
1c00eb8c:	ce06                	sw	ra,28(sp)
1c00eb8e:	c64e                	sw	s3,12(sp)
1c00eb90:	892a                	mv	s2,a0
1c00eb92:	ec8d                	bnez	s1,1c00ebcc <hyperflash_erase_resume+0x4e>
1c00eb94:	300474f3          	csrrci	s1,mstatus,8
1c00eb98:	5048                	lw	a0,36(s0)
1c00eb9a:	300479f3          	csrrci	s3,mstatus,8
1c00eb9e:	feaff0ef          	jal	ra,1c00e388 <__rt_event_enqueue>
1c00eba2:	30099073          	csrw	mstatus,s3
1c00eba6:	4c54                	lw	a3,28(s0)
1c00eba8:	02042223          	sw	zero,36(s0)
1c00ebac:	c299                	beqz	a3,1c00ebb2 <hyperflash_erase_resume+0x34>
1c00ebae:	4edc                	lw	a5,28(a3)
1c00ebb0:	cc5c                	sw	a5,28(s0)
1c00ebb2:	30049073          	csrw	mstatus,s1
1c00ebb6:	c2b5                	beqz	a3,1c00ec1a <hyperflash_erase_resume+0x9c>
1c00ebb8:	4462                	lw	s0,24(sp)
1c00ebba:	40f2                	lw	ra,28(sp)
1c00ebbc:	44d2                	lw	s1,20(sp)
1c00ebbe:	49b2                	lw	s3,12(sp)
1c00ebc0:	42b0                	lw	a2,64(a3)
1c00ebc2:	5ecc                	lw	a1,60(a3)
1c00ebc4:	854a                	mv	a0,s2
1c00ebc6:	4942                	lw	s2,16(sp)
1c00ebc8:	6105                	addi	sp,sp,32
1c00ebca:	a8b9                	j	1c00ec28 <hyperflash_erase_async>
1c00ebcc:	13442583          	lw	a1,308(s0)
1c00ebd0:	000407b7          	lui	a5,0x40
1c00ebd4:	0c042023          	sw	zero,192(s0)
1c00ebd8:	db25b733          	p.bclr	a4,a1,13,18
1c00ebdc:	8f99                	sub	a5,a5,a4
1c00ebde:	04f4d4b3          	p.minu	s1,s1,a5
1c00ebe2:	1c00f7b7          	lui	a5,0x1c00f
1c00ebe6:	b7e78793          	addi	a5,a5,-1154 # 1c00eb7e <hyperflash_erase_resume>
1c00ebea:	0af42623          	sw	a5,172(s0)
1c00ebee:	4785                	li	a5,1
1c00ebf0:	0cf42823          	sw	a5,208(s0)
1c00ebf4:	0aa42823          	sw	a0,176(s0)
1c00ebf8:	0a040e23          	sb	zero,188(s0)
1c00ebfc:	0a840613          	addi	a2,s0,168
1c00ec00:	8a5ff0ef          	jal	ra,1c00e4a4 <hyperflash_erase_sector_async>
1c00ec04:	13442783          	lw	a5,308(s0)
1c00ec08:	97a6                	add	a5,a5,s1
1c00ec0a:	12f42a23          	sw	a5,308(s0)
1c00ec0e:	13842783          	lw	a5,312(s0)
1c00ec12:	409784b3          	sub	s1,a5,s1
1c00ec16:	12942c23          	sw	s1,312(s0)
1c00ec1a:	40f2                	lw	ra,28(sp)
1c00ec1c:	4462                	lw	s0,24(sp)
1c00ec1e:	44d2                	lw	s1,20(sp)
1c00ec20:	4942                	lw	s2,16(sp)
1c00ec22:	49b2                	lw	s3,12(sp)
1c00ec24:	6105                	addi	sp,sp,32
1c00ec26:	8082                	ret

1c00ec28 <hyperflash_erase_async>:
1c00ec28:	451c                	lw	a5,8(a0)
1c00ec2a:	30047773          	csrrci	a4,mstatus,8
1c00ec2e:	0247a803          	lw	a6,36(a5)
1c00ec32:	02080463          	beqz	a6,1c00ec5a <hyperflash_erase_async+0x32>
1c00ec36:	450d                	li	a0,3
1c00ec38:	de88                	sw	a0,56(a3)
1c00ec3a:	decc                	sw	a1,60(a3)
1c00ec3c:	c2b0                	sw	a2,64(a3)
1c00ec3e:	0406a223          	sw	zero,68(a3)
1c00ec42:	4fd0                	lw	a2,28(a5)
1c00ec44:	ca09                	beqz	a2,1c00ec56 <hyperflash_erase_async+0x2e>
1c00ec46:	5390                	lw	a2,32(a5)
1c00ec48:	ce54                	sw	a3,28(a2)
1c00ec4a:	d394                	sw	a3,32(a5)
1c00ec4c:	0006ae23          	sw	zero,28(a3)
1c00ec50:	30071073          	csrw	mstatus,a4
1c00ec54:	8082                	ret
1c00ec56:	cfd4                	sw	a3,28(a5)
1c00ec58:	bfcd                	j	1c00ec4a <hyperflash_erase_async+0x22>
1c00ec5a:	d3d4                	sw	a3,36(a5)
1c00ec5c:	30071073          	csrw	mstatus,a4
1c00ec60:	12b7aa23          	sw	a1,308(a5)
1c00ec64:	12c7ac23          	sw	a2,312(a5)
1c00ec68:	f17ff06f          	j	1c00eb7e <hyperflash_erase_resume>

1c00ec6c <hyperflash_erase>:
1c00ec6c:	7175                	addi	sp,sp,-144
1c00ec6e:	4785                	li	a5,1
1c00ec70:	868a                	mv	a3,sp
1c00ec72:	c706                	sw	ra,140(sp)
1c00ec74:	cc3e                	sw	a5,24(sp)
1c00ec76:	d43e                	sw	a5,40(sp)
1c00ec78:	c202                	sw	zero,4(sp)
1c00ec7a:	00010a23          	sb	zero,20(sp)
1c00ec7e:	fabff0ef          	jal	ra,1c00ec28 <hyperflash_erase_async>
1c00ec82:	0848                	addi	a0,sp,20
1c00ec84:	d97ff0ef          	jal	ra,1c00ea1a <pi_task_wait_on.isra.3>
1c00ec88:	40ba                	lw	ra,140(sp)
1c00ec8a:	4501                	li	a0,0
1c00ec8c:	6149                	addi	sp,sp,144
1c00ec8e:	8082                	ret

1c00ec90 <hyperflash_get_status_reg>:
1c00ec90:	6585                	lui	a1,0x1
1c00ec92:	1141                	addi	sp,sp,-16
1c00ec94:	07000613          	li	a2,112
1c00ec98:	aaa58593          	addi	a1,a1,-1366 # aaa <__rt_stack_size+0x2aa>
1c00ec9c:	c606                	sw	ra,12(sp)
1c00ec9e:	c422                	sw	s0,8(sp)
1c00eca0:	842a                	mv	s0,a0
1c00eca2:	f10ff0ef          	jal	ra,1c00e3b2 <hyperflash_set_reg_exec>
1c00eca6:	8522                	mv	a0,s0
1c00eca8:	00c40613          	addi	a2,s0,12
1c00ecac:	4691                	li	a3,4
1c00ecae:	4581                	li	a1,0
1c00ecb0:	134030ef          	jal	ra,1c011de4 <pi_hyper_read>
1c00ecb4:	00c45503          	lhu	a0,12(s0)
1c00ecb8:	40b2                	lw	ra,12(sp)
1c00ecba:	4422                	lw	s0,8(sp)
1c00ecbc:	0141                	addi	sp,sp,16
1c00ecbe:	8082                	ret

1c00ecc0 <hyperflash_check_erase>:
1c00ecc0:	1141                	addi	sp,sp,-16
1c00ecc2:	c422                	sw	s0,8(sp)
1c00ecc4:	4500                	lw	s0,8(a0)
1c00ecc6:	c226                	sw	s1,4(sp)
1c00ecc8:	84aa                	mv	s1,a0
1c00ecca:	8522                	mv	a0,s0
1c00eccc:	c606                	sw	ra,12(sp)
1c00ecce:	fc3ff0ef          	jal	ra,1c00ec90 <hyperflash_get_status_reg>
1c00ecd2:	c0751533          	p.extractu	a0,a0,0,7
1c00ecd6:	e905                	bnez	a0,1c00ed06 <hyperflash_check_erase+0x46>
1c00ecd8:	1c00f7b7          	lui	a5,0x1c00f
1c00ecdc:	cc078793          	addi	a5,a5,-832 # 1c00ecc0 <hyperflash_check_erase>
1c00ece0:	02040e23          	sb	zero,60(s0)
1c00ece4:	d45c                	sw	a5,44(s0)
1c00ece6:	4785                	li	a5,1
1c00ece8:	d804                	sw	s1,48(s0)
1c00ecea:	04042023          	sw	zero,64(s0)
1c00ecee:	c83c                	sw	a5,80(s0)
1c00ecf0:	02840513          	addi	a0,s0,40
1c00ecf4:	4422                	lw	s0,8(sp)
1c00ecf6:	40b2                	lw	ra,12(sp)
1c00ecf8:	4492                	lw	s1,4(sp)
1c00ecfa:	65e1                	lui	a1,0x18
1c00ecfc:	6a058593          	addi	a1,a1,1696 # 186a0 <__L1Cl+0x86a0>
1c00ed00:	0141                	addi	sp,sp,16
1c00ed02:	38b0106f          	j	1c01088c <pi_task_push_delayed_us>
1c00ed06:	4422                	lw	s0,8(sp)
1c00ed08:	40b2                	lw	ra,12(sp)
1c00ed0a:	8526                	mv	a0,s1
1c00ed0c:	4492                	lw	s1,4(sp)
1c00ed0e:	0141                	addi	sp,sp,16
1c00ed10:	97dff06f          	j	1c00e68c <hyperflash_handle_pending_task>

1c00ed14 <hyperflash_check_program>:
1c00ed14:	1141                	addi	sp,sp,-16
1c00ed16:	c422                	sw	s0,8(sp)
1c00ed18:	4500                	lw	s0,8(a0)
1c00ed1a:	c226                	sw	s1,4(sp)
1c00ed1c:	84aa                	mv	s1,a0
1c00ed1e:	8522                	mv	a0,s0
1c00ed20:	c606                	sw	ra,12(sp)
1c00ed22:	f6fff0ef          	jal	ra,1c00ec90 <hyperflash_get_status_reg>
1c00ed26:	08057513          	andi	a0,a0,128
1c00ed2a:	e51d                	bnez	a0,1c00ed58 <hyperflash_check_program+0x44>
1c00ed2c:	1c00f7b7          	lui	a5,0x1c00f
1c00ed30:	d1478793          	addi	a5,a5,-748 # 1c00ed14 <hyperflash_check_program>
1c00ed34:	02040e23          	sb	zero,60(s0)
1c00ed38:	d45c                	sw	a5,44(s0)
1c00ed3a:	4785                	li	a5,1
1c00ed3c:	d804                	sw	s1,48(s0)
1c00ed3e:	04042023          	sw	zero,64(s0)
1c00ed42:	c83c                	sw	a5,80(s0)
1c00ed44:	02840513          	addi	a0,s0,40
1c00ed48:	4422                	lw	s0,8(sp)
1c00ed4a:	40b2                	lw	ra,12(sp)
1c00ed4c:	4492                	lw	s1,4(sp)
1c00ed4e:	0fa00593          	li	a1,250
1c00ed52:	0141                	addi	sp,sp,16
1c00ed54:	3390106f          	j	1c01088c <pi_task_push_delayed_us>
1c00ed58:	4422                	lw	s0,8(sp)
1c00ed5a:	40b2                	lw	ra,12(sp)
1c00ed5c:	8526                	mv	a0,s1
1c00ed5e:	4492                	lw	s1,4(sp)
1c00ed60:	0141                	addi	sp,sp,16
1c00ed62:	ae7ff06f          	j	1c00e848 <hyperflash_program_resume>

1c00ed66 <pi_hyperflash_conf_init>:
};



void pi_hyperflash_conf_init(struct pi_hyperflash_conf *conf)
{
1c00ed66:	1141                	addi	sp,sp,-16
  conf->flash.api = &hyperflash_api;
1c00ed68:	1c0157b7          	lui	a5,0x1c015
{
1c00ed6c:	c606                	sw	ra,12(sp)
1c00ed6e:	c422                	sw	s0,8(sp)
  conf->flash.api = &hyperflash_api;
1c00ed70:	8e478793          	addi	a5,a5,-1820 # 1c0148e4 <hyperflash_api>
1c00ed74:	c11c                	sw	a5,0(a0)
{
1c00ed76:	842a                	mv	s0,a0
#if defined(__GAP9__)
  conf->flash.aes_conf.enabled = 0;
  conf->flash.aes_conf.qk_en = 0;
#endif
  bsp_hyperflash_conf_init(conf);
1c00ed78:	206010ef          	jal	ra,1c00ff7e <bsp_hyperflash_conf_init>
  __flash_conf_init(&conf->flash);
1c00ed7c:	8522                	mv	a0,s0
1c00ed7e:	b95fe0ef          	jal	ra,1c00d912 <__flash_conf_init>
  conf->xip_en = 0;
}
1c00ed82:	40b2                	lw	ra,12(sp)
  conf->xip_en = 0;
1c00ed84:	00042623          	sw	zero,12(s0)
}
1c00ed88:	4422                	lw	s0,8(sp)
1c00ed8a:	0141                	addi	sp,sp,16
1c00ed8c:	8082                	ret

1c00ed8e <hyperram_alloc>:

int hyperram_alloc(struct pi_device *device, uint32_t *addr, uint32_t size)
{
  void *chunk;
  hyperram_t *hyperram = (hyperram_t *)device->data;
  int err = extern_alloc(&hyperram->alloc, size, &chunk);
1c00ed8e:	4508                	lw	a0,8(a0)
{
1c00ed90:	1101                	addi	sp,sp,-32
1c00ed92:	cc22                	sw	s0,24(sp)
  int err = extern_alloc(&hyperram->alloc, size, &chunk);
1c00ed94:	0531                	addi	a0,a0,12
{
1c00ed96:	842e                	mv	s0,a1
1c00ed98:	85b2                	mv	a1,a2
  int err = extern_alloc(&hyperram->alloc, size, &chunk);
1c00ed9a:	0070                	addi	a2,sp,12
{
1c00ed9c:	ce06                	sw	ra,28(sp)
  int err = extern_alloc(&hyperram->alloc, size, &chunk);
1c00ed9e:	2c71                	jal	1c00f03a <extern_alloc>
  *addr = (uint32_t)chunk;
1c00eda0:	47b2                	lw	a5,12(sp)
  return err;
}
1c00eda2:	40f2                	lw	ra,28(sp)
  *addr = (uint32_t)chunk;
1c00eda4:	c01c                	sw	a5,0(s0)
}
1c00eda6:	4462                	lw	s0,24(sp)
1c00eda8:	6105                	addi	sp,sp,32
1c00edaa:	8082                	ret

1c00edac <hyperram_free>:


int hyperram_free(struct pi_device *device, uint32_t addr, uint32_t size)
{
  hyperram_t *hyperram = (hyperram_t *)device->data;
  return extern_free(&hyperram->alloc, size, (void *)addr);
1c00edac:	4508                	lw	a0,8(a0)
{
1c00edae:	87b2                	mv	a5,a2
  return extern_free(&hyperram->alloc, size, (void *)addr);
1c00edb0:	862e                	mv	a2,a1
1c00edb2:	0531                	addi	a0,a0,12
1c00edb4:	85be                	mv	a1,a5
1c00edb6:	a4cd                	j	1c00f098 <extern_free>

1c00edb8 <hyperram_copy_2d_async>:
{
1c00edb8:	4508                	lw	a0,8(a0)
  if (ext2loc)
1c00edba:	00080563          	beqz	a6,1c00edc4 <hyperram_copy_2d_async+0xc>
    pi_hyper_read_2d_async(&hyperram->hyper_device, addr, data, size, stride, length, task);
1c00edbe:	8846                	mv	a6,a7
1c00edc0:	4060306f          	j	1c0121c6 <pi_hyper_read_2d_async>
    pi_hyper_write_2d_async(&hyperram->hyper_device, addr, data, size, stride, length, task);
1c00edc4:	8846                	mv	a6,a7
1c00edc6:	4180306f          	j	1c0121de <pi_hyper_write_2d_async>

1c00edca <hyperram_copy_async>:
{
1c00edca:	4508                	lw	a0,8(a0)
  if (ext2loc)
1c00edcc:	c701                	beqz	a4,1c00edd4 <hyperram_copy_async+0xa>
    pi_hyper_read_async(&hyperram->hyper_device, addr, data, size, task);
1c00edce:	873e                	mv	a4,a5
1c00edd0:	7ff0206f          	j	1c011dce <pi_hyper_read_async>
    pi_hyper_write_async(&hyperram->hyper_device, addr, data, size, task);
1c00edd4:	873e                	mv	a4,a5
1c00edd6:	0300306f          	j	1c011e06 <pi_hyper_write_async>

1c00edda <hyperram_close>:
{
1c00edda:	1141                	addi	sp,sp,-16
1c00eddc:	c422                	sw	s0,8(sp)
  hyperram_t *hyperram = (hyperram_t *)device->data;
1c00edde:	4500                	lw	s0,8(a0)
{
1c00ede0:	c606                	sw	ra,12(sp)
  pi_hyper_close(&hyperram->hyper_device);
1c00ede2:	8522                	mv	a0,s0
1c00ede4:	659020ef          	jal	ra,1c011c3c <pi_hyper_close>
  extern_alloc_deinit(&hyperram->alloc);
1c00ede8:	00c40513          	addi	a0,s0,12
1c00edec:	2499                	jal	1c00f032 <extern_alloc_deinit>
  pmsis_l2_malloc_free(hyperram, sizeof(hyperram_t));
1c00edee:	8522                	mv	a0,s0
}
1c00edf0:	4422                	lw	s0,8(sp)
1c00edf2:	40b2                	lw	ra,12(sp)
  pmsis_l2_malloc_free(hyperram, sizeof(hyperram_t));
1c00edf4:	45d1                	li	a1,20
}
1c00edf6:	0141                	addi	sp,sp,16
  pmsis_l2_malloc_free(hyperram, sizeof(hyperram_t));
1c00edf8:	4910106f          	j	1c010a88 <pi_l2_free>

1c00edfc <hyperram_open>:
{
1c00edfc:	7139                	addi	sp,sp,-64
1c00edfe:	da26                	sw	s1,52(sp)
1c00ee00:	d84a                	sw	s2,48(sp)
  struct pi_hyperram_conf *conf = (struct pi_hyperram_conf *)device->config;
1c00ee02:	4144                	lw	s1,4(a0)
{
1c00ee04:	892a                	mv	s2,a0
  hyperram_t *hyperram = (hyperram_t *)pmsis_l2_malloc(sizeof(hyperram_t));
1c00ee06:	4551                	li	a0,20
{
1c00ee08:	de06                	sw	ra,60(sp)
1c00ee0a:	dc22                	sw	s0,56(sp)
1c00ee0c:	d64e                	sw	s3,44(sp)
  hyperram_t *hyperram = (hyperram_t *)pmsis_l2_malloc(sizeof(hyperram_t));
1c00ee0e:	46d010ef          	jal	ra,1c010a7a <pi_l2_malloc>
  if (hyperram == NULL)
1c00ee12:	cd2d                	beqz	a0,1c00ee8c <hyperram_open+0x90>
  if (conf->reserve_addr_0)
1c00ee14:	509c                	lw	a5,32(s1)
  device->data = (void *)hyperram;
1c00ee16:	00a92423          	sw	a0,8(s2)
1c00ee1a:	842a                	mv	s0,a0
  int size = conf->ram_size;
1c00ee1c:	4c90                	lw	a2,24(s1)
  uint32_t start_addr = 0;
1c00ee1e:	4581                	li	a1,0
  if (conf->reserve_addr_0)
1c00ee20:	c399                	beqz	a5,1c00ee26 <hyperram_open+0x2a>
    size -= 4;
1c00ee22:	1671                	addi	a2,a2,-4
    start_addr = 4;
1c00ee24:	4591                	li	a1,4
  if (extern_alloc_init(&hyperram->alloc, (void *)start_addr, size))
1c00ee26:	00c40993          	addi	s3,s0,12
1c00ee2a:	854e                	mv	a0,s3
1c00ee2c:	2a55                	jal	1c00efe0 <extern_alloc_init>
1c00ee2e:	e901                	bnez	a0,1c00ee3e <hyperram_open+0x42>
  if (bsp_hyperram_open(conf))
1c00ee30:	8526                	mv	a0,s1
1c00ee32:	13c010ef          	jal	ra,1c00ff6e <bsp_hyperram_open>
1c00ee36:	892a                	mv	s2,a0
1c00ee38:	c909                	beqz	a0,1c00ee4a <hyperram_open+0x4e>
  extern_alloc_deinit(&hyperram->alloc);
1c00ee3a:	854e                	mv	a0,s3
1c00ee3c:	2add                	jal	1c00f032 <extern_alloc_deinit>
  pmsis_l2_malloc_free(hyperram, sizeof(hyperram_t));
1c00ee3e:	45d1                	li	a1,20
1c00ee40:	8522                	mv	a0,s0
1c00ee42:	447010ef          	jal	ra,1c010a88 <pi_l2_free>
  return -2;
1c00ee46:	5979                	li	s2,-2
1c00ee48:	a815                	j	1c00ee7c <hyperram_open+0x80>
  pi_hyper_conf_init(&hyper_conf);
1c00ee4a:	0048                	addi	a0,sp,4
1c00ee4c:	481020ef          	jal	ra,1c011acc <pi_hyper_conf_init>
  hyper_conf.burst_length = 4000;
1c00ee50:	6785                	lui	a5,0x1
1c00ee52:	fa078793          	addi	a5,a5,-96 # fa0 <__rt_stack_size+0x7a0>
1c00ee56:	cc3e                	sw	a5,24(sp)
  hyper_conf.id = conf->hyper_itf;
1c00ee58:	40dc                	lw	a5,4(s1)
1c00ee5a:	00f10423          	sb	a5,8(sp)
  hyper_conf.cs = conf->hyper_cs;
1c00ee5e:	449c                	lw	a5,8(s1)
1c00ee60:	c63e                	sw	a5,12(sp)
  hyper_conf.type = PI_HYPER_TYPE_RAM;
1c00ee62:	4785                	li	a5,1
1c00ee64:	c83e                	sw	a5,16(sp)
  if (conf->baudrate)
1c00ee66:	4cdc                	lw	a5,28(s1)
1c00ee68:	c391                	beqz	a5,1c00ee6c <hyperram_open+0x70>
      hyper_conf.baudrate = conf->baudrate;
1c00ee6a:	ca3e                	sw	a5,20(sp)
  pi_open_from_conf(&hyperram->hyper_device, &hyper_conf);
1c00ee6c:	8522                	mv	a0,s0
1c00ee6e:	004c                	addi	a1,sp,4
1c00ee70:	2de010ef          	jal	ra,1c01014e <pi_open_from_conf>
  int32_t error = pi_hyper_open(&hyperram->hyper_device);
1c00ee74:	8522                	mv	a0,s0
1c00ee76:	467020ef          	jal	ra,1c011adc <pi_hyper_open>
  if (error)
1c00ee7a:	f161                	bnez	a0,1c00ee3a <hyperram_open+0x3e>
}
1c00ee7c:	50f2                	lw	ra,60(sp)
1c00ee7e:	5462                	lw	s0,56(sp)
1c00ee80:	854a                	mv	a0,s2
1c00ee82:	54d2                	lw	s1,52(sp)
1c00ee84:	5942                	lw	s2,48(sp)
1c00ee86:	59b2                	lw	s3,44(sp)
1c00ee88:	6121                	addi	sp,sp,64
1c00ee8a:	8082                	ret
      return -1;
1c00ee8c:	597d                	li	s2,-1
1c00ee8e:	b7fd                	j	1c00ee7c <hyperram_open+0x80>

1c00ee90 <pi_hyperram_conf_init>:
};


void pi_hyperram_conf_init(struct pi_hyperram_conf *conf)
{
  conf->ram.api = &hyperram_api;
1c00ee90:	1c015737          	lui	a4,0x1c015
1c00ee94:	93870713          	addi	a4,a4,-1736 # 1c014938 <hyperram_api>
1c00ee98:	c118                	sw	a4,0(a0)
  conf->ram.aes_conf.enabled = 0;
  conf->ram.aes_conf.qk_en = 0;
#endif
  conf->baudrate = 0;
  conf->xip_en = 0;
  conf->reserve_addr_0 = 1;
1c00ee9a:	4705                	li	a4,1
  conf->baudrate = 0;
1c00ee9c:	00052e23          	sw	zero,28(a0)
  conf->xip_en = 0;
1c00eea0:	00052823          	sw	zero,16(a0)
  conf->reserve_addr_0 = 1;
1c00eea4:	d118                	sw	a4,32(a0)
  bsp_hyperram_conf_init(conf);
1c00eea6:	0b00106f          	j	1c00ff56 <bsp_hyperram_conf_init>

1c00eeaa <__pi_ram_cluster_req>:
}


void __pi_ram_conf_init(struct pi_ram_conf *conf)
{
}
1c00eeaa:	832a                	mv	t1,a0
1c00eeac:	09f34783          	lbu	a5,159(t1)
1c00eeb0:	1c00fe37          	lui	t3,0x1c00f
1c00eeb4:	4108                	lw	a0,0(a0)
1c00eeb6:	00832583          	lw	a1,8(t1)
1c00eeba:	00432603          	lw	a2,4(t1)
1c00eebe:	00c32683          	lw	a3,12(t1)
1c00eec2:	09e34803          	lbu	a6,158(t1)
1c00eec6:	01830893          	addi	a7,t1,24
1c00eeca:	f1ae0e13          	addi	t3,t3,-230 # 1c00ef1a <__pi_ram_cluster_req_done>
1c00eece:	c78d                	beqz	a5,1c00eef8 <__pi_ram_cluster_req+0x4e>
1c00eed0:	01c32e23          	sw	t3,28(t1)
1c00eed4:	02030623          	sb	zero,44(t1)
1c00eed8:	4e05                	li	t3,1
1c00eeda:	01032703          	lw	a4,16(t1)
1c00eede:	01432783          	lw	a5,20(t1)
1c00eee2:	02032823          	sw	zero,48(t1)
1c00eee6:	02632023          	sw	t1,32(t1)
1c00eeea:	05c32023          	sw	t3,64(t1)
1c00eeee:	00052303          	lw	t1,0(a0)
1c00eef2:	00c32303          	lw	t1,12(t1)
1c00eef6:	8302                	jr	t1
1c00eef8:	4785                	li	a5,1
1c00eefa:	02030623          	sb	zero,44(t1)
1c00eefe:	04f32023          	sw	a5,64(t1)
1c00ef02:	411c                	lw	a5,0(a0)
1c00ef04:	02032823          	sw	zero,48(t1)
1c00ef08:	01c32e23          	sw	t3,28(t1)
1c00ef0c:	02632023          	sw	t1,32(t1)
1c00ef10:	0087a303          	lw	t1,8(a5)
1c00ef14:	8742                	mv	a4,a6
1c00ef16:	87c6                	mv	a5,a7
1c00ef18:	8302                	jr	t1

1c00ef1a <__pi_ram_cluster_req_done>:
1c00ef1a:	09d54783          	lbu	a5,157(a0)
1c00ef1e:	4705                	li	a4,1
1c00ef20:	08e50e23          	sb	a4,156(a0)
1c00ef24:	04078793          	addi	a5,a5,64
1c00ef28:	00201737          	lui	a4,0x201
1c00ef2c:	07da                	slli	a5,a5,0x16
1c00ef2e:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00ef32:	0007e723          	p.sw	zero,a4(a5)
1c00ef36:	8082                	ret

1c00ef38 <pi_ram_open>:
1c00ef38:	415c                	lw	a5,4(a0)
1c00ef3a:	439c                	lw	a5,0(a5)
1c00ef3c:	0007a303          	lw	t1,0(a5)
1c00ef40:	c11c                	sw	a5,0(a0)
1c00ef42:	8302                	jr	t1

1c00ef44 <pi_cl_ram_copy>:
                 uint32_t pi_ram_addr, void *addr, uint32_t size, int ext2loc, pi_cl_ram_req_t *req)
{
    req->device = device;
    req->addr = addr;
    req->pi_ram_addr = pi_ram_addr;
    req->size = size;
1c00ef44:	c7d4                	sw	a3,12(a5)
    req->cid = pi_cluster_id();
    req->done = 0;
    req->ext2loc = ext2loc;
1c00ef46:	08e78f23          	sb	a4,158(a5)
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00ef4a:	014026f3          	csrr	a3,uhartid
  task->arg[0] = (uint32_t)callback;
1c00ef4e:	1c00f737          	lui	a4,0x1c00f
  return (hart_id >> 5) & 0x3f;
1c00ef52:	8695                	srai	a3,a3,0x5
1c00ef54:	eaa70713          	addi	a4,a4,-342 # 1c00eeaa <__pi_ram_cluster_req>
1c00ef58:	f266b6b3          	p.bclr	a3,a3,25,6
1c00ef5c:	cfd8                	sw	a4,28(a5)
  task->implem.keep = 1;
1c00ef5e:	4705                	li	a4,1
    req->device = device;
1c00ef60:	c388                	sw	a0,0(a5)
    req->addr = addr;
1c00ef62:	c3d0                	sw	a2,4(a5)
    req->pi_ram_addr = pi_ram_addr;
1c00ef64:	c78c                	sw	a1,8(a5)
    req->cid = pi_cluster_id();
1c00ef66:	08d78ea3          	sb	a3,157(a5)
    req->done = 0;
1c00ef6a:	08078e23          	sb	zero,156(a5)
    req->is_2d = 0;
1c00ef6e:	08078fa3          	sb	zero,159(a5)
  task->id = PI_TASK_CALLBACK_ID;
1c00ef72:	0207a823          	sw	zero,48(a5)
  task->arg[1] = (uint32_t)arg;
1c00ef76:	d39c                	sw	a5,32(a5)
  task->implem.keep = 1;
1c00ef78:	c3b8                	sw	a4,64(a5)
  task->done = 0;
1c00ef7a:	02078623          	sb	zero,44(a5)
    pi_task_callback(&req->event, __pi_ram_cluster_req, (void *) req);
    pi_cl_send_task_to_fc(&(req->event));
1c00ef7e:	01878513          	addi	a0,a5,24
1c00ef82:	10d0106f          	j	1c01088e <pi_cl_send_task_to_fc>

1c00ef86 <pi_cl_ram_copy_2d>:
    req->device = device;
    req->addr = addr;
    req->pi_ram_addr = pi_ram_addr;
    req->size = size;
    req->stride = stride;
    req->length = length;
1c00ef86:	00f8aa23          	sw	a5,20(a7)
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00ef8a:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00ef8e:	8795                	srai	a5,a5,0x5
1c00ef90:	f267b7b3          	p.bclr	a5,a5,25,6
    req->cid = pi_cluster_id();
1c00ef94:	08f88ea3          	sb	a5,157(a7)
    req->done = 0;
    req->ext2loc = ext2loc;
    req->is_2d = 1;
1c00ef98:	4785                	li	a5,1
1c00ef9a:	08f88fa3          	sb	a5,159(a7)
  task->arg[0] = (uint32_t)callback;
1c00ef9e:	1c00f7b7          	lui	a5,0x1c00f
1c00efa2:	eaa78793          	addi	a5,a5,-342 # 1c00eeaa <__pi_ram_cluster_req>
1c00efa6:	00f8ae23          	sw	a5,28(a7)
  task->implem.keep = 1;
1c00efaa:	4785                	li	a5,1
    req->device = device;
1c00efac:	00a8a023          	sw	a0,0(a7)
    req->addr = addr;
1c00efb0:	00c8a223          	sw	a2,4(a7)
    req->pi_ram_addr = pi_ram_addr;
1c00efb4:	00b8a423          	sw	a1,8(a7)
    req->size = size;
1c00efb8:	00d8a623          	sw	a3,12(a7)
    req->stride = stride;
1c00efbc:	00e8a823          	sw	a4,16(a7)
    req->done = 0;
1c00efc0:	08088e23          	sb	zero,156(a7)
    req->ext2loc = ext2loc;
1c00efc4:	09088f23          	sb	a6,158(a7)
  task->id = PI_TASK_CALLBACK_ID;
1c00efc8:	0208a823          	sw	zero,48(a7)
  task->arg[1] = (uint32_t)arg;
1c00efcc:	0318a023          	sw	a7,32(a7)
  task->implem.keep = 1;
1c00efd0:	04f8a023          	sw	a5,64(a7)
1c00efd4:	02088623          	sb	zero,44(a7)
    pi_task_callback(&req->event, __pi_ram_cluster_req, (void *) req);
    pi_cl_send_task_to_fc(&(req->event));
1c00efd8:	01888513          	addi	a0,a7,24
1c00efdc:	0b30106f          	j	1c01088e <pi_cl_send_task_to_fc>

1c00efe0 <extern_alloc_init>:
  }
  printf("=============================================\n");
}

int extern_alloc_init(extern_alloc_t *a, void *addr, int size)
{
1c00efe0:	1101                	addi	sp,sp,-32
1c00efe2:	ca26                	sw	s1,20(sp)
1c00efe4:	ce06                	sw	ra,28(sp)
1c00efe6:	cc22                	sw	s0,24(sp)
1c00efe8:	84aa                	mv	s1,a0
  if (size)
1c00efea:	ce1d                	beqz	a2,1c00f028 <extern_alloc_init+0x48>
  return (alloc_chunk_extern_t *)pmsis_l2_malloc(sizeof(alloc_chunk_extern_t));
1c00efec:	4531                	li	a0,12
  {
    unsigned int staaddr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c00efee:	00758413          	addi	s0,a1,7
  return (alloc_chunk_extern_t *)pmsis_l2_malloc(sizeof(alloc_chunk_extern_t));
1c00eff2:	c62e                	sw	a1,12(sp)
1c00eff4:	c432                	sw	a2,8(sp)
1c00eff6:	285010ef          	jal	ra,1c010a7a <pi_l2_malloc>
    unsigned int staaddr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c00effa:	c4043433          	p.bclr	s0,s0,2,0
    alloc_chunk_extern_t *chunk = __alloc_chunk();
    if (chunk == NULL) return -1;
1c00effe:	45b2                	lw	a1,12(sp)
1c00f000:	4622                	lw	a2,8(sp)
1c00f002:	c515                	beqz	a0,1c00f02e <extern_alloc_init+0x4e>
    size = size - (staaddr - (unsigned int)addr);
1c00f004:	95b2                	add	a1,a1,a2
1c00f006:	8d81                	sub	a1,a1,s0
  }
  else
  {
    a->first_free = NULL;
  }
  return 0;
1c00f008:	4601                	li	a2,0
    if (size > 0) {
1c00f00a:	00b05963          	blez	a1,1c00f01c <extern_alloc_init+0x3c>
      a->first_free = chunk;
1c00f00e:	c088                	sw	a0,0(s1)
      chunk->size = ALIGN_DOWN(size, MIN_CHUNK_SIZE);
1c00f010:	c405b5b3          	p.bclr	a1,a1,2,0
1c00f014:	c10c                	sw	a1,0(a0)
      chunk->next = NULL;
1c00f016:	00052223          	sw	zero,4(a0)
      chunk->addr = staaddr;
1c00f01a:	c500                	sw	s0,8(a0)
}
1c00f01c:	40f2                	lw	ra,28(sp)
1c00f01e:	4462                	lw	s0,24(sp)
1c00f020:	44d2                	lw	s1,20(sp)
1c00f022:	8532                	mv	a0,a2
1c00f024:	6105                	addi	sp,sp,32
1c00f026:	8082                	ret
    a->first_free = NULL;
1c00f028:	00052023          	sw	zero,0(a0)
1c00f02c:	bfc5                	j	1c00f01c <extern_alloc_init+0x3c>
    if (chunk == NULL) return -1;
1c00f02e:	567d                	li	a2,-1
1c00f030:	b7f5                	j	1c00f01c <extern_alloc_init+0x3c>

1c00f032 <extern_alloc_deinit>:
  pmsis_l2_malloc_free((void *)pt, sizeof(alloc_chunk_extern_t));
1c00f032:	4108                	lw	a0,0(a0)
1c00f034:	45b1                	li	a1,12
1c00f036:	2530106f          	j	1c010a88 <pi_l2_free>

1c00f03a <extern_alloc>:



int extern_alloc(extern_alloc_t *a, int size, void **chunk)
{
  alloc_chunk_extern_t *pt = a->first_free, *prev = 0;
1c00f03a:	411c                	lw	a5,0(a0)

  size = ALIGN_UP(size, MIN_CHUNK_SIZE);
1c00f03c:	059d                	addi	a1,a1,7
1c00f03e:	c405b5b3          	p.bclr	a1,a1,2,0
  alloc_chunk_extern_t *pt = a->first_free, *prev = 0;
1c00f042:	4681                	li	a3,0

  while (pt && (pt->size < size)) { prev = pt; pt = pt->next; }
1c00f044:	c7b1                	beqz	a5,1c00f090 <extern_alloc+0x56>
1c00f046:	4398                	lw	a4,0(a5)
1c00f048:	02b74863          	blt	a4,a1,1c00f078 <extern_alloc+0x3e>
{
1c00f04c:	1141                	addi	sp,sp,-16
1c00f04e:	c226                	sw	s1,4(sp)
1c00f050:	c606                	sw	ra,12(sp)
1c00f052:	c422                	sw	s0,8(sp)
1c00f054:	4784                	lw	s1,8(a5)

  if (pt) {
    if (pt->size == size) {
1c00f056:	02b71663          	bne	a4,a1,1c00f082 <extern_alloc+0x48>
1c00f05a:	43d8                	lw	a4,4(a5)
      // Special case where the whole block disappears
      // This special case is interesting to support when we allocate aligned pages, to limit fragmentation
      if (prev) prev->next = pt->next; else a->first_free = pt->next;
1c00f05c:	c28d                	beqz	a3,1c00f07e <extern_alloc+0x44>
1c00f05e:	c2d8                	sw	a4,4(a3)
1c00f060:	8432                	mv	s0,a2
  pmsis_l2_malloc_free((void *)pt, sizeof(alloc_chunk_extern_t));
1c00f062:	45b1                	li	a1,12
1c00f064:	853e                	mv	a0,a5
1c00f066:	223010ef          	jal	ra,1c010a88 <pi_l2_free>
      void *addr = (void *)pt->addr;
      __free_chunk(pt);
      *chunk = addr;
1c00f06a:	c004                	sw	s1,0(s0)
  } else {
    //warning("Not enough memory to allocate\n");
    *chunk = (void *)0xffffffff;
    return -1;
  }
}
1c00f06c:	40b2                	lw	ra,12(sp)
1c00f06e:	4422                	lw	s0,8(sp)
1c00f070:	4492                	lw	s1,4(sp)
      return 0;
1c00f072:	4501                	li	a0,0
}
1c00f074:	0141                	addi	sp,sp,16
1c00f076:	8082                	ret
  while (pt && (pt->size < size)) { prev = pt; pt = pt->next; }
1c00f078:	86be                	mv	a3,a5
1c00f07a:	43dc                	lw	a5,4(a5)
1c00f07c:	b7e1                	j	1c00f044 <extern_alloc+0xa>
      if (prev) prev->next = pt->next; else a->first_free = pt->next;
1c00f07e:	c118                	sw	a4,0(a0)
1c00f080:	b7c5                	j	1c00f060 <extern_alloc+0x26>
      pt->size = pt->size - size;
1c00f082:	40b706b3          	sub	a3,a4,a1
      void *result = (void *)((char *)pt->addr + pt->size - size);
1c00f086:	9726                	add	a4,a4,s1
      pt->size = pt->size - size;
1c00f088:	c394                	sw	a3,0(a5)
      void *result = (void *)((char *)pt->addr + pt->size - size);
1c00f08a:	8f0d                	sub	a4,a4,a1
      *chunk = result;
1c00f08c:	c218                	sw	a4,0(a2)
1c00f08e:	bff9                	j	1c00f06c <extern_alloc+0x32>
    *chunk = (void *)0xffffffff;
1c00f090:	57fd                	li	a5,-1
1c00f092:	c21c                	sw	a5,0(a2)
    return -1;
1c00f094:	557d                	li	a0,-1
}
1c00f096:	8082                	ret

1c00f098 <extern_free>:
  return 0;
}

int __attribute__((noinline)) extern_free(extern_alloc_t *a, int size, void *addr)

{
1c00f098:	7179                	addi	sp,sp,-48
1c00f09a:	d422                	sw	s0,40(sp)
  alloc_chunk_extern_t *chunk;
  alloc_chunk_extern_t *next = a->first_free, *prev = 0;
1c00f09c:	4100                	lw	s0,0(a0)
  size = ALIGN_UP(size, MIN_CHUNK_SIZE);
1c00f09e:	059d                	addi	a1,a1,7
{
1c00f0a0:	d226                	sw	s1,36(sp)
1c00f0a2:	d04a                	sw	s2,32(sp)
1c00f0a4:	ce4e                	sw	s3,28(sp)
1c00f0a6:	d606                	sw	ra,44(sp)
1c00f0a8:	89aa                	mv	s3,a0
  size = ALIGN_UP(size, MIN_CHUNK_SIZE);
1c00f0aa:	c405b933          	p.bclr	s2,a1,2,0
  alloc_chunk_extern_t *next = a->first_free, *prev = 0;
1c00f0ae:	4481                	li	s1,0

  while (next && next->addr < (unsigned int)addr) {
1c00f0b0:	c439                	beqz	s0,1c00f0fe <extern_free+0x66>
1c00f0b2:	441c                	lw	a5,8(s0)
1c00f0b4:	04c7e263          	bltu	a5,a2,1c00f0f8 <extern_free+0x60>
    prev = next; next = next->next; 
  }

  if (next && ((char *)addr + size) == (char *)next->addr) {
1c00f0b8:	01260733          	add	a4,a2,s2
1c00f0bc:	04f71163          	bne	a4,a5,1c00f0fe <extern_free+0x66>
    /* Coalesce with next */
    next->size = size + next->size;
1c00f0c0:	400c                	lw	a1,0(s0)
    next->addr = (unsigned int)addr;
1c00f0c2:	c410                	sw	a2,8(s0)
    next->size = size + next->size;
1c00f0c4:	992e                	add	s2,s2,a1
1c00f0c6:	01242023          	sw	s2,0(s0)
    chunk->size = size;
    chunk->next = next;
    chunk->addr = (unsigned int)addr;
  }

  if (prev) {
1c00f0ca:	c8b1                	beqz	s1,1c00f11e <extern_free+0x86>
    if (((char *)prev->addr + prev->size) == (char *)addr) {
1c00f0cc:	4094                	lw	a3,0(s1)
1c00f0ce:	4498                	lw	a4,8(s1)
1c00f0d0:	9736                	add	a4,a4,a3
1c00f0d2:	04e61463          	bne	a2,a4,1c00f11a <extern_free+0x82>
      /* Coalesce with previous */
      prev->size += chunk->size;
1c00f0d6:	401c                	lw	a5,0(s0)
  pmsis_l2_malloc_free((void *)pt, sizeof(alloc_chunk_extern_t));
1c00f0d8:	45b1                	li	a1,12
1c00f0da:	8522                	mv	a0,s0
      prev->size += chunk->size;
1c00f0dc:	97b6                	add	a5,a5,a3
1c00f0de:	c09c                	sw	a5,0(s1)
      prev->next = chunk->next;
1c00f0e0:	405c                	lw	a5,4(s0)
1c00f0e2:	c0dc                	sw	a5,4(s1)
  pmsis_l2_malloc_free((void *)pt, sizeof(alloc_chunk_extern_t));
1c00f0e4:	1a5010ef          	jal	ra,1c010a88 <pi_l2_free>
    }
  } else {
    a->first_free = chunk;
  }

  return 0;
1c00f0e8:	4501                	li	a0,0
}
1c00f0ea:	50b2                	lw	ra,44(sp)
1c00f0ec:	5422                	lw	s0,40(sp)
1c00f0ee:	5492                	lw	s1,36(sp)
1c00f0f0:	5902                	lw	s2,32(sp)
1c00f0f2:	49f2                	lw	s3,28(sp)
1c00f0f4:	6145                	addi	sp,sp,48
1c00f0f6:	8082                	ret
    prev = next; next = next->next; 
1c00f0f8:	84a2                	mv	s1,s0
1c00f0fa:	4040                	lw	s0,4(s0)
1c00f0fc:	bf55                	j	1c00f0b0 <extern_free+0x18>
  return (alloc_chunk_extern_t *)pmsis_l2_malloc(sizeof(alloc_chunk_extern_t));
1c00f0fe:	4531                	li	a0,12
1c00f100:	c632                	sw	a2,12(sp)
1c00f102:	179010ef          	jal	ra,1c010a7a <pi_l2_malloc>
1c00f106:	87aa                	mv	a5,a0
    if (chunk == NULL) return -1;
1c00f108:	4632                	lw	a2,12(sp)
1c00f10a:	557d                	li	a0,-1
1c00f10c:	dff9                	beqz	a5,1c00f0ea <extern_free+0x52>
    chunk->next = next;
1c00f10e:	c3c0                	sw	s0,4(a5)
    chunk->size = size;
1c00f110:	0127a023          	sw	s2,0(a5)
    chunk->addr = (unsigned int)addr;
1c00f114:	c790                	sw	a2,8(a5)
1c00f116:	843e                	mv	s0,a5
1c00f118:	bf4d                	j	1c00f0ca <extern_free+0x32>
      prev->next = chunk;
1c00f11a:	c0c0                	sw	s0,4(s1)
1c00f11c:	b7f1                	j	1c00f0e8 <extern_free+0x50>
    a->first_free = chunk;
1c00f11e:	0089a023          	sw	s0,0(s3)
1c00f122:	b7d9                	j	1c00f0e8 <extern_free+0x50>

1c00f124 <pi_partition_get_flash_offset>:
        return 0;
}

uint32_t pi_partition_get_flash_offset(const pi_partition_t *partition)
{
    if(partition)
1c00f124:	c119                	beqz	a0,1c00f12a <pi_partition_get_flash_offset+0x6>
        return partition->offset;
1c00f126:	4548                	lw	a0,12(a0)
1c00f128:	8082                	ret
    else
        return UINT32_MAX;
1c00f12a:	557d                	li	a0,-1
}
1c00f12c:	8082                	ret

1c00f12e <pi_partition_table_free>:

void pi_partition_table_free(pi_partition_table_t table)
{
    flash_partition_table_free((flash_partition_table_t *) table);
1c00f12e:	aaf1                	j	1c00f30a <flash_partition_table_free>

1c00f130 <pi_partition_table_load>:

pi_err_t pi_partition_table_load(pi_device_t *flash, const pi_partition_table_t *table)
{
    pi_err_t rc;
    
    rc = flash_partition_table_load(flash, (const flash_partition_table_t **) table, NULL);
1c00f130:	4601                	li	a2,0
1c00f132:	a8d1                	j	1c00f206 <flash_partition_table_load>

1c00f134 <pi_partition_find_first>:

const pi_partition_t *
pi_partition_find_first(const pi_partition_table_t table, const pi_partition_type_t type,
                        const pi_partition_subtype_t subtype,
                        const char *label)
{
1c00f134:	1141                	addi	sp,sp,-16
1c00f136:	c226                	sw	s1,4(sp)
1c00f138:	c606                	sw	ra,12(sp)
1c00f13a:	c422                	sw	s0,8(sp)
1c00f13c:	84aa                	mv	s1,a0
    pi_partition_t *partition;
    const flash_partition_info_t *info;
    
    info = flash_partition_find_first((const flash_partition_table_t *) table, type, subtype, label);
1c00f13e:	2ac5                	jal	1c00f32e <flash_partition_find_first>
    if(info == NULL)
1c00f140:	c539                	beqz	a0,1c00f18e <pi_partition_find_first+0x5a>
1c00f142:	842a                	mv	s0,a0
        return NULL;
    
    partition = pi_l2_malloc(sizeof(pi_partition_t));
1c00f144:	02800513          	li	a0,40
1c00f148:	133010ef          	jal	ra,1c010a7a <pi_l2_malloc>
    partition->type = info->type;
1c00f14c:	00244783          	lbu	a5,2(s0)
    partition->subtype = info->subtype;
    partition->size = info->pos.size;
    partition->offset = info->pos.offset;
    partition->flash = ((const flash_partition_table_t *)table)->flash;
1c00f150:	4098                	lw	a4,0(s1)
    partition->type = info->type;
1c00f152:	c15c                	sw	a5,4(a0)
    partition->subtype = info->subtype;
1c00f154:	00344783          	lbu	a5,3(s0)
1c00f158:	c51c                	sw	a5,8(a0)
    partition->size = info->pos.size;
1c00f15a:	441c                	lw	a5,8(s0)
1c00f15c:	c91c                	sw	a5,16(a0)
    partition->offset = info->pos.offset;
1c00f15e:	405c                	lw	a5,4(s0)
1c00f160:	c55c                	sw	a5,12(a0)
    partition->flash = ((const flash_partition_table_t *)table)->flash;
1c00f162:	87aa                	mv	a5,a0
1c00f164:	00e7aa2b          	p.sw	a4,20(a5!)
    memcpy(partition->label, info->label, 16);
1c00f168:	4458                	lw	a4,12(s0)
1c00f16a:	c398                	sw	a4,0(a5)
1c00f16c:	481c                	lw	a5,16(s0)
1c00f16e:	cd1c                	sw	a5,24(a0)
1c00f170:	485c                	lw	a5,20(s0)
1c00f172:	cd5c                	sw	a5,28(a0)
1c00f174:	4c1c                	lw	a5,24(s0)
    partition->label[16] = 0;
1c00f176:	02050223          	sb	zero,36(a0)
    partition->encrypted = false;
1c00f17a:	020502a3          	sb	zero,37(a0)
    memcpy(partition->label, info->label, 16);
1c00f17e:	d11c                	sw	a5,32(a0)
    partition->read_only = false;
1c00f180:	02050323          	sb	zero,38(a0)
    
    return (const pi_partition_t *) partition;
}
1c00f184:	40b2                	lw	ra,12(sp)
1c00f186:	4422                	lw	s0,8(sp)
1c00f188:	4492                	lw	s1,4(sp)
1c00f18a:	0141                	addi	sp,sp,16
1c00f18c:	8082                	ret
        return NULL;
1c00f18e:	4501                	li	a0,0
1c00f190:	bfd5                	j	1c00f184 <pi_partition_find_first+0x50>

1c00f192 <flash_partition_table_verify>:

pi_err_t flash_partition_table_verify(const flash_partition_table_t *table)
{
    const flash_partition_info_t *part;
    const flash_partition_table_header_t *header = &table->header;
    const flash_partition_info_t *partition_table = table->partitions;
1c00f192:	514c                	lw	a1,36(a0)
    MD5_CTX context;
    uint8_t digest[16];

    // Check magic number for each partition
    for (uint8_t num_parts = 0; num_parts < header->nbr_of_entries; num_parts++)
1c00f194:	00754683          	lbu	a3,7(a0)
1c00f198:	4781                	li	a5,0
1c00f19a:	872e                	mv	a4,a1
    {
        part = partition_table + num_parts;
        if (part->magic_bytes != PI_PARTITION_MAGIC)
1c00f19c:	1ba00613          	li	a2,442
    for (uint8_t num_parts = 0; num_parts < header->nbr_of_entries; num_parts++)
1c00f1a0:	04f69663          	bne	a3,a5,1c00f1ec <flash_partition_table_verify+0x5a>
        {
            return PI_ERR_INVALID_STATE;
        }
    }

    if (header->crc_flags)
1c00f1a4:	00854783          	lbu	a5,8(a0)
1c00f1a8:	cfa9                	beqz	a5,1c00f202 <flash_partition_table_verify+0x70>
{
1c00f1aa:	7155                	addi	sp,sp,-208
1c00f1ac:	c5a2                	sw	s0,200(sp)
1c00f1ae:	842a                	mv	s0,a0
    {
        MD5_Init(&context);
1c00f1b0:	1028                	addi	a0,sp,40
{
1c00f1b2:	c786                	sw	ra,204(sp)
        MD5_Init(&context);
1c00f1b4:	c62e                	sw	a1,12(sp)
1c00f1b6:	2bb000ef          	jal	ra,1c00fc70 <MD5_Init>
        MD5_Update(&context, (unsigned char *) partition_table,
                   header->nbr_of_entries * sizeof(flash_partition_info_t));
1c00f1ba:	00744603          	lbu	a2,7(s0)
        MD5_Update(&context, (unsigned char *) partition_table,
1c00f1be:	45b2                	lw	a1,12(sp)
1c00f1c0:	1028                	addi	a0,sp,40
1c00f1c2:	0616                	slli	a2,a2,0x5
1c00f1c4:	2df000ef          	jal	ra,1c00fca2 <MD5_Update>
        MD5_Final(digest, &context);
1c00f1c8:	102c                	addi	a1,sp,40
1c00f1ca:	0828                	addi	a0,sp,24
1c00f1cc:	373000ef          	jal	ra,1c00fd3e <MD5_Final>

        if (strncmp((const char *) header->md5, (const char *) digest, sizeof(digest)))
1c00f1d0:	4641                	li	a2,16
1c00f1d2:	082c                	addi	a1,sp,24
1c00f1d4:	01440513          	addi	a0,s0,20
1c00f1d8:	656030ef          	jal	ra,1c01282e <strncmp>
        {
            return PI_ERR_INVALID_CRC;
1c00f1dc:	47a1                	li	a5,8
        if (strncmp((const char *) header->md5, (const char *) digest, sizeof(digest)))
1c00f1de:	e111                	bnez	a0,1c00f1e2 <flash_partition_table_verify+0x50>
        }
    }

    return PI_OK;
1c00f1e0:	4781                	li	a5,0
}
1c00f1e2:	40be                	lw	ra,204(sp)
1c00f1e4:	442e                	lw	s0,200(sp)
1c00f1e6:	853e                	mv	a0,a5
1c00f1e8:	6169                	addi	sp,sp,208
1c00f1ea:	8082                	ret
        if (part->magic_bytes != PI_PARTITION_MAGIC)
1c00f1ec:	0207580b          	p.lhu	a6,32(a4!)
1c00f1f0:	00c81663          	bne	a6,a2,1c00f1fc <flash_partition_table_verify+0x6a>
    for (uint8_t num_parts = 0; num_parts < header->nbr_of_entries; num_parts++)
1c00f1f4:	0785                	addi	a5,a5,1
1c00f1f6:	0ff7f793          	andi	a5,a5,255
1c00f1fa:	b75d                	j	1c00f1a0 <flash_partition_table_verify+0xe>
            return PI_ERR_INVALID_STATE;
1c00f1fc:	478d                	li	a5,3
}
1c00f1fe:	853e                	mv	a0,a5
1c00f200:	8082                	ret
    return PI_OK;
1c00f202:	4781                	li	a5,0
1c00f204:	bfed                	j	1c00f1fe <flash_partition_table_verify+0x6c>

1c00f206 <flash_partition_table_load>:

pi_err_t flash_partition_table_load(pi_device_t *flash, const flash_partition_table_t **partition_table,
                                    uint8_t *nbr_of_entries)
{
1c00f206:	1101                	addi	sp,sp,-32
1c00f208:	ca26                	sw	s1,20(sp)
1c00f20a:	ce06                	sw	ra,28(sp)
1c00f20c:	cc22                	sw	s0,24(sp)
1c00f20e:	c84a                	sw	s2,16(sp)
1c00f210:	c64e                	sw	s3,12(sp)
1c00f212:	c452                	sw	s4,8(sp)
1c00f214:	c256                	sw	s5,4(sp)
    flash_partition_info_t *partitions = NULL;

    if(partition_table == NULL)
    {
        PARTITION_TRACE_ERR("Table argument is NULL");
        return PI_ERR_INVALID_ARG;
1c00f216:	4489                	li	s1,2
    if(partition_table == NULL)
1c00f218:	c9e1                	beqz	a1,1c00f2e8 <flash_partition_table_load+0xe2>
1c00f21a:	892a                	mv	s2,a0
    }

// Alloc table containing header
    table = pi_l2_malloc(sizeof(*table));
1c00f21c:	02800513          	li	a0,40
1c00f220:	89b2                	mv	s3,a2
1c00f222:	8aae                	mv	s5,a1
1c00f224:	057010ef          	jal	ra,1c010a7a <pi_l2_malloc>
1c00f228:	842a                	mv	s0,a0
    if(table == NULL)
    {
        PARTITION_TRACE_ERR("Unable to allocate partition table in L2.");
        rc = PI_ERR_L2_NO_MEM;
1c00f22a:	20100493          	li	s1,513
    if(table == NULL)
1c00f22e:	cd4d                	beqz	a0,1c00f2e8 <flash_partition_table_load+0xe2>
        goto mount_error;
    }

    table_offset_l2 = pi_l2_malloc(sizeof(*table_offset_l2));
1c00f230:	4511                	li	a0,4
1c00f232:	049010ef          	jal	ra,1c010a7a <pi_l2_malloc>
1c00f236:	84aa                	mv	s1,a0
    if(table_offset_l2 == NULL)
1c00f238:	c171                	beqz	a0,1c00f2fc <flash_partition_table_load+0xf6>
  api->read(device, pi_flash_addr, data, size);
1c00f23a:	00092783          	lw	a5,0(s2)
1c00f23e:	862a                	mv	a2,a0
1c00f240:	4581                	li	a1,0
1c00f242:	5b9c                	lw	a5,48(a5)
1c00f244:	4691                	li	a3,4
1c00f246:	854a                	mv	a0,s2
1c00f248:	9782                	jalr	a5
        rc = PI_ERR_L2_NO_MEM;
        goto mount_error;
    }

    pi_flash_read(flash, 0, table_offset_l2, 4);
    if(*table_offset_l2 == 0)
1c00f24a:	0004aa03          	lw	s4,0(s1)

    return PI_OK;

    mount_error:
    if(table_offset_l2)
        pi_l2_free(table_offset_l2, sizeof(*table_offset_l2));
1c00f24e:	4591                	li	a1,4
1c00f250:	8526                	mv	a0,s1
    if(*table_offset_l2 == 0)
1c00f252:	0a0a0863          	beqz	s4,1c00f302 <flash_partition_table_load+0xfc>
    pi_l2_free(table_offset_l2, sizeof(*table_offset_l2));
1c00f256:	033010ef          	jal	ra,1c010a88 <pi_l2_free>
1c00f25a:	00092783          	lw	a5,0(s2)
1c00f25e:	02000693          	li	a3,32
1c00f262:	00440613          	addi	a2,s0,4
1c00f266:	5b9c                	lw	a5,48(a5)
1c00f268:	85d2                	mv	a1,s4
1c00f26a:	854a                	mv	a0,s2
1c00f26c:	9782                	jalr	a5
    if(table->header.magic_bytes != PI_PARTITION_TABLE_HEADER_MAGIC)
1c00f26e:	00445703          	lhu	a4,4(s0)
1c00f272:	2ba00793          	li	a5,698
        rc = PI_ERR_NOT_FOUND;
1c00f276:	4495                	li	s1,5
    if(table->header.magic_bytes != PI_PARTITION_TABLE_HEADER_MAGIC)
1c00f278:	04f71763          	bne	a4,a5,1c00f2c6 <flash_partition_table_load+0xc0>
    if(table->header.format_version != PI_PARTITION_TABLE_FORMAT_VERSION)
1c00f27c:	00644783          	lbu	a5,6(s0)
        rc = PI_ERR_INVALID_VERSION;
1c00f280:	44a5                	li	s1,9
    if(table->header.format_version != PI_PARTITION_TABLE_FORMAT_VERSION)
1c00f282:	0417b263          	p.bneimm	a5,1,1c00f2c6 <flash_partition_table_load+0xc0>
    table->partitions = pi_l2_malloc(sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c00f286:	00744503          	lbu	a0,7(s0)
1c00f28a:	0516                	slli	a0,a0,0x5
1c00f28c:	7ee010ef          	jal	ra,1c010a7a <pi_l2_malloc>
1c00f290:	d048                	sw	a0,36(s0)
1c00f292:	862a                	mv	a2,a0
    if(table->partitions == NULL)
1c00f294:	c525                	beqz	a0,1c00f2fc <flash_partition_table_load+0xf6>
1c00f296:	00092783          	lw	a5,0(s2)
                  sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c00f29a:	00744683          	lbu	a3,7(s0)
1c00f29e:	020a0593          	addi	a1,s4,32
1c00f2a2:	5b9c                	lw	a5,48(a5)
1c00f2a4:	0696                	slli	a3,a3,0x5
1c00f2a6:	854a                	mv	a0,s2
1c00f2a8:	9782                	jalr	a5
    if(table->header.crc_flags)
1c00f2aa:	00844783          	lbu	a5,8(s0)
1c00f2ae:	c395                	beqz	a5,1c00f2d2 <flash_partition_table_load+0xcc>
        rc = flash_partition_table_verify(table);
1c00f2b0:	8522                	mv	a0,s0
1c00f2b2:	ee1ff0ef          	jal	ra,1c00f192 <flash_partition_table_verify>
1c00f2b6:	84aa                	mv	s1,a0
        if(rc != PI_OK)
1c00f2b8:	cd09                	beqz	a0,1c00f2d2 <flash_partition_table_load+0xcc>
            pi_l2_free(table->partitions, sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c00f2ba:	00744583          	lbu	a1,7(s0)
1c00f2be:	5048                	lw	a0,36(s0)
1c00f2c0:	0596                	slli	a1,a1,0x5
1c00f2c2:	7c6010ef          	jal	ra,1c010a88 <pi_l2_free>
    if(table)
        pi_l2_free(table, sizeof(*table));
1c00f2c6:	02800593          	li	a1,40
1c00f2ca:	8522                	mv	a0,s0
1c00f2cc:	7bc010ef          	jal	ra,1c010a88 <pi_l2_free>
1c00f2d0:	a821                	j	1c00f2e8 <flash_partition_table_load+0xe2>
    table->flash = flash;
1c00f2d2:	01242023          	sw	s2,0(s0)
    *partition_table = table;
1c00f2d6:	008aa023          	sw	s0,0(s5)
    return PI_OK;
1c00f2da:	4481                	li	s1,0
    if(nbr_of_entries)
1c00f2dc:	00098663          	beqz	s3,1c00f2e8 <flash_partition_table_load+0xe2>
        *nbr_of_entries = table->header.nbr_of_entries;
1c00f2e0:	00744783          	lbu	a5,7(s0)
1c00f2e4:	00f98023          	sb	a5,0(s3)
    return rc;
}
1c00f2e8:	40f2                	lw	ra,28(sp)
1c00f2ea:	4462                	lw	s0,24(sp)
1c00f2ec:	8526                	mv	a0,s1
1c00f2ee:	4942                	lw	s2,16(sp)
1c00f2f0:	44d2                	lw	s1,20(sp)
1c00f2f2:	49b2                	lw	s3,12(sp)
1c00f2f4:	4a22                	lw	s4,8(sp)
1c00f2f6:	4a92                	lw	s5,4(sp)
1c00f2f8:	6105                	addi	sp,sp,32
1c00f2fa:	8082                	ret
        rc = PI_ERR_L2_NO_MEM;
1c00f2fc:	20100493          	li	s1,513
1c00f300:	b7d9                	j	1c00f2c6 <flash_partition_table_load+0xc0>
        pi_l2_free(table_offset_l2, sizeof(*table_offset_l2));
1c00f302:	786010ef          	jal	ra,1c010a88 <pi_l2_free>
        rc = PI_ERR_NOT_FOUND;
1c00f306:	4495                	li	s1,5
1c00f308:	bf7d                	j	1c00f2c6 <flash_partition_table_load+0xc0>

1c00f30a <flash_partition_table_free>:

void flash_partition_table_free(const flash_partition_table_t *table)
{
1c00f30a:	1141                	addi	sp,sp,-16
1c00f30c:	c422                	sw	s0,8(sp)
1c00f30e:	c606                	sw	ra,12(sp)
    pi_l2_free((void *) table->partitions, sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c00f310:	00754583          	lbu	a1,7(a0)
{
1c00f314:	842a                	mv	s0,a0
    pi_l2_free((void *) table->partitions, sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c00f316:	5148                	lw	a0,36(a0)
1c00f318:	0596                	slli	a1,a1,0x5
1c00f31a:	76e010ef          	jal	ra,1c010a88 <pi_l2_free>
    pi_l2_free((void *) table, sizeof(flash_partition_table_t));
1c00f31e:	8522                	mv	a0,s0
}
1c00f320:	4422                	lw	s0,8(sp)
1c00f322:	40b2                	lw	ra,12(sp)
    pi_l2_free((void *) table, sizeof(flash_partition_table_t));
1c00f324:	02800593          	li	a1,40
}
1c00f328:	0141                	addi	sp,sp,16
    pi_l2_free((void *) table, sizeof(flash_partition_table_t));
1c00f32a:	75e0106f          	j	1c010a88 <pi_l2_free>

1c00f32e <flash_partition_find_first>:


const flash_partition_info_t *flash_partition_find_first(const flash_partition_table_t *table, pi_partition_type_t type,
                                                         pi_partition_subtype_t subtype, const char *label)
{
1c00f32e:	7179                	addi	sp,sp,-48
1c00f330:	d226                	sw	s1,36(sp)
1c00f332:	d04a                	sw	s2,32(sp)
1c00f334:	cc52                	sw	s4,24(sp)
1c00f336:	ca56                	sw	s5,20(sp)
1c00f338:	d606                	sw	ra,44(sp)
1c00f33a:	d422                	sw	s0,40(sp)
1c00f33c:	ce4e                	sw	s3,28(sp)
    const flash_partition_info_t *part = NULL;

    for (uint8_t i = 0; i < table->header.nbr_of_entries; i++)
1c00f33e:	00754983          	lbu	s3,7(a0)
{
1c00f342:	892a                	mv	s2,a0
1c00f344:	8a2e                	mv	s4,a1
1c00f346:	8ab2                	mv	s5,a2
    for (uint8_t i = 0; i < table->header.nbr_of_entries; i++)
1c00f348:	4481                	li	s1,0
1c00f34a:	0ff4f793          	andi	a5,s1,255
1c00f34e:	0137ed63          	bltu	a5,s3,1c00f368 <flash_partition_find_first+0x3a>
        if(label == NULL)
            return part;
        if(strncmp(label, (char *) &part->label, PI_PARTITION_LABEL_LENGTH) == 0)
            return part;
    }
    return NULL;
1c00f352:	4401                	li	s0,0
}
1c00f354:	8522                	mv	a0,s0
1c00f356:	50b2                	lw	ra,44(sp)
1c00f358:	5422                	lw	s0,40(sp)
1c00f35a:	5492                	lw	s1,36(sp)
1c00f35c:	5902                	lw	s2,32(sp)
1c00f35e:	49f2                	lw	s3,28(sp)
1c00f360:	4a62                	lw	s4,24(sp)
1c00f362:	4ad2                	lw	s5,20(sp)
1c00f364:	6145                	addi	sp,sp,48
1c00f366:	8082                	ret
        part = table->partitions + i;
1c00f368:	02492783          	lw	a5,36(s2)
1c00f36c:	00549413          	slli	s0,s1,0x5
1c00f370:	943e                	add	s0,s0,a5
        if(part->type != type || part->subtype != subtype)
1c00f372:	00244783          	lbu	a5,2(s0)
1c00f376:	03479063          	bne	a5,s4,1c00f396 <flash_partition_find_first+0x68>
1c00f37a:	00344783          	lbu	a5,3(s0)
1c00f37e:	01579c63          	bne	a5,s5,1c00f396 <flash_partition_find_first+0x68>
        if(label == NULL)
1c00f382:	dae9                	beqz	a3,1c00f354 <flash_partition_find_first+0x26>
        if(strncmp(label, (char *) &part->label, PI_PARTITION_LABEL_LENGTH) == 0)
1c00f384:	8536                	mv	a0,a3
1c00f386:	4641                	li	a2,16
1c00f388:	00c40593          	addi	a1,s0,12
1c00f38c:	c636                	sw	a3,12(sp)
1c00f38e:	4a0030ef          	jal	ra,1c01282e <strncmp>
1c00f392:	46b2                	lw	a3,12(sp)
1c00f394:	d161                	beqz	a0,1c00f354 <flash_partition_find_first+0x26>
1c00f396:	0485                	addi	s1,s1,1
1c00f398:	bf4d                	j	1c00f34a <flash_partition_find_first+0x1c>

1c00f39a <body>:
/*
 * This processes one or more 64-byte data blocks, but does NOT update the bit
 * counters.  There are no alignment requirements.
 */
static const void *body(MD5_CTX *ctx, const void *data, unsigned long size)
{
1c00f39a:	715d                	addi	sp,sp,-80
	MD5_u32plus a, b, c, d;
	MD5_u32plus saved_a, saved_b, saved_c, saved_d;

	ptr = (const unsigned char *)data;

	a = ctx->a;
1c00f39c:	00852283          	lw	t0,8(a0)
1c00f3a0:	fc060613          	addi	a2,a2,-64
{
1c00f3a4:	de52                	sw	s4,60(sp)
1c00f3a6:	dc56                	sw	s5,56(sp)
1c00f3a8:	8219                	srli	a2,a2,0x6
	b = ctx->b;
1c00f3aa:	00c52803          	lw	a6,12(a0)
	c = ctx->c;
1c00f3ae:	01052a03          	lw	s4,16(a0)
	d = ctx->d;
1c00f3b2:	01452a83          	lw	s5,20(a0)
1c00f3b6:	0605                	addi	a2,a2,1
{
1c00f3b8:	c6a2                	sw	s0,76(sp)
1c00f3ba:	c4a6                	sw	s1,72(sp)
1c00f3bc:	c2ca                	sw	s2,68(sp)
1c00f3be:	c0ce                	sw	s3,64(sp)
1c00f3c0:	da5a                	sw	s6,52(sp)
1c00f3c2:	d85e                	sw	s7,48(sp)
1c00f3c4:	d662                	sw	s8,44(sp)
1c00f3c6:	d466                	sw	s9,40(sp)
1c00f3c8:	d26a                	sw	s10,36(sp)
1c00f3ca:	d06e                	sw	s11,32(sp)
1c00f3cc:	87aa                	mv	a5,a0
	a = ctx->a;
1c00f3ce:	cc16                	sw	t0,24(sp)
1c00f3d0:	ce32                	sw	a2,28(sp)
1c00f3d2:	4362                	lw	t1,24(sp)
		saved_b = b;
		saved_c = c;
		saved_d = d;

/* Round 1 */
		STEP(F, a, b, c, d, SET(0), 0xd76aa478, 7)
1c00f3d4:	0005a983          	lw	s3,0(a1)
1c00f3d8:	d76aa537          	lui	a0,0xd76aa
1c00f3dc:	47850513          	addi	a0,a0,1144 # d76aa478 <pulp__FC+0xd76aa479>
1c00f3e0:	00a30733          	add	a4,t1,a0
1c00f3e4:	013706b3          	add	a3,a4,s3
1c00f3e8:	015a4733          	xor	a4,s4,s5
1c00f3ec:	01077733          	and	a4,a4,a6
1c00f3f0:	0537ac23          	sw	s3,88(a5)
1c00f3f4:	01574733          	xor	a4,a4,s5
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c00f3f8:	41d0                	lw	a2,4(a1)
		STEP(F, a, b, c, d, SET(0), 0xd76aa478, 7)
1c00f3fa:	9736                	add	a4,a4,a3
1c00f3fc:	e8c7b6b7          	lui	a3,0xe8c7b
1c00f400:	4365                	li	t1,25
1c00f402:	75668693          	addi	a3,a3,1878 # e8c7b756 <pulp__FC+0xe8c7b757>
1c00f406:	00da8e33          	add	t3,s5,a3
1c00f40a:	08675733          	p.ror	a4,a4,t1
1c00f40e:	9742                	add	a4,a4,a6
1c00f410:	00ce06b3          	add	a3,t3,a2
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c00f414:	01484e33          	xor	t3,a6,s4
1c00f418:	cff0                	sw	a2,92(a5)
1c00f41a:	00ee7e33          	and	t3,t3,a4
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00f41e:	0085a883          	lw	a7,8(a1)
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c00f422:	014e4e33          	xor	t3,t3,s4
1c00f426:	24207bb7          	lui	s7,0x24207
1c00f42a:	4d51                	li	s10,20
1c00f42c:	9e36                	add	t3,t3,a3
1c00f42e:	0dbb8b93          	addi	s7,s7,219 # 242070db <__l2_end+0x81f2033>
1c00f432:	017a0533          	add	a0,s4,s7
1c00f436:	09ae5e33          	p.ror	t3,t3,s10
1c00f43a:	9e3a                	add	t3,t3,a4
1c00f43c:	011506b3          	add	a3,a0,a7
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00f440:	00e84533          	xor	a0,a6,a4
1c00f444:	0717a023          	sw	a7,96(a5)
1c00f448:	01c57533          	and	a0,a0,t3
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c00f44c:	00c5a283          	lw	t0,12(a1)
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00f450:	01054533          	xor	a0,a0,a6
1c00f454:	c1bddc37          	lui	s8,0xc1bdd
1c00f458:	4cbd                	li	s9,15
1c00f45a:	9536                	add	a0,a0,a3
1c00f45c:	eeec0c13          	addi	s8,s8,-274 # c1bdceee <pulp__FC+0xc1bdceef>
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c00f460:	c432                	sw	a2,8(sp)
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00f462:	09955533          	p.ror	a0,a0,s9
1c00f466:	01880633          	add	a2,a6,s8
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c00f46a:	0657a223          	sw	t0,100(a5)
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00f46e:	9572                	add	a0,a0,t3
1c00f470:	005606b3          	add	a3,a2,t0
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c00f474:	01c74633          	xor	a2,a4,t3
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c00f478:	0105ad83          	lw	s11,16(a1)
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c00f47c:	8e69                	and	a2,a2,a0
1c00f47e:	8e39                	xor	a2,a2,a4
1c00f480:	f57c1eb7          	lui	t4,0xf57c1
1c00f484:	4c29                	li	s8,10
1c00f486:	9636                	add	a2,a2,a3
1c00f488:	fafe8e93          	addi	t4,t4,-81 # f57c0faf <pulp__FC+0xf57c0fb0>
1c00f48c:	01dd86b3          	add	a3,s11,t4
1c00f490:	09865633          	p.ror	a2,a2,s8
1c00f494:	962a                	add	a2,a2,a0
1c00f496:	9736                	add	a4,a4,a3
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c00f498:	00ae46b3          	xor	a3,t3,a0
1c00f49c:	07b7a423          	sw	s11,104(a5)
1c00f4a0:	8ef1                	and	a3,a3,a2
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c00f4a2:	49c0                	lw	s0,20(a1)
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c00f4a4:	01c6c6b3          	xor	a3,a3,t3
1c00f4a8:	9736                	add	a4,a4,a3
1c00f4aa:	4787c6b7          	lui	a3,0x4787c
1c00f4ae:	62a68693          	addi	a3,a3,1578 # 4787c62a <__l2_end+0x2b867582>
1c00f4b2:	00d40fb3          	add	t6,s0,a3
1c00f4b6:	08675733          	p.ror	a4,a4,t1
1c00f4ba:	9732                	add	a4,a4,a2
1c00f4bc:	9e7e                	add	t3,t3,t6
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c00f4be:	00c54fb3          	xor	t6,a0,a2
1c00f4c2:	00efffb3          	and	t6,t6,a4
1c00f4c6:	d7e0                	sw	s0,108(a5)
1c00f4c8:	00afcfb3          	xor	t6,t6,a0
1c00f4cc:	9ff2                	add	t6,t6,t3
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00f4ce:	0185ae03          	lw	t3,24(a1)
1c00f4d2:	a8304bb7          	lui	s7,0xa8304
1c00f4d6:	613b8b93          	addi	s7,s7,1555 # a8304613 <pulp__FC+0xa8304614>
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00f4da:	c646                	sw	a7,12(sp)
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c00f4dc:	09afdfb3          	p.ror	t6,t6,s10
1c00f4e0:	017e08b3          	add	a7,t3,s7
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00f4e4:	07c7a823          	sw	t3,112(a5)
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c00f4e8:	9fba                	add	t6,t6,a4
1c00f4ea:	9546                	add	a0,a0,a7
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00f4ec:	00e648b3          	xor	a7,a2,a4
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c00f4f0:	01c5a903          	lw	s2,28(a1)
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00f4f4:	01f8f8b3          	and	a7,a7,t6
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c00f4f8:	c86e                	sw	s11,16(sp)
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00f4fa:	00c8c8b3          	xor	a7,a7,a2
1c00f4fe:	fd469db7          	lui	s11,0xfd469
1c00f502:	98aa                	add	a7,a7,a0
1c00f504:	501d8d93          	addi	s11,s11,1281 # fd469501 <pulp__FC+0xfd469502>
1c00f508:	01b906b3          	add	a3,s2,s11
1c00f50c:	0998d8b3          	p.ror	a7,a7,s9
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c00f510:	0727aa23          	sw	s2,116(a5)
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c00f514:	98fe                	add	a7,a7,t6
1c00f516:	9636                	add	a2,a2,a3
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c00f518:	01f746b3          	xor	a3,a4,t6
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
1c00f51c:	0205af03          	lw	t5,32(a1)
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c00f520:	0116f6b3          	and	a3,a3,a7
1c00f524:	8eb9                	xor	a3,a3,a4
1c00f526:	6980aeb7          	lui	t4,0x6980a
1c00f52a:	9636                	add	a2,a2,a3
1c00f52c:	8d8e8e93          	addi	t4,t4,-1832 # 698098d8 <__l2_end+0x4d7f4830>
1c00f530:	01df06b3          	add	a3,t5,t4
1c00f534:	09865633          	p.ror	a2,a2,s8
1c00f538:	9646                	add	a2,a2,a7
1c00f53a:	9736                	add	a4,a4,a3
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
1c00f53c:	011fc6b3          	xor	a3,t6,a7
1c00f540:	07e7ac23          	sw	t5,120(a5)
1c00f544:	8ef1                	and	a3,a3,a2
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c00f546:	51c8                	lw	a0,36(a1)
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
1c00f548:	01f6c6b3          	xor	a3,a3,t6
1c00f54c:	96ba                	add	a3,a3,a4
1c00f54e:	8b44f737          	lui	a4,0x8b44f
1c00f552:	7af70713          	addi	a4,a4,1967 # 8b44f7af <pulp__FC+0x8b44f7b0>
1c00f556:	00e504b3          	add	s1,a0,a4
1c00f55a:	0866d6b3          	p.ror	a3,a3,t1
1c00f55e:	96b2                	add	a3,a3,a2
1c00f560:	9fa6                	add	t6,t6,s1
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c00f562:	00c8c4b3          	xor	s1,a7,a2
1c00f566:	8cf5                	and	s1,s1,a3
1c00f568:	dfe8                	sw	a0,124(a5)
1c00f56a:	0114c4b3          	xor	s1,s1,a7
1c00f56e:	94fe                	add	s1,s1,t6
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
1c00f570:	0285af83          	lw	t6,40(a1)
1c00f574:	7bd9                	lui	s7,0xffff6
1c00f576:	bb1b8b93          	addi	s7,s7,-1103 # ffff5bb1 <pulp__FC+0xffff5bb2>
1c00f57a:	017f8eb3          	add	t4,t6,s7
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c00f57e:	09a4d4b3          	p.ror	s1,s1,s10
1c00f582:	94b6                	add	s1,s1,a3
1c00f584:	98f6                	add	a7,a7,t4
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
1c00f586:	00d64eb3          	xor	t4,a2,a3
1c00f58a:	009efeb3          	and	t4,t4,s1
1c00f58e:	09f7a023          	sw	t6,128(a5)
1c00f592:	00ceceb3          	xor	t4,t4,a2
1c00f596:	9ec6                	add	t4,t4,a7
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
1c00f598:	02c5a883          	lw	a7,44(a1)
1c00f59c:	895cddb7          	lui	s11,0x895cd
1c00f5a0:	7bed8d93          	addi	s11,s11,1982 # 895cd7be <pulp__FC+0x895cd7bf>
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c00f5a4:	ca2a                	sw	a0,20(sp)
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
1c00f5a6:	099edeb3          	p.ror	t4,t4,s9
1c00f5aa:	01b88533          	add	a0,a7,s11
1c00f5ae:	9ea6                	add	t4,t4,s1
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
1c00f5b0:	0917a223          	sw	a7,132(a5)
1c00f5b4:	962a                	add	a2,a2,a0
1c00f5b6:	0096c533          	xor	a0,a3,s1
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
1c00f5ba:	0305a383          	lw	t2,48(a1)
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
1c00f5be:	01d57533          	and	a0,a0,t4
1c00f5c2:	8d35                	xor	a0,a0,a3
1c00f5c4:	6b901737          	lui	a4,0x6b901
1c00f5c8:	9532                	add	a0,a0,a2
1c00f5ca:	12270713          	addi	a4,a4,290 # 6b901122 <__l2_end+0x4f8ec07a>
1c00f5ce:	00e38633          	add	a2,t2,a4
1c00f5d2:	09855533          	p.ror	a0,a0,s8
1c00f5d6:	9576                	add	a0,a0,t4
1c00f5d8:	96b2                	add	a3,a3,a2
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
1c00f5da:	01d4c633          	xor	a2,s1,t4
1c00f5de:	8e69                	and	a2,a2,a0
1c00f5e0:	8e25                	xor	a2,a2,s1
1c00f5e2:	0877a423          	sw	t2,136(a5)
1c00f5e6:	96b2                	add	a3,a3,a2
1c00f5e8:	0866d6b3          	p.ror	a3,a3,t1
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
1c00f5ec:	0345a303          	lw	t1,52(a1)
1c00f5f0:	fd987db7          	lui	s11,0xfd987
1c00f5f4:	193d8d93          	addi	s11,s11,403 # fd987193 <pulp__FC+0xfd987194>
1c00f5f8:	01b30bb3          	add	s7,t1,s11
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
1c00f5fc:	00d50733          	add	a4,a0,a3
1c00f600:	94de                	add	s1,s1,s7
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
1c00f602:	00aecbb3          	xor	s7,t4,a0
1c00f606:	00ebfbb3          	and	s7,s7,a4
1c00f60a:	01dbcbb3          	xor	s7,s7,t4
1c00f60e:	94de                	add	s1,s1,s7
1c00f610:	0867a623          	sw	t1,140(a5)
1c00f614:	09a4dbb3          	p.ror	s7,s1,s10
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
1c00f618:	5d84                	lw	s1,56(a1)
1c00f61a:	a6794637          	lui	a2,0xa6794
1c00f61e:	38e60613          	addi	a2,a2,910 # a679438e <pulp__FC+0xa679438f>
1c00f622:	00c48b33          	add	s6,s1,a2
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
1c00f626:	9bba                	add	s7,s7,a4
1c00f628:	9eda                	add	t4,t4,s6
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
1c00f62a:	00e54b33          	xor	s6,a0,a4
1c00f62e:	017b7b33          	and	s6,s6,s7
1c00f632:	00ab4b33          	xor	s6,s6,a0
1c00f636:	0897a823          	sw	s1,144(a5)
1c00f63a:	9eda                	add	t4,t4,s6
1c00f63c:	099edb33          	p.ror	s6,t4,s9
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
1c00f640:	03c5ae83          	lw	t4,60(a1)
1c00f644:	49b416b7          	lui	a3,0x49b41
1c00f648:	82168693          	addi	a3,a3,-2015 # 49b40821 <__l2_end+0x2db2b779>
1c00f64c:	00de8633          	add	a2,t4,a3
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
1c00f650:	9b5e                	add	s6,s6,s7
1c00f652:	9532                	add	a0,a0,a2
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
1c00f654:	01774633          	xor	a2,a4,s7
1c00f658:	01667633          	and	a2,a2,s6
1c00f65c:	8e39                	xor	a2,a2,a4
1c00f65e:	9532                	add	a0,a0,a2
1c00f660:	09855633          	p.ror	a2,a0,s8
1c00f664:	4c22                	lw	s8,8(sp)
1c00f666:	f61e2d37          	lui	s10,0xf61e2
1c00f66a:	562d0d13          	addi	s10,s10,1378 # f61e2562 <pulp__FC+0xf61e2563>
1c00f66e:	965a                	add	a2,a2,s6
1c00f670:	01ac06b3          	add	a3,s8,s10
1c00f674:	9736                	add	a4,a4,a3

/* Round 2 */
		STEP(G, a, b, c, d, GET(1), 0xf61e2562, 5)
1c00f676:	00cb46b3          	xor	a3,s6,a2
1c00f67a:	0176f6b3          	and	a3,a3,s7
1c00f67e:	0166c6b3          	xor	a3,a3,s6
1c00f682:	4ded                	li	s11,27
1c00f684:	96ba                	add	a3,a3,a4
1c00f686:	c040b537          	lui	a0,0xc040b
1c00f68a:	09b6d6b3          	p.ror	a3,a3,s11
1c00f68e:	34050513          	addi	a0,a0,832 # c040b340 <pulp__FC+0xc040b341>
1c00f692:	96b2                	add	a3,a3,a2
1c00f694:	00ae0733          	add	a4,t3,a0
1c00f698:	9bba                	add	s7,s7,a4
		STEP(G, d, a, b, c, GET(6), 0xc040b340, 9)
1c00f69a:	00d64733          	xor	a4,a2,a3
1c00f69e:	01677733          	and	a4,a4,s6
1c00f6a2:	8f31                	xor	a4,a4,a2
1c00f6a4:	4d5d                	li	s10,23
1c00f6a6:	975e                	add	a4,a4,s7
1c00f6a8:	265e6bb7          	lui	s7,0x265e6
1c00f6ac:	09a75733          	p.ror	a4,a4,s10
1c00f6b0:	a51b8b93          	addi	s7,s7,-1455 # 265e5a51 <__l2_end+0xa5d09a9>
1c00f6b4:	9736                	add	a4,a4,a3
1c00f6b6:	01788533          	add	a0,a7,s7
1c00f6ba:	955a                	add	a0,a0,s6
		STEP(G, c, d, a, b, GET(11), 0x265e5a51, 14)
1c00f6bc:	00e6cb33          	xor	s6,a3,a4
1c00f6c0:	00cb7b33          	and	s6,s6,a2
1c00f6c4:	00db4b33          	xor	s6,s6,a3
1c00f6c8:	4cc9                	li	s9,18
1c00f6ca:	9b2a                	add	s6,s6,a0
1c00f6cc:	e9b6cc37          	lui	s8,0xe9b6c
1c00f6d0:	099b5b33          	p.ror	s6,s6,s9
1c00f6d4:	7aac0c13          	addi	s8,s8,1962 # e9b6c7aa <pulp__FC+0xe9b6c7ab>
1c00f6d8:	9b3a                	add	s6,s6,a4
1c00f6da:	01898533          	add	a0,s3,s8
1c00f6de:	962a                	add	a2,a2,a0
		STEP(G, b, c, d, a, GET(0), 0xe9b6c7aa, 20)
1c00f6e0:	01674533          	xor	a0,a4,s6
1c00f6e4:	8d75                	and	a0,a0,a3
1c00f6e6:	8d39                	xor	a0,a0,a4
1c00f6e8:	4c31                	li	s8,12
1c00f6ea:	9532                	add	a0,a0,a2
1c00f6ec:	d62f1bb7          	lui	s7,0xd62f1
1c00f6f0:	09855533          	p.ror	a0,a0,s8
1c00f6f4:	05db8b93          	addi	s7,s7,93 # d62f105d <pulp__FC+0xd62f105e>
1c00f6f8:	955a                	add	a0,a0,s6
1c00f6fa:	01740633          	add	a2,s0,s7
1c00f6fe:	96b2                	add	a3,a3,a2
		STEP(G, a, b, c, d, GET(5), 0xd62f105d, 5)
1c00f700:	00ab4633          	xor	a2,s6,a0
1c00f704:	8e79                	and	a2,a2,a4
1c00f706:	01664633          	xor	a2,a2,s6
1c00f70a:	96b2                	add	a3,a3,a2
1c00f70c:	02441bb7          	lui	s7,0x2441
1c00f710:	09b6d6b3          	p.ror	a3,a3,s11
1c00f714:	453b8b93          	addi	s7,s7,1107 # 2441453 <__L2+0x23c1453>
1c00f718:	96aa                	add	a3,a3,a0
1c00f71a:	017f8633          	add	a2,t6,s7
1c00f71e:	9732                	add	a4,a4,a2
		STEP(G, d, a, b, c, GET(10), 0x02441453, 9)
1c00f720:	00d54633          	xor	a2,a0,a3
1c00f724:	01667633          	and	a2,a2,s6
1c00f728:	8e29                	xor	a2,a2,a0
1c00f72a:	9732                	add	a4,a4,a2
1c00f72c:	d8a1ebb7          	lui	s7,0xd8a1e
1c00f730:	09a75733          	p.ror	a4,a4,s10
1c00f734:	681b8b93          	addi	s7,s7,1665 # d8a1e681 <pulp__FC+0xd8a1e682>
1c00f738:	9736                	add	a4,a4,a3
1c00f73a:	017e8633          	add	a2,t4,s7
1c00f73e:	9b32                	add	s6,s6,a2
		STEP(G, c, d, a, b, GET(15), 0xd8a1e681, 14)
1c00f740:	00e6c633          	xor	a2,a3,a4
1c00f744:	8e69                	and	a2,a2,a0
1c00f746:	8e35                	xor	a2,a2,a3
1c00f748:	4bc2                	lw	s7,16(sp)
1c00f74a:	9b32                	add	s6,s6,a2
1c00f74c:	e7d40637          	lui	a2,0xe7d40
1c00f750:	099b5b33          	p.ror	s6,s6,s9
1c00f754:	bc860613          	addi	a2,a2,-1080 # e7d3fbc8 <pulp__FC+0xe7d3fbc9>
1c00f758:	9b3a                	add	s6,s6,a4
1c00f75a:	965e                	add	a2,a2,s7
1c00f75c:	9532                	add	a0,a0,a2
		STEP(G, b, c, d, a, GET(4), 0xe7d3fbc8, 20)
1c00f75e:	01674633          	xor	a2,a4,s6
1c00f762:	8e75                	and	a2,a2,a3
1c00f764:	8e39                	xor	a2,a2,a4
1c00f766:	9532                	add	a0,a0,a2
1c00f768:	4652                	lw	a2,20(sp)
1c00f76a:	21e1dbb7          	lui	s7,0x21e1d
1c00f76e:	09855533          	p.ror	a0,a0,s8
1c00f772:	de6b8b93          	addi	s7,s7,-538 # 21e1cde6 <__l2_end+0x5e07d3e>
1c00f776:	955a                	add	a0,a0,s6
1c00f778:	9bb2                	add	s7,s7,a2
1c00f77a:	96de                	add	a3,a3,s7
		STEP(G, a, b, c, d, GET(9), 0x21e1cde6, 5)
1c00f77c:	00ab4bb3          	xor	s7,s6,a0
1c00f780:	00ebfbb3          	and	s7,s7,a4
1c00f784:	016bcbb3          	xor	s7,s7,s6
1c00f788:	9bb6                	add	s7,s7,a3
1c00f78a:	c3370637          	lui	a2,0xc3370
1c00f78e:	09bbdbb3          	p.ror	s7,s7,s11
1c00f792:	7d660613          	addi	a2,a2,2006 # c33707d6 <pulp__FC+0xc33707d7>
1c00f796:	9baa                	add	s7,s7,a0
1c00f798:	9626                	add	a2,a2,s1
1c00f79a:	9732                	add	a4,a4,a2
		STEP(G, d, a, b, c, GET(14), 0xc33707d6, 9)
1c00f79c:	01754633          	xor	a2,a0,s7
1c00f7a0:	01667633          	and	a2,a2,s6
1c00f7a4:	8e29                	xor	a2,a2,a0
1c00f7a6:	963a                	add	a2,a2,a4
1c00f7a8:	f4d51737          	lui	a4,0xf4d51
1c00f7ac:	09a65633          	p.ror	a2,a2,s10
1c00f7b0:	d8770713          	addi	a4,a4,-633 # f4d50d87 <pulp__FC+0xf4d50d88>
1c00f7b4:	965e                	add	a2,a2,s7
1c00f7b6:	9716                	add	a4,a4,t0
1c00f7b8:	9b3a                	add	s6,s6,a4
		STEP(G, c, d, a, b, GET(3), 0xf4d50d87, 14)
1c00f7ba:	00cbc733          	xor	a4,s7,a2
1c00f7be:	8f69                	and	a4,a4,a0
1c00f7c0:	01774733          	xor	a4,a4,s7
1c00f7c4:	9b3a                	add	s6,s6,a4
1c00f7c6:	455a1737          	lui	a4,0x455a1
1c00f7ca:	099b5b33          	p.ror	s6,s6,s9
1c00f7ce:	4ed70713          	addi	a4,a4,1261 # 455a14ed <__l2_end+0x2958c445>
1c00f7d2:	9b32                	add	s6,s6,a2
1c00f7d4:	977a                	add	a4,a4,t5
1c00f7d6:	953a                	add	a0,a0,a4
		STEP(G, b, c, d, a, GET(8), 0x455a14ed, 20)
1c00f7d8:	01664733          	xor	a4,a2,s6
1c00f7dc:	01777733          	and	a4,a4,s7
1c00f7e0:	8f31                	xor	a4,a4,a2
1c00f7e2:	953a                	add	a0,a0,a4
1c00f7e4:	a9e3f6b7          	lui	a3,0xa9e3f
1c00f7e8:	09855533          	p.ror	a0,a0,s8
1c00f7ec:	90568693          	addi	a3,a3,-1787 # a9e3e905 <pulp__FC+0xa9e3e906>
1c00f7f0:	955a                	add	a0,a0,s6
1c00f7f2:	969a                	add	a3,a3,t1
1c00f7f4:	9bb6                	add	s7,s7,a3
		STEP(G, a, b, c, d, GET(13), 0xa9e3e905, 5)
1c00f7f6:	00ab46b3          	xor	a3,s6,a0
1c00f7fa:	8ef1                	and	a3,a3,a2
1c00f7fc:	0166c6b3          	xor	a3,a3,s6
1c00f800:	9bb6                	add	s7,s7,a3
1c00f802:	09bbd6b3          	p.ror	a3,s7,s11
1c00f806:	4bb2                	lw	s7,12(sp)
1c00f808:	fcefa737          	lui	a4,0xfcefa
1c00f80c:	3f870713          	addi	a4,a4,1016 # fcefa3f8 <pulp__FC+0xfcefa3f9>
1c00f810:	96aa                	add	a3,a3,a0
1c00f812:	975e                	add	a4,a4,s7
1c00f814:	963a                	add	a2,a2,a4
		STEP(G, d, a, b, c, GET(2), 0xfcefa3f8, 9)
1c00f816:	00d54733          	xor	a4,a0,a3
1c00f81a:	01677733          	and	a4,a4,s6
1c00f81e:	8f29                	xor	a4,a4,a0
1c00f820:	963a                	add	a2,a2,a4
1c00f822:	09a65733          	p.ror	a4,a2,s10
1c00f826:	676f0637          	lui	a2,0x676f0
1c00f82a:	2d960613          	addi	a2,a2,729 # 676f02d9 <__l2_end+0x4b6db231>
1c00f82e:	9736                	add	a4,a4,a3
1c00f830:	964a                	add	a2,a2,s2
1c00f832:	9b32                	add	s6,s6,a2
		STEP(G, c, d, a, b, GET(7), 0x676f02d9, 14)
1c00f834:	00e6c633          	xor	a2,a3,a4
1c00f838:	8e69                	and	a2,a2,a0
1c00f83a:	8e35                	xor	a2,a2,a3
1c00f83c:	9b32                	add	s6,s6,a2
1c00f83e:	8d2a5637          	lui	a2,0x8d2a5
1c00f842:	099b5b33          	p.ror	s6,s6,s9
1c00f846:	c8a60613          	addi	a2,a2,-886 # 8d2a4c8a <pulp__FC+0x8d2a4c8b>
1c00f84a:	9b3a                	add	s6,s6,a4
1c00f84c:	961e                	add	a2,a2,t2
1c00f84e:	9532                	add	a0,a0,a2
		STEP(G, b, c, d, a, GET(12), 0x8d2a4c8a, 20)
1c00f850:	01674633          	xor	a2,a4,s6
1c00f854:	8e75                	and	a2,a2,a3
1c00f856:	8e39                	xor	a2,a2,a4
1c00f858:	9532                	add	a0,a0,a2
1c00f85a:	09855533          	p.ror	a0,a0,s8
1c00f85e:	fffa4637          	lui	a2,0xfffa4
1c00f862:	955a                	add	a0,a0,s6
1c00f864:	94260613          	addi	a2,a2,-1726 # fffa3942 <pulp__FC+0xfffa3943>

/* Round 3 */
		STEP(H, a, b, c, d, GET(5), 0xfffa3942, 4)
1c00f868:	00ab4bb3          	xor	s7,s6,a0
1c00f86c:	9622                	add	a2,a2,s0
1c00f86e:	96b2                	add	a3,a3,a2
1c00f870:	00ebc633          	xor	a2,s7,a4
1c00f874:	4cf1                	li	s9,28
1c00f876:	96b2                	add	a3,a3,a2
1c00f878:	8771f637          	lui	a2,0x8771f
1c00f87c:	0996d6b3          	p.ror	a3,a3,s9
1c00f880:	68160613          	addi	a2,a2,1665 # 8771f681 <pulp__FC+0x8771f682>
1c00f884:	96aa                	add	a3,a3,a0
1c00f886:	967a                	add	a2,a2,t5
1c00f888:	9732                	add	a4,a4,a2
		STEP(H2, d, a, b, c, GET(8), 0x8771f681, 11)
1c00f88a:	00dbc633          	xor	a2,s7,a3
1c00f88e:	4c55                	li	s8,21
1c00f890:	963a                	add	a2,a2,a4
1c00f892:	09865633          	p.ror	a2,a2,s8
1c00f896:	6d9d6737          	lui	a4,0x6d9d6
1c00f89a:	9636                	add	a2,a2,a3
1c00f89c:	12270713          	addi	a4,a4,290 # 6d9d6122 <__l2_end+0x519c107a>
		STEP(H, c, d, a, b, GET(11), 0x6d9d6122, 16)
1c00f8a0:	00c6cd33          	xor	s10,a3,a2
1c00f8a4:	9746                	add	a4,a4,a7
1c00f8a6:	975a                	add	a4,a4,s6
1c00f8a8:	00ad4b33          	xor	s6,s10,a0
1c00f8ac:	4bc1                	li	s7,16
1c00f8ae:	975a                	add	a4,a4,s6
1c00f8b0:	fde54b37          	lui	s6,0xfde54
1c00f8b4:	09775733          	p.ror	a4,a4,s7
1c00f8b8:	80cb0b13          	addi	s6,s6,-2036 # fde5380c <pulp__FC+0xfde5380d>
1c00f8bc:	9732                	add	a4,a4,a2
1c00f8be:	9b26                	add	s6,s6,s1
		STEP(H2, b, c, d, a, GET(14), 0xfde5380c, 23)
1c00f8c0:	00ed4d33          	xor	s10,s10,a4
1c00f8c4:	955a                	add	a0,a0,s6
1c00f8c6:	956a                	add	a0,a0,s10
1c00f8c8:	4b25                	li	s6,9
1c00f8ca:	09655533          	p.ror	a0,a0,s6
1c00f8ce:	953a                	add	a0,a0,a4
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
1c00f8d0:	00a74d33          	xor	s10,a4,a0
1c00f8d4:	4da2                	lw	s11,8(sp)
1c00f8d6:	c06a                	sw	s10,0(sp)
1c00f8d8:	a4befd37          	lui	s10,0xa4bef
1c00f8dc:	a44d0d13          	addi	s10,s10,-1468 # a4beea44 <pulp__FC+0xa4beea45>
1c00f8e0:	9dea                	add	s11,s11,s10
1c00f8e2:	96ee                	add	a3,a3,s11
1c00f8e4:	4d82                	lw	s11,0(sp)
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
1c00f8e6:	09d7aa23          	sw	t4,148(a5)
		a += saved_a;
		b += saved_b;
		c += saved_c;
		d += saved_d;

		ptr += 64;
1c00f8ea:	04058593          	addi	a1,a1,64
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
1c00f8ee:	00cdcd33          	xor	s10,s11,a2
1c00f8f2:	96ea                	add	a3,a3,s10
1c00f8f4:	4d42                	lw	s10,16(sp)
1c00f8f6:	4bdeddb7          	lui	s11,0x4bded
1c00f8fa:	fa9d8d93          	addi	s11,s11,-87 # 4bdecfa9 <__l2_end+0x2fdd7f01>
1c00f8fe:	9d6e                	add	s10,s10,s11
1c00f900:	966a                	add	a2,a2,s10
		STEP(H2, d, a, b, c, GET(4), 0x4bdecfa9, 11)
1c00f902:	4d02                	lw	s10,0(sp)
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
1c00f904:	0996d6b3          	p.ror	a3,a3,s9
1c00f908:	96aa                	add	a3,a3,a0
		STEP(H2, d, a, b, c, GET(4), 0x4bdecfa9, 11)
1c00f90a:	00dd4db3          	xor	s11,s10,a3
1c00f90e:	966e                	add	a2,a2,s11
1c00f910:	09865633          	p.ror	a2,a2,s8
1c00f914:	f6bb5db7          	lui	s11,0xf6bb5
1c00f918:	9636                	add	a2,a2,a3
1c00f91a:	b60d8d93          	addi	s11,s11,-1184 # f6bb4b60 <pulp__FC+0xf6bb4b61>
		STEP(H, c, d, a, b, GET(7), 0xf6bb4b60, 16)
1c00f91e:	00c6cd33          	xor	s10,a3,a2
1c00f922:	9dca                	add	s11,s11,s2
1c00f924:	976e                	add	a4,a4,s11
1c00f926:	00ad4db3          	xor	s11,s10,a0
1c00f92a:	976e                	add	a4,a4,s11
1c00f92c:	bebfcdb7          	lui	s11,0xbebfc
1c00f930:	09775733          	p.ror	a4,a4,s7
1c00f934:	c70d8d93          	addi	s11,s11,-912 # bebfbc70 <pulp__FC+0xbebfbc71>
1c00f938:	9732                	add	a4,a4,a2
1c00f93a:	9dfe                	add	s11,s11,t6
		STEP(H2, b, c, d, a, GET(10), 0xbebfbc70, 23)
1c00f93c:	00ed4d33          	xor	s10,s10,a4
1c00f940:	956e                	add	a0,a0,s11
1c00f942:	956a                	add	a0,a0,s10
1c00f944:	09655533          	p.ror	a0,a0,s6
1c00f948:	289b8d37          	lui	s10,0x289b8
1c00f94c:	953a                	add	a0,a0,a4
1c00f94e:	ec6d0d13          	addi	s10,s10,-314 # 289b7ec6 <__l2_end+0xc9a2e1e>
		STEP(H, a, b, c, d, GET(13), 0x289b7ec6, 4)
1c00f952:	00a74db3          	xor	s11,a4,a0
1c00f956:	9d1a                	add	s10,s10,t1
1c00f958:	96ea                	add	a3,a3,s10
1c00f95a:	00cdcd33          	xor	s10,s11,a2
1c00f95e:	9d36                	add	s10,s10,a3
1c00f960:	eaa126b7          	lui	a3,0xeaa12
1c00f964:	099d5d33          	p.ror	s10,s10,s9
1c00f968:	7fa68693          	addi	a3,a3,2042 # eaa127fa <pulp__FC+0xeaa127fb>
1c00f96c:	9d2a                	add	s10,s10,a0
1c00f96e:	96ce                	add	a3,a3,s3
		STEP(H2, d, a, b, c, GET(0), 0xeaa127fa, 11)
1c00f970:	01adcdb3          	xor	s11,s11,s10
1c00f974:	9636                	add	a2,a2,a3
1c00f976:	966e                	add	a2,a2,s11
1c00f978:	09865633          	p.ror	a2,a2,s8
1c00f97c:	d4ef3db7          	lui	s11,0xd4ef3
1c00f980:	966a                	add	a2,a2,s10
1c00f982:	085d8d93          	addi	s11,s11,133 # d4ef3085 <pulp__FC+0xd4ef3086>
		STEP(H, c, d, a, b, GET(3), 0xd4ef3085, 16)
1c00f986:	00cd46b3          	xor	a3,s10,a2
1c00f98a:	9d96                	add	s11,s11,t0
1c00f98c:	976e                	add	a4,a4,s11
1c00f98e:	00a6cdb3          	xor	s11,a3,a0
1c00f992:	9dba                	add	s11,s11,a4
1c00f994:	04882737          	lui	a4,0x4882
1c00f998:	097dddb3          	p.ror	s11,s11,s7
1c00f99c:	d0570713          	addi	a4,a4,-763 # 4881d05 <__L2+0x4801d05>
1c00f9a0:	9db2                	add	s11,s11,a2
1c00f9a2:	9772                	add	a4,a4,t3
1c00f9a4:	953a                	add	a0,a0,a4
		STEP(H2, b, c, d, a, GET(6), 0x04881d05, 23)
1c00f9a6:	01b6c6b3          	xor	a3,a3,s11
1c00f9aa:	96aa                	add	a3,a3,a0
1c00f9ac:	0966d6b3          	p.ror	a3,a3,s6
1c00f9b0:	96ee                	add	a3,a3,s11
		STEP(H, a, b, c, d, GET(9), 0xd9d4d039, 4)
1c00f9b2:	00ddc533          	xor	a0,s11,a3
1c00f9b6:	4752                	lw	a4,20(sp)
1c00f9b8:	c02a                	sw	a0,0(sp)
1c00f9ba:	d9d4d537          	lui	a0,0xd9d4d
1c00f9be:	03950513          	addi	a0,a0,57 # d9d4d039 <pulp__FC+0xd9d4d03a>
1c00f9c2:	972a                	add	a4,a4,a0
1c00f9c4:	9d3a                	add	s10,s10,a4
1c00f9c6:	4702                	lw	a4,0(sp)
1c00f9c8:	00c74533          	xor	a0,a4,a2
1c00f9cc:	9d2a                	add	s10,s10,a0
1c00f9ce:	e6dba537          	lui	a0,0xe6dba
1c00f9d2:	099d5cb3          	p.ror	s9,s10,s9
1c00f9d6:	9e550513          	addi	a0,a0,-1563 # e6db99e5 <pulp__FC+0xe6db99e6>
1c00f9da:	9cb6                	add	s9,s9,a3
1c00f9dc:	951e                	add	a0,a0,t2
		STEP(H2, d, a, b, c, GET(12), 0xe6db99e5, 11)
1c00f9de:	01974733          	xor	a4,a4,s9
1c00f9e2:	962a                	add	a2,a2,a0
1c00f9e4:	963a                	add	a2,a2,a4
1c00f9e6:	09865c33          	p.ror	s8,a2,s8
1c00f9ea:	1fa28737          	lui	a4,0x1fa28
1c00f9ee:	9c66                	add	s8,s8,s9
1c00f9f0:	cf870713          	addi	a4,a4,-776 # 1fa27cf8 <__l2_end+0x3a12c50>
		STEP(H, c, d, a, b, GET(15), 0x1fa27cf8, 16)
1c00f9f4:	018ccd33          	xor	s10,s9,s8
1c00f9f8:	9776                	add	a4,a4,t4
1c00f9fa:	9dba                	add	s11,s11,a4
1c00f9fc:	00dd4733          	xor	a4,s10,a3
1c00fa00:	9dba                	add	s11,s11,a4
1c00fa02:	097ddbb3          	p.ror	s7,s11,s7
1c00fa06:	4db2                	lw	s11,12(sp)
1c00fa08:	c4ac5737          	lui	a4,0xc4ac5
1c00fa0c:	66570713          	addi	a4,a4,1637 # c4ac5665 <pulp__FC+0xc4ac5666>
1c00fa10:	9be2                	add	s7,s7,s8
1c00fa12:	976e                	add	a4,a4,s11
		STEP(H2, b, c, d, a, GET(2), 0xc4ac5665, 23)
1c00fa14:	017d4d33          	xor	s10,s10,s7
1c00fa18:	96ba                	add	a3,a3,a4
1c00fa1a:	f4292737          	lui	a4,0xf4292
1c00fa1e:	96ea                	add	a3,a3,s10
1c00fa20:	24470713          	addi	a4,a4,580 # f4292244 <pulp__FC+0xf4292245>
1c00fa24:	0966db33          	p.ror	s6,a3,s6
1c00fa28:	99ba                	add	s3,s3,a4
1c00fa2a:	9b5e                	add	s6,s6,s7
1c00fa2c:	99e6                	add	s3,s3,s9
		STEP(I, a, b, c, d, GET(0), 0xf4292244, 6)
1c00fa2e:	fffc4c93          	not	s9,s8
1c00fa32:	016cecb3          	or	s9,s9,s6
1c00fa36:	017cccb3          	xor	s9,s9,s7
1c00fa3a:	432b0737          	lui	a4,0x432b0
1c00fa3e:	4669                	li	a2,26
1c00fa40:	f9770713          	addi	a4,a4,-105 # 432aff97 <__l2_end+0x2729aeef>
1c00fa44:	9cce                	add	s9,s9,s3
1c00fa46:	08ccdcb3          	p.ror	s9,s9,a2
1c00fa4a:	993a                	add	s2,s2,a4
1c00fa4c:	9cda                	add	s9,s9,s6
1c00fa4e:	9962                	add	s2,s2,s8
		STEP(I, d, a, b, c, GET(7), 0x432aff97, 10)
1c00fa50:	fffbcc13          	not	s8,s7
1c00fa54:	019c6c33          	or	s8,s8,s9
1c00fa58:	016c4c33          	xor	s8,s8,s6
1c00fa5c:	ab942737          	lui	a4,0xab942
1c00fa60:	4559                	li	a0,22
1c00fa62:	9c4a                	add	s8,s8,s2
1c00fa64:	3a770713          	addi	a4,a4,935 # ab9423a7 <pulp__FC+0xab9423a8>
1c00fa68:	08ac5c33          	p.ror	s8,s8,a0
1c00fa6c:	94ba                	add	s1,s1,a4
1c00fa6e:	9c66                	add	s8,s8,s9
1c00fa70:	94de                	add	s1,s1,s7
		STEP(I, c, d, a, b, GET(14), 0xab9423a7, 15)
1c00fa72:	fffb4b93          	not	s7,s6
1c00fa76:	018bebb3          	or	s7,s7,s8
1c00fa7a:	019bcbb3          	xor	s7,s7,s9
1c00fa7e:	fc93a737          	lui	a4,0xfc93a
1c00fa82:	4945                	li	s2,17
1c00fa84:	9ba6                	add	s7,s7,s1
1c00fa86:	03970713          	addi	a4,a4,57 # fc93a039 <pulp__FC+0xfc93a03a>
1c00fa8a:	9722                	add	a4,a4,s0
1c00fa8c:	092bdbb3          	p.ror	s7,s7,s2
1c00fa90:	9be2                	add	s7,s7,s8
1c00fa92:	9b3a                	add	s6,s6,a4
		STEP(I, b, c, d, a, GET(5), 0xfc93a039, 21)
1c00fa94:	fffcc713          	not	a4,s9
1c00fa98:	01776733          	or	a4,a4,s7
1c00fa9c:	01874733          	xor	a4,a4,s8
1c00faa0:	46ad                	li	a3,11
1c00faa2:	975a                	add	a4,a4,s6
1c00faa4:	08d75733          	p.ror	a4,a4,a3
1c00faa8:	655b6437          	lui	s0,0x655b6
1c00faac:	975e                	add	a4,a4,s7
1c00faae:	9c340413          	addi	s0,s0,-1597 # 655b59c3 <__l2_end+0x495a091b>
		STEP(I, a, b, c, d, GET(12), 0x655b59c3, 6)
1c00fab2:	fffc4493          	not	s1,s8
1c00fab6:	93a2                	add	t2,t2,s0
1c00fab8:	8cd9                	or	s1,s1,a4
1c00faba:	9c9e                	add	s9,s9,t2
1c00fabc:	0174c4b3          	xor	s1,s1,s7
1c00fac0:	9ca6                	add	s9,s9,s1
1c00fac2:	08ccdcb3          	p.ror	s9,s9,a2
1c00fac6:	8f0cd3b7          	lui	t2,0x8f0cd
1c00faca:	9cba                	add	s9,s9,a4
1c00facc:	c9238393          	addi	t2,t2,-878 # 8f0ccc92 <pulp__FC+0x8f0ccc93>
		STEP(I, d, a, b, c, GET(3), 0x8f0ccc92, 10)
1c00fad0:	fffbc413          	not	s0,s7
1c00fad4:	929e                	add	t0,t0,t2
1c00fad6:	01946433          	or	s0,s0,s9
1c00fada:	9c16                	add	s8,s8,t0
1c00fadc:	8c39                	xor	s0,s0,a4
1c00fade:	9c22                	add	s8,s8,s0
1c00fae0:	08ac5c33          	p.ror	s8,s8,a0
1c00fae4:	ffeff2b7          	lui	t0,0xffeff
1c00fae8:	9c66                	add	s8,s8,s9
1c00faea:	47d28293          	addi	t0,t0,1149 # ffeff47d <pulp__FC+0xffeff47e>
		STEP(I, c, d, a, b, GET(10), 0xffeff47d, 15)
1c00faee:	fff74393          	not	t2,a4
1c00faf2:	9f96                	add	t6,t6,t0
1c00faf4:	0183e3b3          	or	t2,t2,s8
1c00faf8:	9bfe                	add	s7,s7,t6
1c00fafa:	0193c3b3          	xor	t2,t2,s9
1c00fafe:	42a2                	lw	t0,8(sp)
1c00fb00:	9b9e                	add	s7,s7,t2
1c00fb02:	85846fb7          	lui	t6,0x85846
1c00fb06:	092bdbb3          	p.ror	s7,s7,s2
1c00fb0a:	dd1f8f93          	addi	t6,t6,-559 # 85845dd1 <pulp__FC+0x85845dd2>
1c00fb0e:	9be2                	add	s7,s7,s8
1c00fb10:	9f96                	add	t6,t6,t0
		STEP(I, b, c, d, a, GET(1), 0x85845dd1, 21)
1c00fb12:	fffcc293          	not	t0,s9
1c00fb16:	0172e2b3          	or	t0,t0,s7
1c00fb1a:	0182c2b3          	xor	t0,t0,s8
1c00fb1e:	977e                	add	a4,a4,t6
1c00fb20:	9716                	add	a4,a4,t0
1c00fb22:	08d75733          	p.ror	a4,a4,a3
1c00fb26:	6fa88fb7          	lui	t6,0x6fa88
1c00fb2a:	975e                	add	a4,a4,s7
1c00fb2c:	e4ff8f93          	addi	t6,t6,-433 # 6fa87e4f <__l2_end+0x53a72da7>
		STEP(I, a, b, c, d, GET(8), 0x6fa87e4f, 6)
1c00fb30:	fffc4293          	not	t0,s8
1c00fb34:	9f7e                	add	t5,t5,t6
1c00fb36:	00e2e2b3          	or	t0,t0,a4
1c00fb3a:	9cfa                	add	s9,s9,t5
1c00fb3c:	0172c2b3          	xor	t0,t0,s7
1c00fb40:	9c96                	add	s9,s9,t0
1c00fb42:	08ccdcb3          	p.ror	s9,s9,a2
1c00fb46:	fe2cef37          	lui	t5,0xfe2ce
1c00fb4a:	9cba                	add	s9,s9,a4
1c00fb4c:	6e0f0f13          	addi	t5,t5,1760 # fe2ce6e0 <pulp__FC+0xfe2ce6e1>
		STEP(I, d, a, b, c, GET(15), 0xfe2ce6e0, 10)
1c00fb50:	fffbcf93          	not	t6,s7
1c00fb54:	9efa                	add	t4,t4,t5
1c00fb56:	019fefb3          	or	t6,t6,s9
1c00fb5a:	9c76                	add	s8,s8,t4
1c00fb5c:	00efcfb3          	xor	t6,t6,a4
1c00fb60:	9c7e                	add	s8,s8,t6
1c00fb62:	08ac5c33          	p.ror	s8,s8,a0
1c00fb66:	a3014eb7          	lui	t4,0xa3014
1c00fb6a:	9c66                	add	s8,s8,s9
1c00fb6c:	314e8e93          	addi	t4,t4,788 # a3014314 <pulp__FC+0xa3014315>
		STEP(I, c, d, a, b, GET(6), 0xa3014314, 15)
1c00fb70:	fff74f13          	not	t5,a4
1c00fb74:	9e76                	add	t3,t3,t4
1c00fb76:	018f6f33          	or	t5,t5,s8
1c00fb7a:	9bf2                	add	s7,s7,t3
1c00fb7c:	019f4f33          	xor	t5,t5,s9
1c00fb80:	9bfa                	add	s7,s7,t5
1c00fb82:	092bdbb3          	p.ror	s7,s7,s2
1c00fb86:	4e081e37          	lui	t3,0x4e081
1c00fb8a:	9be2                	add	s7,s7,s8
1c00fb8c:	1a1e0e13          	addi	t3,t3,417 # 4e0811a1 <__l2_end+0x3206c0f9>
		STEP(I, b, c, d, a, GET(13), 0x4e0811a1, 21)
1c00fb90:	fffcce93          	not	t4,s9
1c00fb94:	9372                	add	t1,t1,t3
1c00fb96:	017eeeb3          	or	t4,t4,s7
1c00fb9a:	018eceb3          	xor	t4,t4,s8
1c00fb9e:	971a                	add	a4,a4,t1
1c00fba0:	9776                	add	a4,a4,t4
1c00fba2:	4d42                	lw	s10,16(sp)
1c00fba4:	08d75733          	p.ror	a4,a4,a3
1c00fba8:	f7538337          	lui	t1,0xf7538
1c00fbac:	975e                	add	a4,a4,s7
		STEP(I, a, b, c, d, GET(4), 0xf7537e82, 6)
1c00fbae:	fffc4e13          	not	t3,s8
1c00fbb2:	e8230313          	addi	t1,t1,-382 # f7537e82 <pulp__FC+0xf7537e83>
1c00fbb6:	936a                	add	t1,t1,s10
1c00fbb8:	00ee6e33          	or	t3,t3,a4
1c00fbbc:	017e4e33          	xor	t3,t3,s7
1c00fbc0:	9c9a                	add	s9,s9,t1
1c00fbc2:	9cf2                	add	s9,s9,t3
1c00fbc4:	08ccd633          	p.ror	a2,s9,a2
1c00fbc8:	bd3af337          	lui	t1,0xbd3af
1c00fbcc:	963a                	add	a2,a2,a4
1c00fbce:	23530313          	addi	t1,t1,565 # bd3af235 <pulp__FC+0xbd3af236>
		STEP(I, d, a, b, c, GET(11), 0xbd3af235, 10)
1c00fbd2:	fffbce13          	not	t3,s7
1c00fbd6:	989a                	add	a7,a7,t1
1c00fbd8:	00ce6e33          	or	t3,t3,a2
1c00fbdc:	00ee4e33          	xor	t3,t3,a4
1c00fbe0:	9c46                	add	s8,s8,a7
1c00fbe2:	9c72                	add	s8,s8,t3
1c00fbe4:	08ac5533          	p.ror	a0,s8,a0
1c00fbe8:	2ad7d8b7          	lui	a7,0x2ad7d
1c00fbec:	9532                	add	a0,a0,a2
		STEP(I, c, d, a, b, GET(2), 0x2ad7d2bb, 15)
1c00fbee:	fff74313          	not	t1,a4
1c00fbf2:	2bb88893          	addi	a7,a7,699 # 2ad7d2bb <__l2_end+0xed68213>
1c00fbf6:	98ee                	add	a7,a7,s11
1c00fbf8:	00a36333          	or	t1,t1,a0
1c00fbfc:	9bc6                	add	s7,s7,a7
1c00fbfe:	00c34333          	xor	t1,t1,a2
1c00fc02:	9b9a                	add	s7,s7,t1
1c00fc04:	4dd2                	lw	s11,20(sp)
1c00fc06:	092bd933          	p.ror	s2,s7,s2
1c00fc0a:	eb86d8b7          	lui	a7,0xeb86d
1c00fc0e:	992a                	add	s2,s2,a0
1c00fc10:	39188893          	addi	a7,a7,913 # eb86d391 <pulp__FC+0xeb86d392>
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
1c00fc14:	fff64313          	not	t1,a2
		a += saved_a;
1c00fc18:	4e62                	lw	t3,24(sp)
	} while (size -= 64);
1c00fc1a:	4ef2                	lw	t4,28(sp)
1c00fc1c:	98ee                	add	a7,a7,s11
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
1c00fc1e:	01236333          	or	t1,t1,s2
1c00fc22:	9746                	add	a4,a4,a7
1c00fc24:	00a34333          	xor	t1,t1,a0
1c00fc28:	971a                	add	a4,a4,t1
1c00fc2a:	08d75733          	p.ror	a4,a4,a3
		a += saved_a;
1c00fc2e:	9e32                	add	t3,t3,a2
	} while (size -= 64);
1c00fc30:	1efd                	addi	t4,t4,-1
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
1c00fc32:	974a                	add	a4,a4,s2
		a += saved_a;
1c00fc34:	cc72                	sw	t3,24(sp)
	} while (size -= 64);
1c00fc36:	ce76                	sw	t4,28(sp)
		b += saved_b;
1c00fc38:	983a                	add	a6,a6,a4
		c += saved_c;
1c00fc3a:	9a4a                	add	s4,s4,s2
		d += saved_d;
1c00fc3c:	9aaa                	add	s5,s5,a0
	} while (size -= 64);
1c00fc3e:	f80e9a63          	bnez	t4,1c00f3d2 <body+0x38>
	ctx->b = b;
	ctx->c = c;
	ctx->d = d;

	return ptr;
}
1c00fc42:	4436                	lw	s0,76(sp)
	ctx->c = c;
1c00fc44:	0147a823          	sw	s4,16(a5)
	ctx->d = d;
1c00fc48:	0157aa23          	sw	s5,20(a5)
	ctx->a = a;
1c00fc4c:	01c7a423          	sw	t3,8(a5)
	ctx->b = b;
1c00fc50:	0107a623          	sw	a6,12(a5)
}
1c00fc54:	44a6                	lw	s1,72(sp)
1c00fc56:	4916                	lw	s2,68(sp)
1c00fc58:	4986                	lw	s3,64(sp)
1c00fc5a:	5a72                	lw	s4,60(sp)
1c00fc5c:	5ae2                	lw	s5,56(sp)
1c00fc5e:	5b52                	lw	s6,52(sp)
1c00fc60:	5bc2                	lw	s7,48(sp)
1c00fc62:	5c32                	lw	s8,44(sp)
1c00fc64:	5ca2                	lw	s9,40(sp)
1c00fc66:	5d12                	lw	s10,36(sp)
1c00fc68:	5d82                	lw	s11,32(sp)
1c00fc6a:	852e                	mv	a0,a1
1c00fc6c:	6161                	addi	sp,sp,80
1c00fc6e:	8082                	ret

1c00fc70 <MD5_Init>:

void MD5_Init(MD5_CTX *ctx)
{
	ctx->a = 0x67452301;
1c00fc70:	674527b7          	lui	a5,0x67452
1c00fc74:	30178793          	addi	a5,a5,769 # 67452301 <__l2_end+0x4b43d259>
1c00fc78:	c51c                	sw	a5,8(a0)
	ctx->b = 0xefcdab89;
1c00fc7a:	efcdb7b7          	lui	a5,0xefcdb
1c00fc7e:	b8978793          	addi	a5,a5,-1143 # efcdab89 <pulp__FC+0xefcdab8a>
1c00fc82:	c55c                	sw	a5,12(a0)
	ctx->c = 0x98badcfe;
1c00fc84:	98bae7b7          	lui	a5,0x98bae
1c00fc88:	cfe78793          	addi	a5,a5,-770 # 98badcfe <pulp__FC+0x98badcff>
1c00fc8c:	c91c                	sw	a5,16(a0)
	ctx->d = 0x10325476;
1c00fc8e:	103257b7          	lui	a5,0x10325
1c00fc92:	47678793          	addi	a5,a5,1142 # 10325476 <__l1_end+0x32544e>
1c00fc96:	c95c                	sw	a5,20(a0)

	ctx->lo = 0;
1c00fc98:	00052023          	sw	zero,0(a0)
	ctx->hi = 0;
1c00fc9c:	00052223          	sw	zero,4(a0)
}
1c00fca0:	8082                	ret

1c00fca2 <MD5_Update>:

void MD5_Update(MD5_CTX *ctx, const void *data, unsigned long size)
{
1c00fca2:	1101                	addi	sp,sp,-32
1c00fca4:	cc22                	sw	s0,24(sp)
1c00fca6:	842a                	mv	s0,a0
	MD5_u32plus saved_lo;
	unsigned long used, available;

	saved_lo = ctx->lo;
1c00fca8:	4108                	lw	a0,0(a0)
{
1c00fcaa:	ca26                	sw	s1,20(sp)
1c00fcac:	c84a                	sw	s2,16(sp)
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
1c00fcae:	00c507b3          	add	a5,a0,a2
{
1c00fcb2:	ce06                	sw	ra,28(sp)
1c00fcb4:	c64e                	sw	s3,12(sp)
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
1c00fcb6:	c5d7b7b3          	p.bclr	a5,a5,2,29
1c00fcba:	c01c                	sw	a5,0(s0)
{
1c00fcbc:	892e                	mv	s2,a1
1c00fcbe:	84b2                	mv	s1,a2
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
1c00fcc0:	00a7f563          	bleu	a0,a5,1c00fcca <MD5_Update+0x28>
		ctx->hi++;
1c00fcc4:	405c                	lw	a5,4(s0)
1c00fcc6:	0785                	addi	a5,a5,1
1c00fcc8:	c05c                	sw	a5,4(s0)
	ctx->hi += size >> 29;
1c00fcca:	4058                	lw	a4,4(s0)
1c00fccc:	01d4d793          	srli	a5,s1,0x1d

	used = saved_lo & 0x3f;
1c00fcd0:	f2653533          	p.bclr	a0,a0,25,6
	ctx->hi += size >> 29;
1c00fcd4:	97ba                	add	a5,a5,a4
1c00fcd6:	c05c                	sw	a5,4(s0)

	if (used) {
1c00fcd8:	c129                	beqz	a0,1c00fd1a <MD5_Update+0x78>
		available = 64 - used;
1c00fcda:	04000993          	li	s3,64
1c00fcde:	40a989b3          	sub	s3,s3,a0
1c00fce2:	0561                	addi	a0,a0,24
1c00fce4:	9522                	add	a0,a0,s0

		if (size < available) {
1c00fce6:	0134fc63          	bleu	s3,s1,1c00fcfe <MD5_Update+0x5c>
			memcpy(&ctx->buffer[used], data, size);
1c00fcea:	8626                	mv	a2,s1
1c00fcec:	85ca                	mv	a1,s2
		data = body(ctx, data, size & ~(unsigned long)0x3f);
		size &= 0x3f;
	}

	memcpy(ctx->buffer, data, size);
}
1c00fcee:	4462                	lw	s0,24(sp)
1c00fcf0:	40f2                	lw	ra,28(sp)
1c00fcf2:	44d2                	lw	s1,20(sp)
1c00fcf4:	4942                	lw	s2,16(sp)
1c00fcf6:	49b2                	lw	s3,12(sp)
1c00fcf8:	6105                	addi	sp,sp,32
	memcpy(ctx->buffer, data, size);
1c00fcfa:	37b0206f          	j	1c012874 <memcpy>
		memcpy(&ctx->buffer[used], data, available);
1c00fcfe:	85ca                	mv	a1,s2
1c00fd00:	864e                	mv	a2,s3
1c00fd02:	373020ef          	jal	ra,1c012874 <memcpy>
		body(ctx, ctx->buffer, 64);
1c00fd06:	04000613          	li	a2,64
1c00fd0a:	01840593          	addi	a1,s0,24
1c00fd0e:	8522                	mv	a0,s0
		data = (const unsigned char *)data + available;
1c00fd10:	994e                	add	s2,s2,s3
		size -= available;
1c00fd12:	413484b3          	sub	s1,s1,s3
		body(ctx, ctx->buffer, 64);
1c00fd16:	e84ff0ef          	jal	ra,1c00f39a <body>
	if (size >= 64) {
1c00fd1a:	03f00793          	li	a5,63
1c00fd1e:	0097fb63          	bleu	s1,a5,1c00fd34 <MD5_Update+0x92>
		data = body(ctx, data, size & ~(unsigned long)0x3f);
1c00fd22:	ca04b633          	p.bclr	a2,s1,5,0
1c00fd26:	85ca                	mv	a1,s2
1c00fd28:	8522                	mv	a0,s0
1c00fd2a:	e70ff0ef          	jal	ra,1c00f39a <body>
1c00fd2e:	892a                	mv	s2,a0
		size &= 0x3f;
1c00fd30:	f264b4b3          	p.bclr	s1,s1,25,6
	memcpy(ctx->buffer, data, size);
1c00fd34:	8626                	mv	a2,s1
1c00fd36:	85ca                	mv	a1,s2
1c00fd38:	01840513          	addi	a0,s0,24
1c00fd3c:	bf4d                	j	1c00fcee <MD5_Update+0x4c>

1c00fd3e <MD5_Final>:
	(dst)[1] = (unsigned char)((src) >> 8); \
	(dst)[2] = (unsigned char)((src) >> 16); \
	(dst)[3] = (unsigned char)((src) >> 24);

void MD5_Final(unsigned char *result, MD5_CTX *ctx)
{
1c00fd3e:	1141                	addi	sp,sp,-16
1c00fd40:	c226                	sw	s1,4(sp)
1c00fd42:	84aa                	mv	s1,a0
	unsigned long used, available;

	used = ctx->lo & 0x3f;
1c00fd44:	4188                	lw	a0,0(a1)
{
1c00fd46:	c422                	sw	s0,8(sp)
1c00fd48:	c04a                	sw	s2,0(sp)
	used = ctx->lo & 0x3f;
1c00fd4a:	f2653533          	p.bclr	a0,a0,25,6

	ctx->buffer[used++] = 0x80;
1c00fd4e:	00a58733          	add	a4,a1,a0
{
1c00fd52:	c606                	sw	ra,12(sp)
	ctx->buffer[used++] = 0x80;
1c00fd54:	00150793          	addi	a5,a0,1
1c00fd58:	f8000693          	li	a3,-128

	available = 64 - used;
1c00fd5c:	04000613          	li	a2,64
	ctx->buffer[used++] = 0x80;
1c00fd60:	00d70c23          	sb	a3,24(a4)
	available = 64 - used;
1c00fd64:	8e1d                	sub	a2,a2,a5

	if (available < 8) {
1c00fd66:	471d                	li	a4,7
{
1c00fd68:	842e                	mv	s0,a1
1c00fd6a:	01858913          	addi	s2,a1,24
	if (available < 8) {
1c00fd6e:	02c76063          	bltu	a4,a2,1c00fd8e <MD5_Final+0x50>
		memset(&ctx->buffer[used], 0, available);
1c00fd72:	0565                	addi	a0,a0,25
1c00fd74:	4581                	li	a1,0
1c00fd76:	9522                	add	a0,a0,s0
1c00fd78:	2ed020ef          	jal	ra,1c012864 <memset>
		body(ctx, ctx->buffer, 64);
1c00fd7c:	04000613          	li	a2,64
1c00fd80:	85ca                	mv	a1,s2
1c00fd82:	8522                	mv	a0,s0
1c00fd84:	e16ff0ef          	jal	ra,1c00f39a <body>
		used = 0;
		available = 64;
1c00fd88:	04000613          	li	a2,64
		used = 0;
1c00fd8c:	4781                	li	a5,0
	}

	memset(&ctx->buffer[used], 0, available - 8);
1c00fd8e:	01878513          	addi	a0,a5,24
1c00fd92:	1661                	addi	a2,a2,-8
1c00fd94:	4581                	li	a1,0
1c00fd96:	9522                	add	a0,a0,s0
1c00fd98:	2cd020ef          	jal	ra,1c012864 <memset>

	ctx->lo <<= 3;
1c00fd9c:	401c                	lw	a5,0(s0)
	OUT(&ctx->buffer[56], ctx->lo)
	OUT(&ctx->buffer[60], ctx->hi)

	body(ctx, ctx->buffer, 64);
1c00fd9e:	85ca                	mv	a1,s2
1c00fda0:	04000613          	li	a2,64
	ctx->lo <<= 3;
1c00fda4:	078e                	slli	a5,a5,0x3
	OUT(&ctx->buffer[56], ctx->lo)
1c00fda6:	873e                	mv	a4,a5
1c00fda8:	04e40823          	sb	a4,80(s0)
1c00fdac:	0087d713          	srli	a4,a5,0x8
	ctx->lo <<= 3;
1c00fdb0:	c01c                	sw	a5,0(s0)
	OUT(&ctx->buffer[56], ctx->lo)
1c00fdb2:	04e408a3          	sb	a4,81(s0)
1c00fdb6:	0107d713          	srli	a4,a5,0x10
1c00fdba:	83e1                	srli	a5,a5,0x18
1c00fdbc:	04f409a3          	sb	a5,83(s0)
	OUT(&ctx->buffer[60], ctx->hi)
1c00fdc0:	405c                	lw	a5,4(s0)
	OUT(&ctx->buffer[56], ctx->lo)
1c00fdc2:	04e40923          	sb	a4,82(s0)
	OUT(&ctx->buffer[60], ctx->hi)
1c00fdc6:	873e                	mv	a4,a5
1c00fdc8:	04e40a23          	sb	a4,84(s0)
1c00fdcc:	0087d713          	srli	a4,a5,0x8
1c00fdd0:	04e40aa3          	sb	a4,85(s0)
1c00fdd4:	0107d713          	srli	a4,a5,0x10
1c00fdd8:	83e1                	srli	a5,a5,0x18
1c00fdda:	04f40ba3          	sb	a5,87(s0)
1c00fdde:	04e40b23          	sb	a4,86(s0)
	body(ctx, ctx->buffer, 64);
1c00fde2:	8522                	mv	a0,s0
1c00fde4:	db6ff0ef          	jal	ra,1c00f39a <body>

	OUT(&result[0], ctx->a)
1c00fde8:	441c                	lw	a5,8(s0)
	OUT(&result[4], ctx->b)
	OUT(&result[8], ctx->c)
	OUT(&result[12], ctx->d)

	memset(ctx, 0, sizeof(*ctx));
1c00fdea:	8522                	mv	a0,s0
1c00fdec:	09800613          	li	a2,152
	OUT(&result[0], ctx->a)
1c00fdf0:	00f48023          	sb	a5,0(s1)
1c00fdf4:	441c                	lw	a5,8(s0)
	memset(ctx, 0, sizeof(*ctx));
1c00fdf6:	4581                	li	a1,0
	OUT(&result[0], ctx->a)
1c00fdf8:	83a1                	srli	a5,a5,0x8
1c00fdfa:	00f480a3          	sb	a5,1(s1)
1c00fdfe:	00a45783          	lhu	a5,10(s0)
1c00fe02:	00f48123          	sb	a5,2(s1)
1c00fe06:	00b44783          	lbu	a5,11(s0)
1c00fe0a:	00f481a3          	sb	a5,3(s1)
	OUT(&result[4], ctx->b)
1c00fe0e:	445c                	lw	a5,12(s0)
1c00fe10:	00f48223          	sb	a5,4(s1)
1c00fe14:	445c                	lw	a5,12(s0)
1c00fe16:	83a1                	srli	a5,a5,0x8
1c00fe18:	00f482a3          	sb	a5,5(s1)
1c00fe1c:	00e45783          	lhu	a5,14(s0)
1c00fe20:	00f48323          	sb	a5,6(s1)
1c00fe24:	00f44783          	lbu	a5,15(s0)
1c00fe28:	00f483a3          	sb	a5,7(s1)
	OUT(&result[8], ctx->c)
1c00fe2c:	481c                	lw	a5,16(s0)
1c00fe2e:	00f48423          	sb	a5,8(s1)
1c00fe32:	481c                	lw	a5,16(s0)
1c00fe34:	83a1                	srli	a5,a5,0x8
1c00fe36:	00f484a3          	sb	a5,9(s1)
1c00fe3a:	01245783          	lhu	a5,18(s0)
1c00fe3e:	00f48523          	sb	a5,10(s1)
1c00fe42:	01344783          	lbu	a5,19(s0)
1c00fe46:	00f485a3          	sb	a5,11(s1)
	OUT(&result[12], ctx->d)
1c00fe4a:	485c                	lw	a5,20(s0)
1c00fe4c:	00f48623          	sb	a5,12(s1)
1c00fe50:	485c                	lw	a5,20(s0)
1c00fe52:	83a1                	srli	a5,a5,0x8
1c00fe54:	00f486a3          	sb	a5,13(s1)
1c00fe58:	01645783          	lhu	a5,22(s0)
1c00fe5c:	00f48723          	sb	a5,14(s1)
1c00fe60:	01744783          	lbu	a5,23(s0)
1c00fe64:	00f487a3          	sb	a5,15(s1)
}
1c00fe68:	40b2                	lw	ra,12(sp)
1c00fe6a:	4422                	lw	s0,8(sp)
1c00fe6c:	4492                	lw	s1,4(sp)
1c00fe6e:	4902                	lw	s2,0(sp)
1c00fe70:	0141                	addi	sp,sp,16
	memset(ctx, 0, sizeof(*ctx));
1c00fe72:	1f30206f          	j	1c012864 <memset>

1c00fe76 <__internal_semihost>:
    return __internal_semihost(SEMIHOSTING_SYS_SEEK, (long) args);
}

int semihost_flen(int fd)
{
    return __internal_semihost(SEMIHOSTING_SYS_FLEN, (long) fd);
1c00fe76:	01f01013          	slli	zero,zero,0x1f
1c00fe7a:	00100073          	ebreak
1c00fe7e:	40705013          	srai	zero,zero,0x7
1c00fe82:	8082                	ret

1c00fe84 <semihost_write0>:
1c00fe84:	85aa                	mv	a1,a0
1c00fe86:	4511                	li	a0,4
1c00fe88:	fefff06f          	j	1c00fe76 <__internal_semihost>

1c00fe8c <semihost_open>:
1c00fe8c:	7139                	addi	sp,sp,-64
1c00fe8e:	de06                	sw	ra,60(sp)
1c00fe90:	dc22                	sw	s0,56(sp)
1c00fe92:	c62e                	sw	a1,12(sp)
1c00fe94:	842a                	mv	s0,a0
1c00fe96:	1b9020ef          	jal	ra,1c01284e <strlen>
1c00fe9a:	45b2                	lw	a1,12(sp)
1c00fe9c:	083c                	addi	a5,sp,24
1c00fe9e:	c380                	sw	s0,0(a5)
1c00fea0:	087c                	addi	a5,sp,28
1c00fea2:	c38c                	sw	a1,0(a5)
1c00fea4:	101c                	addi	a5,sp,32
1c00fea6:	c388                	sw	a0,0(a5)
1c00fea8:	082c                	addi	a1,sp,24
1c00feaa:	4505                	li	a0,1
1c00feac:	fcbff0ef          	jal	ra,1c00fe76 <__internal_semihost>
1c00feb0:	50f2                	lw	ra,60(sp)
1c00feb2:	5462                	lw	s0,56(sp)
1c00feb4:	6121                	addi	sp,sp,64
1c00feb6:	8082                	ret

1c00feb8 <semihost_close>:
1c00feb8:	85aa                	mv	a1,a0
1c00feba:	4509                	li	a0,2
1c00febc:	fbbff06f          	j	1c00fe76 <__internal_semihost>

1c00fec0 <semihost_read>:
1c00fec0:	7179                	addi	sp,sp,-48
1c00fec2:	d606                	sw	ra,44(sp)
1c00fec4:	003c                	addi	a5,sp,8
1c00fec6:	c388                	sw	a0,0(a5)
1c00fec8:	007c                	addi	a5,sp,12
1c00feca:	c38c                	sw	a1,0(a5)
1c00fecc:	4519                	li	a0,6
1c00fece:	081c                	addi	a5,sp,16
1c00fed0:	002c                	addi	a1,sp,8
1c00fed2:	c390                	sw	a2,0(a5)
1c00fed4:	fa3ff0ef          	jal	ra,1c00fe76 <__internal_semihost>
1c00fed8:	50b2                	lw	ra,44(sp)
1c00feda:	6145                	addi	sp,sp,48
1c00fedc:	8082                	ret

1c00fede <semihost_write>:
1c00fede:	7179                	addi	sp,sp,-48
1c00fee0:	d606                	sw	ra,44(sp)
1c00fee2:	003c                	addi	a5,sp,8
1c00fee4:	c388                	sw	a0,0(a5)
1c00fee6:	007c                	addi	a5,sp,12
1c00fee8:	c38c                	sw	a1,0(a5)
1c00feea:	4515                	li	a0,5
1c00feec:	081c                	addi	a5,sp,16
1c00feee:	002c                	addi	a1,sp,8
1c00fef0:	c390                	sw	a2,0(a5)
1c00fef2:	f85ff0ef          	jal	ra,1c00fe76 <__internal_semihost>
1c00fef6:	50b2                	lw	ra,44(sp)
1c00fef8:	6145                	addi	sp,sp,48
1c00fefa:	8082                	ret

1c00fefc <semihost_seek>:
1c00fefc:	1101                	addi	sp,sp,-32
1c00fefe:	c42a                	sw	a0,8(sp)
1c00ff00:	c62e                	sw	a1,12(sp)
1c00ff02:	4529                	li	a0,10
1c00ff04:	002c                	addi	a1,sp,8
1c00ff06:	ce06                	sw	ra,28(sp)
1c00ff08:	f6fff0ef          	jal	ra,1c00fe76 <__internal_semihost>
1c00ff0c:	40f2                	lw	ra,28(sp)
1c00ff0e:	6105                	addi	sp,sp,32
1c00ff10:	8082                	ret

1c00ff12 <semihost_exit>:
}

int semihost_exit(int code)
{
    return __internal_semihost(SEMIHOSTING_SYS_EXIT, (long) code);
1c00ff12:	85aa                	mv	a1,a0
1c00ff14:	4561                	li	a0,24
1c00ff16:	f61ff06f          	j	1c00fe76 <__internal_semihost>

1c00ff1a <__bsp_init_pads>:

static int __bsp_init_pads_done = 0;

static void __bsp_init_pads()
{
  if (!__bsp_init_pads_done)
1c00ff1a:	1c0157b7          	lui	a5,0x1c015
1c00ff1e:	f7c78793          	addi	a5,a5,-132 # 1c014f7c <__bsp_init_pads_done>
1c00ff22:	4398                	lw	a4,0(a5)
1c00ff24:	eb05                	bnez	a4,1c00ff54 <__bsp_init_pads+0x3a>
{
1c00ff26:	1101                	addi	sp,sp,-32
1c00ff28:	ce06                	sw	ra,28(sp)
  {
    __bsp_init_pads_done = 1;
1c00ff2a:	4705                	li	a4,1
1c00ff2c:	c398                	sw	a4,0(a5)
    uint32_t pads_value[] = {0x00055500, 0x0f000000, 0x003fffff, 0x00000000};
1c00ff2e:	000557b7          	lui	a5,0x55
1c00ff32:	50078793          	addi	a5,a5,1280 # 55500 <__L1Cl+0x45500>
1c00ff36:	c03e                	sw	a5,0(sp)
1c00ff38:	0f0007b7          	lui	a5,0xf000
1c00ff3c:	c23e                	sw	a5,4(sp)
1c00ff3e:	004007b7          	lui	a5,0x400
1c00ff42:	17fd                	addi	a5,a5,-1
    pi_pad_init(pads_value);
1c00ff44:	850a                	mv	a0,sp
    uint32_t pads_value[] = {0x00055500, 0x0f000000, 0x003fffff, 0x00000000};
1c00ff46:	c43e                	sw	a5,8(sp)
1c00ff48:	c602                	sw	zero,12(sp)
    pi_pad_init(pads_value);
1c00ff4a:	2a3010ef          	jal	ra,1c0119ec <pi_pad_init>
  }
}
1c00ff4e:	40f2                	lw	ra,28(sp)
1c00ff50:	6105                	addi	sp,sp,32
1c00ff52:	8082                	ret
1c00ff54:	8082                	ret

1c00ff56 <bsp_hyperram_conf_init>:

void bsp_hyperram_conf_init(struct pi_hyperram_conf *conf)
{
  conf->ram_start = CONFIG_HYPERRAM_START;
  conf->ram_size = CONFIG_HYPERRAM_SIZE;
1c00ff56:	008007b7          	lui	a5,0x800
  conf->ram_start = CONFIG_HYPERRAM_START;
1c00ff5a:	00052a23          	sw	zero,20(a0)
  conf->ram_size = CONFIG_HYPERRAM_SIZE;
1c00ff5e:	cd1c                	sw	a5,24(a0)
  conf->skip_pads_config = 0;
1c00ff60:	00050623          	sb	zero,12(a0)
  conf->hyper_itf = CONFIG_HYPERRAM_HYPER_ITF;
1c00ff64:	00052223          	sw	zero,4(a0)
  conf->hyper_cs = CONFIG_HYPERRAM_HYPER_CS;
1c00ff68:	00052423          	sw	zero,8(a0)
}
1c00ff6c:	8082                	ret

1c00ff6e <bsp_hyperram_open>:
1c00ff6e:	1141                	addi	sp,sp,-16
1c00ff70:	c606                	sw	ra,12(sp)
1c00ff72:	fa9ff0ef          	jal	ra,1c00ff1a <__bsp_init_pads>
1c00ff76:	40b2                	lw	ra,12(sp)
1c00ff78:	4501                	li	a0,0
1c00ff7a:	0141                	addi	sp,sp,16
1c00ff7c:	8082                	ret

1c00ff7e <bsp_hyperflash_conf_init>:


void bsp_hyperflash_conf_init(struct pi_hyperflash_conf *conf)
{
  conf->hyper_itf = CONFIG_HYPERFLASH_HYPER_ITF;
  conf->hyper_cs = CONFIG_HYPERFLASH_HYPER_CS;
1c00ff7e:	4785                	li	a5,1
  conf->hyper_itf = CONFIG_HYPERFLASH_HYPER_ITF;
1c00ff80:	00052223          	sw	zero,4(a0)
  conf->hyper_cs = CONFIG_HYPERFLASH_HYPER_CS;
1c00ff84:	c51c                	sw	a5,8(a0)
}
1c00ff86:	8082                	ret

1c00ff88 <bsp_hyperflash_open>:
1c00ff88:	1141                	addi	sp,sp,-16
1c00ff8a:	c606                	sw	ra,12(sp)
1c00ff8c:	f8fff0ef          	jal	ra,1c00ff1a <__bsp_init_pads>
1c00ff90:	40b2                	lw	ra,12(sp)
1c00ff92:	4501                	li	a0,0
1c00ff94:	0141                	addi	sp,sp,16
1c00ff96:	8082                	ret

1c00ff98 <cluster_start>:
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00ff98:	002047b7          	lui	a5,0x204
1c00ff9c:	00070737          	lui	a4,0x70
1c00ffa0:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00ffa4:	0ff00713          	li	a4,255
1c00ffa8:	002046b7          	lui	a3,0x204
1c00ffac:	08e6a223          	sw	a4,132(a3) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00ffb0:	20078793          	addi	a5,a5,512
1c00ffb4:	00e7a023          	sw	a4,0(a5)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00ffb8:	00e7a623          	sw	a4,12(a5)
    __rt_team_config(rt_nb_active_pe());
  }

#endif

}
1c00ffbc:	8082                	ret

1c00ffbe <__rt_init>:
{
1c00ffbe:	1101                	addi	sp,sp,-32
static inline void hal_pmu_bypass_set(unsigned int Value) {
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
}

static inline unsigned int hal_pmu_bypass_get() {
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET);
1c00ffc0:	1a104737          	lui	a4,0x1a104
1c00ffc4:	ce06                	sw	ra,28(sp)
1c00ffc6:	cc22                	sw	s0,24(sp)
1c00ffc8:	ca26                	sw	s1,20(sp)
1c00ffca:	07072783          	lw	a5,112(a4) # 1a104070 <__l1_end+0xa104048>
  hal_pmu_bypass_set (ARCHI_REG_FIELD_SET (hal_pmu_bypass_get (), 1, 11, 1) );
1c00ffce:	c0b7c7b3          	p.bset	a5,a5,0,11
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
1c00ffd2:	06f72823          	sw	a5,112(a4)
  __rt_bridge_set_available();
1c00ffd6:	2b49                	jal	1c010568 <__rt_bridge_set_available>
  cpu_stack_check_enable((int)__rt_fc_stack, (int)__rt_fc_stack + __rt_fc_stack_size);
1c00ffd8:	1b0007b7          	lui	a5,0x1b000
1c00ffdc:	39878793          	addi	a5,a5,920 # 1b000398 <__rt_fc_stack>
 * Stack checking
 */

static inline void cpu_stack_check_enable(unsigned int base, unsigned int end)
{
  asm volatile ("csrwi 0x7D0, 0" :: );
1c00ffe0:	7d005073          	csrwi	0x7d0,0
  asm volatile ("csrw  0x7D1, %0" :: "r" (base));
1c00ffe4:	7d179073          	csrw	0x7d1,a5
1c00ffe8:	1c015737          	lui	a4,0x1c015
1c00ffec:	a6872703          	lw	a4,-1432(a4) # 1c014a68 <__rt_fc_stack_size>
1c00fff0:	97ba                	add	a5,a5,a4
  asm volatile ("csrw  0x7D2, %0" :: "r" (end));
1c00fff2:	7d279073          	csrw	0x7d2,a5
  asm volatile ("csrwi 0x7D0, 1" :: );
1c00fff6:	7d00d073          	csrwi	0x7d0,1
  __rt_irq_init();
1c00fffa:	2add                	jal	1c0101f0 <__rt_irq_init>

#include "archi/pulp.h"
#include "archi/soc_eu/soc_eu_v1.h"

static inline void soc_eu_eventMask_set(unsigned int reg, unsigned int value) {
  ARCHI_WRITE(ARCHI_SOC_EU_ADDR, reg, value);
1c00fffc:	54fd                	li	s1,-1
1c00fffe:	1a1067b7          	lui	a5,0x1a106
1c010002:	0097a223          	sw	s1,4(a5) # 1a106004 <__l1_end+0xa105fdc>
1c010006:	0097a423          	sw	s1,8(a5)
  rt_irq_set_handler(ARCHI_FC_EVT_SOC_EVT, __rt_fc_socevents_handler);
1c01000a:	1c0005b7          	lui	a1,0x1c000
1c01000e:	3f458593          	addi	a1,a1,1012 # 1c0003f4 <__rt_fc_socevents_handler>
1c010012:	456d                	li	a0,27
1c010014:	2a3d                	jal	1c010152 <rt_irq_set_handler>
  ARCHI_WRITE(base, EU_CORE_MASK_IRQ_OR, irqMask);
1c010016:	080007b7          	lui	a5,0x8000
1c01001a:	00204737          	lui	a4,0x204
1c01001e:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c010022:	00f72423          	sw	a5,8(a4)
  __rt_pmu_init();
1c010026:	2a2010ef          	jal	ra,1c0112c8 <__rt_pmu_init>
  __rt_freq_init();
1c01002a:	6ed000ef          	jal	ra,1c010f16 <__rt_freq_init>
1c01002e:	002017b7          	lui	a5,0x201
1c010032:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_ICACHE_CTRL_OFFSET, 0xFFFFFFFF);
}

static inline void icache_enable(unsigned int base)
{
  pulp_write32(base, 0xFFFFFFFF);
1c010036:	c384                	sw	s1,0(a5)
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c010038:	01402473          	csrr	s0,uhartid
1c01003c:	1c0144b7          	lui	s1,0x1c014
  return (hart_id >> 5) & 0x3f;
1c010040:	8415                	srai	s0,s0,0x5
  __rt_utils_init();
1c010042:	24ed                	jal	1c01032c <__rt_utils_init>
1c010044:	f2643433          	p.bclr	s0,s0,25,6
  __rt_allocs_init();
1c010048:	1af000ef          	jal	ra,1c0109f6 <__rt_allocs_init>
1c01004c:	cd848493          	addi	s1,s1,-808 # 1c013cd8 <ctor_list+0x4>
  __rt_event_sched_init();
1c010050:	029000ef          	jal	ra,1c010878 <__rt_event_sched_init>
  __rt_padframe_init();
1c010054:	206020ef          	jal	ra,1c01225a <__rt_padframe_init>
  for(fpp = ctor_list+1;  *fpp != 0;  ++fpp) {
1c010058:	0044a78b          	p.lw	a5,4(s1!)
1c01005c:	ebad                	bnez	a5,1c0100ce <__rt_init+0x110>
  return __builtin_pulp_read_then_spr_bit_set(reg, val);
1c01005e:	300467f3          	csrrsi	a5,mstatus,8
  if (__rt_cbsys_exec(RT_CBSYS_START)) goto error;
1c010062:	4501                	li	a0,0
1c010064:	2c61                	jal	1c0102fc <__rt_cbsys_exec>
1c010066:	e539                	bnez	a0,1c0100b4 <__rt_init+0xf6>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c010068:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c01006c:	8795                	srai	a5,a5,0x5
1c01006e:	f267b7b3          	p.bclr	a5,a5,25,6
        exit(retval);
      }
    }
    else
      return cluster_master_start(NULL);
  } else if (!rt_is_fc()) {
1c010072:	02000713          	li	a4,32
1c010076:	0ae78363          	beq	a5,a4,1c01011c <__rt_init+0x15e>
    rt_cluster_mount(1, cid, 0, NULL);
1c01007a:	4681                	li	a3,0
1c01007c:	4601                	li	a2,0
1c01007e:	4581                	li	a1,0
1c010080:	4505                	li	a0,1
  if (rt_cluster_id() != cid)
1c010082:	cba1                	beqz	a5,1c0100d2 <__rt_init+0x114>
    rt_cluster_mount(1, cid, 0, NULL);
1c010084:	794010ef          	jal	ra,1c011818 <rt_cluster_mount>
    void *stacks = rt_alloc(RT_ALLOC_CL_DATA+cid, 0x800*rt_nb_active_pe());
1c010088:	6591                	lui	a1,0x4
1c01008a:	4509                	li	a0,2
1c01008c:	0bf000ef          	jal	ra,1c01094a <rt_alloc>
1c010090:	872a                	mv	a4,a0
    if (stacks == NULL) return -1;
1c010092:	c10d                	beqz	a0,1c0100b4 <__rt_init+0xf6>
    if (rt_cluster_call(NULL, cid, cluster_start, NULL, stacks, 0x800, 0x800, rt_nb_active_pe(), event)) return -1;
1c010094:	6805                	lui	a6,0x1
1c010096:	80080813          	addi	a6,a6,-2048 # 800 <__rt_stack_size>
1c01009a:	1c010637          	lui	a2,0x1c010
1c01009e:	c002                	sw	zero,0(sp)
1c0100a0:	48a1                	li	a7,8
1c0100a2:	87c2                	mv	a5,a6
1c0100a4:	4681                	li	a3,0
1c0100a6:	f9860613          	addi	a2,a2,-104 # 1c00ff98 <cluster_start>
1c0100aa:	4581                	li	a1,0
1c0100ac:	4501                	li	a0,0
1c0100ae:	6da010ef          	jal	ra,1c011788 <rt_cluster_call>
1c0100b2:	c52d                	beqz	a0,1c01011c <__rt_init+0x15e>
  rt_fatal("There was an error during runtime initialization\n");
1c0100b4:	1c014537          	lui	a0,0x1c014
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0100b8:	01402673          	csrr	a2,uhartid
1c0100bc:	85a2                	mv	a1,s0
1c0100be:	f4563633          	p.bclr	a2,a2,26,5
1c0100c2:	60850513          	addi	a0,a0,1544 # 1c014608 <IntegerExpLUT+0xc0>
1c0100c6:	2db020ef          	jal	ra,1c012ba0 <printf>
1c0100ca:	25b020ef          	jal	ra,1c012b24 <abort>
    (**fpp)();
1c0100ce:	9782                	jalr	a5
1c0100d0:	b761                	j	1c010058 <__rt_init+0x9a>
    rt_cluster_mount(1, cid, 0, NULL);
1c0100d2:	746010ef          	jal	ra,1c011818 <rt_cluster_mount>
    void *stacks = rt_alloc(RT_ALLOC_CL_DATA+cid, 0x800*(rt_nb_active_pe()-1));
1c0100d6:	6591                	lui	a1,0x4
1c0100d8:	80058593          	addi	a1,a1,-2048 # 3800 <__rt_stack_size+0x3000>
1c0100dc:	4509                	li	a0,2
1c0100de:	06d000ef          	jal	ra,1c01094a <rt_alloc>
    if (stacks == NULL) return -1;
1c0100e2:	d969                	beqz	a0,1c0100b4 <__rt_init+0xf6>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0100e4:	00204737          	lui	a4,0x204
1c0100e8:	0ff00793          	li	a5,255
1c0100ec:	08f72223          	sw	a5,132(a4) # 204084 <__L2+0x184084>
    eu_dispatch_push((unsigned int)__rt_set_slave_stack | 1);
1c0100f0:	1c0147b7          	lui	a5,0x1c014
1c0100f4:	c1c78793          	addi	a5,a5,-996 # 1c013c1c <__rt_set_slave_stack>
1c0100f8:	c007c7b3          	p.bset	a5,a5,0,0
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0100fc:	08f72023          	sw	a5,128(a4)
1c010100:	6785                	lui	a5,0x1
1c010102:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c010106:	08f72023          	sw	a5,128(a4)
1c01010a:	08a72023          	sw	a0,128(a4)
}
1c01010e:	4462                	lw	s0,24(sp)
1c010110:	40f2                	lw	ra,28(sp)
1c010112:	44d2                	lw	s1,20(sp)
    cluster_start(NULL);
1c010114:	4501                	li	a0,0
}
1c010116:	6105                	addi	sp,sp,32
    cluster_start(NULL);
1c010118:	e81ff06f          	j	1c00ff98 <cluster_start>
}
1c01011c:	40f2                	lw	ra,28(sp)
1c01011e:	4462                	lw	s0,24(sp)
1c010120:	44d2                	lw	s1,20(sp)
1c010122:	6105                	addi	sp,sp,32
1c010124:	8082                	ret

1c010126 <__rt_deinit>:
{
1c010126:	1141                	addi	sp,sp,-16
1c010128:	c606                	sw	ra,12(sp)
1c01012a:	c422                	sw	s0,8(sp)
}

static inline void cpu_stack_check_disable()
{
  asm volatile ("csrwi 0x7D0, 0" :: );
1c01012c:	7d005073          	csrwi	0x7d0,0
  __rt_cbsys_exec(RT_CBSYS_STOP);
1c010130:	4505                	li	a0,1
1c010132:	1c014437          	lui	s0,0x1c014
1c010136:	22d9                	jal	1c0102fc <__rt_cbsys_exec>
1c010138:	d1440413          	addi	s0,s0,-748 # 1c013d14 <dtor_list+0x4>
  for(fpp = dtor_list + 1;  *fpp != 0;  ++fpp) (**fpp)();
1c01013c:	0044278b          	p.lw	a5,4(s0!)
1c010140:	e789                	bnez	a5,1c01014a <__rt_deinit+0x24>
}
1c010142:	40b2                	lw	ra,12(sp)
1c010144:	4422                	lw	s0,8(sp)
1c010146:	0141                	addi	sp,sp,16
1c010148:	8082                	ret
  for(fpp = dtor_list + 1;  *fpp != 0;  ++fpp) (**fpp)();
1c01014a:	9782                	jalr	a5
1c01014c:	bfc5                	j	1c01013c <__rt_deinit+0x16>

1c01014e <pi_open_from_conf>:
#endif


void pi_open_from_conf(struct pi_device *device, void *conf)
{
  device->config = conf;
1c01014e:	c14c                	sw	a1,4(a0)
}
1c010150:	8082                	ret

1c010152 <rt_irq_set_handler>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c010152:	014027f3          	csrr	a5,uhartid
  return hal_spr_read(0x305) & ~1;
#else
#if defined(APB_SOC_VERSION) && APB_SOC_VERSION == 1
  return ARCHI_L2_ADDR;
#else
  if (rt_is_fc()) {
1c010156:	02000713          	li	a4,32
  return (hart_id >> 5) & 0x3f;
1c01015a:	ca5797b3          	p.extractu	a5,a5,5,5
1c01015e:	02e79c63          	bne	a5,a4,1c010196 <rt_irq_set_handler+0x44>
#if defined(ARCHI_CORE_HAS_SECURITY) && !defined(ARCHI_CORE_HAS_1_10)
    return __builtin_pulp_spr_read(SR_MTVEC);
1c010162:	30502773          	csrr	a4,mtvec
  irq -= 16;
#endif

  unsigned int base = __rt_get_fc_vector_base();

  unsigned int jmpAddr = base + 0x4 * irq;
1c010166:	050a                	slli	a0,a0,0x2
  unsigned int S = ((unsigned int) ItHandler - (ItBaseAddr+ItIndex*4));
1c010168:	8d89                	sub	a1,a1,a0
1c01016a:	8d99                	sub	a1,a1,a4
  R = __BITINSERT(R, __BITEXTRACT(S,  1, 20),  1, 31);
1c01016c:	c14586b3          	p.extract	a3,a1,0,20
1c010170:	06f00793          	li	a5,111
1c010174:	c1f6a7b3          	p.insert	a5,a3,0,31
  R = __BITINSERT(R, __BITEXTRACT(S, 10,  1), 10, 21);
1c010178:	d21586b3          	p.extract	a3,a1,9,1
1c01017c:	d356a7b3          	p.insert	a5,a3,9,21
  R = __BITINSERT(R, __BITEXTRACT(S,  1, 11),  1, 20);
1c010180:	c0b586b3          	p.extract	a3,a1,0,11
1c010184:	c146a7b3          	p.insert	a5,a3,0,20
  R = __BITINSERT(R, __BITEXTRACT(S,  8, 12),  8, 12);
1c010188:	cec585b3          	p.extract	a1,a1,7,12
1c01018c:	cec5a7b3          	p.insert	a5,a1,7,12

  *(volatile unsigned int *)jmpAddr = __rt_get_itvec(base, irq, (unsigned int)handler);
1c010190:	00f56723          	p.sw	a5,a4(a0)

#if defined(PLP_FC_HAS_ICACHE)
  flush_all_icache_banks_common(plp_icache_fc_base());
#endif

}
1c010194:	8082                	ret
static inline void plp_ctrl_core_bootaddr_set_remote(int cid, int core, unsigned int bootAddr) {
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
}

static inline unsigned int plp_ctrl_bootaddr_get() {
  return pulp_read32(ARCHI_CLUSTER_CTRL_ADDR + 0x40);
1c010196:	002007b7          	lui	a5,0x200
1c01019a:	43b8                	lw	a4,64(a5)
1c01019c:	b7e9                	j	1c010166 <rt_irq_set_handler+0x14>

1c01019e <illegal_insn_handler_c>:
#include <stdlib.h>

void __attribute__((weak)) illegal_insn_handler_c()
{

}
1c01019e:	8082                	ret

1c0101a0 <__rt_handle_illegal_instr>:


extern RT_FC_GLOBAL_DATA unsigned int __rt_debug_config;
extern RT_FC_GLOBAL_DATA unsigned int __rt_debug_config_trace;

static inline unsigned int rt_debug_config() { return __rt_debug_config; }
1c0101a0:	1b0007b7          	lui	a5,0x1b000

static inline unsigned int rt_debug_config_trace() { return __rt_debug_config_trace; }

static inline int rt_debug_config_warnings() {
  return ARCHI_REG_FIELD_GET(rt_debug_config(), RT_DEBUG_WARNING_BIT, 1);
1c0101a4:	79c7a703          	lw	a4,1948(a5) # 1b00079c <__rt_debug_config>

void __rt_handle_illegal_instr()
{
1c0101a8:	1141                	addi	sp,sp,-16
1c0101aa:	c422                	sw	s0,8(sp)
1c0101ac:	c606                	sw	ra,12(sp)
1c0101ae:	fc173733          	p.bclr	a4,a4,30,1
1c0101b2:	843e                	mv	s0,a5
#ifdef __riscv__
  unsigned int mepc = hal_mepc_read();
  rt_warning("Reached illegal instruction (PC: 0x%x, opcode: 0x%x\n", mepc, *(int *)mepc);
1c0101b4:	c315                	beqz	a4,1c0101d8 <__rt_handle_illegal_instr+0x38>
1c0101b6:	341026f3          	csrr	a3,mepc
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0101ba:	01402673          	csrr	a2,uhartid
1c0101be:	1c014537          	lui	a0,0x1c014
1c0101c2:	4298                	lw	a4,0(a3)
  return (hart_id >> 5) & 0x3f;
1c0101c4:	40565593          	srai	a1,a2,0x5
1c0101c8:	f265b5b3          	p.bclr	a1,a1,25,6
1c0101cc:	f4563633          	p.bclr	a2,a2,26,5
1c0101d0:	66050513          	addi	a0,a0,1632 # 1c014660 <IntegerExpLUT+0x118>
1c0101d4:	1cd020ef          	jal	ra,1c012ba0 <printf>
}

static inline int rt_debug_config_werror() {
  return ARCHI_REG_FIELD_GET(rt_debug_config(), RT_DEBUG_WERROR_BIT, 1);
1c0101d8:	79c42783          	lw	a5,1948(s0)
1c0101dc:	c01797b3          	p.extractu	a5,a5,0,1
1c0101e0:	c399                	beqz	a5,1c0101e6 <__rt_handle_illegal_instr+0x46>
1c0101e2:	143020ef          	jal	ra,1c012b24 <abort>
  illegal_insn_handler_c();
#endif
}
1c0101e6:	4422                	lw	s0,8(sp)
1c0101e8:	40b2                	lw	ra,12(sp)
1c0101ea:	0141                	addi	sp,sp,16
  illegal_insn_handler_c();
1c0101ec:	fb3ff06f          	j	1c01019e <illegal_insn_handler_c>

1c0101f0 <__rt_irq_init>:
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_IRQ_AND, irqMask);
1c0101f0:	57fd                	li	a5,-1
1c0101f2:	00204737          	lui	a4,0x204
1c0101f6:	00f72823          	sw	a5,16(a4) # 204010 <__L2+0x184010>
  else eu_irq_maskClr(mask);
#elif defined(ITC_VERSION)
  hal_itc_enable_clr(mask);
#elif defined(EU_VERSION)
  eu_irq_maskClr(mask);
  if (hal_is_fc()) eu_evt_maskClr(mask);
1c0101fa:	02000713          	li	a4,32
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0101fe:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c010202:	ca5797b3          	p.extractu	a5,a5,5,5
1c010206:	00e79763          	bne	a5,a4,1c010214 <__rt_irq_init+0x24>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c01020a:	57fd                	li	a5,-1
1c01020c:	00204737          	lui	a4,0x204
1c010210:	00f72223          	sw	a5,4(a4) # 204004 <__L2+0x184004>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c010214:	014027f3          	csrr	a5,uhartid
#if defined(ARCHI_CORE_RISCV_ITC)
  hal_spr_write(0x305, base);
#else
#if defined(APB_SOC_VERSION) && APB_SOC_VERSION == 1
#else
  if (rt_is_fc()) {
1c010218:	02000713          	li	a4,32
  return (hart_id >> 5) & 0x3f;
1c01021c:	ca5797b3          	p.extractu	a5,a5,5,5
1c010220:	00e79963          	bne	a5,a4,1c010232 <__rt_irq_init+0x42>
#if defined(ARCHI_CORE_HAS_SECURITY)
    __builtin_pulp_spr_write(SR_MTVEC, base);
1c010224:	1c0007b7          	lui	a5,0x1c000
1c010228:	00078793          	mv	a5,a5
1c01022c:	30579073          	csrw	mtvec,a5
1c010230:	8082                	ret
  pulp_write32(ARCHI_CLUSTER_CTRL_ADDR + 0x40, bootAddr);
1c010232:	1c0007b7          	lui	a5,0x1c000
1c010236:	00200737          	lui	a4,0x200
1c01023a:	00078793          	mv	a5,a5
1c01023e:	c33c                	sw	a5,64(a4)
  rt_irq_mask_clr(-1);

  // As the FC code may not be at the beginning of the L2, set the
  // vector base to get proper interrupt handlers
  __rt_set_fc_vector_base((int)rt_irq_vector_base());
}
1c010240:	8082                	ret

1c010242 <__rt_fc_cluster_lock_req>:
      rt_free(RT_ALLOC_FC_RET_DATA, (void *)cbsys, sizeof(rt_cbsys_t));     
      return;
    }

    prev = cbsys;
    cbsys = cbsys->next;
1c010242:	300476f3          	csrrci	a3,mstatus,8
1c010246:	08a54703          	lbu	a4,138(a0)
1c01024a:	411c                	lw	a5,0(a0)
1c01024c:	c321                	beqz	a4,1c01028c <__rt_fc_cluster_lock_req+0x4a>
1c01024e:	4398                	lw	a4,0(a5)
1c010250:	cf09                	beqz	a4,1c01026a <__rt_fc_cluster_lock_req+0x28>
1c010252:	43d8                	lw	a4,4(a5)
1c010254:	cb09                	beqz	a4,1c010266 <__rt_fc_cluster_lock_req+0x24>
1c010256:	4798                	lw	a4,8(a5)
1c010258:	c348                	sw	a0,4(a4)
1c01025a:	c788                	sw	a0,8(a5)
1c01025c:	00052223          	sw	zero,4(a0)
1c010260:	30069073          	csrw	mstatus,a3
1c010264:	8082                	ret
1c010266:	c3c8                	sw	a0,4(a5)
1c010268:	bfcd                	j	1c01025a <__rt_fc_cluster_lock_req+0x18>
1c01026a:	4705                	li	a4,1
1c01026c:	08e50423          	sb	a4,136(a0)
1c010270:	4705                	li	a4,1
1c010272:	c398                	sw	a4,0(a5)
1c010274:	08954783          	lbu	a5,137(a0)
1c010278:	00201737          	lui	a4,0x201
1c01027c:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c010280:	04078793          	addi	a5,a5,64 # 1c000040 <__irq_vector_base+0x40>
1c010284:	07da                	slli	a5,a5,0x16
1c010286:	0007e723          	p.sw	zero,a4(a5)
1c01028a:	bfd9                	j	1c010260 <__rt_fc_cluster_lock_req+0x1e>
1c01028c:	43d8                	lw	a4,4(a5)
1c01028e:	e719                	bnez	a4,1c01029c <__rt_fc_cluster_lock_req+0x5a>
1c010290:	0007a023          	sw	zero,0(a5)
1c010294:	4785                	li	a5,1
1c010296:	08f50423          	sb	a5,136(a0)
1c01029a:	bfe9                	j	1c010274 <__rt_fc_cluster_lock_req+0x32>
1c01029c:	4350                	lw	a2,4(a4)
1c01029e:	c3d0                	sw	a2,4(a5)
1c0102a0:	4785                	li	a5,1
1c0102a2:	08f70423          	sb	a5,136(a4)
1c0102a6:	08974783          	lbu	a5,137(a4)
1c0102aa:	00201737          	lui	a4,0x201
1c0102ae:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c0102b2:	04078793          	addi	a5,a5,64
1c0102b6:	07da                	slli	a5,a5,0x16
1c0102b8:	0007e723          	p.sw	zero,a4(a5)
1c0102bc:	bfe1                	j	1c010294 <__rt_fc_cluster_lock_req+0x52>

1c0102be <__rt_cbsys_add>:
  }
}

int __rt_cbsys_add(__rt_cbsys_e cbsys_id, int (*cb)(void *), void *cb_arg)
{
1c0102be:	1101                	addi	sp,sp,-32
1c0102c0:	cc22                	sw	s0,24(sp)
1c0102c2:	ca26                	sw	s1,20(sp)
1c0102c4:	842a                	mv	s0,a0
1c0102c6:	84ae                	mv	s1,a1
  rt_cbsys_t *cbsys = (rt_cbsys_t *)rt_alloc(RT_ALLOC_FC_RET_DATA, sizeof(rt_cbsys_t));
1c0102c8:	4501                	li	a0,0
1c0102ca:	45b1                	li	a1,12
1c0102cc:	c632                	sw	a2,12(sp)
{
1c0102ce:	ce06                	sw	ra,28(sp)
  rt_cbsys_t *cbsys = (rt_cbsys_t *)rt_alloc(RT_ALLOC_FC_RET_DATA, sizeof(rt_cbsys_t));
1c0102d0:	2dad                	jal	1c01094a <rt_alloc>
  if (cbsys == NULL) return -1;
1c0102d2:	4632                	lw	a2,12(sp)
1c0102d4:	c115                	beqz	a0,1c0102f8 <__rt_cbsys_add+0x3a>

  cbsys->callback = cb;
  cbsys->arg = cb_arg;
  cbsys->next = cbsys_first[cbsys_id];
1c0102d6:	1b0007b7          	lui	a5,0x1b000
1c0102da:	040a                	slli	s0,s0,0x2
1c0102dc:	7a078793          	addi	a5,a5,1952 # 1b0007a0 <cbsys_first>
1c0102e0:	97a2                	add	a5,a5,s0
1c0102e2:	4398                	lw	a4,0(a5)
  cbsys->callback = cb;
1c0102e4:	c104                	sw	s1,0(a0)
  cbsys->arg = cb_arg;
1c0102e6:	c150                	sw	a2,4(a0)
  cbsys->next = cbsys_first[cbsys_id];
1c0102e8:	c518                	sw	a4,8(a0)
  cbsys_first[cbsys_id] = cbsys;
1c0102ea:	c388                	sw	a0,0(a5)

  return 0;
1c0102ec:	4501                	li	a0,0
}
1c0102ee:	40f2                	lw	ra,28(sp)
1c0102f0:	4462                	lw	s0,24(sp)
1c0102f2:	44d2                	lw	s1,20(sp)
1c0102f4:	6105                	addi	sp,sp,32
1c0102f6:	8082                	ret
  if (cbsys == NULL) return -1;
1c0102f8:	557d                	li	a0,-1
1c0102fa:	bfd5                	j	1c0102ee <__rt_cbsys_add+0x30>

1c0102fc <__rt_cbsys_exec>:


int __rt_cbsys_exec(__rt_cbsys_e cbsys_id)
{
1c0102fc:	1141                	addi	sp,sp,-16
1c0102fe:	c422                	sw	s0,8(sp)
  rt_cbsys_t *cbsys = cbsys_first[cbsys_id];
1c010300:	1b000437          	lui	s0,0x1b000
1c010304:	050a                	slli	a0,a0,0x2
1c010306:	7a040413          	addi	s0,s0,1952 # 1b0007a0 <cbsys_first>
1c01030a:	20a47403          	p.lw	s0,a0(s0)
{
1c01030e:	c606                	sw	ra,12(sp)
  while (cbsys)
1c010310:	e411                	bnez	s0,1c01031c <__rt_cbsys_exec+0x20>
  {
    if (cbsys->callback(cbsys->arg)) return -1;
    cbsys = cbsys->next;
  }

  return 0;
1c010312:	4501                	li	a0,0
}
1c010314:	40b2                	lw	ra,12(sp)
1c010316:	4422                	lw	s0,8(sp)
1c010318:	0141                	addi	sp,sp,16
1c01031a:	8082                	ret
    if (cbsys->callback(cbsys->arg)) return -1;
1c01031c:	401c                	lw	a5,0(s0)
1c01031e:	4048                	lw	a0,4(s0)
1c010320:	9782                	jalr	a5
1c010322:	e119                	bnez	a0,1c010328 <__rt_cbsys_exec+0x2c>
    cbsys = cbsys->next;
1c010324:	4400                	lw	s0,8(s0)
1c010326:	b7ed                	j	1c010310 <__rt_cbsys_exec+0x14>
    if (cbsys->callback(cbsys->arg)) return -1;
1c010328:	557d                	li	a0,-1
1c01032a:	b7ed                	j	1c010314 <__rt_cbsys_exec+0x18>

1c01032c <__rt_utils_init>:

RT_FC_BOOT_CODE void __rt_utils_init()
{
  for (int i=0; i<RT_CBSYS_NB; i++)
  {
    cbsys_first[i] = NULL;
1c01032c:	1b0007b7          	lui	a5,0x1b000
1c010330:	7a078793          	addi	a5,a5,1952 # 1b0007a0 <cbsys_first>
1c010334:	0007a023          	sw	zero,0(a5)
1c010338:	0007a223          	sw	zero,4(a5)
1c01033c:	0007a423          	sw	zero,8(a5)
1c010340:	0007a623          	sw	zero,12(a5)
1c010344:	0007a823          	sw	zero,16(a5)
1c010348:	0007aa23          	sw	zero,20(a5)
  }
}
1c01034c:	8082                	ret

1c01034e <__rt_fc_lock>:

void __rt_fc_lock(rt_fc_lock_t *lock)
{
1c01034e:	1141                	addi	sp,sp,-16
1c010350:	c422                	sw	s0,8(sp)
1c010352:	842a                	mv	s0,a0
1c010354:	c606                	sw	ra,12(sp)
1c010356:	c226                	sw	s1,4(sp)
1c010358:	c04a                	sw	s2,0(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c01035a:	300474f3          	csrrci	s1,mstatus,8
#if defined(ARCHI_HAS_FC)
  int irq = rt_irq_disable();
  while(lock->locked)
1c01035e:	401c                	lw	a5,0(s0)
1c010360:	eb99                	bnez	a5,1c010376 <__rt_fc_lock+0x28>
  {
    //lock->fc_wait = __rt_thread_current;
    __rt_event_execute(rt_event_internal_sched(), 1);
  }
  lock->locked = 1;
1c010362:	4785                	li	a5,1
1c010364:	c01c                	sw	a5,0(s0)
  __builtin_pulp_spr_write(reg, val);
1c010366:	30049073          	csrw	mstatus,s1
  while (rt_tas_lock_32((uint32_t)&lock->lock) == -1)
  {

  }
#endif
}
1c01036a:	40b2                	lw	ra,12(sp)
1c01036c:	4422                	lw	s0,8(sp)
1c01036e:	4492                	lw	s1,4(sp)
1c010370:	4902                	lw	s2,0(sp)
1c010372:	0141                	addi	sp,sp,16
1c010374:	8082                	ret
    __rt_event_execute(rt_event_internal_sched(), 1);
1c010376:	4585                	li	a1,1
1c010378:	01c00513          	li	a0,28
1c01037c:	2989                	jal	1c0107ce <__rt_event_execute>
1c01037e:	b7c5                	j	1c01035e <__rt_fc_lock+0x10>

1c010380 <__rt_fc_unlock>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c010380:	300476f3          	csrrci	a3,mstatus,8

static int __rt_fc_unlock_to_cluster(rt_fc_lock_t *lock)
{
#if defined(ARCHI_HAS_CLUSTER)
  if (lock->waiting) {
1c010384:	415c                	lw	a5,4(a0)
1c010386:	e791                	bnez	a5,1c010392 <__rt_fc_unlock+0x12>
{
#if defined(ARCHI_HAS_FC)
  int irq = rt_irq_disable();
  if (!__rt_fc_unlock_to_cluster(lock))
  {
    lock->locked = 0;    
1c010388:	00052023          	sw	zero,0(a0)
  __builtin_pulp_spr_write(reg, val);
1c01038c:	30069073          	csrw	mstatus,a3
  }
  rt_irq_restore(irq);
#else
  rt_tas_unlock_32((uint32_t)&lock->lock, 0);
#endif
}
1c010390:	8082                	ret
    lock->waiting = req->next;
1c010392:	43d8                	lw	a4,4(a5)
1c010394:	c158                	sw	a4,4(a0)
    req->done = 1;
1c010396:	4705                	li	a4,1
1c010398:	08e78423          	sb	a4,136(a5)
    __rt_cluster_notif_req_done(req->cid);
1c01039c:	0897c783          	lbu	a5,137(a5)
  pulp_write32(evtAddr, coreSet);
1c0103a0:	00201737          	lui	a4,0x201
1c0103a4:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c0103a8:	04078793          	addi	a5,a5,64
1c0103ac:	07da                	slli	a5,a5,0x16
  pulp_write32(evtAddr, coreSet);
1c0103ae:	0007e723          	p.sw	zero,a4(a5)
1c0103b2:	bfe9                	j	1c01038c <__rt_fc_unlock+0xc>

1c0103b4 <__rt_fc_cluster_lock>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0103b4:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c0103b8:	8795                	srai	a5,a5,0x5
1c0103ba:	f267b7b3          	p.bclr	a5,a5,25,6
#if defined(ARCHI_HAS_FC)

void __rt_fc_cluster_lock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req)
{
  req->lock = lock;
  req->cid = rt_cluster_id();
1c0103be:	08f584a3          	sb	a5,137(a1)
  req->done = 0;
  req->req_lock = 1;
1c0103c2:	4785                	li	a5,1
1c0103c4:	08f58523          	sb	a5,138(a1)
  event->arg[0] = (uintptr_t)callback;
1c0103c8:	1c0107b7          	lui	a5,0x1c010
1c0103cc:	24278793          	addi	a5,a5,578 # 1c010242 <__rt_fc_cluster_lock_req>
  req->lock = lock;
1c0103d0:	c188                	sw	a0,0(a1)
  req->done = 0;
1c0103d2:	08058423          	sb	zero,136(a1)
  event->implem.pending = 0;
1c0103d6:	0205a623          	sw	zero,44(a1)
  event->implem.keep = 0;
1c0103da:	0205a823          	sw	zero,48(a1)
  event->arg[0] = (uintptr_t)callback;
1c0103de:	c5dc                	sw	a5,12(a1)
  event->arg[1] = (uintptr_t)arg;
1c0103e0:	c98c                	sw	a1,16(a1)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_fc_cluster_lock_req, (void *)req);
1c0103e2:	05a1                	addi	a1,a1,8
  __rt_cluster_push_fc_event((rt_event_t *)(((unsigned int)event) | 0x1));
1c0103e4:	c005c533          	p.bset	a0,a1,0,0
1c0103e8:	2b80106f          	j	1c0116a0 <__rt_cluster_push_fc_event>

1c0103ec <__rt_fc_cluster_unlock>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0103ec:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c0103f0:	8795                	srai	a5,a5,0x5
1c0103f2:	f267b7b3          	p.bclr	a5,a5,25,6
}

void __rt_fc_cluster_unlock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req)
{
  req->lock = lock;
  req->cid = rt_cluster_id();
1c0103f6:	08f584a3          	sb	a5,137(a1)
  event->arg[0] = (uintptr_t)callback;
1c0103fa:	1c0107b7          	lui	a5,0x1c010
1c0103fe:	24278793          	addi	a5,a5,578 # 1c010242 <__rt_fc_cluster_lock_req>
  req->lock = lock;
1c010402:	c188                	sw	a0,0(a1)
  req->done = 0;
1c010404:	08058423          	sb	zero,136(a1)
  req->req_lock = 0;
1c010408:	08058523          	sb	zero,138(a1)
  event->implem.pending = 0;
1c01040c:	0205a623          	sw	zero,44(a1)
  event->implem.keep = 0;
1c010410:	0205a823          	sw	zero,48(a1)
  event->arg[0] = (uintptr_t)callback;
1c010414:	c5dc                	sw	a5,12(a1)
  event->arg[1] = (uintptr_t)arg;
1c010416:	c98c                	sw	a1,16(a1)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_fc_cluster_lock_req, (void *)req);
1c010418:	05a1                	addi	a1,a1,8
1c01041a:	c005c533          	p.bset	a0,a1,0,0
1c01041e:	2820106f          	j	1c0116a0 <__rt_cluster_push_fc_event>

1c010422 <__rt_event_enqueue>:

    __rt_wait_event_check(event, call_event);
  }

  rt_irq_restore(irq);
}
1c010422:	01c02683          	lw	a3,28(zero) # 1c <__rt_sched>
1c010426:	00052023          	sw	zero,0(a0)
1c01042a:	01c00713          	li	a4,28
1c01042e:	c689                	beqz	a3,1c010438 <__rt_event_enqueue+0x16>
1c010430:	435c                	lw	a5,4(a4)
1c010432:	c388                	sw	a0,0(a5)
1c010434:	c348                	sw	a0,4(a4)
1c010436:	8082                	ret
1c010438:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c01043c:	bfe5                	j	1c010434 <__rt_event_enqueue+0x12>

1c01043e <__rt_bridge_check_bridge_req.part.5>:
1c01043e:	1c015737          	lui	a4,0x1c015
1c010442:	99870793          	addi	a5,a4,-1640 # 1c014998 <__hal_debug_struct>
1c010446:	0a47a783          	lw	a5,164(a5)
1c01044a:	99870713          	addi	a4,a4,-1640
1c01044e:	c789                	beqz	a5,1c010458 <__rt_bridge_check_bridge_req.part.5+0x1a>
1c010450:	4f94                	lw	a3,24(a5)
1c010452:	e681                	bnez	a3,1c01045a <__rt_bridge_check_bridge_req.part.5+0x1c>
1c010454:	0af72623          	sw	a5,172(a4)
1c010458:	8082                	ret
1c01045a:	479c                	lw	a5,8(a5)
1c01045c:	bfcd                	j	1c01044e <__rt_bridge_check_bridge_req.part.5+0x10>

1c01045e <__rt_bridge_wait>:
1c01045e:	014027f3          	csrr	a5,uhartid
1c010462:	02000713          	li	a4,32
1c010466:	ca5797b3          	p.extractu	a5,a5,5,5
1c01046a:	02e79c63          	bne	a5,a4,1c0104a2 <__rt_bridge_wait+0x44>
1c01046e:	1141                	addi	sp,sp,-16
1c010470:	c422                	sw	s0,8(sp)
1c010472:	1a106437          	lui	s0,0x1a106
1c010476:	c606                	sw	ra,12(sp)
1c010478:	00442783          	lw	a5,4(s0) # 1a106004 <__l1_end+0xa105fdc>
1c01047c:	c187b7b3          	p.bclr	a5,a5,0,24
1c010480:	00f42223          	sw	a5,4(s0)
1c010484:	4585                	li	a1,1
1c010486:	03800513          	li	a0,56
1c01048a:	18f000ef          	jal	ra,1c010e18 <__rt_periph_wait_event>
1c01048e:	00442783          	lw	a5,4(s0)
1c010492:	c187c7b3          	p.bset	a5,a5,0,24
1c010496:	00f42223          	sw	a5,4(s0)
1c01049a:	40b2                	lw	ra,12(sp)
1c01049c:	4422                	lw	s0,8(sp)
1c01049e:	0141                	addi	sp,sp,16
1c0104a0:	8082                	ret
1c0104a2:	8082                	ret

1c0104a4 <__rt_bridge_handle_notif>:
1c0104a4:	1141                	addi	sp,sp,-16
1c0104a6:	c422                	sw	s0,8(sp)
1c0104a8:	1c015437          	lui	s0,0x1c015
1c0104ac:	99840793          	addi	a5,s0,-1640 # 1c014998 <__hal_debug_struct>
1c0104b0:	0a47a783          	lw	a5,164(a5)
1c0104b4:	c606                	sw	ra,12(sp)
1c0104b6:	c226                	sw	s1,4(sp)
1c0104b8:	c04a                	sw	s2,0(sp)
1c0104ba:	99840413          	addi	s0,s0,-1640
1c0104be:	c399                	beqz	a5,1c0104c4 <__rt_bridge_handle_notif+0x20>
1c0104c0:	4bd8                	lw	a4,20(a5)
1c0104c2:	e31d                	bnez	a4,1c0104e8 <__rt_bridge_handle_notif+0x44>
1c0104c4:	0b442783          	lw	a5,180(s0)
1c0104c8:	c791                	beqz	a5,1c0104d4 <__rt_bridge_handle_notif+0x30>
1c0104ca:	43a8                	lw	a0,64(a5)
1c0104cc:	0a042a23          	sw	zero,180(s0)
1c0104d0:	f53ff0ef          	jal	ra,1c010422 <__rt_event_enqueue>
1c0104d4:	0ac42783          	lw	a5,172(s0)
1c0104d8:	ef85                	bnez	a5,1c010510 <__rt_bridge_handle_notif+0x6c>
1c0104da:	4422                	lw	s0,8(sp)
1c0104dc:	40b2                	lw	ra,12(sp)
1c0104de:	4492                	lw	s1,4(sp)
1c0104e0:	4902                	lw	s2,0(sp)
1c0104e2:	0141                	addi	sp,sp,16
1c0104e4:	f5bff06f          	j	1c01043e <__rt_bridge_check_bridge_req.part.5>
1c0104e8:	4784                	lw	s1,8(a5)
1c0104ea:	4fd8                	lw	a4,28(a5)
1c0104ec:	0a942223          	sw	s1,164(s0)
1c0104f0:	cb01                	beqz	a4,1c010500 <__rt_bridge_handle_notif+0x5c>
1c0104f2:	0b042703          	lw	a4,176(s0)
1c0104f6:	c798                	sw	a4,8(a5)
1c0104f8:	0af42823          	sw	a5,176(s0)
1c0104fc:	87a6                	mv	a5,s1
1c0104fe:	b7c1                	j	1c0104be <__rt_bridge_handle_notif+0x1a>
1c010500:	43a8                	lw	a0,64(a5)
1c010502:	30047973          	csrrci	s2,mstatus,8
1c010506:	f1dff0ef          	jal	ra,1c010422 <__rt_event_enqueue>
1c01050a:	30091073          	csrw	mstatus,s2
1c01050e:	b7fd                	j	1c0104fc <__rt_bridge_handle_notif+0x58>
1c010510:	40b2                	lw	ra,12(sp)
1c010512:	4422                	lw	s0,8(sp)
1c010514:	4492                	lw	s1,4(sp)
1c010516:	4902                	lw	s2,0(sp)
1c010518:	0141                	addi	sp,sp,16
1c01051a:	8082                	ret

1c01051c <__rt_bridge_check_connection>:
1c01051c:	1c0156b7          	lui	a3,0x1c015
1c010520:	99868693          	addi	a3,a3,-1640 # 1c014998 <__hal_debug_struct>
1c010524:	469c                	lw	a5,8(a3)
1c010526:	e3a1                	bnez	a5,1c010566 <__rt_bridge_check_connection+0x4a>
1c010528:	1a1047b7          	lui	a5,0x1a104
1c01052c:	07478793          	addi	a5,a5,116 # 1a104074 <__l1_end+0xa10404c>
1c010530:	4398                	lw	a4,0(a5)
1c010532:	8325                	srli	a4,a4,0x9
1c010534:	f8373733          	p.bclr	a4,a4,28,3
1c010538:	02773763          	p.bneimm	a4,7,1c010566 <__rt_bridge_check_connection+0x4a>
1c01053c:	1141                	addi	sp,sp,-16
1c01053e:	c422                	sw	s0,8(sp)
1c010540:	c606                	sw	ra,12(sp)
1c010542:	4705                	li	a4,1
1c010544:	c698                	sw	a4,8(a3)
1c010546:	4709                	li	a4,2
1c010548:	c398                	sw	a4,0(a5)
1c01054a:	843e                	mv	s0,a5
1c01054c:	401c                	lw	a5,0(s0)
1c01054e:	83a5                	srli	a5,a5,0x9
1c010550:	f837b7b3          	p.bclr	a5,a5,28,3
1c010554:	0077a663          	p.beqimm	a5,7,1c010560 <__rt_bridge_check_connection+0x44>
1c010558:	40b2                	lw	ra,12(sp)
1c01055a:	4422                	lw	s0,8(sp)
1c01055c:	0141                	addi	sp,sp,16
1c01055e:	8082                	ret
1c010560:	effff0ef          	jal	ra,1c01045e <__rt_bridge_wait>
1c010564:	b7e5                	j	1c01054c <__rt_bridge_check_connection+0x30>
1c010566:	8082                	ret

1c010568 <__rt_bridge_set_available>:
1c010568:	1c0157b7          	lui	a5,0x1c015
1c01056c:	99878793          	addi	a5,a5,-1640 # 1c014998 <__hal_debug_struct>
1c010570:	4798                	lw	a4,8(a5)
1c010572:	1a1047b7          	lui	a5,0x1a104
1c010576:	07478793          	addi	a5,a5,116 # 1a104074 <__l1_end+0xa10404c>
1c01057a:	e701                	bnez	a4,1c010582 <__rt_bridge_set_available+0x1a>
1c01057c:	4721                	li	a4,8
1c01057e:	c398                	sw	a4,0(a5)
1c010580:	8082                	ret
1c010582:	4709                	li	a4,2
1c010584:	bfed                	j	1c01057e <__rt_bridge_set_available+0x16>

1c010586 <__rt_bridge_send_notif>:
1c010586:	1141                	addi	sp,sp,-16
1c010588:	c606                	sw	ra,12(sp)
1c01058a:	f93ff0ef          	jal	ra,1c01051c <__rt_bridge_check_connection>
1c01058e:	1c0157b7          	lui	a5,0x1c015
1c010592:	99878793          	addi	a5,a5,-1640 # 1c014998 <__hal_debug_struct>
1c010596:	479c                	lw	a5,8(a5)
1c010598:	c789                	beqz	a5,1c0105a2 <__rt_bridge_send_notif+0x1c>
1c01059a:	1a1047b7          	lui	a5,0x1a104
1c01059e:	4719                	li	a4,6
1c0105a0:	dbf8                	sw	a4,116(a5)
1c0105a2:	40b2                	lw	ra,12(sp)
1c0105a4:	0141                	addi	sp,sp,16
1c0105a6:	8082                	ret

1c0105a8 <__rt_bridge_clear_notif>:
  #endif
  }
}

void __rt_bridge_clear_notif()
{
1c0105a8:	1141                	addi	sp,sp,-16
1c0105aa:	c606                	sw	ra,12(sp)
  hal_debug_struct_t *debug_struct = hal_debug_struct_get();

  __rt_bridge_check_connection();
1c0105ac:	f71ff0ef          	jal	ra,1c01051c <__rt_bridge_check_connection>

  if (debug_struct->bridge.connected)
1c0105b0:	1c0157b7          	lui	a5,0x1c015
1c0105b4:	99878793          	addi	a5,a5,-1640 # 1c014998 <__hal_debug_struct>
1c0105b8:	479c                	lw	a5,8(a5)
1c0105ba:	c789                	beqz	a5,1c0105c4 <__rt_bridge_clear_notif+0x1c>
  {
    __rt_bridge_set_available();
  }
}
1c0105bc:	40b2                	lw	ra,12(sp)
1c0105be:	0141                	addi	sp,sp,16
    __rt_bridge_set_available();
1c0105c0:	fa9ff06f          	j	1c010568 <__rt_bridge_set_available>
}
1c0105c4:	40b2                	lw	ra,12(sp)
1c0105c6:	0141                	addi	sp,sp,16
1c0105c8:	8082                	ret

1c0105ca <__rt_bridge_printf_flush>:
{
1c0105ca:	1141                	addi	sp,sp,-16
1c0105cc:	c422                	sw	s0,8(sp)
1c0105ce:	c606                	sw	ra,12(sp)
  if (debug_struct->bridge.connected)
1c0105d0:	1c015437          	lui	s0,0x1c015
  __rt_bridge_check_connection();
1c0105d4:	f49ff0ef          	jal	ra,1c01051c <__rt_bridge_check_connection>
  if (debug_struct->bridge.connected)
1c0105d8:	99840793          	addi	a5,s0,-1640 # 1c014998 <__hal_debug_struct>
1c0105dc:	479c                	lw	a5,8(a5)
1c0105de:	c39d                	beqz	a5,1c010604 <__rt_bridge_printf_flush+0x3a>
1c0105e0:	99840413          	addi	s0,s0,-1640
  return *(volatile uint32_t *)&debug_struct->putc_current == 0;
}

static inline int hal_debug_is_busy(hal_debug_struct_t *debug_struct)
{
  return *(volatile uint32_t *)&debug_struct->pending_putchar;
1c0105e4:	485c                	lw	a5,20(s0)
    if (hal_debug_is_busy(hal_debug_struct_get()) || !hal_debug_is_empty(hal_debug_struct_get()))
1c0105e6:	e399                	bnez	a5,1c0105ec <__rt_bridge_printf_flush+0x22>
  return *(volatile uint32_t *)&debug_struct->putc_current == 0;
1c0105e8:	4c1c                	lw	a5,24(s0)
1c0105ea:	cf89                	beqz	a5,1c010604 <__rt_bridge_printf_flush+0x3a>
      __rt_bridge_send_notif();
1c0105ec:	f9bff0ef          	jal	ra,1c010586 <__rt_bridge_send_notif>
  return *(volatile uint32_t *)&debug_struct->pending_putchar;
1c0105f0:	485c                	lw	a5,20(s0)
      while(hal_debug_is_busy(hal_debug_struct_get()))
1c0105f2:	e791                	bnez	a5,1c0105fe <__rt_bridge_printf_flush+0x34>
}
1c0105f4:	4422                	lw	s0,8(sp)
1c0105f6:	40b2                	lw	ra,12(sp)
1c0105f8:	0141                	addi	sp,sp,16
      __rt_bridge_clear_notif();
1c0105fa:	fafff06f          	j	1c0105a8 <__rt_bridge_clear_notif>
        __rt_bridge_wait();
1c0105fe:	e61ff0ef          	jal	ra,1c01045e <__rt_bridge_wait>
1c010602:	b7fd                	j	1c0105f0 <__rt_bridge_printf_flush+0x26>
}
1c010604:	40b2                	lw	ra,12(sp)
1c010606:	4422                	lw	s0,8(sp)
1c010608:	0141                	addi	sp,sp,16
1c01060a:	8082                	ret

1c01060c <__rt_bridge_req_shutdown>:
{
1c01060c:	1141                	addi	sp,sp,-16
1c01060e:	c606                	sw	ra,12(sp)
1c010610:	c422                	sw	s0,8(sp)
  __rt_bridge_check_connection();
1c010612:	f0bff0ef          	jal	ra,1c01051c <__rt_bridge_check_connection>
  if (debug_struct->bridge.connected)
1c010616:	1c0157b7          	lui	a5,0x1c015
1c01061a:	99878793          	addi	a5,a5,-1640 # 1c014998 <__hal_debug_struct>
1c01061e:	479c                	lw	a5,8(a5)
1c010620:	c7a9                	beqz	a5,1c01066a <__rt_bridge_req_shutdown+0x5e>




static inline unsigned int apb_soc_jtag_reg_read() {
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c010622:	1a104437          	lui	s0,0x1a104
    __rt_bridge_printf_flush();
1c010626:	fa5ff0ef          	jal	ra,1c0105ca <__rt_bridge_printf_flush>
1c01062a:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa10404c>
1c01062e:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) == 7)
1c010630:	83a5                	srli	a5,a5,0x9
1c010632:	f837b7b3          	p.bclr	a5,a5,28,3
1c010636:	0277ae63          	p.beqimm	a5,7,1c010672 <__rt_bridge_req_shutdown+0x66>
}

static inline void apb_soc_jtag_reg_write(unsigned int value) {
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET, value);
1c01063a:	4791                	li	a5,4
1c01063c:	c01c                	sw	a5,0(s0)
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c01063e:	1a104437          	lui	s0,0x1a104
1c010642:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa10404c>
1c010646:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) != 7)
1c010648:	83a5                	srli	a5,a5,0x9
1c01064a:	f837b7b3          	p.bclr	a5,a5,28,3
1c01064e:	0277b563          	p.bneimm	a5,7,1c010678 <__rt_bridge_req_shutdown+0x6c>
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET, value);
1c010652:	00042023          	sw	zero,0(s0)
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c010656:	1a104437          	lui	s0,0x1a104
1c01065a:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa10404c>
1c01065e:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) == 7)
1c010660:	83a5                	srli	a5,a5,0x9
1c010662:	f837b7b3          	p.bclr	a5,a5,28,3
1c010666:	0077ac63          	p.beqimm	a5,7,1c01067e <__rt_bridge_req_shutdown+0x72>
}
1c01066a:	40b2                	lw	ra,12(sp)
1c01066c:	4422                	lw	s0,8(sp)
1c01066e:	0141                	addi	sp,sp,16
1c010670:	8082                	ret
      __rt_bridge_wait();
1c010672:	dedff0ef          	jal	ra,1c01045e <__rt_bridge_wait>
1c010676:	bf65                	j	1c01062e <__rt_bridge_req_shutdown+0x22>
      __rt_bridge_wait();
1c010678:	de7ff0ef          	jal	ra,1c01045e <__rt_bridge_wait>
1c01067c:	b7e9                	j	1c010646 <__rt_bridge_req_shutdown+0x3a>
      __rt_bridge_wait();
1c01067e:	de1ff0ef          	jal	ra,1c01045e <__rt_bridge_wait>
1c010682:	bff1                	j	1c01065e <__rt_bridge_req_shutdown+0x52>

1c010684 <__rt_bridge_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_bridge_init()
{
  hal_bridge_t *bridge = hal_bridge_get();
  
  bridge->first_req = 0;
1c010684:	1c0157b7          	lui	a5,0x1c015
  bridge->notif_req_addr = ARCHI_FC_ITC_ADDR + ITC_STATUS_SET_OFFSET;
  bridge->notif_req_value = 1<<RT_BRIDGE_ENQUEUE_EVENT;
#else
#if defined(EU_VERSION) && EU_VERSION >= 3
#if defined(ARCHI_HAS_FC)
  bridge->notif_req_addr = ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_BRIDGE_ENQUEUE_EVENT << 2);
1c010688:	1b201737          	lui	a4,0x1b201
  bridge->first_req = 0;
1c01068c:	99878793          	addi	a5,a5,-1640 # 1c014998 <__hal_debug_struct>
  bridge->notif_req_addr = ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_BRIDGE_ENQUEUE_EVENT << 2);
1c010690:	e1070713          	addi	a4,a4,-496 # 1b200e10 <__fc_tcdm_end+0x1ffe40>
1c010694:	0ae7ac23          	sw	a4,184(a5)
  bridge->notif_req_value = 1;
1c010698:	4705                	li	a4,1
  bridge->first_req = 0;
1c01069a:	0a07a223          	sw	zero,164(a5)
  bridge->first_bridge_req = 0;
1c01069e:	0a07a623          	sw	zero,172(a5)
  bridge->target_req = 0;
1c0106a2:	0a07aa23          	sw	zero,180(a5)
  bridge->notif_req_value = 1;
1c0106a6:	0ae7ae23          	sw	a4,188(a5)
#endif
#endif
#endif

  __rt_bridge_eeprom_handle = NULL;
1c0106aa:	00400793          	li	a5,4
1c0106ae:	0007a823          	sw	zero,16(a5)
  __rt_bridge_flash_handle = NULL;
1c0106b2:	0007a023          	sw	zero,0(a5)
}
1c0106b6:	8082                	ret

1c0106b8 <__rt_event_init>:
{
  __rt_event_execute(sched, 0);
  rt_wait_for_interrupt();
  rt_irq_enable();
  rt_irq_disable();
}
1c0106b8:	1141                	addi	sp,sp,-16
1c0106ba:	c422                	sw	s0,8(sp)
1c0106bc:	c606                	sw	ra,12(sp)
1c0106be:	842a                	mv	s0,a0
1c0106c0:	02052223          	sw	zero,36(a0)
1c0106c4:	02052423          	sw	zero,40(a0)
1c0106c8:	45c1                	li	a1,16
1c0106ca:	4501                	li	a0,0
1c0106cc:	2cbd                	jal	1c01094a <rt_alloc>
1c0106ce:	dc68                	sw	a0,124(s0)
1c0106d0:	02042a23          	sw	zero,52(s0)
1c0106d4:	00042223          	sw	zero,4(s0)
1c0106d8:	40b2                	lw	ra,12(sp)
1c0106da:	4422                	lw	s0,8(sp)
1c0106dc:	0141                	addi	sp,sp,16
1c0106de:	8082                	ret

1c0106e0 <__rt_wait_event_prepare_blocking>:
1c0106e0:	01800793          	li	a5,24
1c0106e4:	4388                	lw	a0,0(a5)
1c0106e6:	4118                	lw	a4,0(a0)
1c0106e8:	02052423          	sw	zero,40(a0)
1c0106ec:	00052223          	sw	zero,4(a0)
1c0106f0:	c398                	sw	a4,0(a5)
1c0106f2:	4785                	li	a5,1
1c0106f4:	d15c                	sw	a5,36(a0)
1c0106f6:	8082                	ret

1c0106f8 <rt_event_alloc>:
1c0106f8:	1101                	addi	sp,sp,-32
1c0106fa:	c64e                	sw	s3,12(sp)
1c0106fc:	89ae                	mv	s3,a1
1c0106fe:	ce06                	sw	ra,28(sp)
1c010700:	cc22                	sw	s0,24(sp)
1c010702:	ca26                	sw	s1,20(sp)
1c010704:	c84a                	sw	s2,16(sp)
1c010706:	c452                	sw	s4,8(sp)
1c010708:	c256                	sw	s5,4(sp)
1c01070a:	30047a73          	csrrci	s4,mstatus,8
1c01070e:	014027f3          	csrr	a5,uhartid
1c010712:	8795                	srai	a5,a5,0x5
1c010714:	f267b7b3          	p.bclr	a5,a5,25,6
1c010718:	02000713          	li	a4,32
1c01071c:	00278513          	addi	a0,a5,2
1c010720:	00e79363          	bne	a5,a4,1c010726 <rt_event_alloc+0x2e>
1c010724:	4505                	li	a0,1
1c010726:	00799593          	slli	a1,s3,0x7
1c01072a:	2405                	jal	1c01094a <rt_alloc>
1c01072c:	842a                	mv	s0,a0
1c01072e:	557d                	li	a0,-1
1c010730:	c819                	beqz	s0,1c010746 <rt_event_alloc+0x4e>
1c010732:	01800493          	li	s1,24
1c010736:	4901                	li	s2,0
1c010738:	00448a93          	addi	s5,s1,4
1c01073c:	01394e63          	blt	s2,s3,1c010758 <rt_event_alloc+0x60>
1c010740:	300a1073          	csrw	mstatus,s4
1c010744:	4501                	li	a0,0
1c010746:	40f2                	lw	ra,28(sp)
1c010748:	4462                	lw	s0,24(sp)
1c01074a:	44d2                	lw	s1,20(sp)
1c01074c:	4942                	lw	s2,16(sp)
1c01074e:	49b2                	lw	s3,12(sp)
1c010750:	4a22                	lw	s4,8(sp)
1c010752:	4a92                	lw	s5,4(sp)
1c010754:	6105                	addi	sp,sp,32
1c010756:	8082                	ret
1c010758:	8522                	mv	a0,s0
1c01075a:	85d6                	mv	a1,s5
1c01075c:	f5dff0ef          	jal	ra,1c0106b8 <__rt_event_init>
1c010760:	409c                	lw	a5,0(s1)
1c010762:	0905                	addi	s2,s2,1
1c010764:	c01c                	sw	a5,0(s0)
1c010766:	c080                	sw	s0,0(s1)
1c010768:	08040413          	addi	s0,s0,128
1c01076c:	bfc1                	j	1c01073c <rt_event_alloc+0x44>

1c01076e <rt_event_get>:
1c01076e:	30047773          	csrrci	a4,mstatus,8
1c010772:	01800793          	li	a5,24
1c010776:	4388                	lw	a0,0(a5)
1c010778:	c509                	beqz	a0,1c010782 <rt_event_get+0x14>
1c01077a:	4114                	lw	a3,0(a0)
1c01077c:	c14c                	sw	a1,4(a0)
1c01077e:	c510                	sw	a2,8(a0)
1c010780:	c394                	sw	a3,0(a5)
1c010782:	30071073          	csrw	mstatus,a4
1c010786:	8082                	ret

1c010788 <rt_event_get_blocking>:
1c010788:	30047773          	csrrci	a4,mstatus,8
1c01078c:	01800793          	li	a5,24
1c010790:	4388                	lw	a0,0(a5)
1c010792:	c909                	beqz	a0,1c0107a4 <rt_event_get_blocking+0x1c>
1c010794:	4114                	lw	a3,0(a0)
1c010796:	00052223          	sw	zero,4(a0)
1c01079a:	00052423          	sw	zero,8(a0)
1c01079e:	c394                	sw	a3,0(a5)
1c0107a0:	4785                	li	a5,1
1c0107a2:	d15c                	sw	a5,36(a0)
1c0107a4:	30071073          	csrw	mstatus,a4
1c0107a8:	8082                	ret

1c0107aa <rt_event_push>:
1c0107aa:	30047773          	csrrci	a4,mstatus,8
1c0107ae:	01800693          	li	a3,24
1c0107b2:	42d4                	lw	a3,4(a3)
1c0107b4:	00052023          	sw	zero,0(a0)
1c0107b8:	01800793          	li	a5,24
1c0107bc:	e691                	bnez	a3,1c0107c8 <rt_event_push+0x1e>
1c0107be:	c3c8                	sw	a0,4(a5)
1c0107c0:	c788                	sw	a0,8(a5)
1c0107c2:	30071073          	csrw	mstatus,a4
1c0107c6:	8082                	ret
1c0107c8:	4794                	lw	a3,8(a5)
1c0107ca:	c288                	sw	a0,0(a3)
1c0107cc:	bfd5                	j	1c0107c0 <rt_event_push+0x16>

1c0107ce <__rt_event_execute>:
1c0107ce:	1141                	addi	sp,sp,-16
1c0107d0:	c422                	sw	s0,8(sp)
1c0107d2:	01800793          	li	a5,24
1c0107d6:	43dc                	lw	a5,4(a5)
1c0107d8:	c606                	sw	ra,12(sp)
1c0107da:	c226                	sw	s1,4(sp)
1c0107dc:	01800413          	li	s0,24
1c0107e0:	ef81                	bnez	a5,1c0107f8 <__rt_event_execute+0x2a>
1c0107e2:	c1b9                	beqz	a1,1c010828 <__rt_event_execute+0x5a>
1c0107e4:	002047b7          	lui	a5,0x204
1c0107e8:	0387e703          	p.elw	a4,56(a5) # 204038 <__L2+0x184038>
1c0107ec:	300467f3          	csrrsi	a5,mstatus,8
1c0107f0:	300477f3          	csrrci	a5,mstatus,8
1c0107f4:	405c                	lw	a5,4(s0)
1c0107f6:	cb8d                	beqz	a5,1c010828 <__rt_event_execute+0x5a>
1c0107f8:	4485                	li	s1,1
1c0107fa:	4398                	lw	a4,0(a5)
1c0107fc:	5794                	lw	a3,40(a5)
1c0107fe:	00978a23          	sb	s1,20(a5)
1c010802:	c058                	sw	a4,4(s0)
1c010804:	4788                	lw	a0,8(a5)
1c010806:	43d8                	lw	a4,4(a5)
1c010808:	e691                	bnez	a3,1c010814 <__rt_event_execute+0x46>
1c01080a:	53d4                	lw	a3,36(a5)
1c01080c:	e681                	bnez	a3,1c010814 <__rt_event_execute+0x46>
1c01080e:	4014                	lw	a3,0(s0)
1c010810:	c394                	sw	a3,0(a5)
1c010812:	c01c                	sw	a5,0(s0)
1c010814:	0207a223          	sw	zero,36(a5)
1c010818:	c711                	beqz	a4,1c010824 <__rt_event_execute+0x56>
1c01081a:	300467f3          	csrrsi	a5,mstatus,8
1c01081e:	9702                	jalr	a4
1c010820:	300477f3          	csrrci	a5,mstatus,8
1c010824:	405c                	lw	a5,4(s0)
1c010826:	fbf1                	bnez	a5,1c0107fa <__rt_event_execute+0x2c>
1c010828:	40b2                	lw	ra,12(sp)
1c01082a:	4422                	lw	s0,8(sp)
1c01082c:	4492                	lw	s1,4(sp)
1c01082e:	0141                	addi	sp,sp,16
1c010830:	8082                	ret

1c010832 <__rt_wait_event>:
  } while(event);

}

void __rt_wait_event(rt_event_t *event)
{
1c010832:	1141                	addi	sp,sp,-16
1c010834:	c422                	sw	s0,8(sp)
1c010836:	c606                	sw	ra,12(sp)
1c010838:	842a                	mv	s0,a0
  while (event->implem.pending || event->implem.saved_pending) {
1c01083a:	505c                	lw	a5,36(s0)
1c01083c:	ef81                	bnez	a5,1c010854 <__rt_wait_event+0x22>
1c01083e:	585c                	lw	a5,52(s0)
1c010840:	eb91                	bnez	a5,1c010854 <__rt_wait_event+0x22>
    __rt_event_execute(NULL, 1);
  }

  event->next = __rt_first_free;
1c010842:	01800793          	li	a5,24
1c010846:	4398                	lw	a4,0(a5)
  __rt_first_free = event;
}
1c010848:	40b2                	lw	ra,12(sp)
  event->next = __rt_first_free;
1c01084a:	c018                	sw	a4,0(s0)
  __rt_first_free = event;
1c01084c:	c380                	sw	s0,0(a5)
}
1c01084e:	4422                	lw	s0,8(sp)
1c010850:	0141                	addi	sp,sp,16
1c010852:	8082                	ret
    __rt_event_execute(NULL, 1);
1c010854:	4585                	li	a1,1
1c010856:	4501                	li	a0,0
1c010858:	f77ff0ef          	jal	ra,1c0107ce <__rt_event_execute>
1c01085c:	bff9                	j	1c01083a <__rt_wait_event+0x8>

1c01085e <rt_event_wait>:

void rt_event_wait(rt_event_t *event)
{
1c01085e:	1141                	addi	sp,sp,-16
1c010860:	c606                	sw	ra,12(sp)
1c010862:	c422                	sw	s0,8(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c010864:	30047473          	csrrci	s0,mstatus,8
  int irq = rt_irq_disable();
__rt_wait_event(event);
1c010868:	fcbff0ef          	jal	ra,1c010832 <__rt_wait_event>
  __builtin_pulp_spr_write(reg, val);
1c01086c:	30041073          	csrw	mstatus,s0
  rt_irq_restore(irq);
}
1c010870:	40b2                	lw	ra,12(sp)
1c010872:	4422                	lw	s0,8(sp)
1c010874:	0141                	addi	sp,sp,16
1c010876:	8082                	ret

1c010878 <__rt_event_sched_init>:

void __rt_event_sched_init()
{
  __rt_first_free = NULL;
1c010878:	01800513          	li	a0,24
1c01087c:	00052023          	sw	zero,0(a0)
  sched->first = NULL;
1c010880:	00052223          	sw	zero,4(a0)
  rt_event_sched_init(&__rt_sched);
  // Push one event ot the runtime scheduler as some runtime services need
  // one event.
  rt_event_alloc(&__rt_sched, 1);
1c010884:	4585                	li	a1,1
1c010886:	0511                	addi	a0,a0,4
1c010888:	e71ff06f          	j	1c0106f8 <rt_event_alloc>

1c01088c <pi_task_push_delayed_us>:
}

void pi_task_push_delayed_us(pi_task_t *task, uint32_t delay)
{
  rt_event_push_delayed(task, delay);
1c01088c:	ac35                	j	1c010ac8 <rt_event_push_delayed>

1c01088e <pi_cl_send_task_to_fc>:
}

static inline void __rt_task_init_from_cluster(pi_task_t *task)
{
  task->implem.keep = 1;
1c01088e:	4785                	li	a5,1
1c010890:	d51c                	sw	a5,40(a0)
#ifdef ARCHI_HAS_CLUSTER

void pi_cl_send_task_to_fc(pi_task_t *task)
{
  __rt_task_init_from_cluster(task);
  __rt_cluster_push_fc_event(task);
1c010892:	60f0006f          	j	1c0116a0 <__rt_cluster_push_fc_event>

1c010896 <rt_user_alloc_init>:
  rt_alloc_cluster(RT_ALLOC_PERIPH, size, (rt_alloc_req_t *)req);
}

void pi_cl_l2_free(void *chunk, int size, pi_cl_free_req_t *req)
{
  rt_free_cluster(RT_ALLOC_PERIPH, chunk, size, (rt_free_req_t *)req);
1c010896:	00758793          	addi	a5,a1,7
1c01089a:	c407b7b3          	p.bclr	a5,a5,2,0
1c01089e:	40b785b3          	sub	a1,a5,a1
1c0108a2:	c11c                	sw	a5,0(a0)
1c0108a4:	8e0d                	sub	a2,a2,a1
1c0108a6:	00c05763          	blez	a2,1c0108b4 <rt_user_alloc_init+0x1e>
1c0108aa:	c4063633          	p.bclr	a2,a2,2,0
1c0108ae:	c390                	sw	a2,0(a5)
1c0108b0:	0007a223          	sw	zero,4(a5)
1c0108b4:	8082                	ret

1c0108b6 <rt_user_alloc>:
1c0108b6:	411c                	lw	a5,0(a0)
1c0108b8:	059d                	addi	a1,a1,7
1c0108ba:	c405b5b3          	p.bclr	a1,a1,2,0
1c0108be:	4701                	li	a4,0
1c0108c0:	cb89                	beqz	a5,1c0108d2 <rt_user_alloc+0x1c>
1c0108c2:	4394                	lw	a3,0(a5)
1c0108c4:	43d0                	lw	a2,4(a5)
1c0108c6:	00b6c863          	blt	a3,a1,1c0108d6 <rt_user_alloc+0x20>
1c0108ca:	00b69b63          	bne	a3,a1,1c0108e0 <rt_user_alloc+0x2a>
1c0108ce:	c719                	beqz	a4,1c0108dc <rt_user_alloc+0x26>
1c0108d0:	c350                	sw	a2,4(a4)
1c0108d2:	853e                	mv	a0,a5
1c0108d4:	8082                	ret
1c0108d6:	873e                	mv	a4,a5
1c0108d8:	87b2                	mv	a5,a2
1c0108da:	b7dd                	j	1c0108c0 <rt_user_alloc+0xa>
1c0108dc:	c110                	sw	a2,0(a0)
1c0108de:	bfd5                	j	1c0108d2 <rt_user_alloc+0x1c>
1c0108e0:	00b78833          	add	a6,a5,a1
1c0108e4:	40b685b3          	sub	a1,a3,a1
1c0108e8:	00b82023          	sw	a1,0(a6)
1c0108ec:	00c82223          	sw	a2,4(a6)
1c0108f0:	c701                	beqz	a4,1c0108f8 <rt_user_alloc+0x42>
1c0108f2:	01072223          	sw	a6,4(a4)
1c0108f6:	bff1                	j	1c0108d2 <rt_user_alloc+0x1c>
1c0108f8:	01052023          	sw	a6,0(a0)
1c0108fc:	bfd9                	j	1c0108d2 <rt_user_alloc+0x1c>

1c0108fe <rt_user_free>:
1c0108fe:	411c                	lw	a5,0(a0)
1c010900:	061d                	addi	a2,a2,7
1c010902:	c4063633          	p.bclr	a2,a2,2,0
1c010906:	4701                	li	a4,0
1c010908:	c399                	beqz	a5,1c01090e <rt_user_free+0x10>
1c01090a:	02b7e763          	bltu	a5,a1,1c010938 <rt_user_free+0x3a>
1c01090e:	00c586b3          	add	a3,a1,a2
1c010912:	02d79663          	bne	a5,a3,1c01093e <rt_user_free+0x40>
1c010916:	4394                	lw	a3,0(a5)
1c010918:	43dc                	lw	a5,4(a5)
1c01091a:	9636                	add	a2,a2,a3
1c01091c:	c190                	sw	a2,0(a1)
1c01091e:	c1dc                	sw	a5,4(a1)
1c010920:	c31d                	beqz	a4,1c010946 <rt_user_free+0x48>
1c010922:	4314                	lw	a3,0(a4)
1c010924:	00d707b3          	add	a5,a4,a3
1c010928:	00f59d63          	bne	a1,a5,1c010942 <rt_user_free+0x44>
1c01092c:	419c                	lw	a5,0(a1)
1c01092e:	97b6                	add	a5,a5,a3
1c010930:	c31c                	sw	a5,0(a4)
1c010932:	41dc                	lw	a5,4(a1)
1c010934:	c35c                	sw	a5,4(a4)
1c010936:	8082                	ret
1c010938:	873e                	mv	a4,a5
1c01093a:	43dc                	lw	a5,4(a5)
1c01093c:	b7f1                	j	1c010908 <rt_user_free+0xa>
1c01093e:	c190                	sw	a2,0(a1)
1c010940:	bff9                	j	1c01091e <rt_user_free+0x20>
1c010942:	c34c                	sw	a1,4(a4)
1c010944:	8082                	ret
1c010946:	c10c                	sw	a1,0(a0)
1c010948:	8082                	ret

1c01094a <rt_alloc>:
1c01094a:	4785                	li	a5,1
1c01094c:	00a7fb63          	bleu	a0,a5,1c010962 <rt_alloc+0x18>
1c010950:	1c0157b7          	lui	a5,0x1c015
1c010954:	03c7a783          	lw	a5,60(a5) # 1c01503c <__rt_alloc_l1>
1c010958:	1579                	addi	a0,a0,-2
1c01095a:	050a                	slli	a0,a0,0x2
1c01095c:	953e                	add	a0,a0,a5
1c01095e:	f59ff06f          	j	1c0108b6 <rt_user_alloc>
1c010962:	00153763          	p.bneimm	a0,1,1c010970 <rt_alloc+0x26>
1c010966:	1c015537          	lui	a0,0x1c015
1c01096a:	04450513          	addi	a0,a0,68 # 1c015044 <__rt_alloc_fc_tcdm>
1c01096e:	bfc5                	j	1c01095e <rt_alloc+0x14>
1c010970:	1c015537          	lui	a0,0x1c015
1c010974:	04050513          	addi	a0,a0,64 # 1c015040 <__rt_alloc_l2>
1c010978:	b7dd                	j	1c01095e <rt_alloc+0x14>

1c01097a <rt_free>:
1c01097a:	4785                	li	a5,1
1c01097c:	00a7fb63          	bleu	a0,a5,1c010992 <rt_free+0x18>
1c010980:	1c0157b7          	lui	a5,0x1c015
1c010984:	03c7a783          	lw	a5,60(a5) # 1c01503c <__rt_alloc_l1>
1c010988:	1579                	addi	a0,a0,-2
1c01098a:	050a                	slli	a0,a0,0x2
1c01098c:	953e                	add	a0,a0,a5
1c01098e:	f71ff06f          	j	1c0108fe <rt_user_free>
1c010992:	c511                	beqz	a0,1c01099e <rt_free+0x24>
1c010994:	1c015537          	lui	a0,0x1c015
1c010998:	04450513          	addi	a0,a0,68 # 1c015044 <__rt_alloc_fc_tcdm>
1c01099c:	bfcd                	j	1c01098e <rt_free+0x14>
1c01099e:	1c015537          	lui	a0,0x1c015
1c0109a2:	04050513          	addi	a0,a0,64 # 1c015040 <__rt_alloc_l2>
1c0109a6:	b7e5                	j	1c01098e <rt_free+0x14>

1c0109a8 <__rt_alloc_init_l1>:
1c0109a8:	1c0157b7          	lui	a5,0x1c015
1c0109ac:	03c7a703          	lw	a4,60(a5) # 1c01503c <__rt_alloc_l1>
1c0109b0:	100007b7          	lui	a5,0x10000
1c0109b4:	01651593          	slli	a1,a0,0x16
1c0109b8:	6641                	lui	a2,0x10
1c0109ba:	050a                	slli	a0,a0,0x2
1c0109bc:	02878793          	addi	a5,a5,40 # 10000028 <__l1_end>
1c0109c0:	fd860613          	addi	a2,a2,-40 # ffd8 <__l1_heap_size>
1c0109c4:	95be                	add	a1,a1,a5
1c0109c6:	953a                	add	a0,a0,a4
1c0109c8:	ecfff06f          	j	1c010896 <rt_user_alloc_init>

1c0109cc <__rt_alloc_init_l1_for_fc>:
1c0109cc:	100005b7          	lui	a1,0x10000
1c0109d0:	01651793          	slli	a5,a0,0x16
1c0109d4:	02858593          	addi	a1,a1,40 # 10000028 <__l1_end>
1c0109d8:	00b78733          	add	a4,a5,a1
1c0109dc:	050a                	slli	a0,a0,0x2
1c0109de:	0791                	addi	a5,a5,4
1c0109e0:	6641                	lui	a2,0x10
1c0109e2:	1c0156b7          	lui	a3,0x1c015
1c0109e6:	fd460613          	addi	a2,a2,-44 # ffd4 <__rt_stack_size+0xf7d4>
1c0109ea:	95be                	add	a1,a1,a5
1c0109ec:	953a                	add	a0,a0,a4
1c0109ee:	02e6ae23          	sw	a4,60(a3) # 1c01503c <__rt_alloc_l1>
1c0109f2:	ea5ff06f          	j	1c010896 <rt_user_alloc_init>

1c0109f6 <__rt_allocs_init>:
1c0109f6:	1c0155b7          	lui	a1,0x1c015
1c0109fa:	0a858793          	addi	a5,a1,168 # 1c0150a8 <__l2_end>
1c0109fe:	1c080637          	lui	a2,0x1c080
1c010a02:	1c015537          	lui	a0,0x1c015
1c010a06:	1141                	addi	sp,sp,-16
1c010a08:	8e1d                	sub	a2,a2,a5
1c010a0a:	0a858593          	addi	a1,a1,168
1c010a0e:	04050513          	addi	a0,a0,64 # 1c015040 <__rt_alloc_l2>
1c010a12:	c606                	sw	ra,12(sp)
1c010a14:	c422                	sw	s0,8(sp)
1c010a16:	e81ff0ef          	jal	ra,1c010896 <rt_user_alloc_init>
1c010a1a:	1b0015b7          	lui	a1,0x1b001
1c010a1e:	fd058793          	addi	a5,a1,-48 # 1b000fd0 <__fc_tcdm_end>
1c010a22:	1b004637          	lui	a2,0x1b004
1c010a26:	1c015437          	lui	s0,0x1c015
1c010a2a:	8e1d                	sub	a2,a2,a5
1c010a2c:	fd058593          	addi	a1,a1,-48
1c010a30:	04440513          	addi	a0,s0,68 # 1c015044 <__rt_alloc_fc_tcdm>
1c010a34:	e63ff0ef          	jal	ra,1c010896 <rt_user_alloc_init>
1c010a38:	014027f3          	csrr	a5,uhartid
1c010a3c:	ca5797b3          	p.extractu	a5,a5,5,5
1c010a40:	e799                	bnez	a5,1c010a4e <__rt_allocs_init+0x58>
1c010a42:	4422                	lw	s0,8(sp)
1c010a44:	40b2                	lw	ra,12(sp)
1c010a46:	4501                	li	a0,0
1c010a48:	0141                	addi	sp,sp,16
1c010a4a:	f83ff06f          	j	1c0109cc <__rt_alloc_init_l1_for_fc>
1c010a4e:	04440513          	addi	a0,s0,68
1c010a52:	4591                	li	a1,4
1c010a54:	e63ff0ef          	jal	ra,1c0108b6 <rt_user_alloc>
1c010a58:	40b2                	lw	ra,12(sp)
1c010a5a:	4422                	lw	s0,8(sp)
1c010a5c:	1c0157b7          	lui	a5,0x1c015
1c010a60:	02a7ae23          	sw	a0,60(a5) # 1c01503c <__rt_alloc_l1>
1c010a64:	0141                	addi	sp,sp,16
1c010a66:	8082                	ret

1c010a68 <pi_cl_l1_malloc>:
}

void *pi_cl_l1_malloc(struct pi_device *device, uint32_t size)
{
  return rt_alloc(RT_ALLOC_CL_DATA, size);
1c010a68:	4509                	li	a0,2
1c010a6a:	ee1ff06f          	j	1c01094a <rt_alloc>

1c010a6e <pi_cl_l1_free>:
  if (flags >= RT_ALLOC_CL_DATA) return rt_user_free(rt_alloc_l1(flags - RT_ALLOC_CL_DATA), _chunk, size);
1c010a6e:	1c0157b7          	lui	a5,0x1c015
1c010a72:	03c7a503          	lw	a0,60(a5) # 1c01503c <__rt_alloc_l1>
1c010a76:	e89ff06f          	j	1c0108fe <rt_user_free>

1c010a7a <pi_l2_malloc>:
    return rt_user_alloc(rt_alloc_l2(), size);
1c010a7a:	85aa                	mv	a1,a0
1c010a7c:	1c015537          	lui	a0,0x1c015
1c010a80:	04050513          	addi	a0,a0,64 # 1c015040 <__rt_alloc_l2>
1c010a84:	e33ff06f          	j	1c0108b6 <rt_user_alloc>

1c010a88 <pi_l2_free>:
    rt_user_free(rt_alloc_l2(), _chunk, size);
1c010a88:	862e                	mv	a2,a1
1c010a8a:	85aa                	mv	a1,a0
1c010a8c:	1c015537          	lui	a0,0x1c015
1c010a90:	04050513          	addi	a0,a0,64 # 1c015040 <__rt_alloc_l2>
1c010a94:	e6bff06f          	j	1c0108fe <rt_user_free>

1c010a98 <__rt_time_poweroff>:
  rt_event_wait(event);
}

void pi_time_wait_us(int time_us)
{
  rt_time_wait_us(time_us);
1c010a98:	002007b7          	lui	a5,0x200
1c010a9c:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c010aa0:	0087a783          	lw	a5,8(a5)
1c010aa4:	1c015737          	lui	a4,0x1c015
1c010aa8:	f8f72023          	sw	a5,-128(a4) # 1c014f80 <timer_count>
1c010aac:	4501                	li	a0,0
1c010aae:	8082                	ret

1c010ab0 <__rt_time_poweron>:
1c010ab0:	1c0157b7          	lui	a5,0x1c015
1c010ab4:	f807a703          	lw	a4,-128(a5) # 1c014f80 <timer_count>
1c010ab8:	002007b7          	lui	a5,0x200
1c010abc:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c010ac0:	00e7a423          	sw	a4,8(a5)
1c010ac4:	4501                	li	a0,0
1c010ac6:	8082                	ret

1c010ac8 <rt_event_push_delayed>:
1c010ac8:	30047373          	csrrci	t1,mstatus,8
1c010acc:	1c015637          	lui	a2,0x1c015
1c010ad0:	04862703          	lw	a4,72(a2) # 1c015048 <first_delayed>
1c010ad4:	002007b7          	lui	a5,0x200
1c010ad8:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c010adc:	0087a783          	lw	a5,8(a5)
1c010ae0:	46f9                	li	a3,30
1c010ae2:	0405e5b3          	p.max	a1,a1,zero
1c010ae6:	02d5c5b3          	div	a1,a1,a3
1c010aea:	800006b7          	lui	a3,0x80000
1c010aee:	fff6c693          	not	a3,a3
1c010af2:	00d7f833          	and	a6,a5,a3
1c010af6:	0585                	addi	a1,a1,1
1c010af8:	97ae                	add	a5,a5,a1
1c010afa:	dd1c                	sw	a5,56(a0)
1c010afc:	982e                	add	a6,a6,a1
1c010afe:	4781                	li	a5,0
1c010b00:	c719                	beqz	a4,1c010b0e <rt_event_push_delayed+0x46>
1c010b02:	03872883          	lw	a7,56(a4)
1c010b06:	00d8f8b3          	and	a7,a7,a3
1c010b0a:	0108e863          	bltu	a7,a6,1c010b1a <rt_event_push_delayed+0x52>
1c010b0e:	cb89                	beqz	a5,1c010b20 <rt_event_push_delayed+0x58>
1c010b10:	cfc8                	sw	a0,28(a5)
1c010b12:	cd58                	sw	a4,28(a0)
1c010b14:	30031073          	csrw	mstatus,t1
1c010b18:	8082                	ret
1c010b1a:	87ba                	mv	a5,a4
1c010b1c:	4f58                	lw	a4,28(a4)
1c010b1e:	b7cd                	j	1c010b00 <rt_event_push_delayed+0x38>
1c010b20:	002007b7          	lui	a5,0x200
1c010b24:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c010b28:	04a62423          	sw	a0,72(a2)
1c010b2c:	cd58                	sw	a4,28(a0)
1c010b2e:	0087a703          	lw	a4,8(a5)
1c010b32:	95ba                	add	a1,a1,a4
1c010b34:	00b7a823          	sw	a1,16(a5)
1c010b38:	08500713          	li	a4,133
1c010b3c:	00e7a023          	sw	a4,0(a5)
1c010b40:	bfd1                	j	1c010b14 <rt_event_push_delayed+0x4c>

1c010b42 <rt_time_wait_us>:
1c010b42:	1101                	addi	sp,sp,-32
1c010b44:	85aa                	mv	a1,a0
1c010b46:	4501                	li	a0,0
1c010b48:	ce06                	sw	ra,28(sp)
1c010b4a:	cc22                	sw	s0,24(sp)
1c010b4c:	c62e                	sw	a1,12(sp)
1c010b4e:	c3bff0ef          	jal	ra,1c010788 <rt_event_get_blocking>
1c010b52:	45b2                	lw	a1,12(sp)
1c010b54:	842a                	mv	s0,a0
1c010b56:	f73ff0ef          	jal	ra,1c010ac8 <rt_event_push_delayed>
1c010b5a:	8522                	mv	a0,s0
1c010b5c:	4462                	lw	s0,24(sp)
1c010b5e:	40f2                	lw	ra,28(sp)
1c010b60:	6105                	addi	sp,sp,32
1c010b62:	cfdff06f          	j	1c01085e <rt_event_wait>

1c010b66 <__rt_time_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_time_init()
{
  int err = 0;

  first_delayed = NULL;
1c010b66:	1c0157b7          	lui	a5,0x1c015
1c010b6a:	0407a423          	sw	zero,72(a5) # 1c015048 <first_delayed>
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c010b6e:	002007b7          	lui	a5,0x200
{
1c010b72:	1141                	addi	sp,sp,-16
1c010b74:	08300713          	li	a4,131
1c010b78:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c010b7c:	c606                	sw	ra,12(sp)
1c010b7e:	c422                	sw	s0,8(sp)
1c010b80:	00e7a023          	sw	a4,0(a5)
    TIMER_CFG_LO_RESET(1)  |
    TIMER_CFG_LO_CCFG(1)
  );

#if defined(ARCHI_HAS_FC)
  rt_irq_set_handler(ARCHI_FC_EVT_TIMER0_HI, __rt_timer_handler);
1c010b84:	1c0115b7          	lui	a1,0x1c011
1c010b88:	bf258593          	addi	a1,a1,-1038 # 1c010bf2 <__rt_timer_handler>
1c010b8c:	452d                	li	a0,11
1c010b8e:	dc4ff0ef          	jal	ra,1c010152 <rt_irq_set_handler>
  ARCHI_WRITE(base, EU_CORE_MASK_IRQ_OR, irqMask);
1c010b92:	6785                	lui	a5,0x1
1c010b94:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c010b98:	00204737          	lui	a4,0x204
1c010b9c:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c010ba0:	00f72423          	sw	a5,8(a4)
#else
  rt_irq_set_handler(ARCHI_EVT_TIMER0_HI, __rt_timer_handler);
  rt_irq_mask_set(1<<ARCHI_EVT_TIMER0_HI);
#endif

  err |= __rt_cbsys_add(RT_CBSYS_POWEROFF, __rt_time_poweroff, NULL);
1c010ba4:	1c0115b7          	lui	a1,0x1c011
1c010ba8:	4601                	li	a2,0
1c010baa:	a9858593          	addi	a1,a1,-1384 # 1c010a98 <__rt_time_poweroff>
1c010bae:	4509                	li	a0,2
1c010bb0:	f0eff0ef          	jal	ra,1c0102be <__rt_cbsys_add>
  err |= __rt_cbsys_add(RT_CBSYS_POWERON, __rt_time_poweron, NULL);
1c010bb4:	1c0115b7          	lui	a1,0x1c011
  err |= __rt_cbsys_add(RT_CBSYS_POWEROFF, __rt_time_poweroff, NULL);
1c010bb8:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_POWERON, __rt_time_poweron, NULL);
1c010bba:	4601                	li	a2,0
1c010bbc:	ab058593          	addi	a1,a1,-1360 # 1c010ab0 <__rt_time_poweron>
1c010bc0:	450d                	li	a0,3
1c010bc2:	efcff0ef          	jal	ra,1c0102be <__rt_cbsys_add>
1c010bc6:	8d41                	or	a0,a0,s0

  if (err) rt_fatal("Unable to initialize time driver\n");
1c010bc8:	c10d                	beqz	a0,1c010bea <__rt_time_init+0x84>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c010bca:	01402673          	csrr	a2,uhartid
1c010bce:	1c014537          	lui	a0,0x1c014
  return (hart_id >> 5) & 0x3f;
1c010bd2:	40565593          	srai	a1,a2,0x5
1c010bd6:	f265b5b3          	p.bclr	a1,a1,25,6
1c010bda:	f4563633          	p.bclr	a2,a2,26,5
1c010bde:	6bc50513          	addi	a0,a0,1724 # 1c0146bc <IntegerExpLUT+0x174>
1c010be2:	7bf010ef          	jal	ra,1c012ba0 <printf>
1c010be6:	73f010ef          	jal	ra,1c012b24 <abort>
}
1c010bea:	40b2                	lw	ra,12(sp)
1c010bec:	4422                	lw	s0,8(sp)
1c010bee:	0141                	addi	sp,sp,16
1c010bf0:	8082                	ret

1c010bf2 <__rt_timer_handler>:
#if defined(__LLVM__)
void __rt_timer_handler()
#else
void __attribute__((interrupt)) __rt_timer_handler()
#endif
{
1c010bf2:	7179                	addi	sp,sp,-48
1c010bf4:	d032                	sw	a2,32(sp)
  rt_event_t *event = first_delayed;
1c010bf6:	1c015637          	lui	a2,0x1c015
{
1c010bfa:	ca3e                	sw	a5,20(sp)
  rt_event_t *event = first_delayed;
1c010bfc:	04862783          	lw	a5,72(a2) # 1c015048 <first_delayed>
{
1c010c00:	ce36                	sw	a3,28(sp)
static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c010c02:	002006b7          	lui	a3,0x200
1c010c06:	40468693          	addi	a3,a3,1028 # 200404 <__L2+0x180404>
1c010c0a:	d61a                	sw	t1,44(sp)
1c010c0c:	d42a                	sw	a0,40(sp)
1c010c0e:	d22e                	sw	a1,36(sp)
1c010c10:	cc3a                	sw	a4,24(sp)
1c010c12:	c842                	sw	a6,16(sp)
1c010c14:	c646                	sw	a7,12(sp)
1c010c16:	c472                	sw	t3,8(sp)
1c010c18:	c276                	sw	t4,4(sp)
1c010c1a:	0086a683          	lw	a3,8(a3)
1c010c1e:	01c00593          	li	a1,28
1c010c22:	01c02503          	lw	a0,28(zero) # 1c <__rt_sched>
1c010c26:	41cc                	lw	a1,4(a1)

  uint32_t current_time = timer_count_get(timer_base_fc(0, 1));

  // First dequeue and push to their scheduler all events with the same number of
  // ticks as they were waiting for the same time.
  while (event && (current_time - event->implem.time) < 0x7fffffff)
1c010c28:	80000337          	lui	t1,0x80000
1c010c2c:	4801                	li	a6,0
1c010c2e:	4881                	li	a7,0
1c010c30:	01c00e93          	li	t4,28
1c010c34:	ffe34313          	xori	t1,t1,-2
1c010c38:	e7ad                	bnez	a5,1c010ca2 <__rt_timer_handler+0xb0>
1c010c3a:	00088463          	beqz	a7,1c010c42 <__rt_timer_handler+0x50>
1c010c3e:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c010c42:	00080463          	beqz	a6,1c010c4a <__rt_timer_handler+0x58>
1c010c46:	00bea223          	sw	a1,4(t4)
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c010c4a:	002007b7          	lui	a5,0x200
1c010c4e:	08100713          	li	a4,129
1c010c52:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
    event = next;
  }

  // Update the wait list with the next waiting event which has a different number
  // of ticks
  first_delayed = event;
1c010c56:	04062423          	sw	zero,72(a2)
1c010c5a:	00e7a023          	sw	a4,0(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_BUFFER_CLEAR, evtMask);
1c010c5e:	6785                	lui	a5,0x1
1c010c60:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c010c64:	00204737          	lui	a4,0x204
1c010c68:	02f72423          	sw	a5,40(a4) # 204028 <__L2+0x184028>
    rt_irq_clr(1 << ARCHI_FC_EVT_TIMER0_HI);
#else
    rt_irq_clr(1 << ARCHI_EVT_TIMER0_HI);
#endif
  }
}
1c010c6c:	5332                	lw	t1,44(sp)
1c010c6e:	5522                	lw	a0,40(sp)
1c010c70:	5592                	lw	a1,36(sp)
1c010c72:	5602                	lw	a2,32(sp)
1c010c74:	46f2                	lw	a3,28(sp)
1c010c76:	4762                	lw	a4,24(sp)
1c010c78:	47d2                	lw	a5,20(sp)
1c010c7a:	4842                	lw	a6,16(sp)
1c010c7c:	48b2                	lw	a7,12(sp)
1c010c7e:	4e22                	lw	t3,8(sp)
1c010c80:	4e92                	lw	t4,4(sp)
1c010c82:	6145                	addi	sp,sp,48
1c010c84:	30200073          	mret
  event->next = NULL;
1c010c88:	0007a023          	sw	zero,0(a5)
    rt_event_t *next = event->implem.next;
1c010c8c:	01c7ae03          	lw	t3,28(a5)
  if (sched->first == NULL) {
1c010c90:	c511                	beqz	a0,1c010c9c <__rt_timer_handler+0xaa>
    sched->last->next = event;
1c010c92:	c19c                	sw	a5,0(a1)
    event = next;
1c010c94:	85be                	mv	a1,a5
1c010c96:	4805                	li	a6,1
1c010c98:	87f2                	mv	a5,t3
1c010c9a:	bf79                	j	1c010c38 <__rt_timer_handler+0x46>
  if (sched->first == NULL) {
1c010c9c:	853e                	mv	a0,a5
1c010c9e:	4885                	li	a7,1
1c010ca0:	bfd5                	j	1c010c94 <__rt_timer_handler+0xa2>
  while (event && (current_time - event->implem.time) < 0x7fffffff)
1c010ca2:	0387ae03          	lw	t3,56(a5)
1c010ca6:	41c68e33          	sub	t3,a3,t3
1c010caa:	fdc37fe3          	bleu	t3,t1,1c010c88 <__rt_timer_handler+0x96>
1c010cae:	00088463          	beqz	a7,1c010cb6 <__rt_timer_handler+0xc4>
1c010cb2:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c010cb6:	00080463          	beqz	a6,1c010cbe <__rt_timer_handler+0xcc>
1c010cba:	00bea223          	sw	a1,4(t4)
static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c010cbe:	00200737          	lui	a4,0x200
1c010cc2:	40470713          	addi	a4,a4,1028 # 200404 <__L2+0x180404>
  first_delayed = event;
1c010cc6:	04f62423          	sw	a5,72(a2)
1c010cca:	00872603          	lw	a2,8(a4)
      first_delayed->implem.time - current_time
1c010cce:	5f9c                	lw	a5,56(a5)
1c010cd0:	40d786b3          	sub	a3,a5,a3
1c010cd4:	96b2                	add	a3,a3,a2

static inline uint32_t timer_cnt_hi_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_HI_OFFSET); }
static inline void timer_cnt_hi_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CNT_HI_OFFSET, value); }

static inline uint32_t timer_cmp_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CMP_LO_OFFSET); }
static inline void timer_cmp_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CMP_LO_OFFSET, value); }
1c010cd6:	00d72823          	sw	a3,16(a4)
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c010cda:	08500793          	li	a5,133
1c010cde:	00f72023          	sw	a5,0(a4)
}
1c010ce2:	b769                	j	1c010c6c <__rt_timer_handler+0x7a>

1c010ce4 <rt_periph_copy>:
  }

  __rt_socevents_status[index] &= ~(1<<event);

  rt_irq_restore(irq);
}
1c010ce4:	7179                	addi	sp,sp,-48
1c010ce6:	d422                	sw	s0,40(sp)
1c010ce8:	842a                	mv	s0,a0
1c010cea:	d606                	sw	ra,44(sp)
1c010cec:	d226                	sw	s1,36(sp)
1c010cee:	d04a                	sw	s2,32(sp)
1c010cf0:	30047973          	csrrci	s2,mstatus,8
1c010cf4:	4015d493          	srai	s1,a1,0x1
1c010cf8:	1a102537          	lui	a0,0x1a102
1c010cfc:	049e                	slli	s1,s1,0x7
1c010cfe:	94aa                	add	s1,s1,a0
1c010d00:	00459513          	slli	a0,a1,0x4
1c010d04:	8941                	andi	a0,a0,16
1c010d06:	94aa                	add	s1,s1,a0
1c010d08:	853e                	mv	a0,a5
1c010d0a:	ef89                	bnez	a5,1c010d24 <rt_periph_copy+0x40>
1c010d0c:	ce2e                	sw	a1,28(sp)
1c010d0e:	cc32                	sw	a2,24(sp)
1c010d10:	ca36                	sw	a3,20(sp)
1c010d12:	c83a                	sw	a4,16(sp)
1c010d14:	c63e                	sw	a5,12(sp)
1c010d16:	9cbff0ef          	jal	ra,1c0106e0 <__rt_wait_event_prepare_blocking>
1c010d1a:	47b2                	lw	a5,12(sp)
1c010d1c:	4742                	lw	a4,16(sp)
1c010d1e:	46d2                	lw	a3,20(sp)
1c010d20:	4662                	lw	a2,24(sp)
1c010d22:	45f2                	lw	a1,28(sp)
1c010d24:	e419                	bnez	s0,1c010d32 <rt_periph_copy+0x4e>
1c010d26:	03850413          	addi	s0,a0,56 # 1a102038 <__l1_end+0xa102010>
1c010d2a:	04052223          	sw	zero,68(a0)
1c010d2e:	04052a23          	sw	zero,84(a0)
1c010d32:	00c42803          	lw	a6,12(s0)
1c010d36:	c054                	sw	a3,4(s0)
1c010d38:	cc08                	sw	a0,24(s0)
1c010d3a:	f6483833          	p.bclr	a6,a6,27,4
1c010d3e:	4891                	li	a7,4
1c010d40:	c0474733          	p.bset	a4,a4,0,4
1c010d44:	0908e163          	bltu	a7,a6,1c010dc6 <rt_periph_copy+0xe2>
1c010d48:	03000893          	li	a7,48
1c010d4c:	0596                	slli	a1,a1,0x5
1c010d4e:	98ae                	add	a7,a7,a1
1c010d50:	0008a303          	lw	t1,0(a7)
1c010d54:	00042a23          	sw	zero,20(s0)
1c010d58:	03000813          	li	a6,48
1c010d5c:	02031b63          	bnez	t1,1c010d92 <rt_periph_copy+0xae>
1c010d60:	0088a023          	sw	s0,0(a7)
1c010d64:	00b808b3          	add	a7,a6,a1
1c010d68:	0088a303          	lw	t1,8(a7)
1c010d6c:	0088a223          	sw	s0,4(a7)
1c010d70:	02031663          	bnez	t1,1c010d9c <rt_periph_copy+0xb8>
1c010d74:	00848893          	addi	a7,s1,8
1c010d78:	0008a883          	lw	a7,0(a7)
1c010d7c:	0208f893          	andi	a7,a7,32
1c010d80:	00089e63          	bnez	a7,1c010d9c <rt_periph_copy+0xb8>
1c010d84:	00c4a023          	sw	a2,0(s1)
1c010d88:	00d4a223          	sw	a3,4(s1)
1c010d8c:	00e4a423          	sw	a4,8(s1)
1c010d90:	a005                	j	1c010db0 <rt_periph_copy+0xcc>
1c010d92:	0048a883          	lw	a7,4(a7)
1c010d96:	0088aa23          	sw	s0,20(a7)
1c010d9a:	b7e9                	j	1c010d64 <rt_periph_copy+0x80>
1c010d9c:	00042823          	sw	zero,16(s0)
1c010da0:	c010                	sw	a2,0(s0)
1c010da2:	c054                	sw	a3,4(s0)
1c010da4:	c418                	sw	a4,8(s0)
1c010da6:	00031563          	bnez	t1,1c010db0 <rt_periph_copy+0xcc>
1c010daa:	982e                	add	a6,a6,a1
1c010dac:	00882423          	sw	s0,8(a6)
1c010db0:	e399                	bnez	a5,1c010db6 <rt_periph_copy+0xd2>
1c010db2:	a81ff0ef          	jal	ra,1c010832 <__rt_wait_event>
1c010db6:	30091073          	csrw	mstatus,s2
1c010dba:	50b2                	lw	ra,44(sp)
1c010dbc:	5422                	lw	s0,40(sp)
1c010dbe:	5492                	lw	s1,36(sp)
1c010dc0:	5902                	lw	s2,32(sp)
1c010dc2:	6145                	addi	sp,sp,48
1c010dc4:	8082                	ret
1c010dc6:	fe6835e3          	p.bneimm	a6,6,1c010db0 <rt_periph_copy+0xcc>
1c010dca:	03000893          	li	a7,48
1c010dce:	0596                	slli	a1,a1,0x5
1c010dd0:	98ae                	add	a7,a7,a1
1c010dd2:	0008a303          	lw	t1,0(a7)
1c010dd6:	00042a23          	sw	zero,20(s0)
1c010dda:	03000813          	li	a6,48
1c010dde:	00031f63          	bnez	t1,1c010dfc <rt_periph_copy+0x118>
1c010de2:	0088a023          	sw	s0,0(a7)
1c010de6:	95c2                	add	a1,a1,a6
1c010de8:	c1c0                	sw	s0,4(a1)
1c010dea:	00031e63          	bnez	t1,1c010e06 <rt_periph_copy+0x122>
1c010dee:	02442803          	lw	a6,36(s0)
1c010df2:	1a1025b7          	lui	a1,0x1a102
1c010df6:	1b05a023          	sw	a6,416(a1) # 1a1021a0 <__l1_end+0xa102178>
1c010dfa:	b769                	j	1c010d84 <rt_periph_copy+0xa0>
1c010dfc:	0048a883          	lw	a7,4(a7)
1c010e00:	0088aa23          	sw	s0,20(a7)
1c010e04:	b7cd                	j	1c010de6 <rt_periph_copy+0x102>
1c010e06:	c418                	sw	a4,8(s0)
1c010e08:	4598                	lw	a4,8(a1)
1c010e0a:	c010                	sw	a2,0(s0)
1c010e0c:	c054                	sw	a3,4(s0)
1c010e0e:	00042823          	sw	zero,16(s0)
1c010e12:	ff59                	bnez	a4,1c010db0 <rt_periph_copy+0xcc>
1c010e14:	c580                	sw	s0,8(a1)
1c010e16:	bf69                	j	1c010db0 <rt_periph_copy+0xcc>

1c010e18 <__rt_periph_wait_event>:
1c010e18:	30047673          	csrrci	a2,mstatus,8
1c010e1c:	477d                	li	a4,31
1c010e1e:	4781                	li	a5,0
1c010e20:	00a75463          	ble	a0,a4,1c010e28 <__rt_periph_wait_event+0x10>
1c010e24:	1501                	addi	a0,a0,-32
1c010e26:	4785                	li	a5,1
1c010e28:	00279713          	slli	a4,a5,0x2
1c010e2c:	4685                	li	a3,1
1c010e2e:	03000793          	li	a5,48
1c010e32:	00a696b3          	sll	a3,a3,a0
1c010e36:	97ba                	add	a5,a5,a4
1c010e38:	00204837          	lui	a6,0x204
1c010e3c:	2807a703          	lw	a4,640(a5)
1c010e40:	8f75                	and	a4,a4,a3
1c010e42:	cf19                	beqz	a4,1c010e60 <__rt_periph_wait_event+0x48>
1c010e44:	c999                	beqz	a1,1c010e5a <__rt_periph_wait_event+0x42>
1c010e46:	2807a683          	lw	a3,640(a5)
1c010e4a:	4705                	li	a4,1
1c010e4c:	00a71533          	sll	a0,a4,a0
1c010e50:	fff54513          	not	a0,a0
1c010e54:	8d75                	and	a0,a0,a3
1c010e56:	28a7a023          	sw	a0,640(a5)
1c010e5a:	30061073          	csrw	mstatus,a2
1c010e5e:	8082                	ret
1c010e60:	03886703          	p.elw	a4,56(a6) # 204038 <__L2+0x184038>
1c010e64:	30046773          	csrrsi	a4,mstatus,8
1c010e68:	30047773          	csrrci	a4,mstatus,8
1c010e6c:	bfc1                	j	1c010e3c <__rt_periph_wait_event+0x24>

1c010e6e <__rt_periph_init>:
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
    rt_periph_channel_t *channel = &periph_channels[i];
    channel->first = NULL;
    channel->firstToEnqueue = NULL;
    channel->base = hal_udma_channel_base(i);
    channel->callback = udma_event_handler;
1c010e6e:	1c000537          	lui	a0,0x1c000
1c010e72:	03000693          	li	a3,48
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
1c010e76:	4601                	li	a2,0
1c010e78:	03000713          	li	a4,48
static inline unsigned int hal_udma_periph_base(int id) {
  return ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_PERIPH_OFFSET(id);
}

static inline __attribute__((always_inline)) unsigned int hal_udma_channel_base(int id) {
  return ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_PERIPH_OFFSET(id>>1) + UDMA_CHANNEL_OFFSET(id&1);
1c010e7c:	1a1028b7          	lui	a7,0x1a102
    channel->callback = udma_event_handler;
1c010e80:	2b450513          	addi	a0,a0,692 # 1c0002b4 <udma_event_handler>
1c010e84:	014950fb          	lp.setupi	x1,20,1c010ea8 <__rt_periph_init+0x3a>
1c010e88:	40165793          	srai	a5,a2,0x1
1c010e8c:	00461813          	slli	a6,a2,0x4
1c010e90:	079e                	slli	a5,a5,0x7
1c010e92:	97c6                	add	a5,a5,a7
1c010e94:	01087813          	andi	a6,a6,16
1c010e98:	97c2                	add	a5,a5,a6
    channel->first = NULL;
1c010e9a:	0006a023          	sw	zero,0(a3)
    channel->firstToEnqueue = NULL;
1c010e9e:	0006a423          	sw	zero,8(a3)
    channel->base = hal_udma_channel_base(i);
1c010ea2:	c6dc                	sw	a5,12(a3)
    channel->callback = udma_event_handler;
1c010ea4:	cec8                	sw	a0,28(a3)
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
1c010ea6:	0605                	addi	a2,a2,1
1c010ea8:	02068693          	addi	a3,a3,32
  }
  
  for (int i=0; i<ARCHI_SOC_EVENT_UDMA_NB_EXTRA_EVT; i++)
  {
    __rt_udma_extra_callback[i] = __rt_soc_evt_no_udma;
1c010eac:	1c0006b7          	lui	a3,0x1c000
1c010eb0:	28870613          	addi	a2,a4,648
1c010eb4:	45e68693          	addi	a3,a3,1118 # 1c00045e <__rt_soc_evt_no_udma>
1c010eb8:	00a250fb          	lp.setupi	x1,10,1c010ec0 <__rt_periph_init+0x52>
1c010ebc:	00d6222b          	p.sw	a3,4(a2!)
1c010ec0:	0001                	nop
  }

  __rt_socevents_status[0] = 0;
1c010ec2:	28072023          	sw	zero,640(a4)
  __rt_socevents_status[1] = 0;
1c010ec6:	28072223          	sw	zero,644(a4)
}
1c010eca:	8082                	ret

1c010ecc <rt_freq_set_and_get>:
void rt_freq_wait_convergence(int fll)
{
}

int rt_freq_set_and_get(rt_freq_domain_e domain, unsigned int freq, unsigned int *out_freq)
{
1c010ecc:	1141                	addi	sp,sp,-16
1c010ece:	c226                	sw	s1,4(sp)
1c010ed0:	84ae                	mv	s1,a1
1c010ed2:	c606                	sw	ra,12(sp)
1c010ed4:	c422                	sw	s0,8(sp)
1c010ed6:	c04a                	sw	s2,0(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c010ed8:	30047973          	csrrci	s2,mstatus,8
  __asm__ __volatile__ ("" : : : "memory");
1c010edc:	1c015437          	lui	s0,0x1c015
  int irq = rt_irq_disable();
  int err = 0;

  rt_trace(RT_TRACE_FREQ, "Setting domain frequency (domain: %d, freq: %d)\n", domain, freq);

  if (domain == RT_FREQ_DOMAIN_CL)
1c010ee0:	00153f63          	p.bneimm	a0,1,1c010efe <rt_freq_set_and_get+0x32>
  {
    // On cluster side, this is straight forward as the fll is not shared
    __rt_fll_set_freq(__RT_FLL_CL, freq);
    __rt_freq_domains[RT_FREQ_DOMAIN_CL] = freq;
1c010ee4:	04c40413          	addi	s0,s0,76 # 1c01504c <__rt_freq_domains>
    __rt_fll_set_freq(__RT_FLL_CL, freq);
1c010ee8:	294d                	jal	1c01139a <__rt_fll_set_freq>
    __rt_freq_domains[RT_FREQ_DOMAIN_CL] = freq;
1c010eea:	c044                	sw	s1,4(s0)
  __builtin_pulp_spr_write(reg, val);
1c010eec:	30091073          	csrw	mstatus,s2
  }

  rt_irq_restore(irq);

  return err;
}
1c010ef0:	40b2                	lw	ra,12(sp)
1c010ef2:	4422                	lw	s0,8(sp)
1c010ef4:	4492                	lw	s1,4(sp)
1c010ef6:	4902                	lw	s2,0(sp)
1c010ef8:	4501                	li	a0,0
1c010efa:	0141                	addi	sp,sp,16
1c010efc:	8082                	ret
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_BEFORE);
1c010efe:	4511                	li	a0,4
1c010f00:	bfcff0ef          	jal	ra,1c0102fc <__rt_cbsys_exec>
    __rt_fll_set_freq(0, freq);
1c010f04:	85a6                	mv	a1,s1
1c010f06:	4501                	li	a0,0
1c010f08:	2949                	jal	1c01139a <__rt_fll_set_freq>
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_AFTER);
1c010f0a:	4515                	li	a0,5
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = freq;
1c010f0c:	04942623          	sw	s1,76(s0)
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_AFTER);
1c010f10:	becff0ef          	jal	ra,1c0102fc <__rt_cbsys_exec>
1c010f14:	bfe1                	j	1c010eec <rt_freq_set_and_get+0x20>

1c010f16 <__rt_freq_init>:

void __rt_freq_init()
{
1c010f16:	1141                	addi	sp,sp,-16
1c010f18:	c422                	sw	s0,8(sp)
1c010f1a:	c606                	sw	ra,12(sp)

  __rt_flls_constructor();
1c010f1c:	29b5                	jal	1c011398 <__rt_flls_constructor>
  return __rt_platform;
1c010f1e:	1c0157b7          	lui	a5,0x1c015

  // On all chips only FLL 0 is initialized here as it is shared between periph and soc
  // while FLL 1 is used for cluster only and thus is initialized when the cluster is set on.
  if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c010f22:	a747a783          	lw	a5,-1420(a5) # 1c014a74 <__rt_platform>
1c010f26:	1c015437          	lui	s0,0x1c015
1c010f2a:	0017ae63          	p.beqimm	a5,1,1c010f46 <__rt_freq_init+0x30>
  {
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = __rt_fll_init(__RT_FLL_FC);
1c010f2e:	4501                	li	a0,0
1c010f30:	2991                	jal	1c011384 <__rt_fll_init>
1c010f32:	04a42623          	sw	a0,76(s0) # 1c01504c <__rt_freq_domains>
  }
  else
  {
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = 40000000;
  }
  __rt_freq_domains[RT_FREQ_DOMAIN_CL] = 0;
1c010f36:	04c40413          	addi	s0,s0,76
1c010f3a:	00042223          	sw	zero,4(s0)

}
1c010f3e:	40b2                	lw	ra,12(sp)
1c010f40:	4422                	lw	s0,8(sp)
1c010f42:	0141                	addi	sp,sp,16
1c010f44:	8082                	ret
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = 40000000;
1c010f46:	026267b7          	lui	a5,0x2626
1c010f4a:	a0078793          	addi	a5,a5,-1536 # 2625a00 <__L2+0x25a5a00>
1c010f4e:	04f42623          	sw	a5,76(s0)
1c010f52:	b7d5                	j	1c010f36 <__rt_freq_init+0x20>

1c010f54 <SetFllMultDivFactors>:
  if (PMURetentionState.Fields.BootType != COLD_BOOT && PMURetentionState.Fields.ClusterWakeUpState) {
          // ChangePowerSystemState(POWER_SYSTEM_STATE(PMURetentionState.Fields.WakeupState, PMURetentionState.Fields.ClusterWakeUpState), 0);
    __rt_pmu_cluster_power_up(NULL, NULL);
    if (PMU_ClusterIsRunning() && PMURetentionState.Fields.FllClusterRetention) InitOneFll(FLL_CLUSTER, 1);
  }
}
1c010f54:	100517b3          	p.fl1	a5,a0
1c010f58:	4769                	li	a4,26
1c010f5a:	8f1d                	sub	a4,a4,a5
1c010f5c:	4785                	li	a5,1
1c010f5e:	04f76733          	p.max	a4,a4,a5
1c010f62:	47a1                	li	a5,8
1c010f64:	04f74733          	p.min	a4,a4,a5
1c010f68:	fff70693          	addi	a3,a4,-1
1c010f6c:	00f55793          	srli	a5,a0,0xf
1c010f70:	00d797b3          	sll	a5,a5,a3
1c010f74:	c19c                	sw	a5,0(a1)
1c010f76:	07be                	slli	a5,a5,0xf
1c010f78:	c218                	sw	a4,0(a2)
1c010f7a:	00d7d533          	srl	a0,a5,a3
1c010f7e:	8082                	ret

1c010f80 <soc_eu_fcEventMask_setEvent>:
1c010f80:	47fd                	li	a5,31
1c010f82:	4721                	li	a4,8
1c010f84:	00f50463          	beq	a0,a5,1c010f8c <soc_eu_fcEventMask_setEvent+0xc>
1c010f88:	1501                	addi	a0,a0,-32
1c010f8a:	4711                	li	a4,4
1c010f8c:	1a1066b7          	lui	a3,0x1a106
1c010f90:	20e6f603          	p.lw	a2,a4(a3)
1c010f94:	4785                	li	a5,1
1c010f96:	00a79533          	sll	a0,a5,a0
1c010f9a:	fff54513          	not	a0,a0
1c010f9e:	8d71                	and	a0,a0,a2
1c010fa0:	00a6e723          	p.sw	a0,a4(a3)
1c010fa4:	8082                	ret

1c010fa6 <__rt_pmu_cluster_power_down>:
1c010fa6:	1c0157b7          	lui	a5,0x1c015
1c010faa:	a747a783          	lw	a5,-1420(a5) # 1c014a74 <__rt_platform>
1c010fae:	0817a363          	p.beqimm	a5,1,1c011034 <__rt_pmu_cluster_power_down+0x8e>
1c010fb2:	1141                	addi	sp,sp,-16
1c010fb4:	1a1046b7          	lui	a3,0x1a104
1c010fb8:	c606                	sw	ra,12(sp)
1c010fba:	c422                	sw	s0,8(sp)
1c010fbc:	c226                	sw	s1,4(sp)
1c010fbe:	c04a                	sw	s2,0(sp)
1c010fc0:	0706a683          	lw	a3,112(a3) # 1a104070 <__l1_end+0xa104048>
1c010fc4:	1c015737          	lui	a4,0x1c015
1c010fc8:	bf470713          	addi	a4,a4,-1036 # 1c014bf4 <SystemStateToSCUFastSeq>
1c010fcc:	00874783          	lbu	a5,8(a4)
1c010fd0:	8436                	mv	s0,a3
1c010fd2:	c0079933          	p.extractu	s2,a5,0,0
1c010fd6:	04193963          	p.bneimm	s2,1,1c011028 <__rt_pmu_cluster_power_down+0x82>
1c010fda:	01069613          	slli	a2,a3,0x10
1c010fde:	04064563          	bltz	a2,1c011028 <__rt_pmu_cluster_power_down+0x82>
1c010fe2:	c007b7b3          	p.bclr	a5,a5,0,0
1c010fe6:	c0a92433          	p.insert	s0,s2,0,10
1c010fea:	1a1044b7          	lui	s1,0x1a104
1c010fee:	00f70423          	sb	a5,8(a4)
1c010ff2:	0684a823          	sw	s0,112(s1) # 1a104070 <__l1_end+0xa104048>
1c010ff6:	4585                	li	a1,1
1c010ff8:	02300513          	li	a0,35
1c010ffc:	e1dff0ef          	jal	ra,1c010e18 <__rt_periph_wait_event>
1c011000:	4785                	li	a5,1
1c011002:	00f4a623          	sw	a5,12(s1)
1c011006:	c0302433          	p.insert	s0,zero,0,3
1c01100a:	0684a823          	sw	s0,112(s1)
1c01100e:	c0d92433          	p.insert	s0,s2,0,13
1c011012:	0684a823          	sw	s0,112(s1)
1c011016:	4422                	lw	s0,8(sp)
1c011018:	40b2                	lw	ra,12(sp)
1c01101a:	4492                	lw	s1,4(sp)
1c01101c:	4902                	lw	s2,0(sp)
1c01101e:	4585                	li	a1,1
1c011020:	457d                	li	a0,31
1c011022:	0141                	addi	sp,sp,16
1c011024:	df5ff06f          	j	1c010e18 <__rt_periph_wait_event>
1c011028:	40b2                	lw	ra,12(sp)
1c01102a:	4422                	lw	s0,8(sp)
1c01102c:	4492                	lw	s1,4(sp)
1c01102e:	4902                	lw	s2,0(sp)
1c011030:	0141                	addi	sp,sp,16
1c011032:	8082                	ret
1c011034:	8082                	ret

1c011036 <SetFllFrequency>:
1c011036:	7179                	addi	sp,sp,-48
1c011038:	d422                	sw	s0,40(sp)
1c01103a:	d226                	sw	s1,36(sp)
1c01103c:	1c015437          	lui	s0,0x1c015
1c011040:	84aa                	mv	s1,a0
1c011042:	d606                	sw	ra,44(sp)
1c011044:	852e                	mv	a0,a1
1c011046:	bf440413          	addi	s0,s0,-1036 # 1c014bf4 <SystemStateToSCUFastSeq>
1c01104a:	0014be63          	p.bneimm	s1,1,1c011066 <SetFllFrequency+0x30>
1c01104e:	00844783          	lbu	a5,8(s0)
1c011052:	c0079733          	p.extractu	a4,a5,0,0
1c011056:	08172763          	p.beqimm	a4,1,1c0110e4 <SetFllFrequency+0xae>
1c01105a:	4501                	li	a0,0
1c01105c:	50b2                	lw	ra,44(sp)
1c01105e:	5422                	lw	s0,40(sp)
1c011060:	5492                	lw	s1,36(sp)
1c011062:	6145                	addi	sp,sp,48
1c011064:	8082                	ret
1c011066:	ce2d                	beqz	a2,1c0110e0 <SetFllFrequency+0xaa>
1c011068:	00844783          	lbu	a5,8(s0)
1c01106c:	03200713          	li	a4,50
1c011070:	c21797b3          	p.extractu	a5,a5,1,1
1c011074:	97a2                	add	a5,a5,s0
1c011076:	00a7c783          	lbu	a5,10(a5)
1c01107a:	00e787db          	p.mac	a5,a5,a4,zero
1c01107e:	22678793          	addi	a5,a5,550
1c011082:	ecad                	bnez	s1,1c0110fc <SetFllFrequency+0xc6>
1c011084:	0007a6b7          	lui	a3,0x7a
1c011088:	eb237737          	lui	a4,0xeb237
1c01108c:	12068693          	addi	a3,a3,288 # 7a120 <__L1Cl+0x6a120>
1c011090:	c8070713          	addi	a4,a4,-896 # eb236c80 <pulp__FC+0xeb236c81>
1c011094:	42d78733          	p.mac	a4,a5,a3
1c011098:	fcb761e3          	bltu	a4,a1,1c01105a <SetFllFrequency+0x24>
1c01109c:	c62a                	sw	a0,12(sp)
1c01109e:	d6eff0ef          	jal	ra,1c01060c <__rt_bridge_req_shutdown>
1c0110a2:	4532                	lw	a0,12(sp)
1c0110a4:	0870                	addi	a2,sp,28
1c0110a6:	082c                	addi	a1,sp,24
1c0110a8:	eadff0ef          	jal	ra,1c010f54 <SetFllMultDivFactors>
1c0110ac:	4762                	lw	a4,24(sp)
1c0110ae:	800007b7          	lui	a5,0x80000
1c0110b2:	1a1006b7          	lui	a3,0x1a100
1c0110b6:	de0727b3          	p.insert	a5,a4,15,0
1c0110ba:	4772                	lw	a4,28(sp)
1c0110bc:	c7a727b3          	p.insert	a5,a4,3,26
1c0110c0:	00449713          	slli	a4,s1,0x4
1c0110c4:	0711                	addi	a4,a4,4
1c0110c6:	00f6e723          	p.sw	a5,a4(a3)
1c0110ca:	00249793          	slli	a5,s1,0x2
1c0110ce:	943e                	add	s0,s0,a5
1c0110d0:	d008                	sw	a0,32(s0)
1c0110d2:	c808                	sw	a0,16(s0)
1c0110d4:	f4c1                	bnez	s1,1c01105c <SetFllFrequency+0x26>
1c0110d6:	c62a                	sw	a0,12(sp)
1c0110d8:	c90ff0ef          	jal	ra,1c010568 <__rt_bridge_set_available>
1c0110dc:	4532                	lw	a0,12(sp)
1c0110de:	bfbd                	j	1c01105c <SetFllFrequency+0x26>
1c0110e0:	f0f1                	bnez	s1,1c0110a4 <SetFllFrequency+0x6e>
1c0110e2:	bf6d                	j	1c01109c <SetFllFrequency+0x66>
1c0110e4:	d261                	beqz	a2,1c0110a4 <SetFllFrequency+0x6e>
1c0110e6:	c21797b3          	p.extractu	a5,a5,1,1
1c0110ea:	97a2                	add	a5,a5,s0
1c0110ec:	00a7c783          	lbu	a5,10(a5) # 8000000a <pulp__FC+0x8000000b>
1c0110f0:	03200713          	li	a4,50
1c0110f4:	00e787db          	p.mac	a5,a5,a4,zero
1c0110f8:	22678793          	addi	a5,a5,550
1c0110fc:	0006b6b7          	lui	a3,0x6b
1c011100:	eaf5a737          	lui	a4,0xeaf5a
1c011104:	6c068693          	addi	a3,a3,1728 # 6b6c0 <__L1Cl+0x5b6c0>
1c011108:	5c070713          	addi	a4,a4,1472 # eaf5a5c0 <pulp__FC+0xeaf5a5c1>
1c01110c:	42d78733          	p.mac	a4,a5,a3
1c011110:	f8a77ae3          	bleu	a0,a4,1c0110a4 <SetFllFrequency+0x6e>
1c011114:	b799                	j	1c01105a <SetFllFrequency+0x24>

1c011116 <InitOneFll>:
1c011116:	7179                	addi	sp,sp,-48
1c011118:	00451713          	slli	a4,a0,0x4
1c01111c:	ce4e                	sw	s3,28(sp)
1c01111e:	1a1007b7          	lui	a5,0x1a100
1c011122:	00470993          	addi	s3,a4,4
1c011126:	d606                	sw	ra,44(sp)
1c011128:	d422                	sw	s0,40(sp)
1c01112a:	d226                	sw	s1,36(sp)
1c01112c:	d04a                	sw	s2,32(sp)
1c01112e:	2137f783          	p.lw	a5,s3(a5)
1c011132:	1c015437          	lui	s0,0x1c015
1c011136:	bf440413          	addi	s0,s0,-1036 # 1c014bf4 <SystemStateToSCUFastSeq>
1c01113a:	00251913          	slli	s2,a0,0x2
1c01113e:	c585                	beqz	a1,1c011166 <InitOneFll+0x50>
1c011140:	c7a79733          	p.extractu	a4,a5,3,26
1c011144:	1007d7b3          	p.exthz	a5,a5
1c011148:	07be                	slli	a5,a5,0xf
1c01114a:	c701                	beqz	a4,1c011152 <InitOneFll+0x3c>
1c01114c:	177d                	addi	a4,a4,-1
1c01114e:	00e7d7b3          	srl	a5,a5,a4
1c011152:	944a                	add	s0,s0,s2
1c011154:	d01c                	sw	a5,32(s0)
1c011156:	c81c                	sw	a5,16(s0)
1c011158:	50b2                	lw	ra,44(sp)
1c01115a:	5422                	lw	s0,40(sp)
1c01115c:	5492                	lw	s1,36(sp)
1c01115e:	5902                	lw	s2,32(sp)
1c011160:	49f2                	lw	s3,28(sp)
1c011162:	6145                	addi	sp,sp,48
1c011164:	8082                	ret
1c011166:	0007d363          	bgez	a5,1c01116c <InitOneFll+0x56>
1c01116a:	c105                	beqz	a0,1c01118a <InitOneFll+0x74>
1c01116c:	810047b7          	lui	a5,0x81004
1c011170:	1a1006b7          	lui	a3,0x1a100
1c011174:	00870613          	addi	a2,a4,8
1c011178:	10778793          	addi	a5,a5,263 # 81004107 <pulp__FC+0x81004108>
1c01117c:	00f6e623          	p.sw	a5,a2(a3)
1c011180:	014c04b7          	lui	s1,0x14c0
1c011184:	0731                	addi	a4,a4,12
1c011186:	0096e723          	p.sw	s1,a4(a3)
1c01118a:	02faf537          	lui	a0,0x2faf
1c01118e:	0070                	addi	a2,sp,12
1c011190:	002c                	addi	a1,sp,8
1c011192:	08050513          	addi	a0,a0,128 # 2faf080 <__L2+0x2f2f080>
1c011196:	dbfff0ef          	jal	ra,1c010f54 <SetFllMultDivFactors>
1c01119a:	47a2                	lw	a5,8(sp)
1c01119c:	c00004b7          	lui	s1,0xc0000
1c0111a0:	de07a4b3          	p.insert	s1,a5,15,0
1c0111a4:	47b2                	lw	a5,12(sp)
1c0111a6:	c7a7a4b3          	p.insert	s1,a5,3,26
1c0111aa:	1a1007b7          	lui	a5,0x1a100
1c0111ae:	0097e9a3          	p.sw	s1,s3(a5)
1c0111b2:	944a                	add	s0,s0,s2
1c0111b4:	d008                	sw	a0,32(s0)
1c0111b6:	c808                	sw	a0,16(s0)
1c0111b8:	b745                	j	1c011158 <InitOneFll+0x42>

1c0111ba <__rt_pmu_cluster_power_up>:
1c0111ba:	1141                	addi	sp,sp,-16
1c0111bc:	c226                	sw	s1,4(sp)
1c0111be:	1c0154b7          	lui	s1,0x1c015
1c0111c2:	c606                	sw	ra,12(sp)
1c0111c4:	c422                	sw	s0,8(sp)
1c0111c6:	c04a                	sw	s2,0(sp)
1c0111c8:	bf448793          	addi	a5,s1,-1036 # 1c014bf4 <SystemStateToSCUFastSeq>
1c0111cc:	0087c783          	lbu	a5,8(a5) # 1a100008 <__l1_end+0xa0fffe0>
1c0111d0:	4501                	li	a0,0
1c0111d2:	c00797b3          	p.extractu	a5,a5,0,0
1c0111d6:	e785                	bnez	a5,1c0111fe <__rt_pmu_cluster_power_up+0x44>
1c0111d8:	1c0157b7          	lui	a5,0x1c015
1c0111dc:	a747a783          	lw	a5,-1420(a5) # 1c014a74 <__rt_platform>
1c0111e0:	bf448493          	addi	s1,s1,-1036
1c0111e4:	0217b363          	p.bneimm	a5,1,1c01120a <__rt_pmu_cluster_power_up+0x50>
1c0111e8:	1a1047b7          	lui	a5,0x1a104
1c0111ec:	0007a623          	sw	zero,12(a5) # 1a10400c <__l1_end+0xa103fe4>
1c0111f0:	0084c783          	lbu	a5,8(s1)
1c0111f4:	4505                	li	a0,1
1c0111f6:	c007c7b3          	p.bset	a5,a5,0,0
1c0111fa:	00f48423          	sb	a5,8(s1)
1c0111fe:	40b2                	lw	ra,12(sp)
1c011200:	4422                	lw	s0,8(sp)
1c011202:	4492                	lw	s1,4(sp)
1c011204:	4902                	lw	s2,0(sp)
1c011206:	0141                	addi	sp,sp,16
1c011208:	8082                	ret
1c01120a:	1a104437          	lui	s0,0x1a104
1c01120e:	07042403          	lw	s0,112(s0) # 1a104070 <__l1_end+0xa104048>
1c011212:	c0a417b3          	p.extractu	a5,s0,0,10
1c011216:	ef89                	bnez	a5,1c011230 <__rt_pmu_cluster_power_up+0x76>
1c011218:	4785                	li	a5,1
1c01121a:	c0a7a433          	p.insert	s0,a5,0,10
1c01121e:	1a1047b7          	lui	a5,0x1a104
1c011222:	0687a823          	sw	s0,112(a5) # 1a104070 <__l1_end+0xa104048>
1c011226:	4585                	li	a1,1
1c011228:	02300513          	li	a0,35
1c01122c:	bedff0ef          	jal	ra,1c010e18 <__rt_periph_wait_event>
1c011230:	4785                	li	a5,1
1c011232:	c037a433          	p.insert	s0,a5,0,3
1c011236:	1a104937          	lui	s2,0x1a104
1c01123a:	06892823          	sw	s0,112(s2) # 1a104070 <__l1_end+0xa104048>
1c01123e:	4585                	li	a1,1
1c011240:	457d                	li	a0,31
1c011242:	bd7ff0ef          	jal	ra,1c010e18 <__rt_periph_wait_event>
1c011246:	00092623          	sw	zero,12(s2)
1c01124a:	c0d02433          	p.insert	s0,zero,0,13
1c01124e:	06892823          	sw	s0,112(s2)
1c011252:	c0a02433          	p.insert	s0,zero,0,10
1c011256:	06892823          	sw	s0,112(s2)
1c01125a:	4585                	li	a1,1
1c01125c:	02300513          	li	a0,35
1c011260:	bb9ff0ef          	jal	ra,1c010e18 <__rt_periph_wait_event>
1c011264:	01c4c783          	lbu	a5,28(s1)
1c011268:	0207f793          	andi	a5,a5,32
1c01126c:	e789                	bnez	a5,1c011276 <__rt_pmu_cluster_power_up+0xbc>
1c01126e:	4581                	li	a1,0
1c011270:	4505                	li	a0,1
1c011272:	ea5ff0ef          	jal	ra,1c011116 <InitOneFll>
1c011276:	c0e44433          	p.bset	s0,s0,0,14
1c01127a:	1a1047b7          	lui	a5,0x1a104
1c01127e:	0687a823          	sw	s0,112(a5) # 1a104070 <__l1_end+0xa104048>
1c011282:	b7bd                	j	1c0111f0 <__rt_pmu_cluster_power_up+0x36>

1c011284 <InitFlls>:

  }
}

void  __attribute__ ((noinline)) InitFlls()
{
1c011284:	1141                	addi	sp,sp,-16
1c011286:	c422                	sw	s0,8(sp)
  __rt_bridge_req_shutdown();

  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c011288:	1c015437          	lui	s0,0x1c015
{
1c01128c:	c606                	sw	ra,12(sp)
  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c01128e:	bf440413          	addi	s0,s0,-1036 # 1c014bf4 <SystemStateToSCUFastSeq>
  __rt_bridge_req_shutdown();
1c011292:	b7aff0ef          	jal	ra,1c01060c <__rt_bridge_req_shutdown>
  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c011296:	01c44583          	lbu	a1,28(s0)
1c01129a:	4501                	li	a0,0
1c01129c:	c04595b3          	p.extractu	a1,a1,0,4
1c0112a0:	e77ff0ef          	jal	ra,1c011116 <InitOneFll>
#define PMU_ERROR_CLUSTER_STATE_CHANGE_FAILED   (0x1<<4)

extern void 		   InitPMUDriver();

static inline int 	   PMU_ClusterIsDown()    { return (CLUSTER_STATE(PMUState.State)==CLUSTER_OFF);}
static inline int 	   PMU_ClusterIsRunning() { return (CLUSTER_STATE(PMUState.State)==CLUSTER_ON);}
1c0112a4:	00844783          	lbu	a5,8(s0)
1c0112a8:	c00797b3          	p.extractu	a5,a5,0,0
  if (PMU_ClusterIsRunning()) InitOneFll(FLL_CLUSTER, PMURetentionState.Fields.FllClusterRetention);
1c0112ac:	0017b963          	p.bneimm	a5,1,1c0112be <InitFlls+0x3a>
1c0112b0:	01c44583          	lbu	a1,28(s0)
1c0112b4:	4505                	li	a0,1
1c0112b6:	c05595b3          	p.extractu	a1,a1,0,5
1c0112ba:	e5dff0ef          	jal	ra,1c011116 <InitOneFll>

#ifdef __RT_USE_BRIDGE
  __rt_bridge_set_available();
#endif
}
1c0112be:	4422                	lw	s0,8(sp)
1c0112c0:	40b2                	lw	ra,12(sp)
1c0112c2:	0141                	addi	sp,sp,16
  __rt_bridge_set_available();
1c0112c4:	aa4ff06f          	j	1c010568 <__rt_bridge_set_available>

1c0112c8 <__rt_pmu_init>:
1c0112c8:	1c0157b7          	lui	a5,0x1c015
  if (rt_platform() == ARCHI_PLATFORM_FPGA) {
1c0112cc:	a747a783          	lw	a5,-1420(a5) # 1c014a74 <__rt_platform>
1c0112d0:	0a17a963          	p.beqimm	a5,1,1c011382 <__rt_pmu_init+0xba>
{
1c0112d4:	1141                	addi	sp,sp,-16
  __rt_wakeup_use_fast = 0;
1c0112d6:	1c0157b7          	lui	a5,0x1c015
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, PMU_DCDC_CONFIG_OFFSET);
1c0112da:	1a104637          	lui	a2,0x1a104
{
1c0112de:	c606                	sw	ra,12(sp)
  __rt_wakeup_use_fast = 0;
1c0112e0:	0407aa23          	sw	zero,84(a5) # 1c015054 <__rt_wakeup_use_fast>
1c0112e4:	10062703          	lw	a4,256(a2) # 1a104100 <__l1_end+0xa1040d8>
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, PMU_RETENTION_CONFIG_OFFSET);
1c0112e8:	10462683          	lw	a3,260(a2)
  PMURetentionState.Raw = GetRetentiveState();
1c0112ec:	1c0157b7          	lui	a5,0x1c015
1c0112f0:	bf478793          	addi	a5,a5,-1036 # 1c014bf4 <SystemStateToSCUFastSeq>
1c0112f4:	cfd4                	sw	a3,28(a5)
  PMUState.State = RetPMUStateToPMUState[PMURetentionState.Fields.WakeupState];
1c0112f6:	c2e696b3          	p.extractu	a3,a3,1,14
1c0112fa:	96be                	add	a3,a3,a5
1c0112fc:	0286c683          	lbu	a3,40(a3) # 1a100028 <__l1_end+0xa100000>
  PMUState.DCDC_Settings[REGU_OFF] = 0;
1c011300:	000786a3          	sb	zero,13(a5)
  PMUState.State = RetPMUStateToPMUState[PMURetentionState.Fields.WakeupState];
1c011304:	00d78423          	sb	a3,8(a5)
  PMUState.DCDC_Settings[REGU_NV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Nominal*8);
1c011308:	c80716b3          	p.extractu	a3,a4,4,0
1c01130c:	00d78523          	sb	a3,10(a5)
  PMUState.DCDC_Settings[REGU_LV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Low*8);
1c011310:	c90716b3          	p.extractu	a3,a4,4,16
  PMUState.DCDC_Settings[REGU_RET] = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Retentive*8);
1c011314:	c9871733          	p.extractu	a4,a4,4,24
  PMUState.DCDC_Settings[REGU_LV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Low*8);
1c011318:	00d785a3          	sb	a3,11(a5)
  PMUState.DCDC_Settings[REGU_RET] = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Retentive*8);
1c01131c:	00e78623          	sb	a4,12(a5)
  Bypass.Raw = GetPMUBypass();
1c011320:	07062783          	lw	a5,112(a2)
  Bypass.Fields.Bypass = 1;
1c011324:	4705                	li	a4,1
1c011326:	c00727b3          	p.insert	a5,a4,0,0
  Bypass.Fields.BypassClock = 1;
1c01132a:	c09727b3          	p.insert	a5,a4,0,9
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
1c01132e:	06f62823          	sw	a5,112(a2)
  InitFlls();
1c011332:	f53ff0ef          	jal	ra,1c011284 <InitFlls>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_CLUSTER_ON_OFF);
1c011336:	457d                	li	a0,31
1c011338:	c49ff0ef          	jal	ra,1c010f80 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_MSP);
1c01133c:	02000513          	li	a0,32
1c011340:	c41ff0ef          	jal	ra,1c010f80 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_MODE_CHANGED);
1c011344:	02100513          	li	a0,33
1c011348:	c39ff0ef          	jal	ra,1c010f80 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_OK);
1c01134c:	02200513          	li	a0,34
1c011350:	c31ff0ef          	jal	ra,1c010f80 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_DELAYED);
1c011354:	02300513          	li	a0,35
1c011358:	c29ff0ef          	jal	ra,1c010f80 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_PICL_OK);
1c01135c:	02400513          	li	a0,36
1c011360:	c21ff0ef          	jal	ra,1c010f80 <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_SCU_OK);
1c011364:	02500513          	li	a0,37
1c011368:	c19ff0ef          	jal	ra,1c010f80 <soc_eu_fcEventMask_setEvent>
  PMU_Write(DLC_IMR, 0x7);
1c01136c:	1a1077b7          	lui	a5,0x1a107
1c011370:	471d                	li	a4,7
1c011372:	00e7a623          	sw	a4,12(a5) # 1a10700c <__l1_end+0xa106fe4>
  PMU_Write(DLC_IFR, (MAESTRO_EVENT_PICL_OK|MAESTRO_EVENT_SCU_OK));
1c011376:	4761                	li	a4,24
1c011378:	00e7a823          	sw	a4,16(a5)
}
1c01137c:	40b2                	lw	ra,12(sp)
1c01137e:	0141                	addi	sp,sp,16
1c011380:	8082                	ret
1c011382:	8082                	ret

1c011384 <__rt_fll_init>:


unsigned int __rt_fll_init(int fll)
{
  return FllsFrequency[fll];
1c011384:	00251793          	slli	a5,a0,0x2
1c011388:	1c015537          	lui	a0,0x1c015
1c01138c:	bf450513          	addi	a0,a0,-1036 # 1c014bf4 <SystemStateToSCUFastSeq>
1c011390:	953e                	add	a0,a0,a5
}
1c011392:	5108                	lw	a0,32(a0)
1c011394:	8082                	ret

1c011396 <__rt_fll_deinit>:

void __rt_fll_deinit(int fll)
{
}
1c011396:	8082                	ret

1c011398 <__rt_flls_constructor>:

void __rt_flls_constructor()
{
}
1c011398:	8082                	ret

1c01139a <__rt_fll_set_freq>:

unsigned int __rt_fll_set_freq(int fll, unsigned int frequency)
{
  return SetFllFrequency(fll, frequency, 0);
1c01139a:	4601                	li	a2,0
1c01139c:	c9bff06f          	j	1c011036 <SetFllFrequency>

1c0113a0 <__rt_init_cluster_data>:
{
#if defined(EU_VERSION) && EU_VERSION >= 3
  eu_evt_maskSet((1<<PULP_DISPATCH_EVENT) | (1<<PULP_HW_BAR_EVENT) | (1<<PULP_MUTEX_EVENT));
  rt_team_fork(rt_nb_pe(), cluster_pe_start, NULL);
#endif
}
1c0113a0:	04050713          	addi	a4,a0,64
1c0113a4:	00400793          	li	a5,4
1c0113a8:	01671613          	slli	a2,a4,0x16
1c0113ac:	e6c7b7b3          	p.bclr	a5,a5,19,12
1c0113b0:	1c0156b7          	lui	a3,0x1c015
1c0113b4:	97b2                	add	a5,a5,a2
1c0113b6:	08468693          	addi	a3,a3,132 # 1c015084 <_bss_end>
1c0113ba:	02400713          	li	a4,36
1c0113be:	8f95                	sub	a5,a5,a3
1c0113c0:	00f685b3          	add	a1,a3,a5
1c0113c4:	02e04963          	bgtz	a4,1c0113f6 <__rt_init_cluster_data+0x56>
1c0113c8:	1c0157b7          	lui	a5,0x1c015
1c0113cc:	02800713          	li	a4,40
1c0113d0:	05c78793          	addi	a5,a5,92 # 1c01505c <__rt_fc_cluster_data>
1c0113d4:	42e507b3          	p.mac	a5,a0,a4
1c0113d8:	00201737          	lui	a4,0x201
1c0113dc:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c0113e0:	9732                	add	a4,a4,a2
1c0113e2:	cb98                	sw	a4,16(a5)
1c0113e4:	00400713          	li	a4,4
1c0113e8:	e6c73733          	p.bclr	a4,a4,19,12
1c0113ec:	9732                	add	a4,a4,a2
1c0113ee:	0007a423          	sw	zero,8(a5)
1c0113f2:	cbd8                	sw	a4,20(a5)
1c0113f4:	8082                	ret
1c0113f6:	0046a80b          	p.lw	a6,4(a3!)
1c0113fa:	1771                	addi	a4,a4,-4
1c0113fc:	0105a023          	sw	a6,0(a1)
1c011400:	b7c1                	j	1c0113c0 <__rt_init_cluster_data+0x20>

1c011402 <__rt_cluster_init>:
1c011402:	1c015537          	lui	a0,0x1c015
1c011406:	1141                	addi	sp,sp,-16
1c011408:	02800613          	li	a2,40
1c01140c:	4581                	li	a1,0
1c01140e:	05c50513          	addi	a0,a0,92 # 1c01505c <__rt_fc_cluster_data>
1c011412:	c606                	sw	ra,12(sp)
1c011414:	450010ef          	jal	ra,1c012864 <memset>
1c011418:	1c0145b7          	lui	a1,0x1c014
1c01141c:	c4058593          	addi	a1,a1,-960 # 1c013c40 <__rt_dma_2d>
1c011420:	4525                	li	a0,9
1c011422:	d31fe0ef          	jal	ra,1c010152 <rt_irq_set_handler>
1c011426:	1c0005b7          	lui	a1,0x1c000
1c01142a:	17458593          	addi	a1,a1,372 # 1c000174 <__rt_remote_enqueue_event>
1c01142e:	4505                	li	a0,1
1c011430:	d23fe0ef          	jal	ra,1c010152 <rt_irq_set_handler>
1c011434:	4789                	li	a5,2
1c011436:	00204737          	lui	a4,0x204
1c01143a:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
1c01143e:	00f72423          	sw	a5,8(a4)
1c011442:	1c0005b7          	lui	a1,0x1c000
1c011446:	13c58593          	addi	a1,a1,316 # 1c00013c <__rt_bridge_enqueue_event>
1c01144a:	4511                	li	a0,4
1c01144c:	d07fe0ef          	jal	ra,1c010152 <rt_irq_set_handler>
1c011450:	47c1                	li	a5,16
1c011452:	00204737          	lui	a4,0x204
1c011456:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
1c01145a:	00f72423          	sw	a5,8(a4)
1c01145e:	40b2                	lw	ra,12(sp)
1c011460:	4501                	li	a0,0
1c011462:	0141                	addi	sp,sp,16
1c011464:	8082                	ret

1c011466 <__rt_cluster_mount_step>:
{
1c011466:	7179                	addi	sp,sp,-48
1c011468:	ce4e                	sw	s3,28(sp)
1c01146a:	cc52                	sw	s4,24(sp)
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c01146c:	1c000a37          	lui	s4,0x1c000
  return (void *)(ARCHI_CLUSTER_GLOBAL_ADDR(cid) + ((int)data & 0xFFF));
1c011470:	00400993          	li	s3,4
1c011474:	080a0a13          	addi	s4,s4,128 # 1c000080 <_start>
{
1c011478:	d422                	sw	s0,40(sp)
1c01147a:	d606                	sw	ra,44(sp)
1c01147c:	d226                	sw	s1,36(sp)
1c01147e:	d04a                	sw	s2,32(sp)
1c011480:	ca56                	sw	s5,20(sp)
1c011482:	842a                	mv	s0,a0
1c011484:	e6c9b9b3          	p.bclr	s3,s3,19,12
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c011488:	ce0a3a33          	p.bclr	s4,s4,7,0
    switch (cluster->state)
1c01148c:	4c5c                	lw	a5,28(s0)
1c01148e:	0217ad63          	p.beqimm	a5,1,1c0114c8 <__rt_cluster_mount_step+0x62>
1c011492:	0c27a663          	p.beqimm	a5,2,1c01155e <__rt_cluster_mount_step+0xf8>
1c011496:	e3e1                	bnez	a5,1c011556 <__rt_cluster_mount_step+0xf0>
  int cid = cluster->cid;
1c011498:	5018                	lw	a4,32(s0)
  cluster->powered_up = 0;
1c01149a:	00042c23          	sw	zero,24(s0)
  if (cid == 0)
1c01149e:	eb01                	bnez	a4,1c0114ae <__rt_cluster_mount_step+0x48>
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c0114a0:	5048                	lw	a0,36(s0)
1c0114a2:	006c                	addi	a1,sp,12
    int pending = 0;
1c0114a4:	c602                	sw	zero,12(sp)
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c0114a6:	d15ff0ef          	jal	ra,1c0111ba <__rt_pmu_cluster_power_up>
    return pending;
1c0114aa:	47b2                	lw	a5,12(sp)
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c0114ac:	cc08                	sw	a0,24(s0)
    cluster->state++;
1c0114ae:	4c58                	lw	a4,28(s0)
1c0114b0:	0705                	addi	a4,a4,1
1c0114b2:	cc58                	sw	a4,28(s0)
  while(!end)
1c0114b4:	dfe1                	beqz	a5,1c01148c <__rt_cluster_mount_step+0x26>
}
1c0114b6:	50b2                	lw	ra,44(sp)
1c0114b8:	5422                	lw	s0,40(sp)
1c0114ba:	5492                	lw	s1,36(sp)
1c0114bc:	5902                	lw	s2,32(sp)
1c0114be:	49f2                	lw	s3,28(sp)
1c0114c0:	4a62                	lw	s4,24(sp)
1c0114c2:	4ad2                	lw	s5,20(sp)
1c0114c4:	6145                	addi	sp,sp,48
1c0114c6:	8082                	ret
1c0114c8:	02042a83          	lw	s5,32(s0)
1c0114cc:	040a8493          	addi	s1,s5,64
1c0114d0:	04da                	slli	s1,s1,0x16
1c0114d2:	009987b3          	add	a5,s3,s1
  pool->first_call_fc_for_cl = NULL;
1c0114d6:	0007a023          	sw	zero,0(a5)
  pool->first_call_fc = NULL;
1c0114da:	0007a223          	sw	zero,4(a5)
  pool->last_call_fc = NULL;
1c0114de:	0007a423          	sw	zero,8(a5)
  __rt_cluster_fc_task_lock = 0;
1c0114e2:	100007b7          	lui	a5,0x10000
1c0114e6:	0207a223          	sw	zero,36(a5) # 10000024 <__rt_cluster_fc_task_lock>
  return __rt_platform;
1c0114ea:	1c0157b7          	lui	a5,0x1c015
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c0114ee:	a747a783          	lw	a5,-1420(a5) # 1c014a74 <__rt_platform>
1c0114f2:	0017af63          	p.beqimm	a5,1,1c011510 <__rt_cluster_mount_step+0xaa>
      int init_freq = __rt_fll_init(__RT_FLL_CL);
1c0114f6:	4505                	li	a0,1
1c0114f8:	e8dff0ef          	jal	ra,1c011384 <__rt_fll_init>

  #if defined(FLL_VERSION)

  static inline int rt_freq_get(rt_freq_domain_e domain)
  {
    return __rt_freq_domains[domain];
1c0114fc:	1c0157b7          	lui	a5,0x1c015
1c011500:	04c78793          	addi	a5,a5,76 # 1c01504c <__rt_freq_domains>
1c011504:	43cc                	lw	a1,4(a5)
      if (freq)
1c011506:	c9b1                	beqz	a1,1c01155a <__rt_cluster_mount_step+0xf4>
    return rt_freq_set_and_get(domain, freq, NULL);
1c011508:	4601                	li	a2,0
1c01150a:	4505                	li	a0,1
1c01150c:	9c1ff0ef          	jal	ra,1c010ecc <rt_freq_set_and_get>
    IP_WRITE(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid), ARCHI_CLUSTER_CTRL_CLUSTER_CLK_GATE, 1);
1c011510:	00200937          	lui	s2,0x200
1c011514:	01248733          	add	a4,s1,s2
1c011518:	4785                	li	a5,1
1c01151a:	02f72023          	sw	a5,32(a4)
    __rt_init_cluster_data(cid);
1c01151e:	8556                	mv	a0,s5
1c011520:	e81ff0ef          	jal	ra,1c0113a0 <__rt_init_cluster_data>
    __rt_alloc_init_l1(cid);
1c011524:	8556                	mv	a0,s5
1c011526:	c82ff0ef          	jal	ra,1c0109a8 <__rt_alloc_init_l1>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_ICACHE_CTRL_OFFSET, 0xFFFFFFFF);
1c01152a:	002017b7          	lui	a5,0x201
1c01152e:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
1c011532:	577d                	li	a4,-1
1c011534:	04090913          	addi	s2,s2,64 # 200040 <__L2+0x180040>
1c011538:	00e4e7a3          	p.sw	a4,a5(s1)
1c01153c:	9926                	add	s2,s2,s1
1c01153e:	008250fb          	lp.setupi	x1,8,1c011546 <__rt_cluster_mount_step+0xe0>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
1c011542:	0149222b          	p.sw	s4,4(s2!)
1c011546:	0001                	nop
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + EOC_FETCH_OFFSET, mask);
1c011548:	002007b7          	lui	a5,0x200
1c01154c:	07a1                	addi	a5,a5,8
1c01154e:	0ff00713          	li	a4,255
1c011552:	00e4e7a3          	p.sw	a4,a5(s1)
    switch (cluster->state)
1c011556:	4781                	li	a5,0
1c011558:	bf99                	j	1c0114ae <__rt_cluster_mount_step+0x48>
    __rt_freq_domains[domain] = freq;
1c01155a:	c3c8                	sw	a0,4(a5)
1c01155c:	bf55                	j	1c011510 <__rt_cluster_mount_step+0xaa>
        __rt_event_restore(cluster->mount_event);
1c01155e:	505c                	lw	a5,36(s0)
  event->implem.pending = event->implem.saved_pending;
1c011560:	5bd8                	lw	a4,52(a5)
1c011562:	d3d8                	sw	a4,36(a5)
  event->arg[0] = (uintptr_t)event->implem.saved_callback;
1c011564:	57d8                	lw	a4,44(a5)
1c011566:	c3d8                	sw	a4,4(a5)
  event->arg[1] = (uintptr_t)event->implem.saved_arg;
1c011568:	5b98                	lw	a4,48(a5)
1c01156a:	c798                	sw	a4,8(a5)
  event->implem.saved_pending = 0;
1c01156c:	0207aa23          	sw	zero,52(a5) # 200034 <__L2+0x180034>
        __rt_event_enqueue(cluster->mount_event);
1c011570:	505c                	lw	a5,36(s0)
  if (sched->first) {
1c011572:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
1c011576:	01c00693          	li	a3,28
  event->next = NULL;
1c01157a:	0007a023          	sw	zero,0(a5)
  if (sched->first) {
1c01157e:	c611                	beqz	a2,1c01158a <__rt_cluster_mount_step+0x124>
    sched->last->next = event;
1c011580:	42d8                	lw	a4,4(a3)
1c011582:	c31c                	sw	a5,0(a4)
  sched->last = event;
1c011584:	c2dc                	sw	a5,4(a3)
        end = 1;
1c011586:	4785                	li	a5,1
1c011588:	b71d                	j	1c0114ae <__rt_cluster_mount_step+0x48>
    sched->first = event;
1c01158a:	00f02e23          	sw	a5,28(zero) # 1c <__rt_sched>
1c01158e:	bfdd                	j	1c011584 <__rt_cluster_mount_step+0x11e>

1c011590 <pi_cluster_conf_init>:
  conf->id = 0;
1c011590:	00052223          	sw	zero,4(a0)
}
1c011594:	8082                	ret

1c011596 <pi_cluster_open>:
{
1c011596:	1101                	addi	sp,sp,-32
1c011598:	ce06                	sw	ra,28(sp)
1c01159a:	cc22                	sw	s0,24(sp)
1c01159c:	ca26                	sw	s1,20(sp)
1c01159e:	c84a                	sw	s2,16(sp)
1c0115a0:	c64e                	sw	s3,12(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0115a2:	30047973          	csrrci	s2,mstatus,8
  struct pi_cluster_conf *conf = (struct pi_cluster_conf *)cluster_dev->config;
1c0115a6:	00452983          	lw	s3,4(a0)
  cluster_dev->data = (void *)&__rt_fc_cluster_data[cid];
1c0115aa:	1c0154b7          	lui	s1,0x1c015
1c0115ae:	02800793          	li	a5,40
  int cid = conf->id;
1c0115b2:	0049a703          	lw	a4,4(s3)
  cluster_dev->data = (void *)&__rt_fc_cluster_data[cid];
1c0115b6:	05c48493          	addi	s1,s1,92 # 1c01505c <__rt_fc_cluster_data>
1c0115ba:	42f704b3          	p.mac	s1,a4,a5
1c0115be:	c504                	sw	s1,8(a0)
  rt_event_t *event = __rt_wait_event_prepare_blocking();
1c0115c0:	920ff0ef          	jal	ra,1c0106e0 <__rt_wait_event_prepare_blocking>
  if (rt_is_fc() || (cid && !rt_has_fc()))
1c0115c4:	02000713          	li	a4,32
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0115c8:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c0115cc:	ca5797b3          	p.extractu	a5,a5,5,5
  rt_event_t *event = __rt_wait_event_prepare_blocking();
1c0115d0:	842a                	mv	s0,a0
  if (rt_is_fc() || (cid && !rt_has_fc()))
1c0115d2:	04e79563          	bne	a5,a4,1c01161c <pi_cluster_open+0x86>
  event->implem.saved_pending = event->implem.pending;
1c0115d6:	515c                	lw	a5,36(a0)
    cluster->state = RT_CLUSTER_MOUNT_START;
1c0115d8:	0004ae23          	sw	zero,28(s1)
    cluster->mount_event = event;
1c0115dc:	d0c8                	sw	a0,36(s1)
1c0115de:	d95c                	sw	a5,52(a0)
  event->implem.saved_callback = (void (*)(void *))event->arg[0];
1c0115e0:	415c                	lw	a5,4(a0)
  event->implem.keep = 0;
1c0115e2:	02052423          	sw	zero,40(a0)
  event->implem.saved_callback = (void (*)(void *))event->arg[0];
1c0115e6:	d55c                	sw	a5,44(a0)
  event->implem.saved_arg = (void *)event->arg[1];
1c0115e8:	451c                	lw	a5,8(a0)
  event->arg[1] = (uintptr_t)arg;
1c0115ea:	c504                	sw	s1,8(a0)
  event->implem.saved_arg = (void *)event->arg[1];
1c0115ec:	d91c                	sw	a5,48(a0)
  event->arg[0] = (uintptr_t)callback;
1c0115ee:	1c0117b7          	lui	a5,0x1c011
1c0115f2:	46678793          	addi	a5,a5,1126 # 1c011466 <__rt_cluster_mount_step>
1c0115f6:	c15c                	sw	a5,4(a0)
  event->implem.pending = 1;  
1c0115f8:	4785                	li	a5,1
1c0115fa:	d15c                	sw	a5,36(a0)
    __rt_cluster_mount_step((void *)cluster);
1c0115fc:	8526                	mv	a0,s1
1c0115fe:	e69ff0ef          	jal	ra,1c011466 <__rt_cluster_mount_step>
  __rt_wait_event(event);
1c011602:	8522                	mv	a0,s0
1c011604:	a2eff0ef          	jal	ra,1c010832 <__rt_wait_event>
  __builtin_pulp_spr_write(reg, val);
1c011608:	30091073          	csrw	mstatus,s2
}
1c01160c:	40f2                	lw	ra,28(sp)
1c01160e:	4462                	lw	s0,24(sp)
1c011610:	44d2                	lw	s1,20(sp)
1c011612:	4942                	lw	s2,16(sp)
1c011614:	49b2                	lw	s3,12(sp)
1c011616:	4501                	li	a0,0
1c011618:	6105                	addi	sp,sp,32
1c01161a:	8082                	ret
  if (__rt_cluster_mount(&__rt_fc_cluster_data[cid], conf->id, 0, event))
1c01161c:	0049a483          	lw	s1,4(s3)
    __rt_init_cluster_data(cid);
1c011620:	8526                	mv	a0,s1
1c011622:	d7fff0ef          	jal	ra,1c0113a0 <__rt_init_cluster_data>
1c011626:	04048513          	addi	a0,s1,64
1c01162a:	002017b7          	lui	a5,0x201
1c01162e:	055a                	slli	a0,a0,0x16
1c011630:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
1c011634:	577d                	li	a4,-1
1c011636:	00e567a3          	p.sw	a4,a5(a0)
1c01163a:	002007b7          	lui	a5,0x200
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c01163e:	1c000737          	lui	a4,0x1c000
1c011642:	04478793          	addi	a5,a5,68 # 200044 <__L2+0x180044>
1c011646:	08070713          	addi	a4,a4,128 # 1c000080 <_start>
1c01164a:	97aa                	add	a5,a5,a0
1c01164c:	ce073733          	p.bclr	a4,a4,7,0
1c011650:	007250fb          	lp.setupi	x1,7,1c011658 <pi_cluster_open+0xc2>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
1c011654:	00e7a22b          	p.sw	a4,4(a5!)
1c011658:	0001                	nop
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + EOC_FETCH_OFFSET, mask);
1c01165a:	002007b7          	lui	a5,0x200
1c01165e:	07a1                	addi	a5,a5,8
1c011660:	577d                	li	a4,-1
1c011662:	00e567a3          	p.sw	a4,a5(a0)
    rt_event_push(event);
1c011666:	8522                	mv	a0,s0
1c011668:	942ff0ef          	jal	ra,1c0107aa <rt_event_push>
1c01166c:	bf59                	j	1c011602 <pi_cluster_open+0x6c>

1c01166e <pi_cluster_close>:
  __rt_cluster_unmount(data->cid, 0, NULL);
1c01166e:	451c                	lw	a5,8(a0)
{
1c011670:	1101                	addi	sp,sp,-32
1c011672:	cc22                	sw	s0,24(sp)
  __rt_cluster_unmount(data->cid, 0, NULL);
1c011674:	5380                	lw	s0,32(a5)
1c011676:	1c0157b7          	lui	a5,0x1c015
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c01167a:	a747a783          	lw	a5,-1420(a5) # 1c014a74 <__rt_platform>
{
1c01167e:	ce06                	sw	ra,28(sp)
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c011680:	0017a563          	p.beqimm	a5,1,1c01168a <pi_cluster_close+0x1c>
      __rt_fll_deinit(__RT_FLL_CL);
1c011684:	4505                	li	a0,1
1c011686:	d11ff0ef          	jal	ra,1c011396 <__rt_fll_deinit>
    int pending = 0;
1c01168a:	c602                	sw	zero,12(sp)
  if (cid == 0) __rt_pmu_cluster_power_down(event, &pending);
1c01168c:	e409                	bnez	s0,1c011696 <pi_cluster_close+0x28>
1c01168e:	006c                	addi	a1,sp,12
1c011690:	4501                	li	a0,0
1c011692:	915ff0ef          	jal	ra,1c010fa6 <__rt_pmu_cluster_power_down>
}
1c011696:	40f2                	lw	ra,28(sp)
1c011698:	4462                	lw	s0,24(sp)
1c01169a:	4501                	li	a0,0
1c01169c:	6105                	addi	sp,sp,32
1c01169e:	8082                	ret

1c0116a0 <__rt_cluster_push_fc_event>:
  while (rt_tas_lock_32((int)&__rt_cluster_fc_task_lock) == -1)
1c0116a0:	100006b7          	lui	a3,0x10000
1c0116a4:	02468693          	addi	a3,a3,36 # 10000024 <__rt_cluster_fc_task_lock>
  return addr | (1<<ARCHI_L1_TAS_BIT);
1c0116a8:	c146c5b3          	p.bset	a1,a3,0,20
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0116ac:	4709                	li	a4,2
1c0116ae:	002047b7          	lui	a5,0x204
  signed int result = *(volatile signed int *)__rt_tas_addr(addr);
1c0116b2:	4190                	lw	a2,0(a1)
1c0116b4:	05f62063          	p.beqimm	a2,-1,1c0116f4 <__rt_cluster_push_fc_event+0x54>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0116b8:	01402773          	csrr	a4,uhartid
  while(data->events != NULL)
1c0116bc:	1c0157b7          	lui	a5,0x1c015
  return (hart_id >> 5) & 0x3f;
1c0116c0:	8715                	srai	a4,a4,0x5
1c0116c2:	f2673733          	p.bclr	a4,a4,25,6
1c0116c6:	02800613          	li	a2,40
1c0116ca:	05c78793          	addi	a5,a5,92 # 1c01505c <__rt_fc_cluster_data>
1c0116ce:	42c707b3          	p.mac	a5,a4,a2
1c0116d2:	4609                	li	a2,2
1c0116d4:	00204737          	lui	a4,0x204
1c0116d8:	43cc                	lw	a1,4(a5)
1c0116da:	e585                	bnez	a1,1c011702 <__rt_cluster_push_fc_event+0x62>
  data->events = event;
1c0116dc:	c3c8                	sw	a0,4(a5)
  pulp_write32(evtAddr, coreSet);
1c0116de:	1b2017b7          	lui	a5,0x1b201
1c0116e2:	e007a223          	sw	zero,-508(a5) # 1b200e04 <__fc_tcdm_end+0x1ffe34>
  *(volatile signed int *)addr = value;
1c0116e6:	0006a023          	sw	zero,0(a3)
1c0116ea:	002047b7          	lui	a5,0x204
1c0116ee:	1007a223          	sw	zero,260(a5) # 204104 <__L2+0x184104>
}
1c0116f2:	8082                	ret
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0116f4:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0116f8:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0116fc:	00e7a223          	sw	a4,4(a5)
1c011700:	bf4d                	j	1c0116b2 <__rt_cluster_push_fc_event+0x12>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c011702:	00c72423          	sw	a2,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c011706:	03c76583          	p.elw	a1,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c01170a:	00c72223          	sw	a2,4(a4)
1c01170e:	b7e9                	j	1c0116d8 <__rt_cluster_push_fc_event+0x38>

1c011710 <__rt_cluster_new>:
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c011710:	1c0115b7          	lui	a1,0x1c011
{
1c011714:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c011716:	4601                	li	a2,0
1c011718:	40258593          	addi	a1,a1,1026 # 1c011402 <__rt_cluster_init>
1c01171c:	4501                	li	a0,0
{
1c01171e:	c606                	sw	ra,12(sp)
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c011720:	b9ffe0ef          	jal	ra,1c0102be <__rt_cbsys_add>
  if (err) rt_fatal("Unable to initialize time driver\n");
1c011724:	c10d                	beqz	a0,1c011746 <__rt_cluster_new+0x36>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c011726:	01402673          	csrr	a2,uhartid
1c01172a:	1c014537          	lui	a0,0x1c014
  return (hart_id >> 5) & 0x3f;
1c01172e:	40565593          	srai	a1,a2,0x5
1c011732:	f265b5b3          	p.bclr	a1,a1,25,6
1c011736:	f4563633          	p.bclr	a2,a2,26,5
1c01173a:	6bc50513          	addi	a0,a0,1724 # 1c0146bc <IntegerExpLUT+0x174>
1c01173e:	462010ef          	jal	ra,1c012ba0 <printf>
1c011742:	3e2010ef          	jal	ra,1c012b24 <abort>
}
1c011746:	40b2                	lw	ra,12(sp)
1c011748:	0141                	addi	sp,sp,16
1c01174a:	8082                	ret

1c01174c <__rt_cluster_pulpos_emu_init>:
static struct pi_device *__rt_fc_cluster_device;
static struct pi_cluster_task __rt_pulpos_emu_global_cluster_task;


static void __attribute__((constructor)) __rt_cluster_pulpos_emu_init()
{
1c01174c:	1141                	addi	sp,sp,-16
  int nb_cluster = rt_nb_cluster();

  __rt_fc_cluster_device = rt_alloc(RT_ALLOC_FC_DATA, sizeof(struct pi_device)*nb_cluster);
1c01174e:	45b1                	li	a1,12
1c011750:	4505                	li	a0,1
{
1c011752:	c606                	sw	ra,12(sp)
  __rt_fc_cluster_device = rt_alloc(RT_ALLOC_FC_DATA, sizeof(struct pi_device)*nb_cluster);
1c011754:	9f6ff0ef          	jal	ra,1c01094a <rt_alloc>
1c011758:	1c0157b7          	lui	a5,0x1c015
1c01175c:	f8a7a223          	sw	a0,-124(a5) # 1c014f84 <__rt_fc_cluster_device>
  if (__rt_fc_cluster_device == NULL) {
1c011760:	e10d                	bnez	a0,1c011782 <__rt_cluster_pulpos_emu_init+0x36>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c011762:	01402673          	csrr	a2,uhartid
    rt_fatal("Unable to allocate cluster control structure\n");
1c011766:	1c014537          	lui	a0,0x1c014
  return (hart_id >> 5) & 0x3f;
1c01176a:	40565593          	srai	a1,a2,0x5
1c01176e:	f265b5b3          	p.bclr	a1,a1,25,6
1c011772:	f4563633          	p.bclr	a2,a2,26,5
1c011776:	70450513          	addi	a0,a0,1796 # 1c014704 <IntegerExpLUT+0x1bc>
1c01177a:	426010ef          	jal	ra,1c012ba0 <printf>
1c01177e:	3a6010ef          	jal	ra,1c012b24 <abort>
    return;
  }
}
1c011782:	40b2                	lw	ra,12(sp)
1c011784:	0141                	addi	sp,sp,16
1c011786:	8082                	ret

1c011788 <rt_cluster_call>:

int rt_cluster_call(rt_cluster_call_t *_call, int cid, void (*entry)(void *arg), void *arg, void *stacks, int master_stack_size, int slave_stack_size, int nb_pe, rt_event_t *event)
{
1c011788:	7139                	addi	sp,sp,-64
1c01178a:	d84a                	sw	s2,48(sp)
1c01178c:	4906                	lw	s2,64(sp)
1c01178e:	dc22                	sw	s0,56(sp)
1c011790:	842e                	mv	s0,a1
1c011792:	de06                	sw	ra,60(sp)
1c011794:	da26                	sw	s1,52(sp)
1c011796:	d64e                	sw	s3,44(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c011798:	300479f3          	csrrci	s3,mstatus,8
  __asm__ __volatile__ ("" : : : "memory");
1c01179c:	84ca                	mv	s1,s2
  if (likely(event != NULL)) return event;
1c01179e:	02091163          	bnez	s2,1c0117c0 <rt_cluster_call+0x38>
  return __rt_wait_event_prepare_blocking();
1c0117a2:	ce32                	sw	a2,28(sp)
1c0117a4:	cc36                	sw	a3,24(sp)
1c0117a6:	ca3a                	sw	a4,20(sp)
1c0117a8:	c83e                	sw	a5,16(sp)
1c0117aa:	c642                	sw	a6,12(sp)
1c0117ac:	c446                	sw	a7,8(sp)
1c0117ae:	f33fe0ef          	jal	ra,1c0106e0 <__rt_wait_event_prepare_blocking>
1c0117b2:	48a2                	lw	a7,8(sp)
1c0117b4:	4832                	lw	a6,12(sp)
1c0117b6:	47c2                	lw	a5,16(sp)
1c0117b8:	4752                	lw	a4,20(sp)
1c0117ba:	46e2                	lw	a3,24(sp)
1c0117bc:	4672                	lw	a2,28(sp)
1c0117be:	84aa                	mv	s1,a0
static inline struct pi_cluster_task *pi_cluster_task(struct pi_cluster_task *task, void (*entry)(void*), void *arg)
{
    #if defined(PMSIS_DRIVERS)
    memset(task, 0, sizeof(struct pi_cluster_task));
    #endif  /* PMSIS_DRIVERS */
    task->entry = entry;
1c0117c0:	1c0155b7          	lui	a1,0x1c015
1c0117c4:	d9c58513          	addi	a0,a1,-612 # 1c014d9c <__rt_pulpos_emu_global_cluster_task>
  struct pi_cluster_task *task = &__rt_pulpos_emu_global_cluster_task;

  pi_cluster_task(task, entry, arg);

  task->stacks = stacks;
  task->stack_size = master_stack_size;
1c0117c8:	c55c                	sw	a5,12(a0)
  task->slave_stack_size = slave_stack_size;
  task->nb_cores = nb_pe;

  if (pi_cluster_send_task_to_cl_async(&__rt_fc_cluster_device[cid], task, call_event))
1c0117ca:	1c0157b7          	lui	a5,0x1c015
1c0117ce:	c110                	sw	a2,0(a0)
    task->arg = arg;
1c0117d0:	c154                	sw	a3,4(a0)
  task->stacks = stacks;
1c0117d2:	c518                	sw	a4,8(a0)
  task->slave_stack_size = slave_stack_size;
1c0117d4:	01052823          	sw	a6,16(a0)
  task->nb_cores = nb_pe;
1c0117d8:	01152a23          	sw	a7,20(a0)
  if (pi_cluster_send_task_to_cl_async(&__rt_fc_cluster_device[cid], task, call_event))
1c0117dc:	f847a503          	lw	a0,-124(a5) # 1c014f84 <__rt_fc_cluster_device>
1c0117e0:	47b1                	li	a5,12
1c0117e2:	8626                	mv	a2,s1
1c0117e4:	42f40533          	p.mac	a0,s0,a5
1c0117e8:	d9c58593          	addi	a1,a1,-612
1c0117ec:	2061                	jal	1c011874 <pi_cluster_send_task_to_cl_async>
1c0117ee:	842a                	mv	s0,a0
1c0117f0:	cd01                	beqz	a0,1c011808 <rt_cluster_call+0x80>
  __builtin_pulp_spr_write(reg, val);
1c0117f2:	30099073          	csrw	mstatus,s3
  {
  	rt_irq_restore(irq);
  	return -1;
1c0117f6:	547d                	li	s0,-1
  __rt_wait_event_check(event, call_event);

  rt_irq_restore(irq);

  return 0;
}
1c0117f8:	8522                	mv	a0,s0
1c0117fa:	50f2                	lw	ra,60(sp)
1c0117fc:	5462                	lw	s0,56(sp)
1c0117fe:	54d2                	lw	s1,52(sp)
1c011800:	5942                	lw	s2,48(sp)
1c011802:	59b2                	lw	s3,44(sp)
1c011804:	6121                	addi	sp,sp,64
1c011806:	8082                	ret
  if (event == NULL) __rt_wait_event(call_event);
1c011808:	00091563          	bnez	s2,1c011812 <rt_cluster_call+0x8a>
1c01180c:	8526                	mv	a0,s1
1c01180e:	824ff0ef          	jal	ra,1c010832 <__rt_wait_event>
1c011812:	30099073          	csrw	mstatus,s3
  return 0;
1c011816:	b7cd                	j	1c0117f8 <rt_cluster_call+0x70>

1c011818 <rt_cluster_mount>:

void rt_cluster_mount(int mount, int cid, int flags, rt_event_t *event)
{
1c011818:	7139                	addi	sp,sp,-64
1c01181a:	dc22                	sw	s0,56(sp)
1c01181c:	da26                	sw	s1,52(sp)
1c01181e:	d84a                	sw	s2,48(sp)
1c011820:	4431                	li	s0,12
1c011822:	1c0154b7          	lui	s1,0x1c015
1c011826:	de06                	sw	ra,60(sp)
1c011828:	d64e                	sw	s3,44(sp)
1c01182a:	8936                	mv	s2,a3
1c01182c:	02858433          	mul	s0,a1,s0
1c011830:	f8448493          	addi	s1,s1,-124 # 1c014f84 <__rt_fc_cluster_device>
  if (mount)
1c011834:	c91d                	beqz	a0,1c01186a <rt_cluster_mount+0x52>
  {
    struct pi_cluster_conf conf;
    pi_cluster_conf_init(&conf);
1c011836:	0028                	addi	a0,sp,8
1c011838:	89ae                	mv	s3,a1
1c01183a:	d57ff0ef          	jal	ra,1c011590 <pi_cluster_conf_init>
    pi_open_from_conf(&__rt_fc_cluster_device[cid], &conf);
1c01183e:	4088                	lw	a0,0(s1)
1c011840:	002c                	addi	a1,sp,8
1c011842:	9522                	add	a0,a0,s0
1c011844:	90bfe0ef          	jal	ra,1c01014e <pi_open_from_conf>
    conf.id = cid;
    pi_cluster_open(&__rt_fc_cluster_device[cid]);
1c011848:	4088                	lw	a0,0(s1)
    conf.id = cid;
1c01184a:	c64e                	sw	s3,12(sp)
    pi_cluster_open(&__rt_fc_cluster_device[cid]);
1c01184c:	9522                	add	a0,a0,s0
1c01184e:	d49ff0ef          	jal	ra,1c011596 <pi_cluster_open>
  else
  {
    pi_cluster_close(&__rt_fc_cluster_device[cid]);
  }

  if (event)
1c011852:	00090563          	beqz	s2,1c01185c <rt_cluster_mount+0x44>
    rt_event_push(event);
1c011856:	854a                	mv	a0,s2
1c011858:	f53fe0ef          	jal	ra,1c0107aa <rt_event_push>
}
1c01185c:	50f2                	lw	ra,60(sp)
1c01185e:	5462                	lw	s0,56(sp)
1c011860:	54d2                	lw	s1,52(sp)
1c011862:	5942                	lw	s2,48(sp)
1c011864:	59b2                	lw	s3,44(sp)
1c011866:	6121                	addi	sp,sp,64
1c011868:	8082                	ret
    pi_cluster_close(&__rt_fc_cluster_device[cid]);
1c01186a:	4088                	lw	a0,0(s1)
1c01186c:	9522                	add	a0,a0,s0
1c01186e:	e01ff0ef          	jal	ra,1c01166e <pi_cluster_close>
1c011872:	b7c5                	j	1c011852 <rt_cluster_mount+0x3a>

1c011874 <pi_cluster_send_task_to_cl_async>:
  }
}
#endif

int pi_cluster_send_task_to_cl_async(struct pi_device *device, struct pi_cluster_task *task, pi_task_t *async_task)
{
1c011874:	1101                	addi	sp,sp,-32
1c011876:	ca26                	sw	s1,20(sp)
  rt_fc_cluster_data_t *data = (rt_fc_cluster_data_t *)device->data;
1c011878:	4504                	lw	s1,8(a0)
{
1c01187a:	cc22                	sw	s0,24(sp)
1c01187c:	c256                	sw	s5,4(sp)
1c01187e:	842e                	mv	s0,a1
1c011880:	8ab2                	mv	s5,a2
1c011882:	ce06                	sw	ra,28(sp)
1c011884:	c84a                	sw	s2,16(sp)
1c011886:	c64e                	sw	s3,12(sp)
1c011888:	c452                	sw	s4,8(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c01188a:	30047a73          	csrrci	s4,mstatus,8

  int lock = __rt_cluster_lock(data);

  __rt_task_init(async_task);
  
  task->implem.pending = 1;
1c01188e:	4785                	li	a5,1
  task->done = 0;
1c011890:	00060a23          	sb	zero,20(a2)
1c011894:	d1dc                	sw	a5,36(a1)

  rt_cluster_call_pool_t *cl_data = data->pool;

  if (task->nb_cores == 0)
1c011896:	49dc                	lw	a5,20(a1)
  rt_cluster_call_pool_t *cl_data = data->pool;
1c011898:	0144a983          	lw	s3,20(s1)
  if (task->nb_cores == 0)
1c01189c:	e399                	bnez	a5,1c0118a2 <pi_cluster_send_task_to_cl_async+0x2e>
    task->nb_cores = pi_cl_cluster_nb_cores();
1c01189e:	47a1                	li	a5,8
1c0118a0:	c9dc                	sw	a5,20(a1)

  if (task->stacks == NULL)
1c0118a2:	441c                	lw	a5,8(s0)
1c0118a4:	ef85                	bnez	a5,1c0118dc <pi_cluster_send_task_to_cl_async+0x68>
  {
    if (task->stack_size == 0)
1c0118a6:	445c                	lw	a5,12(s0)
1c0118a8:	eb81                	bnez	a5,1c0118b8 <pi_cluster_send_task_to_cl_async+0x44>
    {
      task->stack_size = 0x800;
1c0118aa:	6785                	lui	a5,0x1
1c0118ac:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c0118b0:	c45c                	sw	a5,12(s0)
      task->slave_stack_size = 0x400;
1c0118b2:	40000793          	li	a5,1024
1c0118b6:	c81c                	sw	a5,16(s0)
    }

    if (task->slave_stack_size == 0)
1c0118b8:	481c                	lw	a5,16(s0)
1c0118ba:	00c42903          	lw	s2,12(s0)
1c0118be:	e399                	bnez	a5,1c0118c4 <pi_cluster_send_task_to_cl_async+0x50>
      task->slave_stack_size = task->stack_size;
1c0118c0:	01242823          	sw	s2,16(s0)

    int stacks_size = task->stack_size + task->slave_stack_size * (task->nb_cores - 1);
1c0118c4:	485c                	lw	a5,20(s0)
1c0118c6:	4818                	lw	a4,16(s0)

    if (data->stacks == NULL || stacks_size != data->stacks_size)
1c0118c8:	448c                	lw	a1,8(s1)
    int stacks_size = task->stack_size + task->slave_stack_size * (task->nb_cores - 1);
1c0118ca:	17fd                	addi	a5,a5,-1
1c0118cc:	42e78933          	p.mac	s2,a5,a4
    if (data->stacks == NULL || stacks_size != data->stacks_size)
1c0118d0:	c9b5                	beqz	a1,1c011944 <pi_cluster_send_task_to_cl_async+0xd0>
1c0118d2:	44d0                	lw	a2,12(s1)
1c0118d4:	05261f63          	bne	a2,s2,1c011932 <pi_cluster_send_task_to_cl_async+0xbe>

      if (data->stacks == NULL)
        goto error;
    }

    task->stacks = data->stacks;
1c0118d8:	449c                	lw	a5,8(s1)
1c0118da:	c41c                	sw	a5,8(s0)

  task->completion_callback = async_task;
#ifdef ARCHI_HAS_CC
  task->implem.core_mask = (1<<(task->nb_cores-1)) - 1;
#else
  task->implem.core_mask = (1<<task->nb_cores) - 1;
1c0118dc:	4858                	lw	a4,20(s0)
1c0118de:	4785                	li	a5,1
  task->completion_callback = async_task;
1c0118e0:	01542c23          	sw	s5,24(s0)
  task->implem.core_mask = (1<<task->nb_cores) - 1;
1c0118e4:	00e797b3          	sll	a5,a5,a4
1c0118e8:	17fd                	addi	a5,a5,-1
1c0118ea:	d41c                	sw	a5,40(s0)
#endif

  task->next = NULL;
1c0118ec:	02042023          	sw	zero,32(s0)

  rt_compiler_barrier();

  if (cl_data->last_call_fc)
1c0118f0:	0089a783          	lw	a5,8(s3)
1c0118f4:	cbb5                	beqz	a5,1c011968 <pi_cluster_send_task_to_cl_async+0xf4>
  {
    cl_data->last_call_fc->next = task;
1c0118f6:	d380                	sw	s0,32(a5)
  else
  {
    cl_data->first_call_fc = task;
  }

  cl_data->last_call_fc = task;
1c0118f8:	0089a423          	sw	s0,8(s3)

  rt_compiler_barrier();
  
  if (cl_data->first_call_fc_for_cl == NULL)
1c0118fc:	0009a783          	lw	a5,0(s3)
1c011900:	e399                	bnez	a5,1c011906 <pi_cluster_send_task_to_cl_async+0x92>
    cl_data->first_call_fc_for_cl = task;
1c011902:	0089a023          	sw	s0,0(s3)
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c011906:	509c                	lw	a5,32(s1)
  pulp_write32(evtAddr, coreSet);
1c011908:	00201737          	lui	a4,0x201
1c01190c:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c011910:	04078793          	addi	a5,a5,64
1c011914:	07da                	slli	a5,a5,0x16
  pulp_write32(evtAddr, coreSet);
1c011916:	0007e723          	p.sw	zero,a4(a5)
  __builtin_pulp_spr_write(reg, val);
1c01191a:	300a1073          	csrw	mstatus,s4
  rt_compiler_barrier();
  eu_evt_trig(eu_evt_trig_cluster_addr(data->cid, RT_CLUSTER_CALL_EVT), 0);

  __rt_cluster_unlock(data, lock);

  return 0;
1c01191e:	4501                	li	a0,0

error:
  __rt_cluster_unlock(data, lock);
  return -1;
}
1c011920:	40f2                	lw	ra,28(sp)
1c011922:	4462                	lw	s0,24(sp)
1c011924:	44d2                	lw	s1,20(sp)
1c011926:	4942                	lw	s2,16(sp)
1c011928:	49b2                	lw	s3,12(sp)
1c01192a:	4a22                	lw	s4,8(sp)
1c01192c:	4a92                	lw	s5,4(sp)
1c01192e:	6105                	addi	sp,sp,32
1c011930:	8082                	ret

#if defined(ARCHI_HAS_L1)

extern rt_alloc_t *__rt_alloc_l1;

static inline rt_alloc_t *rt_alloc_l1(int cid) { return &__rt_alloc_l1[cid]; }
1c011932:	509c                	lw	a5,32(s1)
1c011934:	1c015737          	lui	a4,0x1c015
1c011938:	03c72503          	lw	a0,60(a4) # 1c01503c <__rt_alloc_l1>
1c01193c:	078a                	slli	a5,a5,0x2
        rt_user_free(rt_alloc_l1(data->cid), data->stacks, data->stacks_size);
1c01193e:	953e                	add	a0,a0,a5
1c011940:	fbffe0ef          	jal	ra,1c0108fe <rt_user_free>
1c011944:	509c                	lw	a5,32(s1)
1c011946:	1c015737          	lui	a4,0x1c015
1c01194a:	03c72503          	lw	a0,60(a4) # 1c01503c <__rt_alloc_l1>
1c01194e:	078a                	slli	a5,a5,0x2
      data->stacks_size = stacks_size;
1c011950:	0124a623          	sw	s2,12(s1)
      data->stacks = rt_user_alloc(rt_alloc_l1(data->cid), stacks_size);
1c011954:	85ca                	mv	a1,s2
1c011956:	953e                	add	a0,a0,a5
1c011958:	f5ffe0ef          	jal	ra,1c0108b6 <rt_user_alloc>
1c01195c:	c488                	sw	a0,8(s1)
      if (data->stacks == NULL)
1c01195e:	fd2d                	bnez	a0,1c0118d8 <pi_cluster_send_task_to_cl_async+0x64>
1c011960:	300a1073          	csrw	mstatus,s4
  return -1;
1c011964:	557d                	li	a0,-1
1c011966:	bf6d                	j	1c011920 <pi_cluster_send_task_to_cl_async+0xac>
    cl_data->first_call_fc = task;
1c011968:	0089a223          	sw	s0,4(s3)
1c01196c:	b771                	j	1c0118f8 <pi_cluster_send_task_to_cl_async+0x84>

1c01196e <pi_cluster_send_task_to_cl>:



int pi_cluster_send_task_to_cl(struct pi_device *device, struct pi_cluster_task *task)
{
1c01196e:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c011970:	4785                	li	a5,1
  pi_task_t fc_task;

  pi_task_block(&fc_task);

  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c011972:	860a                	mv	a2,sp
{
1c011974:	c522                	sw	s0,136(sp)
1c011976:	c706                	sw	ra,140(sp)
1c011978:	c326                	sw	s1,132(sp)
1c01197a:	c14a                	sw	s2,128(sp)
1c01197c:	cc3e                	sw	a5,24(sp)
  task->arg[0] = (uint32_t)0;
1c01197e:	c202                	sw	zero,4(sp)
  task->implem.keep = 1;
1c011980:	d43e                	sw	a5,40(sp)
1c011982:	00010a23          	sb	zero,20(sp)
  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c011986:	eefff0ef          	jal	ra,1c011874 <pi_cluster_send_task_to_cl_async>
  {
    return -1;
1c01198a:	547d                	li	s0,-1
  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c01198c:	e509                	bnez	a0,1c011996 <pi_cluster_send_task_to_cl+0x28>
1c01198e:	842a                	mv	s0,a0
  while(!task->done)
1c011990:	01410783          	lb	a5,20(sp)
1c011994:	cb81                	beqz	a5,1c0119a4 <pi_cluster_send_task_to_cl+0x36>
  }

  pi_task_wait_on(&fc_task);

  return 0;
}
1c011996:	8522                	mv	a0,s0
1c011998:	40ba                	lw	ra,140(sp)
1c01199a:	442a                	lw	s0,136(sp)
1c01199c:	449a                	lw	s1,132(sp)
1c01199e:	490a                	lw	s2,128(sp)
1c0119a0:	6149                	addi	sp,sp,144
1c0119a2:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0119a4:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0119a8:	4585                	li	a1,1
1c0119aa:	01c00513          	li	a0,28
1c0119ae:	e21fe0ef          	jal	ra,1c0107ce <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0119b2:	30091073          	csrw	mstatus,s2
1c0119b6:	bfe9                	j	1c011990 <pi_cluster_send_task_to_cl+0x22>

1c0119b8 <pi_pad_set_function>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0119b8:	300476f3          	csrrci	a3,mstatus,8
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c0119bc:	068417b7          	lui	a5,0x6841
  unsigned int padBit = APB_SOC_PADFUN_BIT(pad);
1c0119c0:	00151713          	slli	a4,a0,0x1
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c0119c4:	05078793          	addi	a5,a5,80 # 6841050 <__L2+0x67c1050>
  unsigned int padfunId = APB_SOC_PADFUN_NO(pad);
1c0119c8:	8111                	srli	a0,a0,0x4
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c0119ca:	953e                	add	a0,a0,a5
1c0119cc:	050a                	slli	a0,a0,0x2
  unsigned int padBit = APB_SOC_PADFUN_BIT(pad);
1c0119ce:	8b79                	andi	a4,a4,30
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c0119d0:	4110                	lw	a2,0(a0)
  unsigned int oldval = hal_apb_soc_padfun_get(padfunId) & ~(((1<<APB_SOC_PADFUN_SIZE)-1) << padBit);
1c0119d2:	478d                	li	a5,3
1c0119d4:	00e797b3          	sll	a5,a5,a4
1c0119d8:	fff7c793          	not	a5,a5
1c0119dc:	8ff1                	and	a5,a5,a2
  unsigned int newVal = oldval | (func << padBit);
1c0119de:	00e595b3          	sll	a1,a1,a4
1c0119e2:	8ddd                	or	a1,a1,a5
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id), value);
1c0119e4:	c10c                	sw	a1,0(a0)
  __builtin_pulp_spr_write(reg, val);
1c0119e6:	30069073          	csrw	mstatus,a3
void pi_pad_set_function(pi_pad_e pad, pi_pad_func_e function)
{
  int irq = rt_irq_disable();
  hal_apb_soc_pad_set_function(pad, function);
  rt_irq_restore(irq);
}
1c0119ea:	8082                	ret

1c0119ec <pi_pad_init>:

void pi_pad_init(uint32_t pad_values[])
{
  for (int i=0; i<ARCHI_APB_SOC_PADFUN_NB; i++)
  {
    hal_apb_soc_padfun_set(i, pad_values[i]);
1c0119ec:	4114                	lw	a3,0(a0)
1c0119ee:	1a1047b7          	lui	a5,0x1a104
1c0119f2:	14078713          	addi	a4,a5,320 # 1a104140 <__l1_end+0xa104118>
1c0119f6:	c314                	sw	a3,0(a4)
1c0119f8:	4154                	lw	a3,4(a0)
1c0119fa:	14478713          	addi	a4,a5,324
1c0119fe:	14878793          	addi	a5,a5,328
1c011a02:	c314                	sw	a3,0(a4)
1c011a04:	4518                	lw	a4,8(a0)
1c011a06:	c398                	sw	a4,0(a5)
  }  
}
1c011a08:	8082                	ret

1c011a0a <l2_memcpy>:
  req = __pi_hyper_cluster_reqs_first;
  if (req)
  {
    __pi_hyper_cluster_req_exec(req);
  }
}
1c011a0a:	87aa                	mv	a5,a0
1c011a0c:	962e                	add	a2,a2,a1
1c011a0e:	00c59363          	bne	a1,a2,1c011a14 <l2_memcpy+0xa>
1c011a12:	8082                	ret
1c011a14:	0015c70b          	p.lbu	a4,1(a1!)
1c011a18:	00e780ab          	p.sb	a4,1(a5!)
1c011a1c:	bfcd                	j	1c011a0e <l2_memcpy+0x4>

1c011a1e <rt_event_enqueue>:
1c011a1e:	300476f3          	csrrci	a3,mstatus,8
1c011a22:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
1c011a26:	00052023          	sw	zero,0(a0)
1c011a2a:	01c00713          	li	a4,28
1c011a2e:	c619                	beqz	a2,1c011a3c <rt_event_enqueue+0x1e>
1c011a30:	435c                	lw	a5,4(a4)
1c011a32:	c388                	sw	a0,0(a5)
1c011a34:	c348                	sw	a0,4(a4)
1c011a36:	30069073          	csrw	mstatus,a3
1c011a3a:	8082                	ret
1c011a3c:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c011a40:	bfd5                	j	1c011a34 <rt_event_enqueue+0x16>

1c011a42 <pi_task_wait_on.isra.4>:
1c011a42:	1141                	addi	sp,sp,-16
1c011a44:	c422                	sw	s0,8(sp)
1c011a46:	c226                	sw	s1,4(sp)
1c011a48:	c606                	sw	ra,12(sp)
1c011a4a:	c04a                	sw	s2,0(sp)
1c011a4c:	842a                	mv	s0,a0
1c011a4e:	00040783          	lb	a5,0(s0)
1c011a52:	c799                	beqz	a5,1c011a60 <pi_task_wait_on.isra.4+0x1e>
1c011a54:	40b2                	lw	ra,12(sp)
1c011a56:	4422                	lw	s0,8(sp)
1c011a58:	4492                	lw	s1,4(sp)
1c011a5a:	4902                	lw	s2,0(sp)
1c011a5c:	0141                	addi	sp,sp,16
1c011a5e:	8082                	ret
1c011a60:	30047973          	csrrci	s2,mstatus,8
1c011a64:	4585                	li	a1,1
1c011a66:	01c00513          	li	a0,28
1c011a6a:	d65fe0ef          	jal	ra,1c0107ce <__rt_event_execute>
1c011a6e:	30091073          	csrw	mstatus,s2
1c011a72:	bff1                	j	1c011a4e <pi_task_wait_on.isra.4+0xc>

1c011a74 <__pi_hyper_pin_settings>:
1c011a74:	1141                	addi	sp,sp,-16
1c011a76:	c422                	sw	s0,8(sp)
1c011a78:	1c014437          	lui	s0,0x1c014
1c011a7c:	75840413          	addi	s0,s0,1880 # 1c014758 <__hyper_pad>
1c011a80:	c226                	sw	s1,4(sp)
1c011a82:	c606                	sw	ra,12(sp)
1c011a84:	03440493          	addi	s1,s0,52
1c011a88:	0044250b          	p.lw	a0,4(s0!)
1c011a8c:	458d                	li	a1,3
1c011a8e:	f2bff0ef          	jal	ra,1c0119b8 <pi_pad_set_function>
1c011a92:	fe941be3          	bne	s0,s1,1c011a88 <__pi_hyper_pin_settings+0x14>
1c011a96:	40b2                	lw	ra,12(sp)
1c011a98:	4422                	lw	s0,8(sp)
1c011a9a:	4492                	lw	s1,4(sp)
1c011a9c:	0141                	addi	sp,sp,16
1c011a9e:	8082                	ret

1c011aa0 <__pi_hyper_pin_reset_settings>:
1c011aa0:	1141                	addi	sp,sp,-16
1c011aa2:	c422                	sw	s0,8(sp)
1c011aa4:	1c014437          	lui	s0,0x1c014
1c011aa8:	75840413          	addi	s0,s0,1880 # 1c014758 <__hyper_pad>
1c011aac:	c226                	sw	s1,4(sp)
1c011aae:	c606                	sw	ra,12(sp)
1c011ab0:	03440493          	addi	s1,s0,52
1c011ab4:	0044250b          	p.lw	a0,4(s0!)
1c011ab8:	4581                	li	a1,0
1c011aba:	effff0ef          	jal	ra,1c0119b8 <pi_pad_set_function>
1c011abe:	fe941be3          	bne	s0,s1,1c011ab4 <__pi_hyper_pin_reset_settings+0x14>
1c011ac2:	40b2                	lw	ra,12(sp)
1c011ac4:	4422                	lw	s0,8(sp)
1c011ac6:	4492                	lw	s1,4(sp)
1c011ac8:	0141                	addi	sp,sp,16
1c011aca:	8082                	ret

1c011acc <pi_hyper_conf_init>:
1c011acc:	57fd                	li	a5,-1
1c011ace:	00f50223          	sb	a5,4(a0)
1c011ad2:	4785                	li	a5,1
1c011ad4:	c55c                	sw	a5,12(a0)
1c011ad6:	00052423          	sw	zero,8(a0)
1c011ada:	8082                	ret

1c011adc <pi_hyper_open>:
1c011adc:	1141                	addi	sp,sp,-16
1c011ade:	c422                	sw	s0,8(sp)
1c011ae0:	c04a                	sw	s2,0(sp)
1c011ae2:	842a                	mv	s0,a0
1c011ae4:	00452903          	lw	s2,4(a0)
1c011ae8:	4541                	li	a0,16
1c011aea:	c606                	sw	ra,12(sp)
1c011aec:	c226                	sw	s1,4(sp)
1c011aee:	f8dfe0ef          	jal	ra,1c010a7a <pi_l2_malloc>
1c011af2:	c115                	beqz	a0,1c011b16 <pi_hyper_open+0x3a>
1c011af4:	00c92783          	lw	a5,12(s2)
1c011af8:	84aa                	mv	s1,a0
1c011afa:	0217b063          	p.bneimm	a5,1,1c011b1a <pi_hyper_open+0x3e>
1c011afe:	000f4637          	lui	a2,0xf4
1c011b02:	24060613          	addi	a2,a2,576 # f4240 <__L2+0x74240>
1c011b06:	4581                	li	a1,0
1c011b08:	75e000ef          	jal	ra,1c012266 <rt_extern_alloc_init>
1c011b0c:	c519                	beqz	a0,1c011b1a <pi_hyper_open+0x3e>
1c011b0e:	45c1                	li	a1,16
1c011b10:	8526                	mv	a0,s1
1c011b12:	f77fe0ef          	jal	ra,1c010a88 <pi_l2_free>
1c011b16:	557d                	li	a0,-1
1c011b18:	a0f1                	j	1c011be4 <pi_hyper_open+0x108>
1c011b1a:	478d                	li	a5,3
1c011b1c:	c0dc                	sw	a5,4(s1)
1c011b1e:	00892783          	lw	a5,8(s2)
1c011b22:	c49c                	sw	a5,8(s1)
1c011b24:	00c92783          	lw	a5,12(s2)
1c011b28:	c4dc                	sw	a5,12(s1)
1c011b2a:	1c0157b7          	lui	a5,0x1c015
1c011b2e:	f8c78793          	addi	a5,a5,-116 # 1c014f8c <__rt_hyper_open_count>
1c011b32:	4398                	lw	a4,0(a5)
1c011b34:	00170693          	addi	a3,a4,1
1c011b38:	c394                	sw	a3,0(a5)
1c011b3a:	e739                	bnez	a4,1c011b88 <pi_hyper_open+0xac>
1c011b3c:	1a1067b7          	lui	a5,0x1a106
1c011b40:	0087a703          	lw	a4,8(a5) # 1a106008 <__l1_end+0xa105fe0>
1c011b44:	c0673733          	p.bclr	a4,a4,0,6
1c011b48:	00e7a423          	sw	a4,8(a5)
1c011b4c:	0087a703          	lw	a4,8(a5)
1c011b50:	c0773733          	p.bclr	a4,a4,0,7
1c011b54:	00e7a423          	sw	a4,8(a5)
1c011b58:	1a1027b7          	lui	a5,0x1a102
1c011b5c:	78078793          	addi	a5,a5,1920 # 1a102780 <__l1_end+0xa102758>
1c011b60:	4398                	lw	a4,0(a5)
1c011b62:	c0374733          	p.bset	a4,a4,0,3
1c011b66:	c398                	sw	a4,0(a5)
1c011b68:	1c0007b7          	lui	a5,0x1c000
1c011b6c:	4c878793          	addi	a5,a5,1224 # 1c0004c8 <__rt_hyper_handle_copy>
1c011b70:	10f02623          	sw	a5,268(zero) # 10c <periph_channels+0xdc>
1c011b74:	0e002823          	sw	zero,240(zero) # f0 <periph_channels+0xc0>
1c011b78:	12f02623          	sw	a5,300(zero) # 12c <periph_channels+0xfc>
1c011b7c:	10002823          	sw	zero,272(zero) # 110 <periph_channels+0xe0>
1c011b80:	30f02423          	sw	a5,776(zero) # 308 <__rt_hyper_udma_handle>
1c011b84:	ef1ff0ef          	jal	ra,1c011a74 <__pi_hyper_pin_settings>
1c011b88:	00c92783          	lw	a5,12(s2)
1c011b8c:	00892703          	lw	a4,8(s2)
1c011b90:	17fd                	addi	a5,a5,-1
1c011b92:	0017b793          	seqz	a5,a5
1c011b96:	078a                	slli	a5,a5,0x2
1c011b98:	ef21                	bnez	a4,1c011bf0 <pi_hyper_open+0x114>
1c011b9a:	1a102737          	lui	a4,0x1a102
1c011b9e:	1b470613          	addi	a2,a4,436 # 1a1021b4 <__l1_end+0xa10218c>
1c011ba2:	4214                	lw	a3,0(a2)
1c011ba4:	6591                	lui	a1,0x4
1c011ba6:	fff58513          	addi	a0,a1,-1 # 3fff <__rt_stack_size+0x37ff>
1c011baa:	73b6f693          	andi	a3,a3,1851
1c011bae:	8fd5                	or	a5,a5,a3
1c011bb0:	c21c                	sw	a5,0(a2)
1c011bb2:	1a870793          	addi	a5,a4,424
1c011bb6:	4394                	lw	a3,0(a5)
1c011bb8:	f0058593          	addi	a1,a1,-256
1c011bbc:	8ee9                	and	a3,a3,a0
1c011bbe:	8eed                	and	a3,a3,a1
1c011bc0:	1006c6b3          	p.exths	a3,a3
1c011bc4:	c394                	sw	a3,0(a5)
1c011bc6:	4214                	lw	a3,0(a2)
1c011bc8:	7376f693          	andi	a3,a3,1847
1c011bcc:	c214                	sw	a3,0(a2)
1c011bce:	4398                	lw	a4,0(a5)
1c011bd0:	668d                	lui	a3,0x3
1c011bd2:	0ff68693          	addi	a3,a3,255 # 30ff <__rt_stack_size+0x28ff>
1c011bd6:	8f69                	and	a4,a4,a0
1c011bd8:	8f75                	and	a4,a4,a3
1c011bda:	c4874733          	p.bset	a4,a4,2,8
1c011bde:	c398                	sw	a4,0(a5)
1c011be0:	c404                	sw	s1,8(s0)
1c011be2:	4501                	li	a0,0
1c011be4:	40b2                	lw	ra,12(sp)
1c011be6:	4422                	lw	s0,8(sp)
1c011be8:	4492                	lw	s1,4(sp)
1c011bea:	4902                	lw	s2,0(sp)
1c011bec:	0141                	addi	sp,sp,16
1c011bee:	8082                	ret
1c011bf0:	1a102737          	lui	a4,0x1a102
1c011bf4:	1c470613          	addi	a2,a4,452 # 1a1021c4 <__l1_end+0xa10219c>
1c011bf8:	4214                	lw	a3,0(a2)
1c011bfa:	1b870713          	addi	a4,a4,440
1c011bfe:	03b6f693          	andi	a3,a3,59
1c011c02:	8fd5                	or	a5,a5,a3
1c011c04:	c21c                	sw	a5,0(a2)
1c011c06:	431c                	lw	a5,0(a4)
1c011c08:	6691                	lui	a3,0x4
1c011c0a:	fff68593          	addi	a1,a3,-1 # 3fff <__rt_stack_size+0x37ff>
1c011c0e:	8fed                	and	a5,a5,a1
1c011c10:	f0068693          	addi	a3,a3,-256
1c011c14:	8ff5                	and	a5,a5,a3
1c011c16:	c007c7b3          	p.bset	a5,a5,0,0
1c011c1a:	1007c7b3          	p.exths	a5,a5
1c011c1e:	c31c                	sw	a5,0(a4)
1c011c20:	4214                	lw	a3,0(a2)
1c011c22:	0376f693          	andi	a3,a3,55
1c011c26:	c214                	sw	a3,0(a2)
1c011c28:	431c                	lw	a5,0(a4)
1c011c2a:	668d                	lui	a3,0x3
1c011c2c:	0ff68693          	addi	a3,a3,255 # 30ff <__rt_stack_size+0x28ff>
1c011c30:	8fed                	and	a5,a5,a1
1c011c32:	8ff5                	and	a5,a5,a3
1c011c34:	c487c7b3          	p.bset	a5,a5,2,8
1c011c38:	c31c                	sw	a5,0(a4)
1c011c3a:	b75d                	j	1c011be0 <pi_hyper_open+0x104>

1c011c3c <pi_hyper_close>:
1c011c3c:	1c015737          	lui	a4,0x1c015
1c011c40:	f8c70713          	addi	a4,a4,-116 # 1c014f8c <__rt_hyper_open_count>
1c011c44:	431c                	lw	a5,0(a4)
1c011c46:	1141                	addi	sp,sp,-16
1c011c48:	c422                	sw	s0,8(sp)
1c011c4a:	c606                	sw	ra,12(sp)
1c011c4c:	17fd                	addi	a5,a5,-1
1c011c4e:	c31c                	sw	a5,0(a4)
1c011c50:	4500                	lw	s0,8(a0)
1c011c52:	e7ad                	bnez	a5,1c011cbc <pi_hyper_close+0x80>
1c011c54:	404c                	lw	a1,4(s0)
1c011c56:	47fd                	li	a5,31
1c011c58:	00159693          	slli	a3,a1,0x1
1c011c5c:	06d7dc63          	ble	a3,a5,1c011cd4 <pi_hyper_close+0x98>
1c011c60:	fe068513          	addi	a0,a3,-32
1c011c64:	4611                	li	a2,4
1c011c66:	1a1067b7          	lui	a5,0x1a106
1c011c6a:	20c7f803          	p.lw	a6,a2(a5)
1c011c6e:	4705                	li	a4,1
1c011c70:	00a71733          	sll	a4,a4,a0
1c011c74:	01076733          	or	a4,a4,a6
1c011c78:	00e7e623          	p.sw	a4,a2(a5)
1c011c7c:	00168713          	addi	a4,a3,1
1c011c80:	47fd                	li	a5,31
1c011c82:	4621                	li	a2,8
1c011c84:	00e7d563          	ble	a4,a5,1c011c8e <pi_hyper_close+0x52>
1c011c88:	fe168713          	addi	a4,a3,-31
1c011c8c:	4611                	li	a2,4
1c011c8e:	1a1066b7          	lui	a3,0x1a106
1c011c92:	20c6f503          	p.lw	a0,a2(a3)
1c011c96:	4785                	li	a5,1
1c011c98:	00e79733          	sll	a4,a5,a4
1c011c9c:	8f49                	or	a4,a4,a0
1c011c9e:	00e6e623          	p.sw	a4,a2(a3)
1c011ca2:	1a102737          	lui	a4,0x1a102
1c011ca6:	78070713          	addi	a4,a4,1920 # 1a102780 <__l1_end+0xa102758>
1c011caa:	4314                	lw	a3,0(a4)
1c011cac:	00b797b3          	sll	a5,a5,a1
1c011cb0:	fff7c793          	not	a5,a5
1c011cb4:	8ff5                	and	a5,a5,a3
1c011cb6:	c31c                	sw	a5,0(a4)
1c011cb8:	de9ff0ef          	jal	ra,1c011aa0 <__pi_hyper_pin_reset_settings>
1c011cbc:	445c                	lw	a5,12(s0)
1c011cbe:	0017b463          	p.bneimm	a5,1,1c011cc6 <pi_hyper_close+0x8a>
1c011cc2:	8522                	mv	a0,s0
1c011cc4:	2bed                	jal	1c0122be <rt_extern_alloc_deinit>
1c011cc6:	8522                	mv	a0,s0
1c011cc8:	4422                	lw	s0,8(sp)
1c011cca:	40b2                	lw	ra,12(sp)
1c011ccc:	45c1                	li	a1,16
1c011cce:	0141                	addi	sp,sp,16
1c011cd0:	db9fe06f          	j	1c010a88 <pi_l2_free>
1c011cd4:	8536                	mv	a0,a3
1c011cd6:	4621                	li	a2,8
1c011cd8:	b779                	j	1c011c66 <pi_hyper_close+0x2a>

1c011cda <__pi_hyper_copy_aligned>:
1c011cda:	40155793          	srai	a5,a0,0x1
1c011cde:	1a102837          	lui	a6,0x1a102
1c011ce2:	079e                	slli	a5,a5,0x7
1c011ce4:	0512                	slli	a0,a0,0x4
1c011ce6:	97c2                	add	a5,a5,a6
1c011ce8:	8941                	andi	a0,a0,16
1c011cea:	953e                	add	a0,a0,a5
1c011cec:	20000813          	li	a6,512
1c011cf0:	30800793          	li	a5,776
1c011cf4:	02d87c63          	bleu	a3,a6,1c011d2c <__pi_hyper_copy_aligned+0x52>
1c011cf8:	cbd4                	sw	a3,20(a5)
1c011cfa:	1c0006b7          	lui	a3,0x1c000
1c011cfe:	56068693          	addi	a3,a3,1376 # 1c000560 <__rt_hyper_handle_burst>
1c011d02:	c394                	sw	a3,0(a5)
1c011d04:	c3c8                	sw	a0,4(a5)
1c011d06:	c790                	sw	a2,8(a5)
1c011d08:	c7cc                	sw	a1,12(a5)
1c011d0a:	0107a823          	sw	a6,16(a5) # 1a106010 <__l1_end+0xa105fe8>
1c011d0e:	20000693          	li	a3,512
1c011d12:	cf98                	sw	a4,24(a5)
1c011d14:	1a1027b7          	lui	a5,0x1a102
1c011d18:	1ac7a023          	sw	a2,416(a5) # 1a1021a0 <__l1_end+0xa102178>
1c011d1c:	00b52023          	sw	a1,0(a0)
1c011d20:	00d52223          	sw	a3,4(a0)
1c011d24:	47c1                	li	a5,16
1c011d26:	00f52423          	sw	a5,8(a0)
1c011d2a:	8082                	ret
1c011d2c:	0007a823          	sw	zero,16(a5)
1c011d30:	b7cd                	j	1c011d12 <__pi_hyper_copy_aligned+0x38>

1c011d32 <__pi_hyper_copy_exec>:
1c011d32:	30800813          	li	a6,776
1c011d36:	00e82e23          	sw	a4,28(a6) # 1a10201c <__l1_end+0xa101ff4>
1c011d3a:	fa25b833          	p.bclr	a6,a1,29,2
1c011d3e:	30800793          	li	a5,776
1c011d42:	00081a63          	bnez	a6,1c011d56 <__pi_hyper_copy_exec+0x24>
1c011d46:	fc163833          	p.bclr	a6,a2,30,1
1c011d4a:	00081663          	bnez	a6,1c011d56 <__pi_hyper_copy_exec+0x24>
1c011d4e:	fa26b833          	p.bclr	a6,a3,29,2
1c011d52:	00080863          	beqz	a6,1c011d62 <__pi_hyper_copy_exec+0x30>
1c011d56:	fc153833          	p.bclr	a6,a0,30,1
1c011d5a:	00080663          	beqz	a6,1c011d66 <__pi_hyper_copy_exec+0x34>
1c011d5e:	0026b463          	p.bneimm	a3,2,1c011d66 <__pi_hyper_copy_exec+0x34>
1c011d62:	f79ff06f          	j	1c011cda <__pi_hyper_copy_aligned>
1c011d66:	d388                	sw	a0,32(a5)
1c011d68:	853a                	mv	a0,a4
1c011d6a:	d3d0                	sw	a2,36(a5)
1c011d6c:	d78c                	sw	a1,40(a5)
1c011d6e:	d7d4                	sw	a3,44(a5)
1c011d70:	02078823          	sb	zero,48(a5)
1c011d74:	dbd8                	sw	a4,52(a5)
1c011d76:	aa31                	j	1c011e92 <__pi_hyper_copy_misaligned>

1c011d78 <__pi_hyper_copy>:
1c011d78:	1141                	addi	sp,sp,-16
1c011d7a:	c606                	sw	ra,12(sp)
1c011d7c:	c422                	sw	s0,8(sp)
1c011d7e:	30047473          	csrrci	s0,mstatus,8
1c011d82:	c781                	beqz	a5,1c011d8a <__pi_hyper_copy+0x12>
1c011d84:	010007b7          	lui	a5,0x1000
1c011d88:	963e                	add	a2,a2,a5
1c011d8a:	30800813          	li	a6,776
1c011d8e:	01c82803          	lw	a6,28(a6)
1c011d92:	30800793          	li	a5,776
1c011d96:	02080963          	beqz	a6,1c011dc8 <__pi_hyper_copy+0x50>
1c011d9a:	0387a803          	lw	a6,56(a5) # 1000038 <__L2+0xf80038>
1c011d9e:	02080363          	beqz	a6,1c011dc4 <__pi_hyper_copy+0x4c>
1c011da2:	03c7a803          	lw	a6,60(a5)
1c011da6:	00e82e23          	sw	a4,28(a6)
1c011daa:	dfd8                	sw	a4,60(a5)
1c011dac:	00072e23          	sw	zero,28(a4)
1c011db0:	df08                	sw	a0,56(a4)
1c011db2:	df4c                	sw	a1,60(a4)
1c011db4:	c330                	sw	a2,64(a4)
1c011db6:	c374                	sw	a3,68(a4)
1c011db8:	30041073          	csrw	mstatus,s0
1c011dbc:	40b2                	lw	ra,12(sp)
1c011dbe:	4422                	lw	s0,8(sp)
1c011dc0:	0141                	addi	sp,sp,16
1c011dc2:	8082                	ret
1c011dc4:	df98                	sw	a4,56(a5)
1c011dc6:	b7d5                	j	1c011daa <__pi_hyper_copy+0x32>
1c011dc8:	f6bff0ef          	jal	ra,1c011d32 <__pi_hyper_copy_exec>
1c011dcc:	b7f5                	j	1c011db8 <__pi_hyper_copy+0x40>

1c011dce <pi_hyper_read_async>:
1c011dce:	451c                	lw	a5,8(a0)
1c011dd0:	00070a23          	sb	zero,20(a4)
1c011dd4:	8832                	mv	a6,a2
1c011dd6:	43c8                	lw	a0,4(a5)
1c011dd8:	479c                	lw	a5,8(a5)
1c011dda:	862e                	mv	a2,a1
1c011ddc:	0506                	slli	a0,a0,0x1
1c011dde:	85c2                	mv	a1,a6
1c011de0:	f99ff06f          	j	1c011d78 <__pi_hyper_copy>

1c011de4 <pi_hyper_read>:
1c011de4:	7175                	addi	sp,sp,-144
1c011de6:	4785                	li	a5,1
1c011de8:	870a                	mv	a4,sp
1c011dea:	c706                	sw	ra,140(sp)
1c011dec:	cc3e                	sw	a5,24(sp)
1c011dee:	d43e                	sw	a5,40(sp)
1c011df0:	c202                	sw	zero,4(sp)
1c011df2:	00010a23          	sb	zero,20(sp)
1c011df6:	fd9ff0ef          	jal	ra,1c011dce <pi_hyper_read_async>
1c011dfa:	0848                	addi	a0,sp,20
1c011dfc:	c47ff0ef          	jal	ra,1c011a42 <pi_task_wait_on.isra.4>
1c011e00:	40ba                	lw	ra,140(sp)
1c011e02:	6149                	addi	sp,sp,144
1c011e04:	8082                	ret

1c011e06 <pi_hyper_write_async>:
1c011e06:	451c                	lw	a5,8(a0)
1c011e08:	00070a23          	sb	zero,20(a4)
1c011e0c:	8832                	mv	a6,a2
1c011e0e:	43c8                	lw	a0,4(a5)
1c011e10:	479c                	lw	a5,8(a5)
1c011e12:	862e                	mv	a2,a1
1c011e14:	0506                	slli	a0,a0,0x1
1c011e16:	85c2                	mv	a1,a6
1c011e18:	0505                	addi	a0,a0,1
1c011e1a:	f5fff06f          	j	1c011d78 <__pi_hyper_copy>

1c011e1e <pi_hyper_write>:
1c011e1e:	7175                	addi	sp,sp,-144
1c011e20:	4785                	li	a5,1
1c011e22:	870a                	mv	a4,sp
1c011e24:	c706                	sw	ra,140(sp)
1c011e26:	cc3e                	sw	a5,24(sp)
1c011e28:	d43e                	sw	a5,40(sp)
1c011e2a:	c202                	sw	zero,4(sp)
1c011e2c:	00010a23          	sb	zero,20(sp)
1c011e30:	fd7ff0ef          	jal	ra,1c011e06 <pi_hyper_write_async>
1c011e34:	0848                	addi	a0,sp,20
1c011e36:	c0dff0ef          	jal	ra,1c011a42 <pi_task_wait_on.isra.4>
1c011e3a:	40ba                	lw	ra,140(sp)
1c011e3c:	6149                	addi	sp,sp,144
1c011e3e:	8082                	ret

1c011e40 <exec_pending_task>:
1c011e40:	30800793          	li	a5,776
1c011e44:	5f98                	lw	a4,56(a5)
1c011e46:	c729                	beqz	a4,1c011e90 <exec_pending_task+0x50>
1c011e48:	4f54                	lw	a3,28(a4)
1c011e4a:	03872803          	lw	a6,56(a4)
1c011e4e:	5f4c                	lw	a1,60(a4)
1c011e50:	df94                	sw	a3,56(a5)
1c011e52:	ee883533          	p.bclr	a0,a6,23,8
1c011e56:	ce881833          	p.extractu	a6,a6,7,8
1c011e5a:	4330                	lw	a2,64(a4)
1c011e5c:	4374                	lw	a3,68(a4)
1c011e5e:	00081463          	bnez	a6,1c011e66 <exec_pending_task+0x26>
1c011e62:	ed1ff06f          	j	1c011d32 <__pi_hyper_copy_exec>
1c011e66:	04c72803          	lw	a6,76(a4)
1c011e6a:	04872883          	lw	a7,72(a4)
1c011e6e:	d388                	sw	a0,32(a5)
1c011e70:	d3d0                	sw	a2,36(a5)
1c011e72:	853a                	mv	a0,a4
1c011e74:	0506d633          	p.minu	a2,a3,a6
1c011e78:	cfd8                	sw	a4,28(a5)
1c011e7a:	d78c                	sw	a1,40(a5)
1c011e7c:	d7d0                	sw	a2,44(a5)
1c011e7e:	02078823          	sb	zero,48(a5)
1c011e82:	dbd8                	sw	a4,52(a5)
1c011e84:	c3b4                	sw	a3,64(a5)
1c011e86:	0507a223          	sw	a6,68(a5)
1c011e8a:	0517a423          	sw	a7,72(a5)
1c011e8e:	a011                	j	1c011e92 <__pi_hyper_copy_misaligned>
1c011e90:	8082                	ret

1c011e92 <__pi_hyper_copy_misaligned>:
1c011e92:	7179                	addi	sp,sp,-48
1c011e94:	d422                	sw	s0,40(sp)
1c011e96:	30800793          	li	a5,776
1c011e9a:	ce4e                	sw	s3,28(sp)
1c011e9c:	89aa                	mv	s3,a0
1c011e9e:	5388                	lw	a0,32(a5)
1c011ea0:	d606                	sw	ra,44(sp)
1c011ea2:	d226                	sw	s1,36(sp)
1c011ea4:	d04a                	sw	s2,32(sp)
1c011ea6:	cc52                	sw	s4,24(sp)
1c011ea8:	ca56                	sw	s5,20(sp)
1c011eaa:	c85a                	sw	s6,16(sp)
1c011eac:	c65e                	sw	s7,12(sp)
1c011eae:	c462                	sw	s8,8(sp)
1c011eb0:	fc1537b3          	p.bclr	a5,a0,30,1
1c011eb4:	30800413          	li	s0,776
1c011eb8:	e7a1                	bnez	a5,1c011f00 <__pi_hyper_copy_misaligned+0x6e>
1c011eba:	1c015c37          	lui	s8,0x1c015
1c011ebe:	dc8c0913          	addi	s2,s8,-568 # 1c014dc8 <__pi_hyper_temp_buffer>
1c011ec2:	4a0d                	li	s4,3
1c011ec4:	07c00a93          	li	s5,124
1c011ec8:	00190b13          	addi	s6,s2,1
1c011ecc:	5408                	lw	a0,40(s0)
1c011ece:	5444                	lw	s1,44(s0)
1c011ed0:	5050                	lw	a2,36(s0)
1c011ed2:	00350793          	addi	a5,a0,3
1c011ed6:	c207b7b3          	p.bclr	a5,a5,1,0
1c011eda:	8f89                	sub	a5,a5,a0
1c011edc:	8bbe                	mv	s7,a5
1c011ede:	009a6363          	bltu	s4,s1,1c011ee4 <__pi_hyper_copy_misaligned+0x52>
1c011ee2:	8ba6                	mv	s7,s1
1c011ee4:	1c0b8663          	beqz	s7,1c0120b0 <__pi_hyper_copy_misaligned+0x21e>
1c011ee8:	03044783          	lbu	a5,48(s0)
1c011eec:	16079f63          	bnez	a5,1c01206a <__pi_hyper_copy_misaligned+0x1d8>
1c011ef0:	4701                	li	a4,0
1c011ef2:	4691                	li	a3,4
1c011ef4:	c0063633          	p.bclr	a2,a2,0,0
1c011ef8:	dc8c0593          	addi	a1,s8,-568
1c011efc:	5008                	lw	a0,32(s0)
1c011efe:	a889                	j	1c011f50 <__pi_hyper_copy_misaligned+0xbe>
1c011f00:	540c                	lw	a1,40(s0)
1c011f02:	04442883          	lw	a7,68(s0)
1c011f06:	04842303          	lw	t1,72(s0)
1c011f0a:	00358793          	addi	a5,a1,3
1c011f0e:	5050                	lw	a2,36(s0)
1c011f10:	5454                	lw	a3,44(s0)
1c011f12:	4038                	lw	a4,64(s0)
1c011f14:	c207b7b3          	p.bclr	a5,a5,1,0
1c011f18:	8f8d                	sub	a5,a5,a1
1c011f1a:	41130333          	sub	t1,t1,a7
1c011f1e:	4801                	li	a6,0
1c011f20:	4e0d                	li	t3,3
1c011f22:	84be                	mv	s1,a5
1c011f24:	00de6363          	bltu	t3,a3,1c011f2a <__pi_hyper_copy_misaligned+0x98>
1c011f28:	84b6                	mv	s1,a3
1c011f2a:	c4b5                	beqz	s1,1c011f96 <__pi_hyper_copy_misaligned+0x104>
1c011f2c:	00080563          	beqz	a6,1c011f36 <__pi_hyper_copy_misaligned+0xa4>
1c011f30:	d050                	sw	a2,36(s0)
1c011f32:	d454                	sw	a3,44(s0)
1c011f34:	c038                	sw	a4,64(s0)
1c011f36:	03044703          	lbu	a4,48(s0)
1c011f3a:	1c015937          	lui	s2,0x1c015
1c011f3e:	dc890793          	addi	a5,s2,-568 # 1c014dc8 <__pi_hyper_temp_buffer>
1c011f42:	ef09                	bnez	a4,1c011f5c <__pi_hyper_copy_misaligned+0xca>
1c011f44:	4691                	li	a3,4
1c011f46:	c0063633          	p.bclr	a2,a2,0,0
1c011f4a:	dc890593          	addi	a1,s2,-568
1c011f4e:	157d                	addi	a0,a0,-1
1c011f50:	d8bff0ef          	jal	ra,1c011cda <__pi_hyper_copy_aligned>
1c011f54:	4785                	li	a5,1
1c011f56:	02f40823          	sb	a5,48(s0)
1c011f5a:	aa3d                	j	1c012098 <__pi_hyper_copy_misaligned+0x206>
1c011f5c:	fc163533          	p.bclr	a0,a2,30,1
1c011f60:	953e                	add	a0,a0,a5
1c011f62:	8626                	mv	a2,s1
1c011f64:	02040823          	sb	zero,48(s0)
1c011f68:	aa3ff0ef          	jal	ra,1c011a0a <l2_memcpy>
1c011f6c:	5050                	lw	a2,36(s0)
1c011f6e:	5008                	lw	a0,32(s0)
1c011f70:	4701                	li	a4,0
1c011f72:	4691                	li	a3,4
1c011f74:	c0063633          	p.bclr	a2,a2,0,0
1c011f78:	dc890593          	addi	a1,s2,-568
1c011f7c:	d5fff0ef          	jal	ra,1c011cda <__pi_hyper_copy_aligned>
1c011f80:	505c                	lw	a5,36(s0)
1c011f82:	97a6                	add	a5,a5,s1
1c011f84:	d05c                	sw	a5,36(s0)
1c011f86:	541c                	lw	a5,40(s0)
1c011f88:	97a6                	add	a5,a5,s1
1c011f8a:	d41c                	sw	a5,40(s0)
1c011f8c:	545c                	lw	a5,44(s0)
1c011f8e:	409784b3          	sub	s1,a5,s1
1c011f92:	d444                	sw	s1,44(s0)
1c011f94:	a211                	j	1c012098 <__pi_hyper_copy_misaligned+0x206>
1c011f96:	c2d1                	beqz	a3,1c01201a <__pi_hyper_copy_misaligned+0x188>
1c011f98:	00080563          	beqz	a6,1c011fa2 <__pi_hyper_copy_misaligned+0x110>
1c011f9c:	d050                	sw	a2,36(s0)
1c011f9e:	d454                	sw	a3,44(s0)
1c011fa0:	c038                	sw	a4,64(s0)
1c011fa2:	97b2                	add	a5,a5,a2
1c011fa4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c011fa8:	c206b4b3          	p.bclr	s1,a3,1,0
1c011fac:	ef89                	bnez	a5,1c011fc6 <__pi_hyper_copy_misaligned+0x134>
1c011fae:	4701                	li	a4,0
1c011fb0:	86a6                	mv	a3,s1
1c011fb2:	d29ff0ef          	jal	ra,1c011cda <__pi_hyper_copy_aligned>
1c011fb6:	505c                	lw	a5,36(s0)
1c011fb8:	5454                	lw	a3,44(s0)
1c011fba:	97a6                	add	a5,a5,s1
1c011fbc:	d05c                	sw	a5,36(s0)
1c011fbe:	541c                	lw	a5,40(s0)
1c011fc0:	97a6                	add	a5,a5,s1
1c011fc2:	d41c                	sw	a5,40(s0)
1c011fc4:	a881                	j	1c012014 <__pi_hyper_copy_misaligned+0x182>
1c011fc6:	03044703          	lbu	a4,48(s0)
1c011fca:	1c015937          	lui	s2,0x1c015
1c011fce:	dc890793          	addi	a5,s2,-568 # 1c014dc8 <__pi_hyper_temp_buffer>
1c011fd2:	db2d                	beqz	a4,1c011f44 <__pi_hyper_copy_misaligned+0xb2>
1c011fd4:	07c00693          	li	a3,124
1c011fd8:	04d4d4b3          	p.minu	s1,s1,a3
1c011fdc:	00178513          	addi	a0,a5,1
1c011fe0:	fff48613          	addi	a2,s1,-1
1c011fe4:	02040823          	sb	zero,48(s0)
1c011fe8:	a23ff0ef          	jal	ra,1c011a0a <l2_memcpy>
1c011fec:	5050                	lw	a2,36(s0)
1c011fee:	5008                	lw	a0,32(s0)
1c011ff0:	86a6                	mv	a3,s1
1c011ff2:	4701                	li	a4,0
1c011ff4:	c0063633          	p.bclr	a2,a2,0,0
1c011ff8:	dc890593          	addi	a1,s2,-568
1c011ffc:	cdfff0ef          	jal	ra,1c011cda <__pi_hyper_copy_aligned>
1c012000:	505c                	lw	a5,36(s0)
1c012002:	5454                	lw	a3,44(s0)
1c012004:	17fd                	addi	a5,a5,-1
1c012006:	97a6                	add	a5,a5,s1
1c012008:	d05c                	sw	a5,36(s0)
1c01200a:	541c                	lw	a5,40(s0)
1c01200c:	0685                	addi	a3,a3,1
1c01200e:	17fd                	addi	a5,a5,-1
1c012010:	97a6                	add	a5,a5,s1
1c012012:	d41c                	sw	a5,40(s0)
1c012014:	409684b3          	sub	s1,a3,s1
1c012018:	bfad                	j	1c011f92 <__pi_hyper_copy_misaligned+0x100>
1c01201a:	e719                	bnez	a4,1c012028 <__pi_hyper_copy_misaligned+0x196>
1c01201c:	00080c63          	beqz	a6,1c012034 <__pi_hyper_copy_misaligned+0x1a2>
1c012020:	d050                	sw	a2,36(s0)
1c012022:	02042623          	sw	zero,44(s0)
1c012026:	a029                	j	1c012030 <__pi_hyper_copy_misaligned+0x19e>
1c012028:	02e8ea63          	bltu	a7,a4,1c01205c <__pi_hyper_copy_misaligned+0x1ca>
1c01202c:	fe081ae3          	bnez	a6,1c012020 <__pi_hyper_copy_misaligned+0x18e>
1c012030:	04042023          	sw	zero,64(s0)
1c012034:	854e                	mv	a0,s3
1c012036:	02042a23          	sw	zero,52(s0)
1c01203a:	00042e23          	sw	zero,28(s0)
1c01203e:	9e1ff0ef          	jal	ra,1c011a1e <rt_event_enqueue>
1c012042:	5422                	lw	s0,40(sp)
1c012044:	50b2                	lw	ra,44(sp)
1c012046:	5492                	lw	s1,36(sp)
1c012048:	5902                	lw	s2,32(sp)
1c01204a:	49f2                	lw	s3,28(sp)
1c01204c:	4a62                	lw	s4,24(sp)
1c01204e:	4ad2                	lw	s5,20(sp)
1c012050:	4b42                	lw	s6,16(sp)
1c012052:	4bb2                	lw	s7,12(sp)
1c012054:	4c22                	lw	s8,8(sp)
1c012056:	6145                	addi	sp,sp,48
1c012058:	de9ff06f          	j	1c011e40 <exec_pending_task>
1c01205c:	41170733          	sub	a4,a4,a7
1c012060:	961a                	add	a2,a2,t1
1c012062:	4805                	li	a6,1
1c012064:	04e8d6b3          	p.minu	a3,a7,a4
1c012068:	bd6d                	j	1c011f22 <__pi_hyper_copy_misaligned+0x90>
1c01206a:	fc1635b3          	p.bclr	a1,a2,30,1
1c01206e:	95ca                	add	a1,a1,s2
1c012070:	865e                	mv	a2,s7
1c012072:	02040823          	sb	zero,48(s0)
1c012076:	995ff0ef          	jal	ra,1c011a0a <l2_memcpy>
1c01207a:	505c                	lw	a5,36(s0)
1c01207c:	97de                	add	a5,a5,s7
1c01207e:	d05c                	sw	a5,36(s0)
1c012080:	541c                	lw	a5,40(s0)
1c012082:	97de                	add	a5,a5,s7
1c012084:	d41c                	sw	a5,40(s0)
1c012086:	545c                	lw	a5,44(s0)
1c012088:	41778bb3          	sub	s7,a5,s7
1c01208c:	03742623          	sw	s7,44(s0)
1c012090:	e20b9ee3          	bnez	s7,1c011ecc <__pi_hyper_copy_misaligned+0x3a>
1c012094:	545c                	lw	a5,44(s0)
1c012096:	c7a5                	beqz	a5,1c0120fe <__pi_hyper_copy_misaligned+0x26c>
1c012098:	50b2                	lw	ra,44(sp)
1c01209a:	5422                	lw	s0,40(sp)
1c01209c:	5492                	lw	s1,36(sp)
1c01209e:	5902                	lw	s2,32(sp)
1c0120a0:	49f2                	lw	s3,28(sp)
1c0120a2:	4a62                	lw	s4,24(sp)
1c0120a4:	4ad2                	lw	s5,20(sp)
1c0120a6:	4b42                	lw	s6,16(sp)
1c0120a8:	4bb2                	lw	s7,12(sp)
1c0120aa:	4c22                	lw	s8,8(sp)
1c0120ac:	6145                	addi	sp,sp,48
1c0120ae:	8082                	ret
1c0120b0:	d0f5                	beqz	s1,1c012094 <__pi_hyper_copy_misaligned+0x202>
1c0120b2:	97b2                	add	a5,a5,a2
1c0120b4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0120b8:	c204b4b3          	p.bclr	s1,s1,1,0
1c0120bc:	e791                	bnez	a5,1c0120c8 <__pi_hyper_copy_misaligned+0x236>
1c0120be:	85aa                	mv	a1,a0
1c0120c0:	4701                	li	a4,0
1c0120c2:	86a6                	mv	a3,s1
1c0120c4:	5008                	lw	a0,32(s0)
1c0120c6:	b5f5                	j	1c011fb2 <__pi_hyper_copy_misaligned+0x120>
1c0120c8:	03044783          	lbu	a5,48(s0)
1c0120cc:	0554d4b3          	p.minu	s1,s1,s5
1c0120d0:	e789                	bnez	a5,1c0120da <__pi_hyper_copy_misaligned+0x248>
1c0120d2:	4701                	li	a4,0
1c0120d4:	00448693          	addi	a3,s1,4
1c0120d8:	bd31                	j	1c011ef4 <__pi_hyper_copy_misaligned+0x62>
1c0120da:	8626                	mv	a2,s1
1c0120dc:	85da                	mv	a1,s6
1c0120de:	02040823          	sb	zero,48(s0)
1c0120e2:	929ff0ef          	jal	ra,1c011a0a <l2_memcpy>
1c0120e6:	505c                	lw	a5,36(s0)
1c0120e8:	5454                	lw	a3,44(s0)
1c0120ea:	97a6                	add	a5,a5,s1
1c0120ec:	d05c                	sw	a5,36(s0)
1c0120ee:	541c                	lw	a5,40(s0)
1c0120f0:	97a6                	add	a5,a5,s1
1c0120f2:	409684b3          	sub	s1,a3,s1
1c0120f6:	d41c                	sw	a5,40(s0)
1c0120f8:	d444                	sw	s1,44(s0)
1c0120fa:	dcc9                	beqz	s1,1c012094 <__pi_hyper_copy_misaligned+0x202>
1c0120fc:	bbc1                	j	1c011ecc <__pi_hyper_copy_misaligned+0x3a>
1c0120fe:	4038                	lw	a4,64(s0)
1c012100:	db15                	beqz	a4,1c012034 <__pi_hyper_copy_misaligned+0x1a2>
1c012102:	407c                	lw	a5,68(s0)
1c012104:	00e7ff63          	bleu	a4,a5,1c012122 <__pi_hyper_copy_misaligned+0x290>
1c012108:	8f1d                	sub	a4,a4,a5
1c01210a:	c038                	sw	a4,64(s0)
1c01210c:	4034                	lw	a3,64(s0)
1c01210e:	d29d                	beqz	a3,1c012034 <__pi_hyper_copy_misaligned+0x1a2>
1c012110:	5058                	lw	a4,36(s0)
1c012112:	4430                	lw	a2,72(s0)
1c012114:	9732                	add	a4,a4,a2
1c012116:	8f1d                	sub	a4,a4,a5
1c012118:	04d7d7b3          	p.minu	a5,a5,a3
1c01211c:	d058                	sw	a4,36(s0)
1c01211e:	d45c                	sw	a5,44(s0)
1c012120:	b375                	j	1c011ecc <__pi_hyper_copy_misaligned+0x3a>
1c012122:	04042023          	sw	zero,64(s0)
1c012126:	b7dd                	j	1c01210c <__pi_hyper_copy_misaligned+0x27a>

1c012128 <__pi_hyper_copy_2d>:
1c012128:	1141                	addi	sp,sp,-16
1c01212a:	c606                	sw	ra,12(sp)
1c01212c:	c422                	sw	s0,8(sp)
1c01212e:	30047473          	csrrci	s0,mstatus,8
1c012132:	00088563          	beqz	a7,1c01213c <__pi_hyper_copy_2d+0x14>
1c012136:	010008b7          	lui	a7,0x1000
1c01213a:	9646                	add	a2,a2,a7
1c01213c:	30800893          	li	a7,776
1c012140:	01c8ae03          	lw	t3,28(a7) # 100001c <__L2+0xf8001c>
1c012144:	30800313          	li	t1,776
1c012148:	040e0563          	beqz	t3,1c012192 <__pi_hyper_copy_2d+0x6a>
1c01214c:	03832883          	lw	a7,56(t1) # 80000038 <pulp__FC+0x80000039>
1c012150:	02088e63          	beqz	a7,1c01218c <__pi_hyper_copy_2d+0x64>
1c012154:	03c32883          	lw	a7,60(t1)
1c012158:	0108ae23          	sw	a6,28(a7)
1c01215c:	c0854533          	p.bset	a0,a0,0,8
1c012160:	03032e23          	sw	a6,60(t1)
1c012164:	00082e23          	sw	zero,28(a6)
1c012168:	02a82c23          	sw	a0,56(a6)
1c01216c:	02b82e23          	sw	a1,60(a6)
1c012170:	04c82023          	sw	a2,64(a6)
1c012174:	04d82223          	sw	a3,68(a6)
1c012178:	04e82423          	sw	a4,72(a6)
1c01217c:	04f82623          	sw	a5,76(a6)
1c012180:	30041073          	csrw	mstatus,s0
1c012184:	40b2                	lw	ra,12(sp)
1c012186:	4422                	lw	s0,8(sp)
1c012188:	0141                	addi	sp,sp,16
1c01218a:	8082                	ret
1c01218c:	03032c23          	sw	a6,56(t1)
1c012190:	b7f1                	j	1c01215c <__pi_hyper_copy_2d+0x34>
1c012192:	02a8a023          	sw	a0,32(a7)
1c012196:	02c8a223          	sw	a2,36(a7)
1c01219a:	8542                	mv	a0,a6
1c01219c:	04f6d633          	p.minu	a2,a3,a5
1c0121a0:	0108ae23          	sw	a6,28(a7)
1c0121a4:	02b8a423          	sw	a1,40(a7)
1c0121a8:	02c8a623          	sw	a2,44(a7)
1c0121ac:	02088823          	sb	zero,48(a7)
1c0121b0:	0308aa23          	sw	a6,52(a7)
1c0121b4:	04d8a023          	sw	a3,64(a7)
1c0121b8:	04f8a223          	sw	a5,68(a7)
1c0121bc:	04e8a423          	sw	a4,72(a7)
1c0121c0:	cd3ff0ef          	jal	ra,1c011e92 <__pi_hyper_copy_misaligned>
1c0121c4:	bf75                	j	1c012180 <__pi_hyper_copy_2d+0x58>

1c0121c6 <pi_hyper_read_2d_async>:
1c0121c6:	8332                	mv	t1,a2
1c0121c8:	4510                	lw	a2,8(a0)
1c0121ca:	00080a23          	sb	zero,20(a6)
1c0121ce:	4248                	lw	a0,4(a2)
1c0121d0:	00862883          	lw	a7,8(a2)
1c0121d4:	862e                	mv	a2,a1
1c0121d6:	0506                	slli	a0,a0,0x1
1c0121d8:	859a                	mv	a1,t1
1c0121da:	f4fff06f          	j	1c012128 <__pi_hyper_copy_2d>

1c0121de <pi_hyper_write_2d_async>:
1c0121de:	8332                	mv	t1,a2
1c0121e0:	4510                	lw	a2,8(a0)
1c0121e2:	00080a23          	sb	zero,20(a6)
1c0121e6:	4248                	lw	a0,4(a2)
1c0121e8:	00862883          	lw	a7,8(a2)
1c0121ec:	862e                	mv	a2,a1
1c0121ee:	0506                	slli	a0,a0,0x1
1c0121f0:	859a                	mv	a1,t1
1c0121f2:	0505                	addi	a0,a0,1
1c0121f4:	f35ff06f          	j	1c012128 <__pi_hyper_copy_2d>

1c0121f8 <__rt_hyper_resume_emu_task>:
  __pi_hyper_copy_misaligned(__rt_hyper_pending_emu_task);
1c0121f8:	33c02503          	lw	a0,828(zero) # 33c <__rt_hyper_pending_emu_task>
1c0121fc:	c97ff06f          	j	1c011e92 <__pi_hyper_copy_misaligned>

1c012200 <__rt_hyper_resume_copy>:
  exec_pending_task();
1c012200:	c41ff06f          	j	1c011e40 <exec_pending_task>

1c012204 <__rt_hyper_init>:
  __pi_hyper_cluster_reqs_first = NULL;
1c012204:	1c015737          	lui	a4,0x1c015
  __rt_hyper_end_task = NULL;
1c012208:	30800793          	li	a5,776
  __pi_hyper_cluster_reqs_first = NULL;
1c01220c:	f8072423          	sw	zero,-120(a4) # 1c014f88 <__pi_hyper_cluster_reqs_first>
  __rt_hyper_pending_emu_channel = -1;
1c012210:	577d                	li	a4,-1
1c012212:	d398                	sw	a4,32(a5)
  __rt_hyper_open_count = 0;
1c012214:	1c015737          	lui	a4,0x1c015
  __rt_hyper_end_task = NULL;
1c012218:	0007ac23          	sw	zero,24(a5)
  __rt_hyper_current_task = NULL;
1c01221c:	0007ae23          	sw	zero,28(a5)
  __rt_hyper_pending_tasks = NULL;
1c012220:	0207ac23          	sw	zero,56(a5)
  __rt_hyper_open_count = 0;
1c012224:	f8072623          	sw	zero,-116(a4) # 1c014f8c <__rt_hyper_open_count>
  __rt_hyper_pending_emu_size = 0;
1c012228:	0207a623          	sw	zero,44(a5)
  __rt_hyper_pending_emu_size_2d = 0;
1c01222c:	0407a023          	sw	zero,64(a5)
}
1c012230:	8082                	ret

1c012232 <rt_padframe_set>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c012232:	300476f3          	csrrci	a3,mstatus,8

void rt_padframe_set(rt_padframe_profile_t *profile)
{
  int irq = rt_irq_disable();

  unsigned int *config = profile->config;
1c012236:	4158                	lw	a4,4(a0)
1c012238:	1a1047b7          	lui	a5,0x1a104
1c01223c:	14078613          	addi	a2,a5,320 # 1a104140 <__l1_end+0xa104118>

  for (int i=0; i<ARCHI_APB_SOC_PADFUN_NB; i++)
  {
    hal_apb_soc_padfun_set(i, config[i]);
1c012240:	430c                	lw	a1,0(a4)
1c012242:	c20c                	sw	a1,0(a2)
1c012244:	434c                	lw	a1,4(a4)
1c012246:	14478613          	addi	a2,a5,324
1c01224a:	14878793          	addi	a5,a5,328
1c01224e:	c20c                	sw	a1,0(a2)
1c012250:	4718                	lw	a4,8(a4)
1c012252:	c398                	sw	a4,0(a5)
  __builtin_pulp_spr_write(reg, val);
1c012254:	30069073          	csrw	mstatus,a3
  }

  rt_irq_restore(irq);
}
1c012258:	8082                	ret

1c01225a <__rt_padframe_init>:
  rt_padframe_set(&__rt_padframe_profiles[0]);
1c01225a:	1c015537          	lui	a0,0x1c015
1c01225e:	98050513          	addi	a0,a0,-1664 # 1c014980 <__rt_padframe_profiles>
1c012262:	fd1ff06f          	j	1c012232 <rt_padframe_set>

1c012266 <rt_extern_alloc_init>:
  }
  printf("=============================================\n");
}

int rt_extern_alloc_init(rt_extern_alloc_t *a, void *addr, int size)
{
1c012266:	1101                	addi	sp,sp,-32
1c012268:	c84a                	sw	s2,16(sp)
1c01226a:	ce06                	sw	ra,28(sp)
1c01226c:	cc22                	sw	s0,24(sp)
1c01226e:	ca26                	sw	s1,20(sp)
1c012270:	892a                	mv	s2,a0
  if (size)
1c012272:	c229                	beqz	a2,1c0122b4 <rt_extern_alloc_init+0x4e>
  {
    unsigned int start_addr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c012274:	00758493          	addi	s1,a1,7
1c012278:	842e                	mv	s0,a1
  return (rt_alloc_chunk_extern_t *)rt_alloc(RT_ALLOC_FC_DATA, sizeof(rt_alloc_chunk_extern_t));
1c01227a:	4505                	li	a0,1
1c01227c:	45b1                	li	a1,12
1c01227e:	c632                	sw	a2,12(sp)
1c012280:	ecafe0ef          	jal	ra,1c01094a <rt_alloc>
    unsigned int start_addr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c012284:	c404b4b3          	p.bclr	s1,s1,2,0
    rt_alloc_chunk_extern_t *chunk = __rt_alloc_chunk();
    if (chunk == NULL) return -1;
1c012288:	4632                	lw	a2,12(sp)
1c01228a:	c905                	beqz	a0,1c0122ba <rt_extern_alloc_init+0x54>
    size = size - (start_addr - (unsigned int)addr);
1c01228c:	9432                	add	s0,s0,a2
1c01228e:	8c05                	sub	s0,s0,s1
  }
  else
  {
    a->first_free = NULL;
  }
  return 0;
1c012290:	4601                	li	a2,0
    if (size > 0) {
1c012292:	00805a63          	blez	s0,1c0122a6 <rt_extern_alloc_init+0x40>
      a->first_free = chunk;
1c012296:	00a92023          	sw	a0,0(s2)
      chunk->size = ALIGN_DOWN(size, MIN_CHUNK_SIZE);
1c01229a:	c4043433          	p.bclr	s0,s0,2,0
1c01229e:	c100                	sw	s0,0(a0)
      chunk->next = NULL;
1c0122a0:	00052223          	sw	zero,4(a0)
      chunk->addr = start_addr;
1c0122a4:	c504                	sw	s1,8(a0)
}
1c0122a6:	40f2                	lw	ra,28(sp)
1c0122a8:	4462                	lw	s0,24(sp)
1c0122aa:	44d2                	lw	s1,20(sp)
1c0122ac:	4942                	lw	s2,16(sp)
1c0122ae:	8532                	mv	a0,a2
1c0122b0:	6105                	addi	sp,sp,32
1c0122b2:	8082                	ret
    a->first_free = NULL;
1c0122b4:	00052023          	sw	zero,0(a0)
1c0122b8:	b7fd                	j	1c0122a6 <rt_extern_alloc_init+0x40>
    if (chunk == NULL) return -1;
1c0122ba:	567d                	li	a2,-1
1c0122bc:	b7ed                	j	1c0122a6 <rt_extern_alloc_init+0x40>

1c0122be <rt_extern_alloc_deinit>:
  rt_free(RT_ALLOC_FC_DATA, (void *)pt, sizeof(rt_alloc_chunk_extern_t));
1c0122be:	410c                	lw	a1,0(a0)
1c0122c0:	4631                	li	a2,12
1c0122c2:	4505                	li	a0,1
1c0122c4:	eb6fe06f          	j	1c01097a <rt_free>

1c0122c8 <__pi_gpio_handler>:
  }
}


void __pi_gpio_handler(void *arg)
{
1c0122c8:	1141                	addi	sp,sp,-16
  return pulp_read32(ARCHI_GPIO_ADDR + ARCHI_GPIO_INTTYPE(id));
}

static inline unsigned int hal_gpio_intstatus_get()
{
  return pulp_read32(ARCHI_GPIO_ADDR + ARCHI_GPIO_INTSTATUS);
1c0122ca:	1a1017b7          	lui	a5,0x1a101
  (void) arg;

  /* Retrieve IRQ status from GPIO. Handle task if needed. */
  pi_gpio_t *gpio = &__rt_gpio[0];
  gpio->irq_status = hal_gpio_intstatus_get();
1c0122ce:	1c0156b7          	lui	a3,0x1c015
{
1c0122d2:	c422                	sw	s0,8(sp)
1c0122d4:	4f80                	lw	s0,24(a5)
  gpio->irq_status = hal_gpio_intstatus_get();
1c0122d6:	e4868793          	addi	a5,a3,-440 # 1c014e48 <__rt_gpio>
{
1c0122da:	c226                	sw	s1,4(sp)

  if (gpio->cb != NULL)
1c0122dc:	4bc4                	lw	s1,20(a5)
{
1c0122de:	c606                	sw	ra,12(sp)
  gpio->irq_status = hal_gpio_intstatus_get();
1c0122e0:	c780                	sw	s0,8(a5)
  if (gpio->cb != NULL)
1c0122e2:	cc91                	beqz	s1,1c0122fe <__pi_gpio_handler+0x36>
    if (irq_mask & tmp_cb->pin_mask)
1c0122e4:	409c                	lw	a5,0(s1)
1c0122e6:	8fe1                	and	a5,a5,s0
1c0122e8:	c781                	beqz	a5,1c0122f0 <__pi_gpio_handler+0x28>
      tmp_cb->handler(tmp_cb->args);
1c0122ea:	40dc                	lw	a5,4(s1)
1c0122ec:	4488                	lw	a0,8(s1)
1c0122ee:	9782                	jalr	a5
    tmp_cb = tmp_cb->next;
1c0122f0:	44c4                	lw	s1,12(s1)
  while (tmp_cb != NULL)
1c0122f2:	f8ed                	bnez	s1,1c0122e4 <__pi_gpio_handler+0x1c>
      }
      irq_mask = irq_mask >> 1;
      pin++;
    }
  }
}
1c0122f4:	40b2                	lw	ra,12(sp)
1c0122f6:	4422                	lw	s0,8(sp)
1c0122f8:	4492                	lw	s1,4(sp)
1c0122fa:	0141                	addi	sp,sp,16
1c0122fc:	8082                	ret
1c0122fe:	e4868693          	addi	a3,a3,-440
    irq_mask = (gpio->irq_status & gpio->input_mask);
1c012302:	46dc                	lw	a5,12(a3)
    uint8_t pin = 0;
1c012304:	4701                	li	a4,0
    irq_mask = (gpio->irq_status & gpio->input_mask);
1c012306:	8fe1                	and	a5,a5,s0
1c012308:	01c00513          	li	a0,28
    while (irq_mask)
1c01230c:	d7e5                	beqz	a5,1c0122f4 <__pi_gpio_handler+0x2c>
      if (irq_mask & 0x1)
1c01230e:	fc17b633          	p.bclr	a2,a5,30,1
1c012312:	c615                	beqz	a2,1c01233e <__pi_gpio_handler+0x76>
        task = gpio->event_task[pin];
1c012314:	00470613          	addi	a2,a4,4
1c012318:	060a                	slli	a2,a2,0x2
1c01231a:	9636                	add	a2,a2,a3
1c01231c:	4610                	lw	a2,8(a2)
        if (task != NULL)
1c01231e:	c205                	beqz	a2,1c01233e <__pi_gpio_handler+0x76>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c012320:	30047873          	csrrci	a6,mstatus,8
  if (sched->first) {
1c012324:	01c02883          	lw	a7,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c012328:	00062023          	sw	zero,0(a2)
  if (sched->first) {
1c01232c:	00088e63          	beqz	a7,1c012348 <__pi_gpio_handler+0x80>
    sched->last->next = event;
1c012330:	00452883          	lw	a7,4(a0)
1c012334:	00c8a023          	sw	a2,0(a7)
  sched->last = event;
1c012338:	c150                	sw	a2,4(a0)
  __builtin_pulp_spr_write(reg, val);
1c01233a:	30081073          	csrw	mstatus,a6
      pin++;
1c01233e:	0705                	addi	a4,a4,1
      irq_mask = irq_mask >> 1;
1c012340:	8385                	srli	a5,a5,0x1
      pin++;
1c012342:	0ff77713          	andi	a4,a4,255
1c012346:	b7d9                	j	1c01230c <__pi_gpio_handler+0x44>
    sched->first = event;
1c012348:	00c02e23          	sw	a2,28(zero) # 1c <__rt_sched>
1c01234c:	b7f5                	j	1c012338 <__pi_gpio_handler+0x70>

1c01234e <__rt_i2s_resume>:
  conf->pdm = 1;
  conf->dual = 0;
  conf->width = 16;
  conf->id = -1;
  conf->flags = 0;
}
1c01234e:	1c0157b7          	lui	a5,0x1c015
1c012352:	4d18                	lw	a4,24(a0)
1c012354:	04c7a783          	lw	a5,76(a5) # 1c01504c <__rt_freq_domains>
1c012358:	068416b7          	lui	a3,0x6841
1c01235c:	90968693          	addi	a3,a3,-1783 # 6840909 <__L2+0x67c0909>
1c012360:	02e7c7b3          	div	a5,a5,a4
1c012364:	02954703          	lbu	a4,41(a0)
1c012368:	177d                	addi	a4,a4,-1
1c01236a:	c0874733          	p.bset	a4,a4,0,8
1c01236e:	17fd                	addi	a5,a5,-1
1c012370:	8785                	srai	a5,a5,0x1
1c012372:	07c2                	slli	a5,a5,0x10
1c012374:	8fd9                	or	a5,a5,a4
1c012376:	02554703          	lbu	a4,37(a0)
1c01237a:	9736                	add	a4,a4,a3
1c01237c:	070a                	slli	a4,a4,0x2
1c01237e:	c31c                	sw	a5,0(a4)
1c012380:	8082                	ret

1c012382 <__rt_i2s_setfreq_after>:
1c012382:	1141                	addi	sp,sp,-16
1c012384:	1c0157b7          	lui	a5,0x1c015
1c012388:	c422                	sw	s0,8(sp)
1c01238a:	f907a403          	lw	s0,-112(a5) # 1c014f90 <__rt_i2s_first>
1c01238e:	c606                	sw	ra,12(sp)
1c012390:	e411                	bnez	s0,1c01239c <__rt_i2s_setfreq_after+0x1a>
1c012392:	40b2                	lw	ra,12(sp)
1c012394:	4422                	lw	s0,8(sp)
1c012396:	4501                	li	a0,0
1c012398:	0141                	addi	sp,sp,16
1c01239a:	8082                	ret
1c01239c:	02844783          	lbu	a5,40(s0)
1c0123a0:	c781                	beqz	a5,1c0123a8 <__rt_i2s_setfreq_after+0x26>
1c0123a2:	8522                	mv	a0,s0
1c0123a4:	fabff0ef          	jal	ra,1c01234e <__rt_i2s_resume>
1c0123a8:	4c40                	lw	s0,28(s0)
1c0123aa:	b7dd                	j	1c012390 <__rt_i2s_setfreq_after+0xe>

1c0123ac <__rt_i2s_setfreq_before>:
1c0123ac:	1c0157b7          	lui	a5,0x1c015
1c0123b0:	f907a783          	lw	a5,-112(a5) # 1c014f90 <__rt_i2s_first>
1c0123b4:	068416b7          	lui	a3,0x6841
1c0123b8:	90968693          	addi	a3,a3,-1783 # 6840909 <__L2+0x67c0909>
1c0123bc:	e399                	bnez	a5,1c0123c2 <__rt_i2s_setfreq_before+0x16>
1c0123be:	4501                	li	a0,0
1c0123c0:	8082                	ret
1c0123c2:	0287c703          	lbu	a4,40(a5)
1c0123c6:	c719                	beqz	a4,1c0123d4 <__rt_i2s_setfreq_before+0x28>
1c0123c8:	0257c703          	lbu	a4,37(a5)
1c0123cc:	9736                	add	a4,a4,a3
1c0123ce:	070a                	slli	a4,a4,0x2
1c0123d0:	00072023          	sw	zero,0(a4)
1c0123d4:	4fdc                	lw	a5,28(a5)
1c0123d6:	b7dd                	j	1c0123bc <__rt_i2s_setfreq_before+0x10>

1c0123d8 <__rt_i2s_init>:
{
  // In case the peripheral clock can dynamically change, we need to be notified
  // when this happens so that the I2S channels are stopped and resumed
  int err = 0;

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c0123d8:	1c0125b7          	lui	a1,0x1c012
{
1c0123dc:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c0123de:	4601                	li	a2,0
1c0123e0:	3ac58593          	addi	a1,a1,940 # 1c0123ac <__rt_i2s_setfreq_before>
1c0123e4:	4511                	li	a0,4
{
1c0123e6:	c606                	sw	ra,12(sp)
1c0123e8:	c422                	sw	s0,8(sp)
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c0123ea:	ed5fd0ef          	jal	ra,1c0102be <__rt_cbsys_add>

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_i2s_setfreq_after, NULL);
1c0123ee:	1c0125b7          	lui	a1,0x1c012
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c0123f2:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_i2s_setfreq_after, NULL);
1c0123f4:	4601                	li	a2,0
1c0123f6:	38258593          	addi	a1,a1,898 # 1c012382 <__rt_i2s_setfreq_after>
1c0123fa:	4515                	li	a0,5
1c0123fc:	ec3fd0ef          	jal	ra,1c0102be <__rt_cbsys_add>
1c012400:	8d41                	or	a0,a0,s0

  if (err) rt_fatal("Unable to initialize i2s driver\n");
1c012402:	c105                	beqz	a0,1c012422 <__rt_i2s_init+0x4a>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c012404:	01402673          	csrr	a2,uhartid
1c012408:	1c014537          	lui	a0,0x1c014
  return (hart_id >> 5) & 0x3f;
1c01240c:	40565593          	srai	a1,a2,0x5
1c012410:	f265b5b3          	p.bclr	a1,a1,25,6
1c012414:	f4563633          	p.bclr	a2,a2,26,5
1c012418:	7a850513          	addi	a0,a0,1960 # 1c0147a8 <__hyper_pad+0x50>
1c01241c:	784000ef          	jal	ra,1c012ba0 <printf>
1c012420:	2711                	jal	1c012b24 <abort>
}
1c012422:	40b2                	lw	ra,12(sp)
1c012424:	4422                	lw	s0,8(sp)
1c012426:	0141                	addi	sp,sp,16
1c012428:	8082                	ret

1c01242a <__rt_himax_init>:
    .capture   = &__rt_himax_capture
};

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_himax_init()
{
  camera_isAwaked = 0;
1c01242a:	1b0007b7          	lui	a5,0x1b000
1c01242e:	7a078c23          	sb	zero,1976(a5) # 1b0007b8 <camera_isAwaked>
}
1c012432:	8082                	ret

1c012434 <__rt_rtc_init>:
}


RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_rtc_init()
{
  __rtc_handler = NULL;
1c012434:	35800793          	li	a5,856
1c012438:	0207ac23          	sw	zero,56(a5)
  dev_rtc.open_count = 0;
1c01243c:	02078823          	sb	zero,48(a5)
  __rt_rtc_init_done = 0;
1c012440:	0207aa23          	sw	zero,52(a5)
}
1c012444:	8082                	ret

1c012446 <__rt_spim_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_spim_init()
{
  for (int i=0; i<ARCHI_UDMA_NB_SPIM; i++)
  {
    __rt_spim_open_count[i] = 0;
1c012446:	1c0157b7          	lui	a5,0x1c015
1c01244a:	f9478793          	addi	a5,a5,-108 # 1c014f94 <__rt_spim_open_count>
1c01244e:	0007a023          	sw	zero,0(a5)
1c012452:	0007a223          	sw	zero,4(a5)
  }
}
1c012456:	8082                	ret

1c012458 <__rt_io_end_of_flush>:
  if (rt_iodev() == RT_IODEV_UART)
  {
    __rt_io_start(NULL);
    __rt_cbsys_add(RT_CBSYS_STOP, __rt_io_stop, NULL);
    __rt_io_pending_flush = 0;
    rt_event_alloc(NULL, 1);
1c012458:	1c0157b7          	lui	a5,0x1c015
1c01245c:	fa07a023          	sw	zero,-96(a5) # 1c014fa0 <__rt_io_pending_flush>
1c012460:	00052c23          	sw	zero,24(a0)
1c012464:	8082                	ret

1c012466 <__rt_io_uart_wait_req>:
1c012466:	1141                	addi	sp,sp,-16
1c012468:	c226                	sw	s1,4(sp)
1c01246a:	84aa                	mv	s1,a0
1c01246c:	c606                	sw	ra,12(sp)
1c01246e:	c422                	sw	s0,8(sp)
1c012470:	c04a                	sw	s2,0(sp)
1c012472:	30047973          	csrrci	s2,mstatus,8
1c012476:	1c015437          	lui	s0,0x1c015
1c01247a:	f9c40413          	addi	s0,s0,-100 # 1c014f9c <__rt_io_event_current>
1c01247e:	4008                	lw	a0,0(s0)
1c012480:	c509                	beqz	a0,1c01248a <__rt_io_uart_wait_req+0x24>
1c012482:	bdcfe0ef          	jal	ra,1c01085e <rt_event_wait>
1c012486:	00042023          	sw	zero,0(s0)
1c01248a:	4785                	li	a5,1
1c01248c:	08f48023          	sb	a5,128(s1)
1c012490:	0814c783          	lbu	a5,129(s1)
1c012494:	00201737          	lui	a4,0x201
1c012498:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c01249c:	04078793          	addi	a5,a5,64
1c0124a0:	07da                	slli	a5,a5,0x16
1c0124a2:	0007e723          	p.sw	zero,a4(a5)
1c0124a6:	30091073          	csrw	mstatus,s2
1c0124aa:	40b2                	lw	ra,12(sp)
1c0124ac:	4422                	lw	s0,8(sp)
1c0124ae:	4492                	lw	s1,4(sp)
1c0124b0:	4902                	lw	s2,0(sp)
1c0124b2:	0141                	addi	sp,sp,16
1c0124b4:	8082                	ret

1c0124b6 <__rt_do_putc_host>:
1c0124b6:	1c015737          	lui	a4,0x1c015
1c0124ba:	fa470793          	addi	a5,a4,-92 # 1c014fa4 <__rt_putc_host_buffer_index>
1c0124be:	4390                	lw	a2,0(a5)
1c0124c0:	fa470713          	addi	a4,a4,-92
1c0124c4:	00160693          	addi	a3,a2,1
1c0124c8:	c394                	sw	a3,0(a5)
1c0124ca:	1c0157b7          	lui	a5,0x1c015
1c0124ce:	c2078593          	addi	a1,a5,-992 # 1c014c20 <__rt_putc_host_buffer>
1c0124d2:	00a5c623          	p.sb	a0,a2(a1)
1c0124d6:	07f00593          	li	a1,127
1c0124da:	c2078613          	addi	a2,a5,-992
1c0124de:	00b68463          	beq	a3,a1,1c0124e6 <__rt_do_putc_host+0x30>
1c0124e2:	00a53a63          	p.bneimm	a0,10,1c0124f6 <__rt_do_putc_host+0x40>
1c0124e6:	c2078513          	addi	a0,a5,-992
1c0124ea:	000646a3          	p.sb	zero,a3(a2)
1c0124ee:	00072023          	sw	zero,0(a4)
1c0124f2:	993fd06f          	j	1c00fe84 <semihost_write0>
1c0124f6:	8082                	ret

1c0124f8 <__rt_io_start>:
1c0124f8:	1101                	addi	sp,sp,-32
1c0124fa:	0028                	addi	a0,sp,8
1c0124fc:	ce06                	sw	ra,28(sp)
1c0124fe:	cc22                	sw	s0,24(sp)
1c012500:	448010ef          	jal	ra,1c013948 <rt_uart_conf_init>
1c012504:	4585                	li	a1,1
1c012506:	4501                	li	a0,0
1c012508:	9f0fe0ef          	jal	ra,1c0106f8 <rt_event_alloc>
1c01250c:	547d                	li	s0,-1
1c01250e:	ed0d                	bnez	a0,1c012548 <__rt_io_start+0x50>
1c012510:	1c0157b7          	lui	a5,0x1c015
1c012514:	a707a783          	lw	a5,-1424(a5) # 1c014a70 <__rt_iodev_uart_baudrate>
1c012518:	842a                	mv	s0,a0
1c01251a:	1c015537          	lui	a0,0x1c015
1c01251e:	01c00593          	li	a1,28
1c012522:	ee050513          	addi	a0,a0,-288 # 1c014ee0 <__rt_io_event>
1c012526:	c43e                	sw	a5,8(sp)
1c012528:	990fe0ef          	jal	ra,1c0106b8 <__rt_event_init>
1c01252c:	1c0157b7          	lui	a5,0x1c015
1c012530:	f787a503          	lw	a0,-136(a5) # 1c014f78 <__rt_iodev_uart_channel>
1c012534:	4681                	li	a3,0
1c012536:	4601                	li	a2,0
1c012538:	002c                	addi	a1,sp,8
1c01253a:	0511                	addi	a0,a0,4
1c01253c:	41c010ef          	jal	ra,1c013958 <__rt_uart_open>
1c012540:	1c0157b7          	lui	a5,0x1c015
1c012544:	faa7a423          	sw	a0,-88(a5) # 1c014fa8 <_rt_io_uart>
1c012548:	8522                	mv	a0,s0
1c01254a:	40f2                	lw	ra,28(sp)
1c01254c:	4462                	lw	s0,24(sp)
1c01254e:	6105                	addi	sp,sp,32
1c012550:	8082                	ret

1c012552 <rt_event_execute.isra.4.constprop.12>:
1c012552:	1141                	addi	sp,sp,-16
1c012554:	c606                	sw	ra,12(sp)
1c012556:	c422                	sw	s0,8(sp)
1c012558:	30047473          	csrrci	s0,mstatus,8
1c01255c:	4585                	li	a1,1
1c01255e:	01c00513          	li	a0,28
1c012562:	a6cfe0ef          	jal	ra,1c0107ce <__rt_event_execute>
1c012566:	30041073          	csrw	mstatus,s0
1c01256a:	40b2                	lw	ra,12(sp)
1c01256c:	4422                	lw	s0,8(sp)
1c01256e:	0141                	addi	sp,sp,16
1c012570:	8082                	ret

1c012572 <__rt_io_lock>:
1c012572:	1c0157b7          	lui	a5,0x1c015
1c012576:	9a87a783          	lw	a5,-1624(a5) # 1c0149a8 <__hal_debug_struct+0x10>
1c01257a:	cf81                	beqz	a5,1c012592 <__rt_io_lock+0x20>
1c01257c:	1c0157b7          	lui	a5,0x1c015
1c012580:	fa87a783          	lw	a5,-88(a5) # 1c014fa8 <_rt_io_uart>
1c012584:	e799                	bnez	a5,1c012592 <__rt_io_lock+0x20>
1c012586:	1c0157b7          	lui	a5,0x1c015
1c01258a:	a6c7a783          	lw	a5,-1428(a5) # 1c014a6c <__rt_iodev>
1c01258e:	0427b963          	p.bneimm	a5,2,1c0125e0 <__rt_io_lock+0x6e>
1c012592:	7135                	addi	sp,sp,-160
1c012594:	014027f3          	csrr	a5,uhartid
1c012598:	cf06                	sw	ra,156(sp)
1c01259a:	ca5797b3          	p.extractu	a5,a5,5,5
1c01259e:	02000713          	li	a4,32
1c0125a2:	1b000537          	lui	a0,0x1b000
1c0125a6:	00e79963          	bne	a5,a4,1c0125b8 <__rt_io_lock+0x46>
1c0125aa:	7bc50513          	addi	a0,a0,1980 # 1b0007bc <__rt_io_fc_lock>
1c0125ae:	da1fd0ef          	jal	ra,1c01034e <__rt_fc_lock>
1c0125b2:	40fa                	lw	ra,156(sp)
1c0125b4:	610d                	addi	sp,sp,160
1c0125b6:	8082                	ret
1c0125b8:	004c                	addi	a1,sp,4
1c0125ba:	7bc50513          	addi	a0,a0,1980
1c0125be:	df7fd0ef          	jal	ra,1c0103b4 <__rt_fc_cluster_lock>
1c0125c2:	4689                	li	a3,2
1c0125c4:	00204737          	lui	a4,0x204
1c0125c8:	08c14783          	lbu	a5,140(sp)
1c0125cc:	0ff7f793          	andi	a5,a5,255
1c0125d0:	f3ed                	bnez	a5,1c0125b2 <__rt_io_lock+0x40>
1c0125d2:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c0125d6:	03c76783          	p.elw	a5,60(a4)
1c0125da:	00d72223          	sw	a3,4(a4)
1c0125de:	b7ed                	j	1c0125c8 <__rt_io_lock+0x56>
1c0125e0:	8082                	ret

1c0125e2 <__rt_putc_host_cluster_req>:
1c0125e2:	1141                	addi	sp,sp,-16
1c0125e4:	c422                	sw	s0,8(sp)
1c0125e6:	c606                	sw	ra,12(sp)
1c0125e8:	842a                	mv	s0,a0
1c0125ea:	08954503          	lbu	a0,137(a0)
1c0125ee:	ec9ff0ef          	jal	ra,1c0124b6 <__rt_do_putc_host>
1c0125f2:	08844783          	lbu	a5,136(s0)
1c0125f6:	4705                	li	a4,1
1c0125f8:	08e42223          	sw	a4,132(s0)
1c0125fc:	00201737          	lui	a4,0x201
1c012600:	40b2                	lw	ra,12(sp)
1c012602:	4422                	lw	s0,8(sp)
1c012604:	04078793          	addi	a5,a5,64
1c012608:	07da                	slli	a5,a5,0x16
1c01260a:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c01260e:	0007e723          	p.sw	zero,a4(a5)
1c012612:	0141                	addi	sp,sp,16
1c012614:	8082                	ret

1c012616 <__rt_io_unlock>:
1c012616:	1c0157b7          	lui	a5,0x1c015
1c01261a:	9a87a783          	lw	a5,-1624(a5) # 1c0149a8 <__hal_debug_struct+0x10>
1c01261e:	cf81                	beqz	a5,1c012636 <__rt_io_unlock+0x20>
1c012620:	1c0157b7          	lui	a5,0x1c015
1c012624:	fa87a783          	lw	a5,-88(a5) # 1c014fa8 <_rt_io_uart>
1c012628:	e799                	bnez	a5,1c012636 <__rt_io_unlock+0x20>
1c01262a:	1c0157b7          	lui	a5,0x1c015
1c01262e:	a6c7a783          	lw	a5,-1428(a5) # 1c014a6c <__rt_iodev>
1c012632:	0427b963          	p.bneimm	a5,2,1c012684 <__rt_io_unlock+0x6e>
1c012636:	7135                	addi	sp,sp,-160
1c012638:	014027f3          	csrr	a5,uhartid
1c01263c:	cf06                	sw	ra,156(sp)
1c01263e:	ca5797b3          	p.extractu	a5,a5,5,5
1c012642:	02000713          	li	a4,32
1c012646:	1b000537          	lui	a0,0x1b000
1c01264a:	00e79963          	bne	a5,a4,1c01265c <__rt_io_unlock+0x46>
1c01264e:	7bc50513          	addi	a0,a0,1980 # 1b0007bc <__rt_io_fc_lock>
1c012652:	d2ffd0ef          	jal	ra,1c010380 <__rt_fc_unlock>
1c012656:	40fa                	lw	ra,156(sp)
1c012658:	610d                	addi	sp,sp,160
1c01265a:	8082                	ret
1c01265c:	004c                	addi	a1,sp,4
1c01265e:	7bc50513          	addi	a0,a0,1980
1c012662:	d8bfd0ef          	jal	ra,1c0103ec <__rt_fc_cluster_unlock>
1c012666:	4689                	li	a3,2
1c012668:	00204737          	lui	a4,0x204
1c01266c:	08c14783          	lbu	a5,140(sp)
1c012670:	0ff7f793          	andi	a5,a5,255
1c012674:	f3ed                	bnez	a5,1c012656 <__rt_io_unlock+0x40>
1c012676:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c01267a:	03c76783          	p.elw	a5,60(a4)
1c01267e:	00d72223          	sw	a3,4(a4)
1c012682:	b7ed                	j	1c01266c <__rt_io_unlock+0x56>
1c012684:	8082                	ret

1c012686 <__rt_io_uart_flush.constprop.11>:
1c012686:	7171                	addi	sp,sp,-176
1c012688:	d522                	sw	s0,168(sp)
1c01268a:	d706                	sw	ra,172(sp)
1c01268c:	d326                	sw	s1,164(sp)
1c01268e:	d14a                	sw	s2,160(sp)
1c012690:	cf4e                	sw	s3,156(sp)
1c012692:	cd52                	sw	s4,152(sp)
1c012694:	1c015437          	lui	s0,0x1c015
1c012698:	fa042783          	lw	a5,-96(s0) # 1c014fa0 <__rt_io_pending_flush>
1c01269c:	fa040993          	addi	s3,s0,-96
1c0126a0:	efad                	bnez	a5,1c01271a <__rt_io_uart_flush.constprop.11+0x94>
1c0126a2:	1c015637          	lui	a2,0x1c015
1c0126a6:	99860793          	addi	a5,a2,-1640 # 1c014998 <__hal_debug_struct>
1c0126aa:	4f80                	lw	s0,24(a5)
1c0126ac:	99860a13          	addi	s4,a2,-1640
1c0126b0:	cc29                	beqz	s0,1c01270a <__rt_io_uart_flush.constprop.11+0x84>
1c0126b2:	1c015737          	lui	a4,0x1c015
1c0126b6:	014027f3          	csrr	a5,uhartid
1c0126ba:	fa872483          	lw	s1,-88(a4) # 1c014fa8 <_rt_io_uart>
1c0126be:	ca5797b3          	p.extractu	a5,a5,5,5
1c0126c2:	02000713          	li	a4,32
1c0126c6:	1c015937          	lui	s2,0x1c015
1c0126ca:	06e79263          	bne	a5,a4,1c01272e <__rt_io_uart_flush.constprop.11+0xa8>
1c0126ce:	1c0125b7          	lui	a1,0x1c012
1c0126d2:	4785                	li	a5,1
1c0126d4:	99860613          	addi	a2,a2,-1640
1c0126d8:	45858593          	addi	a1,a1,1112 # 1c012458 <__rt_io_end_of_flush>
1c0126dc:	4501                	li	a0,0
1c0126de:	00f9a023          	sw	a5,0(s3)
1c0126e2:	88cfe0ef          	jal	ra,1c01076e <rt_event_get>
1c0126e6:	40cc                	lw	a1,4(s1)
1c0126e8:	87aa                	mv	a5,a0
1c0126ea:	4701                	li	a4,0
1c0126ec:	0586                	slli	a1,a1,0x1
1c0126ee:	86a2                	mv	a3,s0
1c0126f0:	9b490613          	addi	a2,s2,-1612 # 1c0149b4 <__hal_debug_struct+0x1c>
1c0126f4:	0585                	addi	a1,a1,1
1c0126f6:	4501                	li	a0,0
1c0126f8:	decfe0ef          	jal	ra,1c010ce4 <rt_periph_copy>
1c0126fc:	f1bff0ef          	jal	ra,1c012616 <__rt_io_unlock>
1c012700:	0009a783          	lw	a5,0(s3)
1c012704:	e395                	bnez	a5,1c012728 <__rt_io_uart_flush.constprop.11+0xa2>
1c012706:	e6dff0ef          	jal	ra,1c012572 <__rt_io_lock>
1c01270a:	50ba                	lw	ra,172(sp)
1c01270c:	542a                	lw	s0,168(sp)
1c01270e:	549a                	lw	s1,164(sp)
1c012710:	590a                	lw	s2,160(sp)
1c012712:	49fa                	lw	s3,156(sp)
1c012714:	4a6a                	lw	s4,152(sp)
1c012716:	614d                	addi	sp,sp,176
1c012718:	8082                	ret
1c01271a:	efdff0ef          	jal	ra,1c012616 <__rt_io_unlock>
1c01271e:	e35ff0ef          	jal	ra,1c012552 <rt_event_execute.isra.4.constprop.12>
1c012722:	e51ff0ef          	jal	ra,1c012572 <__rt_io_lock>
1c012726:	bf8d                	j	1c012698 <__rt_io_uart_flush.constprop.11+0x12>
1c012728:	e2bff0ef          	jal	ra,1c012552 <rt_event_execute.isra.4.constprop.12>
1c01272c:	bfd1                	j	1c012700 <__rt_io_uart_flush.constprop.11+0x7a>
1c01272e:	868a                	mv	a3,sp
1c012730:	8622                	mv	a2,s0
1c012732:	9b490593          	addi	a1,s2,-1612
1c012736:	8526                	mv	a0,s1
1c012738:	2fc010ef          	jal	ra,1c013a34 <rt_uart_cluster_write>
1c01273c:	4689                	li	a3,2
1c01273e:	00204737          	lui	a4,0x204
1c012742:	08c14783          	lbu	a5,140(sp)
1c012746:	0ff7f793          	andi	a5,a5,255
1c01274a:	c781                	beqz	a5,1c012752 <__rt_io_uart_flush.constprop.11+0xcc>
1c01274c:	000a2c23          	sw	zero,24(s4)
1c012750:	bf6d                	j	1c01270a <__rt_io_uart_flush.constprop.11+0x84>
1c012752:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c012756:	03c76783          	p.elw	a5,60(a4)
1c01275a:	00d72223          	sw	a3,4(a4)
1c01275e:	b7d5                	j	1c012742 <__rt_io_uart_flush.constprop.11+0xbc>

1c012760 <__rt_io_uart_wait_pending>:
1c012760:	7135                	addi	sp,sp,-160
1c012762:	cd22                	sw	s0,152(sp)
1c012764:	cf06                	sw	ra,156(sp)
1c012766:	1c015437          	lui	s0,0x1c015
1c01276a:	fa042783          	lw	a5,-96(s0) # 1c014fa0 <__rt_io_pending_flush>
1c01276e:	eb85                	bnez	a5,1c01279e <__rt_io_uart_wait_pending+0x3e>
1c012770:	1c015437          	lui	s0,0x1c015
1c012774:	f9c40413          	addi	s0,s0,-100 # 1c014f9c <__rt_io_event_current>
1c012778:	4008                	lw	a0,0(s0)
1c01277a:	cd11                	beqz	a0,1c012796 <__rt_io_uart_wait_pending+0x36>
1c01277c:	014027f3          	csrr	a5,uhartid
1c012780:	8795                	srai	a5,a5,0x5
1c012782:	f267b7b3          	p.bclr	a5,a5,25,6
1c012786:	02000713          	li	a4,32
1c01278a:	02e79163          	bne	a5,a4,1c0127ac <__rt_io_uart_wait_pending+0x4c>
1c01278e:	8d0fe0ef          	jal	ra,1c01085e <rt_event_wait>
1c012792:	00042023          	sw	zero,0(s0)
1c012796:	40fa                	lw	ra,156(sp)
1c012798:	446a                	lw	s0,152(sp)
1c01279a:	610d                	addi	sp,sp,160
1c01279c:	8082                	ret
1c01279e:	e79ff0ef          	jal	ra,1c012616 <__rt_io_unlock>
1c0127a2:	db1ff0ef          	jal	ra,1c012552 <rt_event_execute.isra.4.constprop.12>
1c0127a6:	dcdff0ef          	jal	ra,1c012572 <__rt_io_lock>
1c0127aa:	b7c1                	j	1c01276a <__rt_io_uart_wait_pending+0xa>
1c0127ac:	08f106a3          	sb	a5,141(sp)
1c0127b0:	1c0127b7          	lui	a5,0x1c012
1c0127b4:	46678793          	addi	a5,a5,1126 # 1c012466 <__rt_io_uart_wait_req>
1c0127b8:	4705                	li	a4,1
1c0127ba:	c83e                	sw	a5,16(sp)
1c0127bc:	0068                	addi	a0,sp,12
1c0127be:	1c0157b7          	lui	a5,0x1c015
1c0127c2:	f0e7a223          	sw	a4,-252(a5) # 1c014f04 <__rt_io_event+0x24>
1c0127c6:	08010623          	sb	zero,140(sp)
1c0127ca:	d802                	sw	zero,48(sp)
1c0127cc:	da02                	sw	zero,52(sp)
1c0127ce:	ca2a                	sw	a0,20(sp)
1c0127d0:	ed1fe0ef          	jal	ra,1c0116a0 <__rt_cluster_push_fc_event>
1c0127d4:	4689                	li	a3,2
1c0127d6:	00204737          	lui	a4,0x204
1c0127da:	08c14783          	lbu	a5,140(sp)
1c0127de:	0ff7f793          	andi	a5,a5,255
1c0127e2:	fbd5                	bnez	a5,1c012796 <__rt_io_uart_wait_pending+0x36>
1c0127e4:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c0127e8:	03c76783          	p.elw	a5,60(a4)
1c0127ec:	00d72223          	sw	a3,4(a4)
1c0127f0:	b7ed                	j	1c0127da <__rt_io_uart_wait_pending+0x7a>

1c0127f2 <__rt_io_stop>:
1c0127f2:	1141                	addi	sp,sp,-16
1c0127f4:	c422                	sw	s0,8(sp)
1c0127f6:	1c015437          	lui	s0,0x1c015
1c0127fa:	c606                	sw	ra,12(sp)
1c0127fc:	fa840413          	addi	s0,s0,-88 # 1c014fa8 <_rt_io_uart>
1c012800:	f61ff0ef          	jal	ra,1c012760 <__rt_io_uart_wait_pending>
1c012804:	4008                	lw	a0,0(s0)
1c012806:	4581                	li	a1,0
1c012808:	1de010ef          	jal	ra,1c0139e6 <rt_uart_close>
1c01280c:	40b2                	lw	ra,12(sp)
1c01280e:	00042023          	sw	zero,0(s0)
1c012812:	4422                	lw	s0,8(sp)
1c012814:	4501                	li	a0,0
1c012816:	0141                	addi	sp,sp,16
1c012818:	8082                	ret

1c01281a <strcmp>:
1c01281a:	0015478b          	p.lbu	a5,1(a0!)
1c01281e:	0015c70b          	p.lbu	a4,1(a1!)
1c012822:	c399                	beqz	a5,1c012828 <strcmp+0xe>
1c012824:	fee78be3          	beq	a5,a4,1c01281a <strcmp>
1c012828:	40e78533          	sub	a0,a5,a4
1c01282c:	8082                	ret

1c01282e <strncmp>:
1c01282e:	ce11                	beqz	a2,1c01284a <strncmp+0x1c>
1c012830:	962a                	add	a2,a2,a0
1c012832:	0015478b          	p.lbu	a5,1(a0!)
1c012836:	0015c70b          	p.lbu	a4,1(a1!)
1c01283a:	00e79563          	bne	a5,a4,1c012844 <strncmp+0x16>
1c01283e:	00c50363          	beq	a0,a2,1c012844 <strncmp+0x16>
1c012842:	fbe5                	bnez	a5,1c012832 <strncmp+0x4>
1c012844:	40e78533          	sub	a0,a5,a4
1c012848:	8082                	ret
1c01284a:	4501                	li	a0,0
1c01284c:	8082                	ret

1c01284e <strlen>:
1c01284e:	87aa                	mv	a5,a0
1c012850:	0007c703          	lbu	a4,0(a5)
1c012854:	00178693          	addi	a3,a5,1
1c012858:	e701                	bnez	a4,1c012860 <strlen+0x12>
1c01285a:	40a78533          	sub	a0,a5,a0
1c01285e:	8082                	ret
1c012860:	87b6                	mv	a5,a3
1c012862:	b7fd                	j	1c012850 <strlen+0x2>

1c012864 <memset>:
1c012864:	962a                	add	a2,a2,a0
1c012866:	87aa                	mv	a5,a0
1c012868:	00c79363          	bne	a5,a2,1c01286e <memset+0xa>
1c01286c:	8082                	ret
1c01286e:	00b780ab          	p.sb	a1,1(a5!)
1c012872:	bfdd                	j	1c012868 <memset+0x4>

1c012874 <memcpy>:
1c012874:	00a5e733          	or	a4,a1,a0
1c012878:	fa273733          	p.bclr	a4,a4,29,2
1c01287c:	87aa                	mv	a5,a0
1c01287e:	c709                	beqz	a4,1c012888 <memcpy+0x14>
1c012880:	962e                	add	a2,a2,a1
1c012882:	00c59f63          	bne	a1,a2,1c0128a0 <memcpy+0x2c>
1c012886:	8082                	ret
1c012888:	fa263733          	p.bclr	a4,a2,29,2
1c01288c:	fb75                	bnez	a4,1c012880 <memcpy+0xc>
1c01288e:	962e                	add	a2,a2,a1
1c012890:	00c59363          	bne	a1,a2,1c012896 <memcpy+0x22>
1c012894:	8082                	ret
1c012896:	0045a70b          	p.lw	a4,4(a1!)
1c01289a:	00e7a22b          	p.sw	a4,4(a5!)
1c01289e:	bfcd                	j	1c012890 <memcpy+0x1c>
1c0128a0:	0015c70b          	p.lbu	a4,1(a1!)
1c0128a4:	00e780ab          	p.sb	a4,1(a5!)
1c0128a8:	bfe9                	j	1c012882 <memcpy+0xe>

1c0128aa <strchr>:
1c0128aa:	0ff5f593          	andi	a1,a1,255
1c0128ae:	00054703          	lbu	a4,0(a0)
1c0128b2:	87aa                	mv	a5,a0
1c0128b4:	0505                	addi	a0,a0,1
1c0128b6:	00b70563          	beq	a4,a1,1c0128c0 <strchr+0x16>
1c0128ba:	fb75                	bnez	a4,1c0128ae <strchr+0x4>
1c0128bc:	c191                	beqz	a1,1c0128c0 <strchr+0x16>
1c0128be:	4781                	li	a5,0
1c0128c0:	853e                	mv	a0,a5
1c0128c2:	8082                	ret

1c0128c4 <__rt_putc_debug_bridge>:
1c0128c4:	1141                	addi	sp,sp,-16
1c0128c6:	c422                	sw	s0,8(sp)
1c0128c8:	1c015437          	lui	s0,0x1c015
1c0128cc:	c226                	sw	s1,4(sp)
1c0128ce:	c606                	sw	ra,12(sp)
1c0128d0:	84aa                	mv	s1,a0
1c0128d2:	99840413          	addi	s0,s0,-1640 # 1c014998 <__hal_debug_struct>
1c0128d6:	485c                	lw	a5,20(s0)
1c0128d8:	c791                	beqz	a5,1c0128e4 <__rt_putc_debug_bridge+0x20>
1c0128da:	06400513          	li	a0,100
1c0128de:	a64fe0ef          	jal	ra,1c010b42 <rt_time_wait_us>
1c0128e2:	bfd5                	j	1c0128d6 <__rt_putc_debug_bridge+0x12>
1c0128e4:	4c1c                	lw	a5,24(s0)
1c0128e6:	00178713          	addi	a4,a5,1
1c0128ea:	97a2                	add	a5,a5,s0
1c0128ec:	00978e23          	sb	s1,28(a5)
1c0128f0:	cc18                	sw	a4,24(s0)
1c0128f2:	4c14                	lw	a3,24(s0)
1c0128f4:	08000793          	li	a5,128
1c0128f8:	00f68463          	beq	a3,a5,1c012900 <__rt_putc_debug_bridge+0x3c>
1c0128fc:	00a4b663          	p.bneimm	s1,10,1c012908 <__rt_putc_debug_bridge+0x44>
1c012900:	c701                	beqz	a4,1c012908 <__rt_putc_debug_bridge+0x44>
1c012902:	c858                	sw	a4,20(s0)
1c012904:	00042c23          	sw	zero,24(s0)
1c012908:	4c1c                	lw	a5,24(s0)
1c01290a:	e799                	bnez	a5,1c012918 <__rt_putc_debug_bridge+0x54>
1c01290c:	4422                	lw	s0,8(sp)
1c01290e:	40b2                	lw	ra,12(sp)
1c012910:	4492                	lw	s1,4(sp)
1c012912:	0141                	addi	sp,sp,16
1c012914:	cb7fd06f          	j	1c0105ca <__rt_bridge_printf_flush>
1c012918:	40b2                	lw	ra,12(sp)
1c01291a:	4422                	lw	s0,8(sp)
1c01291c:	4492                	lw	s1,4(sp)
1c01291e:	0141                	addi	sp,sp,16
1c012920:	8082                	ret

1c012922 <__rt_putc_uart>:
1c012922:	1101                	addi	sp,sp,-32
1c012924:	c62a                	sw	a0,12(sp)
1c012926:	ce06                	sw	ra,28(sp)
1c012928:	e39ff0ef          	jal	ra,1c012760 <__rt_io_uart_wait_pending>
1c01292c:	1c0157b7          	lui	a5,0x1c015
1c012930:	99878793          	addi	a5,a5,-1640 # 1c014998 <__hal_debug_struct>
1c012934:	4f94                	lw	a3,24(a5)
1c012936:	4532                	lw	a0,12(sp)
1c012938:	00168713          	addi	a4,a3,1
1c01293c:	cf98                	sw	a4,24(a5)
1c01293e:	97b6                	add	a5,a5,a3
1c012940:	00a78e23          	sb	a0,28(a5)
1c012944:	08000793          	li	a5,128
1c012948:	00f70463          	beq	a4,a5,1c012950 <__rt_putc_uart+0x2e>
1c01294c:	00a53663          	p.bneimm	a0,10,1c012958 <__rt_putc_uart+0x36>
1c012950:	40f2                	lw	ra,28(sp)
1c012952:	6105                	addi	sp,sp,32
1c012954:	d33ff06f          	j	1c012686 <__rt_io_uart_flush.constprop.11>
1c012958:	40f2                	lw	ra,28(sp)
1c01295a:	6105                	addi	sp,sp,32
1c01295c:	8082                	ret

1c01295e <tfp_putc.isra.9>:
1c01295e:	1c0157b7          	lui	a5,0x1c015
1c012962:	a6c7a783          	lw	a5,-1428(a5) # 1c014a6c <__rt_iodev>
1c012966:	7135                	addi	sp,sp,-160
1c012968:	cf06                	sw	ra,156(sp)
1c01296a:	0427bf63          	p.bneimm	a5,2,1c0129c8 <tfp_putc.isra.9+0x6a>
1c01296e:	014027f3          	csrr	a5,uhartid
1c012972:	8795                	srai	a5,a5,0x5
1c012974:	f267b7b3          	p.bclr	a5,a5,25,6
1c012978:	02000713          	li	a4,32
1c01297c:	00e79763          	bne	a5,a4,1c01298a <tfp_putc.isra.9+0x2c>
1c012980:	b37ff0ef          	jal	ra,1c0124b6 <__rt_do_putc_host>
1c012984:	40fa                	lw	ra,156(sp)
1c012986:	610d                	addi	sp,sp,160
1c012988:	8082                	ret
1c01298a:	08f10623          	sb	a5,140(sp)
1c01298e:	1c0127b7          	lui	a5,0x1c012
1c012992:	4705                	li	a4,1
1c012994:	5e278793          	addi	a5,a5,1506 # 1c0125e2 <__rt_putc_host_cluster_req>
1c012998:	08a106a3          	sb	a0,141(sp)
1c01299c:	0048                	addi	a0,sp,4
1c01299e:	d63a                	sw	a4,44(sp)
1c0129a0:	c43e                	sw	a5,8(sp)
1c0129a2:	c502                	sw	zero,136(sp)
1c0129a4:	ce02                	sw	zero,28(sp)
1c0129a6:	c62a                	sw	a0,12(sp)
1c0129a8:	00010c23          	sb	zero,24(sp)
1c0129ac:	cf5fe0ef          	jal	ra,1c0116a0 <__rt_cluster_push_fc_event>
1c0129b0:	4709                	li	a4,2
1c0129b2:	002047b7          	lui	a5,0x204
1c0129b6:	46aa                	lw	a3,136(sp)
1c0129b8:	f6f1                	bnez	a3,1c012984 <tfp_putc.isra.9+0x26>
1c0129ba:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c0129be:	03c7e683          	p.elw	a3,60(a5)
1c0129c2:	00e7a223          	sw	a4,4(a5)
1c0129c6:	bfc5                	j	1c0129b6 <tfp_putc.isra.9+0x58>
1c0129c8:	1c0157b7          	lui	a5,0x1c015
1c0129cc:	fa87a783          	lw	a5,-88(a5) # 1c014fa8 <_rt_io_uart>
1c0129d0:	c781                	beqz	a5,1c0129d8 <tfp_putc.isra.9+0x7a>
1c0129d2:	f51ff0ef          	jal	ra,1c012922 <__rt_putc_uart>
1c0129d6:	b77d                	j	1c012984 <tfp_putc.isra.9+0x26>
1c0129d8:	1c0157b7          	lui	a5,0x1c015
1c0129dc:	9a87a783          	lw	a5,-1624(a5) # 1c0149a8 <__hal_debug_struct+0x10>
1c0129e0:	c395                	beqz	a5,1c012a04 <tfp_putc.isra.9+0xa6>
1c0129e2:	014027f3          	csrr	a5,uhartid
1c0129e6:	00379713          	slli	a4,a5,0x3
1c0129ea:	1a1106b7          	lui	a3,0x1a110
1c0129ee:	ee873733          	p.bclr	a4,a4,23,8
1c0129f2:	9736                	add	a4,a4,a3
1c0129f4:	6689                	lui	a3,0x2
1c0129f6:	078a                	slli	a5,a5,0x2
1c0129f8:	f8068693          	addi	a3,a3,-128 # 1f80 <__rt_stack_size+0x1780>
1c0129fc:	8ff5                	and	a5,a5,a3
1c0129fe:	00a767a3          	p.sw	a0,a5(a4)
1c012a02:	b749                	j	1c012984 <tfp_putc.isra.9+0x26>
1c012a04:	ec1ff0ef          	jal	ra,1c0128c4 <__rt_putc_debug_bridge>
1c012a08:	bfb5                	j	1c012984 <tfp_putc.isra.9+0x26>

1c012a0a <puts>:
1c012a0a:	1141                	addi	sp,sp,-16
1c012a0c:	c422                	sw	s0,8(sp)
1c012a0e:	c606                	sw	ra,12(sp)
1c012a10:	842a                	mv	s0,a0
1c012a12:	b61ff0ef          	jal	ra,1c012572 <__rt_io_lock>
1c012a16:	0014450b          	p.lbu	a0,1(s0!)
1c012a1a:	c501                	beqz	a0,1c012a22 <puts+0x18>
1c012a1c:	f43ff0ef          	jal	ra,1c01295e <tfp_putc.isra.9>
1c012a20:	bfdd                	j	1c012a16 <puts+0xc>
1c012a22:	4529                	li	a0,10
1c012a24:	f3bff0ef          	jal	ra,1c01295e <tfp_putc.isra.9>
1c012a28:	befff0ef          	jal	ra,1c012616 <__rt_io_unlock>
1c012a2c:	40b2                	lw	ra,12(sp)
1c012a2e:	4422                	lw	s0,8(sp)
1c012a30:	4501                	li	a0,0
1c012a32:	0141                	addi	sp,sp,16
1c012a34:	8082                	ret

1c012a36 <fputc_locked>:
1c012a36:	1141                	addi	sp,sp,-16
1c012a38:	c422                	sw	s0,8(sp)
1c012a3a:	842a                	mv	s0,a0
1c012a3c:	0ff57513          	andi	a0,a0,255
1c012a40:	c606                	sw	ra,12(sp)
1c012a42:	f1dff0ef          	jal	ra,1c01295e <tfp_putc.isra.9>
1c012a46:	8522                	mv	a0,s0
1c012a48:	40b2                	lw	ra,12(sp)
1c012a4a:	4422                	lw	s0,8(sp)
1c012a4c:	0141                	addi	sp,sp,16
1c012a4e:	8082                	ret

1c012a50 <fputc>:
1c012a50:	1141                	addi	sp,sp,-16
1c012a52:	c606                	sw	ra,12(sp)
1c012a54:	c422                	sw	s0,8(sp)
1c012a56:	842a                	mv	s0,a0
1c012a58:	b1bff0ef          	jal	ra,1c012572 <__rt_io_lock>
1c012a5c:	0ff47513          	andi	a0,s0,255
1c012a60:	effff0ef          	jal	ra,1c01295e <tfp_putc.isra.9>
1c012a64:	1c0157b7          	lui	a5,0x1c015
1c012a68:	9a87a783          	lw	a5,-1624(a5) # 1c0149a8 <__hal_debug_struct+0x10>
1c012a6c:	e399                	bnez	a5,1c012a72 <fputc+0x22>
1c012a6e:	b5dfd0ef          	jal	ra,1c0105ca <__rt_bridge_printf_flush>
1c012a72:	ba5ff0ef          	jal	ra,1c012616 <__rt_io_unlock>
1c012a76:	8522                	mv	a0,s0
1c012a78:	40b2                	lw	ra,12(sp)
1c012a7a:	4422                	lw	s0,8(sp)
1c012a7c:	0141                	addi	sp,sp,16
1c012a7e:	8082                	ret

1c012a80 <putchar>:
1c012a80:	4589                	li	a1,2
1c012a82:	fcfff06f          	j	1c012a50 <fputc>

1c012a86 <_prf_locked>:
1c012a86:	1101                	addi	sp,sp,-32
1c012a88:	ce06                	sw	ra,28(sp)
1c012a8a:	c02a                	sw	a0,0(sp)
1c012a8c:	c62e                	sw	a1,12(sp)
1c012a8e:	c432                	sw	a2,8(sp)
1c012a90:	c236                	sw	a3,4(sp)
1c012a92:	ae1ff0ef          	jal	ra,1c012572 <__rt_io_lock>
1c012a96:	4692                	lw	a3,4(sp)
1c012a98:	4622                	lw	a2,8(sp)
1c012a9a:	45b2                	lw	a1,12(sp)
1c012a9c:	4502                	lw	a0,0(sp)
1c012a9e:	2ca1                	jal	1c012cf6 <_prf>
1c012aa0:	c02a                	sw	a0,0(sp)
1c012aa2:	b75ff0ef          	jal	ra,1c012616 <__rt_io_unlock>
1c012aa6:	40f2                	lw	ra,28(sp)
1c012aa8:	4502                	lw	a0,0(sp)
1c012aaa:	6105                	addi	sp,sp,32
1c012aac:	8082                	ret

1c012aae <exit>:
1c012aae:	1101                	addi	sp,sp,-32
1c012ab0:	cc22                	sw	s0,24(sp)
1c012ab2:	c84a                	sw	s2,16(sp)
1c012ab4:	c62a                	sw	a0,12(sp)
1c012ab6:	ce06                	sw	ra,28(sp)
1c012ab8:	ca26                	sw	s1,20(sp)
1c012aba:	e6cfd0ef          	jal	ra,1c010126 <__rt_deinit>
1c012abe:	4532                	lw	a0,12(sp)
1c012ac0:	1a104437          	lui	s0,0x1a104
1c012ac4:	0a040793          	addi	a5,s0,160 # 1a1040a0 <__l1_end+0xa104078>
1c012ac8:	c1f54933          	p.bset	s2,a0,0,31
1c012acc:	0127a023          	sw	s2,0(a5)
1c012ad0:	1c0157b7          	lui	a5,0x1c015
1c012ad4:	a6c7a783          	lw	a5,-1428(a5) # 1c014a6c <__rt_iodev>
1c012ad8:	0027bf63          	p.bneimm	a5,2,1c012af6 <exit+0x48>
1c012adc:	c901                	beqz	a0,1c012aec <exit+0x3e>
1c012ade:	00020537          	lui	a0,0x20
1c012ae2:	02350513          	addi	a0,a0,35 # 20023 <__L1Cl+0x10023>
1c012ae6:	c2cfd0ef          	jal	ra,1c00ff12 <semihost_exit>
1c012aea:	a001                	j	1c012aea <exit+0x3c>
1c012aec:	00020537          	lui	a0,0x20
1c012af0:	02650513          	addi	a0,a0,38 # 20026 <__L1Cl+0x10026>
1c012af4:	bfcd                	j	1c012ae6 <exit+0x38>
1c012af6:	1c0154b7          	lui	s1,0x1c015
1c012afa:	99848493          	addi	s1,s1,-1640 # 1c014998 <__hal_debug_struct>
1c012afe:	acdfd0ef          	jal	ra,1c0105ca <__rt_bridge_printf_flush>
1c012b02:	0124a623          	sw	s2,12(s1)
1c012b06:	a81fd0ef          	jal	ra,1c010586 <__rt_bridge_send_notif>
1c012b0a:	449c                	lw	a5,8(s1)
1c012b0c:	dff9                	beqz	a5,1c012aea <exit+0x3c>
1c012b0e:	07440413          	addi	s0,s0,116
1c012b12:	401c                	lw	a5,0(s0)
1c012b14:	83a5                	srli	a5,a5,0x9
1c012b16:	f837b7b3          	p.bclr	a5,a5,28,3
1c012b1a:	fe77bce3          	p.bneimm	a5,7,1c012b12 <exit+0x64>
1c012b1e:	a8bfd0ef          	jal	ra,1c0105a8 <__rt_bridge_clear_notif>
1c012b22:	b7e1                	j	1c012aea <exit+0x3c>

1c012b24 <abort>:
1c012b24:	1141                	addi	sp,sp,-16
1c012b26:	557d                	li	a0,-1
1c012b28:	c606                	sw	ra,12(sp)
1c012b2a:	f85ff0ef          	jal	ra,1c012aae <exit>

1c012b2e <__rt_io_init>:
#endif
}

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_io_init()
{
  __rt_putc_host_buffer_index = 0;
1c012b2e:	1c0157b7          	lui	a5,0x1c015
1c012b32:	fa07a223          	sw	zero,-92(a5) # 1c014fa4 <__rt_putc_host_buffer_index>
void __rt_fc_cluster_unlock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req);

static inline void __rt_fc_lock_init(rt_fc_lock_t *lock)
{
#if defined(ARCHI_HAS_FC)
  lock->waiting = NULL;
1c012b36:	1b0007b7          	lui	a5,0x1b000
1c012b3a:	7bc78793          	addi	a5,a5,1980 # 1b0007bc <__rt_io_fc_lock>
1c012b3e:	0007a223          	sw	zero,4(a5)
  lock->locked = 0;
1c012b42:	0007a023          	sw	zero,0(a5)
  lock->fc_wait = NULL;
1c012b46:	0007a623          	sw	zero,12(a5)
  __rt_fc_lock_init(&__rt_io_fc_lock);

#if defined(__RT_USE_UART)
  _rt_io_uart = NULL;
1c012b4a:	1c0157b7          	lui	a5,0x1c015
1c012b4e:	fa07a423          	sw	zero,-88(a5) # 1c014fa8 <_rt_io_uart>
  __rt_io_event_current = NULL;
1c012b52:	1c0157b7          	lui	a5,0x1c015
1c012b56:	f807ae23          	sw	zero,-100(a5) # 1c014f9c <__rt_io_event_current>
  return __rt_iodev;
1c012b5a:	1c0157b7          	lui	a5,0x1c015

  if (rt_iodev() == RT_IODEV_UART)
1c012b5e:	a6c7a783          	lw	a5,-1428(a5) # 1c014a6c <__rt_iodev>
1c012b62:	0217be63          	p.bneimm	a5,1,1c012b9e <__rt_io_init+0x70>
  {
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c012b66:	1c0125b7          	lui	a1,0x1c012
{
1c012b6a:	1141                	addi	sp,sp,-16
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c012b6c:	4601                	li	a2,0
1c012b6e:	4f858593          	addi	a1,a1,1272 # 1c0124f8 <__rt_io_start>
1c012b72:	4501                	li	a0,0
{
1c012b74:	c606                	sw	ra,12(sp)
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c012b76:	f48fd0ef          	jal	ra,1c0102be <__rt_cbsys_add>
    __rt_cbsys_add(RT_CBSYS_STOP, __rt_io_stop, NULL);
1c012b7a:	1c0125b7          	lui	a1,0x1c012
1c012b7e:	7f258593          	addi	a1,a1,2034 # 1c0127f2 <__rt_io_stop>
1c012b82:	4601                	li	a2,0
1c012b84:	4505                	li	a0,1
1c012b86:	f38fd0ef          	jal	ra,1c0102be <__rt_cbsys_add>
    __rt_io_pending_flush = 0;
    rt_event_alloc(NULL, 1);
  }
#endif

}
1c012b8a:	40b2                	lw	ra,12(sp)
    __rt_io_pending_flush = 0;
1c012b8c:	1c0157b7          	lui	a5,0x1c015
1c012b90:	fa07a023          	sw	zero,-96(a5) # 1c014fa0 <__rt_io_pending_flush>
    rt_event_alloc(NULL, 1);
1c012b94:	4585                	li	a1,1
1c012b96:	4501                	li	a0,0
}
1c012b98:	0141                	addi	sp,sp,16
    rt_event_alloc(NULL, 1);
1c012b9a:	b5ffd06f          	j	1c0106f8 <rt_event_alloc>
1c012b9e:	8082                	ret

1c012ba0 <printf>:

	return r;
}

int printf(const char *format, ...)
{
1c012ba0:	7139                	addi	sp,sp,-64
1c012ba2:	d432                	sw	a2,40(sp)
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c012ba4:	862a                	mv	a2,a0
1c012ba6:	1c013537          	lui	a0,0x1c013
{
1c012baa:	d22e                	sw	a1,36(sp)
1c012bac:	d636                	sw	a3,44(sp)
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c012bae:	4589                	li	a1,2
	va_start(vargs, format);
1c012bb0:	1054                	addi	a3,sp,36
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c012bb2:	a3650513          	addi	a0,a0,-1482 # 1c012a36 <fputc_locked>
{
1c012bb6:	ce06                	sw	ra,28(sp)
1c012bb8:	d83a                	sw	a4,48(sp)
1c012bba:	da3e                	sw	a5,52(sp)
1c012bbc:	dc42                	sw	a6,56(sp)
1c012bbe:	de46                	sw	a7,60(sp)
	va_start(vargs, format);
1c012bc0:	c636                	sw	a3,12(sp)
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c012bc2:	ec5ff0ef          	jal	ra,1c012a86 <_prf_locked>
	va_end(vargs);

	return r;
}
1c012bc6:	40f2                	lw	ra,28(sp)
1c012bc8:	6121                	addi	sp,sp,64
1c012bca:	8082                	ret

1c012bcc <_to_x>:
 * Writes the specified number into the buffer in the given base,
 * using the digit characters 0-9a-z (i.e. base>36 will start writing
 * odd bytes).
 */
static int _to_x(char *buf, unsigned VALTYPE n, unsigned int base)
{
1c012bcc:	7179                	addi	sp,sp,-48
1c012bce:	d422                	sw	s0,40(sp)
1c012bd0:	d226                	sw	s1,36(sp)
1c012bd2:	ce4e                	sw	s3,28(sp)
1c012bd4:	cc52                	sw	s4,24(sp)
1c012bd6:	ca56                	sw	s5,20(sp)
1c012bd8:	c85a                	sw	s6,16(sp)
1c012bda:	d606                	sw	ra,44(sp)
1c012bdc:	d04a                	sw	s2,32(sp)
1c012bde:	c65e                	sw	s7,12(sp)
1c012be0:	84aa                	mv	s1,a0
1c012be2:	89ae                	mv	s3,a1
1c012be4:	8a32                	mv	s4,a2
1c012be6:	8ab6                	mv	s5,a3
1c012be8:	842a                	mv	s0,a0

	do {
		unsigned int d = n % base;

		n /= base;
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c012bea:	4b25                	li	s6,9
		unsigned int d = n % base;
1c012bec:	8656                	mv	a2,s5
1c012bee:	4681                	li	a3,0
1c012bf0:	854e                	mv	a0,s3
1c012bf2:	85d2                	mv	a1,s4
1c012bf4:	d3ded0ef          	jal	ra,1c000930 <__umoddi3>
		n /= base;
1c012bf8:	85d2                	mv	a1,s4
		unsigned int d = n % base;
1c012bfa:	892a                	mv	s2,a0
		n /= base;
1c012bfc:	8656                	mv	a2,s5
1c012bfe:	854e                	mv	a0,s3
1c012c00:	4681                	li	a3,0
1c012c02:	9f3ed0ef          	jal	ra,1c0005f4 <__udivdi3>
1c012c06:	89aa                	mv	s3,a0
1c012c08:	8a2e                	mv	s4,a1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c012c0a:	02700713          	li	a4,39
1c012c0e:	012b6363          	bltu	s6,s2,1c012c14 <_to_x+0x48>
1c012c12:	4701                	li	a4,0
1c012c14:	03090913          	addi	s2,s2,48
1c012c18:	974a                	add	a4,a4,s2
1c012c1a:	00e40023          	sb	a4,0(s0)
	} while (n);
1c012c1e:	8dc9                	or	a1,a1,a0
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c012c20:	00140793          	addi	a5,s0,1
	} while (n);
1c012c24:	e195                	bnez	a1,1c012c48 <_to_x+0x7c>

	*buf = 0;
1c012c26:	00078023          	sb	zero,0(a5)
	len = buf - start;
1c012c2a:	40978533          	sub	a0,a5,s1

	for (buf--; buf > start; buf--, start++) {
1c012c2e:	0084ef63          	bltu	s1,s0,1c012c4c <_to_x+0x80>
		*buf = *start;
		*start = tmp;
	}

	return len;
}
1c012c32:	50b2                	lw	ra,44(sp)
1c012c34:	5422                	lw	s0,40(sp)
1c012c36:	5492                	lw	s1,36(sp)
1c012c38:	5902                	lw	s2,32(sp)
1c012c3a:	49f2                	lw	s3,28(sp)
1c012c3c:	4a62                	lw	s4,24(sp)
1c012c3e:	4ad2                	lw	s5,20(sp)
1c012c40:	4b42                	lw	s6,16(sp)
1c012c42:	4bb2                	lw	s7,12(sp)
1c012c44:	6145                	addi	sp,sp,48
1c012c46:	8082                	ret
1c012c48:	843e                	mv	s0,a5
1c012c4a:	b74d                	j	1c012bec <_to_x+0x20>
		*buf = *start;
1c012c4c:	0004c703          	lbu	a4,0(s1)
		char tmp = *buf;
1c012c50:	00044783          	lbu	a5,0(s0)
		*buf = *start;
1c012c54:	fee40fab          	p.sb	a4,-1(s0!)
		*start = tmp;
1c012c58:	00f480ab          	p.sb	a5,1(s1!)
1c012c5c:	bfc9                	j	1c012c2e <_to_x+0x62>

1c012c5e <_rlrshift>:
	return (buf + _to_udec(buf, value)) - start;
}

static	void _rlrshift(uint64_t *v)
{
	*v = (*v & 1) + (*v >> 1);
1c012c5e:	411c                	lw	a5,0(a0)
1c012c60:	4154                	lw	a3,4(a0)
1c012c62:	fc17b733          	p.bclr	a4,a5,30,1
1c012c66:	01f69613          	slli	a2,a3,0x1f
1c012c6a:	8385                	srli	a5,a5,0x1
1c012c6c:	8fd1                	or	a5,a5,a2
1c012c6e:	97ba                	add	a5,a5,a4
1c012c70:	8285                	srli	a3,a3,0x1
1c012c72:	00e7b733          	sltu	a4,a5,a4
1c012c76:	9736                	add	a4,a4,a3
1c012c78:	c11c                	sw	a5,0(a0)
1c012c7a:	c158                	sw	a4,4(a0)
}
1c012c7c:	8082                	ret

1c012c7e <_ldiv5>:
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
	uint32_t hi;
	uint64_t rem = *v, quot = 0U, q;
1c012c7e:	4118                	lw	a4,0(a0)
1c012c80:	4154                	lw	a3,4(a0)
	 */
	rem += 2U;

	for (i = 0; i < 3; i++) {
		hi = rem >> shifts[i];
		q = (uint64_t)(hi / 5U) << shifts[i];
1c012c82:	4615                	li	a2,5
	rem += 2U;
1c012c84:	00270793          	addi	a5,a4,2
1c012c88:	00e7b733          	sltu	a4,a5,a4
1c012c8c:	9736                	add	a4,a4,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c012c8e:	02c755b3          	divu	a1,a4,a2
		rem -= q * 5U;
1c012c92:	42b61733          	p.msu	a4,a2,a1
		hi = rem >> shifts[i];
1c012c96:	01d71693          	slli	a3,a4,0x1d
1c012c9a:	0037d713          	srli	a4,a5,0x3
1c012c9e:	8f55                	or	a4,a4,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c012ca0:	02c75733          	divu	a4,a4,a2
1c012ca4:	01d75693          	srli	a3,a4,0x1d
1c012ca8:	070e                	slli	a4,a4,0x3
		rem -= q * 5U;
1c012caa:	42e617b3          	p.msu	a5,a2,a4
		quot += q;
1c012cae:	95b6                	add	a1,a1,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c012cb0:	02c7d7b3          	divu	a5,a5,a2
		quot += q;
1c012cb4:	973e                	add	a4,a4,a5
1c012cb6:	00f737b3          	sltu	a5,a4,a5
1c012cba:	97ae                	add	a5,a5,a1
	}

	*v = quot;
1c012cbc:	c118                	sw	a4,0(a0)
1c012cbe:	c15c                	sw	a5,4(a0)
}
1c012cc0:	8082                	ret

1c012cc2 <_get_digit>:

static	char _get_digit(uint64_t *fr, int *digit_count)
{
	char rval;

	if (*digit_count > 0) {
1c012cc2:	419c                	lw	a5,0(a1)
		*digit_count -= 1;
		*fr = *fr * 10U;
		rval = ((*fr >> 60) & 0xF) + '0';
		*fr &= 0x0FFFFFFFFFFFFFFFull;
	} else {
		rval = '0';
1c012cc4:	03000713          	li	a4,48
	if (*digit_count > 0) {
1c012cc8:	02f05563          	blez	a5,1c012cf2 <_get_digit+0x30>
		*digit_count -= 1;
1c012ccc:	17fd                	addi	a5,a5,-1
1c012cce:	c19c                	sw	a5,0(a1)
		*fr = *fr * 10U;
1c012cd0:	411c                	lw	a5,0(a0)
1c012cd2:	4729                	li	a4,10
1c012cd4:	4150                	lw	a2,4(a0)
1c012cd6:	02f706b3          	mul	a3,a4,a5
1c012cda:	02f737b3          	mulhu	a5,a4,a5
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c012cde:	c114                	sw	a3,0(a0)
		*fr = *fr * 10U;
1c012ce0:	42c707b3          	p.mac	a5,a4,a2
		rval = ((*fr >> 60) & 0xF) + '0';
1c012ce4:	01c7d713          	srli	a4,a5,0x1c
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c012ce8:	c7c7b7b3          	p.bclr	a5,a5,3,28
		rval = ((*fr >> 60) & 0xF) + '0';
1c012cec:	03070713          	addi	a4,a4,48
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c012cf0:	c15c                	sw	a5,4(a0)
	}

	return rval;
}
1c012cf2:	853a                	mv	a0,a4
1c012cf4:	8082                	ret

1c012cf6 <_prf>:
	*sptr = p;
	return i;
}

int _prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
1c012cf6:	7135                	addi	sp,sp,-160
1c012cf8:	c94a                	sw	s2,144(sp)
1c012cfa:	c74e                	sw	s3,140(sp)
1c012cfc:	c15a                	sw	s6,128(sp)
1c012cfe:	dede                	sw	s7,124(sp)
1c012d00:	cf06                	sw	ra,156(sp)
1c012d02:	cd22                	sw	s0,152(sp)
1c012d04:	cb26                	sw	s1,148(sp)
1c012d06:	c552                	sw	s4,136(sp)
1c012d08:	c356                	sw	s5,132(sp)
1c012d0a:	dce2                	sw	s8,120(sp)
1c012d0c:	dae6                	sw	s9,116(sp)
1c012d0e:	d8ea                	sw	s10,112(sp)
1c012d10:	d6ee                	sw	s11,108(sp)
1c012d12:	8b2a                	mv	s6,a0
1c012d14:	8bae                	mv	s7,a1
1c012d16:	8936                	mv	s2,a3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
1c012d18:	4981                	li	s3,0

	while ((c = *format++)) {
1c012d1a:	00064503          	lbu	a0,0(a2)
1c012d1e:	00160c13          	addi	s8,a2,1
1c012d22:	c911                	beqz	a0,1c012d36 <_prf+0x40>
		if (c != '%') {
1c012d24:	02500793          	li	a5,37
1c012d28:	14f50563          	beq	a0,a5,1c012e72 <_prf+0x17c>
			PUTC(c);
1c012d2c:	85de                	mv	a1,s7
1c012d2e:	9b02                	jalr	s6
1c012d30:	13f53fe3          	p.bneimm	a0,-1,1c01366e <_prf+0x978>
1c012d34:	59fd                	li	s3,-1
		}
	}
	return count;

#undef PUTC
}
1c012d36:	40fa                	lw	ra,156(sp)
1c012d38:	446a                	lw	s0,152(sp)
1c012d3a:	854e                	mv	a0,s3
1c012d3c:	44da                	lw	s1,148(sp)
1c012d3e:	494a                	lw	s2,144(sp)
1c012d40:	49ba                	lw	s3,140(sp)
1c012d42:	4a2a                	lw	s4,136(sp)
1c012d44:	4a9a                	lw	s5,132(sp)
1c012d46:	4b0a                	lw	s6,128(sp)
1c012d48:	5bf6                	lw	s7,124(sp)
1c012d4a:	5c66                	lw	s8,120(sp)
1c012d4c:	5cd6                	lw	s9,116(sp)
1c012d4e:	5d46                	lw	s10,112(sp)
1c012d50:	5db6                	lw	s11,108(sp)
1c012d52:	610d                	addi	sp,sp,160
1c012d54:	8082                	ret
				switch (c) {
1c012d56:	108d8663          	beq	s11,s0,1c012e62 <_prf+0x16c>
1c012d5a:	0fb46863          	bltu	s0,s11,1c012e4a <_prf+0x154>
1c012d5e:	fc0d8ce3          	beqz	s11,1c012d36 <_prf+0x40>
1c012d62:	0ecd8d63          	beq	s11,a2,1c012e5c <_prf+0x166>
					fplus = true;
1c012d66:	8c52                	mv	s8,s4
			while (strchr("-+ #0", (c = *format++)) != NULL) {
1c012d68:	000c4d83          	lbu	s11,0(s8)
1c012d6c:	1c014737          	lui	a4,0x1c014
1c012d70:	7f070513          	addi	a0,a4,2032 # 1c0147f0 <__hyper_pad+0x98>
1c012d74:	85ee                	mv	a1,s11
1c012d76:	c232                	sw	a2,4(sp)
1c012d78:	b33ff0ef          	jal	ra,1c0128aa <strchr>
1c012d7c:	001c0a13          	addi	s4,s8,1
1c012d80:	4612                	lw	a2,4(sp)
1c012d82:	f971                	bnez	a0,1c012d56 <_prf+0x60>
			if (c == '*') {
1c012d84:	02a00713          	li	a4,42
1c012d88:	10ed9563          	bne	s11,a4,1c012e92 <_prf+0x19c>
				width = va_arg(vargs, int);
1c012d8c:	00092c83          	lw	s9,0(s2)
1c012d90:	00490713          	addi	a4,s2,4
				if (width < 0) {
1c012d94:	000cd663          	bgez	s9,1c012da0 <_prf+0xaa>
					fminus = true;
1c012d98:	4785                	li	a5,1
					width = -width;
1c012d9a:	41900cb3          	neg	s9,s9
					fminus = true;
1c012d9e:	cc3e                	sw	a5,24(sp)
				c = *format++;
1c012da0:	000a4d83          	lbu	s11,0(s4)
				width = va_arg(vargs, int);
1c012da4:	893a                	mv	s2,a4
				c = *format++;
1c012da6:	002c0a13          	addi	s4,s8,2
			if (c == '.') {
1c012daa:	02e00713          	li	a4,46
			precision = -1;
1c012dae:	547d                	li	s0,-1
			if (c == '.') {
1c012db0:	00ed9f63          	bne	s11,a4,1c012dce <_prf+0xd8>
				if (c == '*') {
1c012db4:	000a4703          	lbu	a4,0(s4)
1c012db8:	02a00793          	li	a5,42
1c012dbc:	10f71e63          	bne	a4,a5,1c012ed8 <_prf+0x1e2>
					precision = va_arg(vargs, int);
1c012dc0:	00092403          	lw	s0,0(s2)
				c = *format++;
1c012dc4:	0a05                	addi	s4,s4,1
					precision = va_arg(vargs, int);
1c012dc6:	0911                	addi	s2,s2,4
				c = *format++;
1c012dc8:	000a4d83          	lbu	s11,0(s4)
1c012dcc:	0a05                	addi	s4,s4,1
			if (strchr("hlz", c) != NULL) {
1c012dce:	1c014737          	lui	a4,0x1c014
1c012dd2:	85ee                	mv	a1,s11
1c012dd4:	7f870513          	addi	a0,a4,2040 # 1c0147f8 <__hyper_pad+0xa0>
1c012dd8:	84ee                	mv	s1,s11
1c012dda:	ad1ff0ef          	jal	ra,1c0128aa <strchr>
1c012dde:	10050e63          	beqz	a0,1c012efa <_prf+0x204>
				if (i == 'l' && c == 'l') {
1c012de2:	06c00693          	li	a3,108
				c = *format++;
1c012de6:	001a0c13          	addi	s8,s4,1
1c012dea:	000a4d83          	lbu	s11,0(s4)
				if (i == 'l' && c == 'l') {
1c012dee:	0ed49963          	bne	s1,a3,1c012ee0 <_prf+0x1ea>
1c012df2:	009d9863          	bne	s11,s1,1c012e02 <_prf+0x10c>
					c = *format++;
1c012df6:	001a4d83          	lbu	s11,1(s4)
1c012dfa:	002a0c13          	addi	s8,s4,2
					i = 'L';
1c012dfe:	04c00493          	li	s1,76
			switch (c) {
1c012e02:	06700693          	li	a3,103
1c012e06:	17b6e263          	bltu	a3,s11,1c012f6a <_prf+0x274>
1c012e0a:	06500693          	li	a3,101
1c012e0e:	32ddfc63          	bleu	a3,s11,1c013146 <_prf+0x450>
1c012e12:	04700693          	li	a3,71
1c012e16:	0fb6e563          	bltu	a3,s11,1c012f00 <_prf+0x20a>
1c012e1a:	04500713          	li	a4,69
1c012e1e:	32edf463          	bleu	a4,s11,1c013146 <_prf+0x450>
1c012e22:	f00d8ae3          	beqz	s11,1c012d36 <_prf+0x40>
1c012e26:	02500713          	li	a4,37
1c012e2a:	02ed8de3          	beq	s11,a4,1c013664 <_prf+0x96e>
				PUTC('%');
1c012e2e:	85de                	mv	a1,s7
1c012e30:	02500513          	li	a0,37
1c012e34:	9b02                	jalr	s6
1c012e36:	eff52fe3          	p.beqimm	a0,-1,1c012d34 <_prf+0x3e>
				PUTC(c);
1c012e3a:	85de                	mv	a1,s7
1c012e3c:	856e                	mv	a0,s11
1c012e3e:	9b02                	jalr	s6
1c012e40:	eff52ae3          	p.beqimm	a0,-1,1c012d34 <_prf+0x3e>
				count += 2;
1c012e44:	0989                	addi	s3,s3,2
1c012e46:	02b0006f          	j	1c013670 <_prf+0x97a>
				switch (c) {
1c012e4a:	039d8163          	beq	s11,s9,1c012e6c <_prf+0x176>
1c012e4e:	009d8c63          	beq	s11,s1,1c012e66 <_prf+0x170>
1c012e52:	f1ad9ae3          	bne	s11,s10,1c012d66 <_prf+0x70>
					fplus = true;
1c012e56:	4705                	li	a4,1
1c012e58:	c63a                	sw	a4,12(sp)
					break;
1c012e5a:	b731                	j	1c012d66 <_prf+0x70>
					fspace = true;
1c012e5c:	4785                	li	a5,1
1c012e5e:	c83e                	sw	a5,16(sp)
					break;
1c012e60:	b719                	j	1c012d66 <_prf+0x70>
					falt = true;
1c012e62:	4a85                	li	s5,1
					break;
1c012e64:	b709                	j	1c012d66 <_prf+0x70>
					fzero = true;
1c012e66:	4705                	li	a4,1
1c012e68:	ce3a                	sw	a4,28(sp)
					break;
1c012e6a:	bdf5                	j	1c012d66 <_prf+0x70>
					fminus = true;
1c012e6c:	4785                	li	a5,1
1c012e6e:	cc3e                	sw	a5,24(sp)
1c012e70:	bddd                	j	1c012d66 <_prf+0x70>
			fminus = fplus = fspace = falt = fzero = false;
1c012e72:	ce02                	sw	zero,28(sp)
1c012e74:	c802                	sw	zero,16(sp)
1c012e76:	c602                	sw	zero,12(sp)
1c012e78:	cc02                	sw	zero,24(sp)
1c012e7a:	4a81                	li	s5,0
				switch (c) {
1c012e7c:	02300413          	li	s0,35
1c012e80:	02d00c93          	li	s9,45
1c012e84:	03000493          	li	s1,48
1c012e88:	02b00d13          	li	s10,43
1c012e8c:	02000613          	li	a2,32
1c012e90:	bde1                	j	1c012d68 <_prf+0x72>
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
1c012e92:	fd0d8713          	addi	a4,s11,-48
			} else if (!isdigit(c)) {
1c012e96:	46a5                	li	a3,9
				width = 0;
1c012e98:	4c81                	li	s9,0
			} else if (!isdigit(c)) {
1c012e9a:	f0e6e8e3          	bltu	a3,a4,1c012daa <_prf+0xb4>
	while (isdigit(*p)) {
1c012e9e:	4725                	li	a4,9
		i = 10 * i + *p++ - '0';
1c012ea0:	4629                	li	a2,10
	while (isdigit(*p)) {
1c012ea2:	8a62                	mv	s4,s8
1c012ea4:	001a4d8b          	p.lbu	s11,1(s4!)
1c012ea8:	fd0d8693          	addi	a3,s11,-48
1c012eac:	eed76fe3          	bltu	a4,a3,1c012daa <_prf+0xb4>
		i = 10 * i + *p++ - '0';
1c012eb0:	87ee                	mv	a5,s11
1c012eb2:	42cc87b3          	p.mac	a5,s9,a2
1c012eb6:	8c52                	mv	s8,s4
1c012eb8:	fd078c93          	addi	s9,a5,-48
1c012ebc:	b7dd                	j	1c012ea2 <_prf+0x1ac>
1c012ebe:	42b407b3          	p.mac	a5,s0,a1
1c012ec2:	8a3a                	mv	s4,a4
1c012ec4:	fd078413          	addi	s0,a5,-48
	while (isdigit(*p)) {
1c012ec8:	8752                	mv	a4,s4
1c012eca:	0017478b          	p.lbu	a5,1(a4!)
1c012ece:	fd078613          	addi	a2,a5,-48
1c012ed2:	fec6f6e3          	bleu	a2,a3,1c012ebe <_prf+0x1c8>
1c012ed6:	bdcd                	j	1c012dc8 <_prf+0xd2>
	int i = 0;
1c012ed8:	4401                	li	s0,0
	while (isdigit(*p)) {
1c012eda:	46a5                	li	a3,9
		i = 10 * i + *p++ - '0';
1c012edc:	45a9                	li	a1,10
1c012ede:	b7ed                	j	1c012ec8 <_prf+0x1d2>
				} else if (i == 'h' && c == 'h') {
1c012ee0:	06800693          	li	a3,104
1c012ee4:	f0d49fe3          	bne	s1,a3,1c012e02 <_prf+0x10c>
1c012ee8:	f09d9de3          	bne	s11,s1,1c012e02 <_prf+0x10c>
					c = *format++;
1c012eec:	002a0c13          	addi	s8,s4,2
1c012ef0:	001a4d83          	lbu	s11,1(s4)
					i = 'H';
1c012ef4:	04800493          	li	s1,72
1c012ef8:	b729                	j	1c012e02 <_prf+0x10c>
1c012efa:	8c52                	mv	s8,s4
			i = 0;
1c012efc:	4481                	li	s1,0
1c012efe:	b711                	j	1c012e02 <_prf+0x10c>
			switch (c) {
1c012f00:	06300693          	li	a3,99
1c012f04:	12dd8a63          	beq	s11,a3,1c013038 <_prf+0x342>
1c012f08:	09b6e163          	bltu	a3,s11,1c012f8a <_prf+0x294>
1c012f0c:	05800693          	li	a3,88
1c012f10:	f0dd9fe3          	bne	s11,a3,1c012e2e <_prf+0x138>
				switch (i) {
1c012f14:	06c00693          	li	a3,108
1c012f18:	6cd48363          	beq	s1,a3,1c0135de <_prf+0x8e8>
1c012f1c:	07a00693          	li	a3,122
1c012f20:	6ad48f63          	beq	s1,a3,1c0135de <_prf+0x8e8>
1c012f24:	04c00693          	li	a3,76
1c012f28:	6ad49b63          	bne	s1,a3,1c0135de <_prf+0x8e8>
					val = va_arg(vargs, unsigned long long);
1c012f2c:	091d                	addi	s2,s2,7
1c012f2e:	c4093933          	p.bclr	s2,s2,2,0
1c012f32:	00092583          	lw	a1,0(s2)
1c012f36:	00492603          	lw	a2,4(s2)
1c012f3a:	00890a13          	addi	s4,s2,8
				if (c == 'o') {
1c012f3e:	06f00713          	li	a4,111
1c012f42:	00c4                	addi	s1,sp,68
1c012f44:	6aed9d63          	bne	s11,a4,1c0135fe <_prf+0x908>
	if (alt_form) {
1c012f48:	6a0a8163          	beqz	s5,1c0135ea <_prf+0x8f4>
		*buf++ = '0';
1c012f4c:	03000793          	li	a5,48
1c012f50:	04f10223          	sb	a5,68(sp)
		if (!value) {
1c012f54:	00c5e7b3          	or	a5,a1,a2
		*buf++ = '0';
1c012f58:	04510513          	addi	a0,sp,69
		if (!value) {
1c012f5c:	68079863          	bnez	a5,1c0135ec <_prf+0x8f6>
			*buf++ = 0;
1c012f60:	040102a3          	sb	zero,69(sp)
			prefix = 0;
1c012f64:	4901                	li	s2,0
			return 1;
1c012f66:	4d85                	li	s11,1
1c012f68:	a069                	j	1c012ff2 <_prf+0x2fc>
			switch (c) {
1c012f6a:	07000693          	li	a3,112
1c012f6e:	62dd8f63          	beq	s11,a3,1c0135ac <_prf+0x8b6>
1c012f72:	09b6e663          	bltu	a3,s11,1c012ffe <_prf+0x308>
1c012f76:	06e00693          	li	a3,110
1c012f7a:	5edd8463          	beq	s11,a3,1c013562 <_prf+0x86c>
1c012f7e:	f9b6ebe3          	bltu	a3,s11,1c012f14 <_prf+0x21e>
1c012f82:	06900693          	li	a3,105
1c012f86:	eadd94e3          	bne	s11,a3,1c012e2e <_prf+0x138>
				switch (i) {
1c012f8a:	06c00793          	li	a5,108
1c012f8e:	18f48563          	beq	s1,a5,1c013118 <_prf+0x422>
1c012f92:	07a00793          	li	a5,122
1c012f96:	18f48163          	beq	s1,a5,1c013118 <_prf+0x422>
1c012f9a:	04c00793          	li	a5,76
1c012f9e:	16f49d63          	bne	s1,a5,1c013118 <_prf+0x422>
					val = va_arg(vargs, long long);
1c012fa2:	091d                	addi	s2,s2,7
1c012fa4:	c4093933          	p.bclr	s2,s2,2,0
1c012fa8:	00092583          	lw	a1,0(s2)
1c012fac:	00492a83          	lw	s5,4(s2)
1c012fb0:	00890a13          	addi	s4,s2,8
1c012fb4:	04410d93          	addi	s11,sp,68
	if (value < 0) {
1c012fb8:	160ad763          	bgez	s5,1c013126 <_prf+0x430>
		*buf++ = '-';
1c012fbc:	02d00793          	li	a5,45
		value = -value;
1c012fc0:	40b005b3          	neg	a1,a1
		*buf++ = '-';
1c012fc4:	04f10223          	sb	a5,68(sp)
		value = -value;
1c012fc8:	41500633          	neg	a2,s5
1c012fcc:	00b037b3          	snez	a5,a1
1c012fd0:	8e1d                	sub	a2,a2,a5
		*buf++ = ' ';
1c012fd2:	04510913          	addi	s2,sp,69
	return _to_x(buf, value, 10);
1c012fd6:	854a                	mv	a0,s2
1c012fd8:	46a9                	li	a3,10
1c012fda:	bf3ff0ef          	jal	ra,1c012bcc <_to_x>
				if (fplus || fspace || val < 0) {
1c012fde:	47b2                	lw	a5,12(sp)
	return (buf + _to_udec(buf, value)) - start;
1c012fe0:	954a                	add	a0,a0,s2
1c012fe2:	41b50db3          	sub	s11,a0,s11
					prefix = 1;
1c012fe6:	4905                	li	s2,1
				if (fplus || fspace || val < 0) {
1c012fe8:	e789                	bnez	a5,1c012ff2 <_prf+0x2fc>
1c012fea:	4742                	lw	a4,16(sp)
1c012fec:	e319                	bnez	a4,1c012ff2 <_prf+0x2fc>
1c012fee:	01fad913          	srli	s2,s5,0x1f
			if (precision >= 0) {
1c012ff2:	04045c63          	bgez	s0,1c01304a <_prf+0x354>
			zero.predot = zero.postdot = zero.trail = 0;
1c012ff6:	4401                	li	s0,0
1c012ff8:	4a81                	li	s5,0
1c012ffa:	4681                	li	a3,0
1c012ffc:	a401                	j	1c0131fc <_prf+0x506>
			switch (c) {
1c012ffe:	07500693          	li	a3,117
1c013002:	f0dd89e3          	beq	s11,a3,1c012f14 <_prf+0x21e>
1c013006:	07800693          	li	a3,120
1c01300a:	f0dd85e3          	beq	s11,a3,1c012f14 <_prf+0x21e>
1c01300e:	07300713          	li	a4,115
1c013012:	e0ed9ee3          	bne	s11,a4,1c012e2e <_prf+0x138>
				cptr = va_arg(vargs, char *);
1c013016:	00490a13          	addi	s4,s2,4
1c01301a:	00092783          	lw	a5,0(s2)
				if (precision < 0) {
1c01301e:	00045663          	bgez	s0,1c01302a <_prf+0x334>
					precision = INT_MAX;
1c013022:	80000737          	lui	a4,0x80000
1c013026:	fff74413          	not	s0,a4
1c01302a:	86be                	mv	a3,a5
				for (clen = 0; clen < precision; clen++) {
1c01302c:	4d81                	li	s11,0
1c01302e:	5bb41263          	bne	s0,s11,1c0135d2 <_prf+0x8dc>
1c013032:	4901                	li	s2,0
1c013034:	4401                	li	s0,0
1c013036:	a819                	j	1c01304c <_prf+0x356>
				buf[0] = va_arg(vargs, int);
1c013038:	00092783          	lw	a5,0(s2)
1c01303c:	00490a13          	addi	s4,s2,4
				clen = 1;
1c013040:	4d85                	li	s11,1
				buf[0] = va_arg(vargs, int);
1c013042:	04f10223          	sb	a5,68(sp)
				break;
1c013046:	4901                	li	s2,0
1c013048:	4401                	li	s0,0
1c01304a:	00dc                	addi	a5,sp,68
				zero_head = precision - clen + prefix;
1c01304c:	41b40d33          	sub	s10,s0,s11
1c013050:	9d4a                	add	s10,s10,s2
			zero.predot = zero.postdot = zero.trail = 0;
1c013052:	4401                	li	s0,0
1c013054:	4a81                	li	s5,0
1c013056:	4681                	li	a3,0
1c013058:	040d6d33          	p.max	s10,s10,zero
			if (!fminus && width > 0) {
1c01305c:	4762                	lw	a4,24(sp)
			width -= clen + zero_head;
1c01305e:	01bd0633          	add	a2,s10,s11
1c013062:	40cc8cb3          	sub	s9,s9,a2
			if (!fminus && width > 0) {
1c013066:	e701                	bnez	a4,1c01306e <_prf+0x378>
1c013068:	84e6                	mv	s1,s9
1c01306a:	63904263          	bgtz	s9,1c01368e <_prf+0x998>
1c01306e:	012784b3          	add	s1,a5,s2
			while (prefix-- > 0) {
1c013072:	62979463          	bne	a5,s1,1c01369a <_prf+0x9a4>
1c013076:	84ea                	mv	s1,s10
			while (zero_head-- > 0) {
1c013078:	14fd                	addi	s1,s1,-1
1c01307a:	63f4bc63          	p.bneimm	s1,-1,1c0136b2 <_prf+0x9bc>
			clen -= prefix;
1c01307e:	412d84b3          	sub	s1,s11,s2
1c013082:	8726                	mv	a4,s1
			if (zero.predot) {
1c013084:	c295                	beqz	a3,1c0130a8 <_prf+0x3b2>
				c = *cptr;
1c013086:	0007c503          	lbu	a0,0(a5)
				while (isdigit(c)) {
1c01308a:	8dbe                	mv	s11,a5
1c01308c:	00978833          	add	a6,a5,s1
1c013090:	4625                	li	a2,9
1c013092:	fd050593          	addi	a1,a0,-48
1c013096:	41b80733          	sub	a4,a6,s11
1c01309a:	62b67863          	bleu	a1,a2,1c0136ca <_prf+0x9d4>
1c01309e:	8636                	mv	a2,a3
				while (zero.predot-- > 0) {
1c0130a0:	64061363          	bnez	a2,1c0136e6 <_prf+0x9f0>
				clen -= zero.predot;
1c0130a4:	8f15                	sub	a4,a4,a3
1c0130a6:	87ee                	mv	a5,s11
			if (zero.postdot) {
1c0130a8:	020a8e63          	beqz	s5,1c0130e4 <_prf+0x3ee>
1c0130ac:	8dbe                	mv	s11,a5
1c0130ae:	00e78833          	add	a6,a5,a4
				} while (c != '.');
1c0130b2:	02e00613          	li	a2,46
					c = *cptr++;
1c0130b6:	001dc68b          	p.lbu	a3,1(s11!)
					PUTC(c);
1c0130ba:	85de                	mv	a1,s7
1c0130bc:	c232                	sw	a2,4(sp)
1c0130be:	8536                	mv	a0,a3
1c0130c0:	c036                	sw	a3,0(sp)
1c0130c2:	c442                	sw	a6,8(sp)
1c0130c4:	9b02                	jalr	s6
1c0130c6:	4612                	lw	a2,4(sp)
1c0130c8:	4682                	lw	a3,0(sp)
1c0130ca:	4822                	lw	a6,8(sp)
1c0130cc:	c7f524e3          	p.beqimm	a0,-1,1c012d34 <_prf+0x3e>
1c0130d0:	41b80733          	sub	a4,a6,s11
				} while (c != '.');
1c0130d4:	fec691e3          	bne	a3,a2,1c0130b6 <_prf+0x3c0>
1c0130d8:	86d6                	mv	a3,s5
				while (zero.postdot-- > 0) {
1c0130da:	62d04563          	bgtz	a3,1c013704 <_prf+0xa0e>
				clen -= zero.postdot;
1c0130de:	41570733          	sub	a4,a4,s5
					c = *cptr++;
1c0130e2:	87ee                	mv	a5,s11
			if (zero.trail) {
1c0130e4:	c415                	beqz	s0,1c013110 <_prf+0x41a>
				c = *cptr;
1c0130e6:	0007c503          	lbu	a0,0(a5)
				while (isdigit(c) || c == '.') {
1c0130ea:	8dbe                	mv	s11,a5
1c0130ec:	973e                	add	a4,a4,a5
1c0130ee:	4625                	li	a2,9
1c0130f0:	02e00693          	li	a3,46
1c0130f4:	fd050593          	addi	a1,a0,-48
1c0130f8:	41b70ab3          	sub	s5,a4,s11
1c0130fc:	62b67163          	bleu	a1,a2,1c01371e <_prf+0xa28>
1c013100:	60d50f63          	beq	a0,a3,1c01371e <_prf+0xa28>
1c013104:	8722                	mv	a4,s0
				while (zero.trail-- > 0) {
1c013106:	62e04a63          	bgtz	a4,1c01373a <_prf+0xa44>
				clen -= zero.trail;
1c01310a:	408a8733          	sub	a4,s5,s0
1c01310e:	87ee                	mv	a5,s11
1c013110:	843e                	mv	s0,a5
1c013112:	00e78ab3          	add	s5,a5,a4
1c013116:	a599                	j	1c01375c <_prf+0xa66>
					val = va_arg(vargs, int);
1c013118:	00092583          	lw	a1,0(s2)
1c01311c:	00490a13          	addi	s4,s2,4
1c013120:	41f5da93          	srai	s5,a1,0x1f
					break;
1c013124:	bd41                	j	1c012fb4 <_prf+0x2be>
	} else if (fplus) {
1c013126:	47b2                	lw	a5,12(sp)
1c013128:	c799                	beqz	a5,1c013136 <_prf+0x440>
		*buf++ = '+';
1c01312a:	02b00793          	li	a5,43
		*buf++ = ' ';
1c01312e:	04f10223          	sb	a5,68(sp)
1c013132:	8656                	mv	a2,s5
1c013134:	bd79                	j	1c012fd2 <_prf+0x2dc>
	} else if (fspace) {
1c013136:	4742                	lw	a4,16(sp)
1c013138:	c701                	beqz	a4,1c013140 <_prf+0x44a>
		*buf++ = ' ';
1c01313a:	02000793          	li	a5,32
1c01313e:	bfc5                	j	1c01312e <_prf+0x438>
	} else if (fspace) {
1c013140:	8656                	mv	a2,s5
1c013142:	896e                	mv	s2,s11
1c013144:	bd49                	j	1c012fd6 <_prf+0x2e0>
				u.d = va_arg(vargs, double);
1c013146:	091d                	addi	s2,s2,7
1c013148:	c4093933          	p.bclr	s2,s2,2,0
				double_val = u.i;
1c01314c:	00092583          	lw	a1,0(s2)
1c013150:	00492683          	lw	a3,4(s2)
	fract = (double_temp << 11) & ~HIGHBIT64;
1c013154:	800007b7          	lui	a5,0x80000
1c013158:	0155d613          	srli	a2,a1,0x15
1c01315c:	00b69713          	slli	a4,a3,0xb
1c013160:	8f51                	or	a4,a4,a2
1c013162:	fff7c793          	not	a5,a5
1c013166:	05ae                	slli	a1,a1,0xb
1c013168:	8f7d                	and	a4,a4,a5
				u.d = va_arg(vargs, double);
1c01316a:	00890a13          	addi	s4,s2,8
	fract = (double_temp << 11) & ~HIGHBIT64;
1c01316e:	d82e                	sw	a1,48(sp)
	exp = double_temp >> 52 & 0x7ff;
1c013170:	0146d913          	srli	s2,a3,0x14
	fract = (double_temp << 11) & ~HIGHBIT64;
1c013174:	da3a                	sw	a4,52(sp)
	exp = double_temp >> 52 & 0x7ff;
1c013176:	e8b93933          	p.bclr	s2,s2,20,11
	if (sign) {
1c01317a:	0806d863          	bgez	a3,1c01320a <_prf+0x514>
		*buf++ = '-';
1c01317e:	02d00693          	li	a3,45
		*buf++ = ' ';
1c013182:	04d10223          	sb	a3,68(sp)
1c013186:	04510493          	addi	s1,sp,69
	if (exp == 0x7ff) {
1c01318a:	7ff00693          	li	a3,2047
1c01318e:	0cd91363          	bne	s2,a3,1c013254 <_prf+0x55e>
		if (!fract) {
1c013192:	8f4d                	or	a4,a4,a1
1c013194:	fbfd8793          	addi	a5,s11,-65
1c013198:	00348513          	addi	a0,s1,3
1c01319c:	eb49                	bnez	a4,1c01322e <_prf+0x538>
			if (isupper(c)) {
1c01319e:	4765                	li	a4,25
1c0131a0:	06f76f63          	bltu	a4,a5,1c01321e <_prf+0x528>
				*buf++ = 'I';
1c0131a4:	6795                	lui	a5,0x5
1c0131a6:	e4978793          	addi	a5,a5,-439 # 4e49 <__rt_stack_size+0x4649>
1c0131aa:	00f49023          	sh	a5,0(s1)
				*buf++ = 'N';
1c0131ae:	04600793          	li	a5,70
		return buf - start;
1c0131b2:	04410913          	addi	s2,sp,68
				*buf++ = 'a';
1c0131b6:	00f48123          	sb	a5,2(s1)
		*buf = 0;
1c0131ba:	000481a3          	sb	zero,3(s1)
		return buf - start;
1c0131be:	41250533          	sub	a0,a0,s2
			zero.predot = zero.postdot = zero.trail = 0;
1c0131c2:	4401                	li	s0,0
1c0131c4:	4a81                	li	s5,0
1c0131c6:	4681                	li	a3,0
				if (fplus || fspace || (buf[0] == '-')) {
1c0131c8:	4732                	lw	a4,12(sp)
					prefix = 1;
1c0131ca:	4905                	li	s2,1
				if (fplus || fspace || (buf[0] == '-')) {
1c0131cc:	eb09                	bnez	a4,1c0131de <_prf+0x4e8>
1c0131ce:	47c2                	lw	a5,16(sp)
1c0131d0:	e799                	bnez	a5,1c0131de <_prf+0x4e8>
1c0131d2:	04414903          	lbu	s2,68(sp)
1c0131d6:	fd390913          	addi	s2,s2,-45
1c0131da:	00193913          	seqz	s2,s2
				if (!isdigit(buf[prefix])) {
1c0131de:	1098                	addi	a4,sp,96
1c0131e0:	012707b3          	add	a5,a4,s2
1c0131e4:	fe47c783          	lbu	a5,-28(a5)
				clen += zero.predot + zero.postdot + zero.trail;
1c0131e8:	015684b3          	add	s1,a3,s5
1c0131ec:	94a2                	add	s1,s1,s0
1c0131ee:	fd078793          	addi	a5,a5,-48
				if (!isdigit(buf[prefix])) {
1c0131f2:	4625                	li	a2,9
				clen += zero.predot + zero.postdot + zero.trail;
1c0131f4:	00a48db3          	add	s11,s1,a0
				if (!isdigit(buf[prefix])) {
1c0131f8:	46f66e63          	bltu	a2,a5,1c013674 <_prf+0x97e>
			} else if (fzero) {
1c0131fc:	47f2                	lw	a5,28(sp)
1c0131fe:	46078b63          	beqz	a5,1c013674 <_prf+0x97e>
				zero_head = width - clen;
1c013202:	41bc8d33          	sub	s10,s9,s11
1c013206:	00dc                	addi	a5,sp,68
1c013208:	bd81                	j	1c013058 <_prf+0x362>
	} else if (fplus) {
1c01320a:	47b2                	lw	a5,12(sp)
		*buf++ = '+';
1c01320c:	02b00693          	li	a3,43
	} else if (fplus) {
1c013210:	fbad                	bnez	a5,1c013182 <_prf+0x48c>
	} else if (fspace) {
1c013212:	47c2                	lw	a5,16(sp)
1c013214:	00c4                	addi	s1,sp,68
1c013216:	dbb5                	beqz	a5,1c01318a <_prf+0x494>
		*buf++ = ' ';
1c013218:	02000693          	li	a3,32
1c01321c:	b79d                	j	1c013182 <_prf+0x48c>
				*buf++ = 'i';
1c01321e:	679d                	lui	a5,0x7
1c013220:	e6978793          	addi	a5,a5,-407 # 6e69 <__rt_stack_size+0x6669>
1c013224:	00f49023          	sh	a5,0(s1)
				*buf++ = 'n';
1c013228:	06600793          	li	a5,102
1c01322c:	b759                	j	1c0131b2 <_prf+0x4bc>
			if (isupper(c)) {
1c01322e:	4765                	li	a4,25
1c013230:	00f76a63          	bltu	a4,a5,1c013244 <_prf+0x54e>
				*buf++ = 'N';
1c013234:	6791                	lui	a5,0x4
1c013236:	14e78793          	addi	a5,a5,334 # 414e <__rt_stack_size+0x394e>
1c01323a:	00f49023          	sh	a5,0(s1)
				*buf++ = 'A';
1c01323e:	04e00793          	li	a5,78
1c013242:	bf85                	j	1c0131b2 <_prf+0x4bc>
				*buf++ = 'n';
1c013244:	6799                	lui	a5,0x6
1c013246:	16e78793          	addi	a5,a5,366 # 616e <__rt_stack_size+0x596e>
1c01324a:	00f49023          	sh	a5,0(s1)
				*buf++ = 'a';
1c01324e:	06e00793          	li	a5,110
1c013252:	b785                	j	1c0131b2 <_prf+0x4bc>
	if (c == 'F') {
1c013254:	04600693          	li	a3,70
1c013258:	00dd9463          	bne	s11,a3,1c013260 <_prf+0x56a>
		c = 'f';
1c01325c:	06600d93          	li	s11,102
	if ((exp | fract) != 0) {
1c013260:	41f95613          	srai	a2,s2,0x1f
1c013264:	00b966b3          	or	a3,s2,a1
1c013268:	8e59                	or	a2,a2,a4
1c01326a:	8ed1                	or	a3,a3,a2
1c01326c:	1c068263          	beqz	a3,1c013430 <_prf+0x73a>
		if (exp == 0) {
1c013270:	10090d63          	beqz	s2,1c01338a <_prf+0x694>
		fract |= HIGHBIT64;
1c013274:	5752                	lw	a4,52(sp)
1c013276:	800007b7          	lui	a5,0x80000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
1c01327a:	c0290913          	addi	s2,s2,-1022
		fract |= HIGHBIT64;
1c01327e:	8f5d                	or	a4,a4,a5
1c013280:	da3a                	sw	a4,52(sp)
1c013282:	4d01                	li	s10,0
	while (exp <= -3) {
1c013284:	5779                	li	a4,-2
1c013286:	10e94f63          	blt	s2,a4,1c0133a4 <_prf+0x6ae>
	while (exp > 0) {
1c01328a:	17204663          	bgtz	s2,1c0133f6 <_prf+0x700>
		_rlrshift(&fract);
1c01328e:	1808                	addi	a0,sp,48
		exp++;
1c013290:	0905                	addi	s2,s2,1
		_rlrshift(&fract);
1c013292:	9cdff0ef          	jal	ra,1c012c5e <_rlrshift>
	while (exp < (0 + 4)) {
1c013296:	fe493ce3          	p.bneimm	s2,4,1c01328e <_prf+0x598>
	if (precision < 0) {
1c01329a:	00045363          	bgez	s0,1c0132a0 <_prf+0x5aa>
		precision = 6;		/* Default precision if none given */
1c01329e:	4419                	li	s0,6
	if ((c == 'g') || (c == 'G')) {
1c0132a0:	0dfdf713          	andi	a4,s11,223
1c0132a4:	04700693          	li	a3,71
	prune_zero = false;		/* Assume trailing 0's allowed     */
1c0132a8:	ca02                	sw	zero,20(sp)
	if ((c == 'g') || (c == 'G')) {
1c0132aa:	02d71563          	bne	a4,a3,1c0132d4 <_prf+0x5de>
		if (decexp < (-4 + 1) || decexp > precision) {
1c0132ae:	5775                	li	a4,-3
1c0132b0:	00ed4463          	blt	s10,a4,1c0132b8 <_prf+0x5c2>
1c0132b4:	19a45163          	ble	s10,s0,1c013436 <_prf+0x740>
			c += 'e' - 'g';
1c0132b8:	ffed8793          	addi	a5,s11,-2
1c0132bc:	0ff7fd93          	andi	s11,a5,255
			if (precision > 0) {
1c0132c0:	4c040e63          	beqz	s0,1c01379c <_prf+0xaa6>
				precision--;
1c0132c4:	147d                	addi	s0,s0,-1
		if (!falt && (precision > 0)) {
1c0132c6:	4c0a9b63          	bnez	s5,1c01379c <_prf+0xaa6>
1c0132ca:	00802933          	sgtz	s2,s0
1c0132ce:	0ff97913          	andi	s2,s2,255
1c0132d2:	ca4a                	sw	s2,20(sp)
	if (c == 'f') {
1c0132d4:	06600713          	li	a4,102
1c0132d8:	4ced9363          	bne	s11,a4,1c01379e <_prf+0xaa8>
		exp = precision + decexp;
1c0132dc:	008d0733          	add	a4,s10,s0
		if (exp < 0) {
1c0132e0:	06600d93          	li	s11,102
1c0132e4:	4a075f63          	bgez	a4,1c0137a2 <_prf+0xaac>
	digit_count = 16;
1c0132e8:	4741                	li	a4,16
1c0132ea:	d63a                	sw	a4,44(sp)
			exp = 0;
1c0132ec:	4901                	li	s2,0
	ltemp = 0x0800000000000000;
1c0132ee:	4601                	li	a2,0
1c0132f0:	080006b7          	lui	a3,0x8000
1c0132f4:	dc32                	sw	a2,56(sp)
1c0132f6:	de36                	sw	a3,60(sp)
	while (exp--) {
1c0132f8:	197d                	addi	s2,s2,-1
1c0132fa:	15f93563          	p.bneimm	s2,-1,1c013444 <_prf+0x74e>
	fract += ltemp;
1c0132fe:	5742                	lw	a4,48(sp)
1c013300:	56e2                	lw	a3,56(sp)
1c013302:	5652                	lw	a2,52(sp)
1c013304:	55f2                	lw	a1,60(sp)
1c013306:	96ba                	add	a3,a3,a4
1c013308:	00e6b733          	sltu	a4,a3,a4
1c01330c:	962e                	add	a2,a2,a1
1c01330e:	9732                	add	a4,a4,a2
1c013310:	da3a                	sw	a4,52(sp)
1c013312:	d836                	sw	a3,48(sp)
	if ((fract >> 32) & 0xF0000000) {
1c013314:	f6073733          	p.bclr	a4,a4,27,0
1c013318:	cb01                	beqz	a4,1c013328 <_prf+0x632>
		_ldiv5(&fract);
1c01331a:	1808                	addi	a0,sp,48
1c01331c:	963ff0ef          	jal	ra,1c012c7e <_ldiv5>
		_rlrshift(&fract);
1c013320:	1808                	addi	a0,sp,48
1c013322:	93dff0ef          	jal	ra,1c012c5e <_rlrshift>
		decexp++;
1c013326:	0d05                	addi	s10,s10,1
	if (c == 'f') {
1c013328:	06600713          	li	a4,102
1c01332c:	16ed9163          	bne	s11,a4,1c01348e <_prf+0x798>
		if (decexp > 0) {
1c013330:	8926                	mv	s2,s1
1c013332:	13a04963          	bgtz	s10,1c013464 <_prf+0x76e>
			*buf++ = '0';
1c013336:	03000713          	li	a4,48
1c01333a:	00e48023          	sb	a4,0(s1)
1c01333e:	00148913          	addi	s2,s1,1
			zero.predot = zero.postdot = zero.trail = 0;
1c013342:	4681                	li	a3,0
		if (falt || (precision > 0)) {
1c013344:	120a8763          	beqz	s5,1c013472 <_prf+0x77c>
			*buf++ = '.';
1c013348:	02e00593          	li	a1,46
1c01334c:	00b90023          	sb	a1,0(s2)
1c013350:	00190713          	addi	a4,s2,1
		if (decexp < 0 && precision > 0) {
1c013354:	440d0263          	beqz	s10,1c013798 <_prf+0xaa2>
1c013358:	12805863          	blez	s0,1c013488 <_prf+0x792>
			zp->postdot = -decexp;
1c01335c:	41a00ab3          	neg	s5,s10
1c013360:	048acab3          	p.min	s5,s5,s0
			precision -= zp->postdot;
1c013364:	41540433          	sub	s0,s0,s5
			zero.predot = zero.postdot = zero.trail = 0;
1c013368:	893a                	mv	s2,a4
		while (precision > 0 && digit_count > 0) {
1c01336a:	10805763          	blez	s0,1c013478 <_prf+0x782>
1c01336e:	5732                	lw	a4,44(sp)
1c013370:	10e05463          	blez	a4,1c013478 <_prf+0x782>
			*buf++ = _get_digit(&fract, &digit_count);
1c013374:	106c                	addi	a1,sp,44
1c013376:	1808                	addi	a0,sp,48
1c013378:	c036                	sw	a3,0(sp)
1c01337a:	949ff0ef          	jal	ra,1c012cc2 <_get_digit>
1c01337e:	00a900ab          	p.sb	a0,1(s2!)
			precision--;
1c013382:	147d                	addi	s0,s0,-1
1c013384:	4682                	lw	a3,0(sp)
1c013386:	b7d5                	j	1c01336a <_prf+0x674>
				exp--;
1c013388:	197d                	addi	s2,s2,-1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
1c01338a:	01f5d693          	srli	a3,a1,0x1f
1c01338e:	0706                	slli	a4,a4,0x1
1c013390:	8f55                	or	a4,a4,a3
1c013392:	0586                	slli	a1,a1,0x1
1c013394:	fe075ae3          	bgez	a4,1c013388 <_prf+0x692>
1c013398:	d82e                	sw	a1,48(sp)
1c01339a:	da3a                	sw	a4,52(sp)
1c01339c:	bde1                	j	1c013274 <_prf+0x57e>
			_rlrshift(&fract);
1c01339e:	1808                	addi	a0,sp,48
1c0133a0:	8bfff0ef          	jal	ra,1c012c5e <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
1c0133a4:	55d2                	lw	a1,52(sp)
1c0133a6:	33333737          	lui	a4,0x33333
1c0133aa:	33270713          	addi	a4,a4,818 # 33333332 <__l2_end+0x1731e28a>
1c0133ae:	5642                	lw	a2,48(sp)
1c0133b0:	0905                	addi	s2,s2,1
1c0133b2:	feb766e3          	bltu	a4,a1,1c01339e <_prf+0x6a8>
		fract *= 5U;
1c0133b6:	4695                	li	a3,5
1c0133b8:	02c6b733          	mulhu	a4,a3,a2
		decexp--;
1c0133bc:	1d7d                	addi	s10,s10,-1
		fract *= 5U;
1c0133be:	02c68633          	mul	a2,a3,a2
1c0133c2:	42b68733          	p.mac	a4,a3,a1
1c0133c6:	d832                	sw	a2,48(sp)
		decexp--;
1c0133c8:	4681                	li	a3,0
		fract *= 5U;
1c0133ca:	da3a                	sw	a4,52(sp)
		while ((fract >> 32) <= (MAXFP1 / 2)) {
1c0133cc:	800007b7          	lui	a5,0x80000
1c0133d0:	fff7c793          	not	a5,a5
1c0133d4:	00e7f763          	bleu	a4,a5,1c0133e2 <_prf+0x6ec>
1c0133d8:	ea0686e3          	beqz	a3,1c013284 <_prf+0x58e>
1c0133dc:	d832                	sw	a2,48(sp)
1c0133de:	da3a                	sw	a4,52(sp)
1c0133e0:	b555                	j	1c013284 <_prf+0x58e>
			fract <<= 1;
1c0133e2:	01f65593          	srli	a1,a2,0x1f
1c0133e6:	00171693          	slli	a3,a4,0x1
1c0133ea:	00d5e733          	or	a4,a1,a3
1c0133ee:	0606                	slli	a2,a2,0x1
			exp--;
1c0133f0:	197d                	addi	s2,s2,-1
1c0133f2:	4685                	li	a3,1
1c0133f4:	bfe1                	j	1c0133cc <_prf+0x6d6>
		_ldiv5(&fract);
1c0133f6:	1808                	addi	a0,sp,48
1c0133f8:	887ff0ef          	jal	ra,1c012c7e <_ldiv5>
1c0133fc:	5642                	lw	a2,48(sp)
1c0133fe:	5752                	lw	a4,52(sp)
		exp--;
1c013400:	197d                	addi	s2,s2,-1
		decexp++;
1c013402:	0d05                	addi	s10,s10,1
1c013404:	4681                	li	a3,0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
1c013406:	800007b7          	lui	a5,0x80000
1c01340a:	fff7c793          	not	a5,a5
1c01340e:	00e7f763          	bleu	a4,a5,1c01341c <_prf+0x726>
1c013412:	e6068ce3          	beqz	a3,1c01328a <_prf+0x594>
1c013416:	d832                	sw	a2,48(sp)
1c013418:	da3a                	sw	a4,52(sp)
1c01341a:	bd85                	j	1c01328a <_prf+0x594>
			fract <<= 1;
1c01341c:	01f65593          	srli	a1,a2,0x1f
1c013420:	00171693          	slli	a3,a4,0x1
1c013424:	00d5e733          	or	a4,a1,a3
1c013428:	0606                	slli	a2,a2,0x1
			exp--;
1c01342a:	197d                	addi	s2,s2,-1
1c01342c:	4685                	li	a3,1
1c01342e:	bfe1                	j	1c013406 <_prf+0x710>
	if ((exp | fract) != 0) {
1c013430:	4d01                	li	s10,0
1c013432:	4901                	li	s2,0
1c013434:	bda9                	j	1c01328e <_prf+0x598>
			precision -= decexp;
1c013436:	41a40433          	sub	s0,s0,s10
		if (!falt && (precision > 0)) {
1c01343a:	ea0a91e3          	bnez	s5,1c0132dc <_prf+0x5e6>
			c = 'f';
1c01343e:	06600d93          	li	s11,102
1c013442:	b561                	j	1c0132ca <_prf+0x5d4>
		_ldiv5(&ltemp);
1c013444:	1828                	addi	a0,sp,56
1c013446:	839ff0ef          	jal	ra,1c012c7e <_ldiv5>
		_rlrshift(&ltemp);
1c01344a:	1828                	addi	a0,sp,56
1c01344c:	813ff0ef          	jal	ra,1c012c5e <_rlrshift>
1c013450:	b565                	j	1c0132f8 <_prf+0x602>
				*buf++ = _get_digit(&fract, &digit_count);
1c013452:	106c                	addi	a1,sp,44
1c013454:	1808                	addi	a0,sp,48
1c013456:	86dff0ef          	jal	ra,1c012cc2 <_get_digit>
1c01345a:	00a900ab          	p.sb	a0,1(s2!)
				decexp--;
1c01345e:	1d7d                	addi	s10,s10,-1
			while (decexp > 0 && digit_count > 0) {
1c013460:	000d0563          	beqz	s10,1c01346a <_prf+0x774>
1c013464:	5732                	lw	a4,44(sp)
1c013466:	fee046e3          	bgtz	a4,1c013452 <_prf+0x75c>
		if (falt || (precision > 0)) {
1c01346a:	300a9f63          	bnez	s5,1c013788 <_prf+0xa92>
			zp->predot = decexp;
1c01346e:	86ea                	mv	a3,s10
			decexp = 0;
1c013470:	4d01                	li	s10,0
			zero.predot = zero.postdot = zero.trail = 0;
1c013472:	4a81                	li	s5,0
		if (falt || (precision > 0)) {
1c013474:	ec804ae3          	bgtz	s0,1c013348 <_prf+0x652>
	if (prune_zero) {
1c013478:	4752                	lw	a4,20(sp)
1c01347a:	eb31                	bnez	a4,1c0134ce <_prf+0x7d8>
	return buf - start;
1c01347c:	00c8                	addi	a0,sp,68
	*buf = 0;
1c01347e:	00090023          	sb	zero,0(s2)
	return buf - start;
1c013482:	40a90533          	sub	a0,s2,a0
1c013486:	b389                	j	1c0131c8 <_prf+0x4d2>
			*buf++ = '.';
1c013488:	893a                	mv	s2,a4
			zero.predot = zero.postdot = zero.trail = 0;
1c01348a:	4a81                	li	s5,0
1c01348c:	b7f5                	j	1c013478 <_prf+0x782>
		*buf = _get_digit(&fract, &digit_count);
1c01348e:	106c                	addi	a1,sp,44
1c013490:	1808                	addi	a0,sp,48
1c013492:	831ff0ef          	jal	ra,1c012cc2 <_get_digit>
1c013496:	00a48023          	sb	a0,0(s1)
		if (*buf++ != '0') {
1c01349a:	03000713          	li	a4,48
1c01349e:	00e50363          	beq	a0,a4,1c0134a4 <_prf+0x7ae>
			decexp--;
1c0134a2:	1d7d                	addi	s10,s10,-1
		if (falt || (precision > 0)) {
1c0134a4:	000a9663          	bnez	s5,1c0134b0 <_prf+0x7ba>
		if (*buf++ != '0') {
1c0134a8:	00148913          	addi	s2,s1,1
		if (falt || (precision > 0)) {
1c0134ac:	00805d63          	blez	s0,1c0134c6 <_prf+0x7d0>
			*buf++ = '.';
1c0134b0:	02e00713          	li	a4,46
1c0134b4:	00248913          	addi	s2,s1,2
1c0134b8:	00e480a3          	sb	a4,1(s1)
		while (precision > 0 && digit_count > 0) {
1c0134bc:	00805563          	blez	s0,1c0134c6 <_prf+0x7d0>
1c0134c0:	5732                	lw	a4,44(sp)
1c0134c2:	08e04663          	bgtz	a4,1c01354e <_prf+0x858>
	if (prune_zero) {
1c0134c6:	47d2                	lw	a5,20(sp)
			zero.predot = zero.postdot = zero.trail = 0;
1c0134c8:	4a81                	li	s5,0
1c0134ca:	4681                	li	a3,0
	if (prune_zero) {
1c0134cc:	cf99                	beqz	a5,1c0134ea <_prf+0x7f4>
		while (*--buf == '0')
1c0134ce:	03000513          	li	a0,48
1c0134d2:	fff90713          	addi	a4,s2,-1
1c0134d6:	00074583          	lbu	a1,0(a4)
1c0134da:	08a58263          	beq	a1,a0,1c01355e <_prf+0x868>
		if (*buf != '.') {
1c0134de:	02e00513          	li	a0,46
		zp->trail = 0;
1c0134e2:	4401                	li	s0,0
		if (*buf != '.') {
1c0134e4:	00a59363          	bne	a1,a0,1c0134ea <_prf+0x7f4>
		while (*--buf == '0')
1c0134e8:	893a                	mv	s2,a4
	if ((c == 'e') || (c == 'E')) {
1c0134ea:	0dfdf713          	andi	a4,s11,223
1c0134ee:	04500593          	li	a1,69
1c0134f2:	f8b715e3          	bne	a4,a1,1c01347c <_prf+0x786>
		*buf++ = c;
1c0134f6:	85ca                	mv	a1,s2
1c0134f8:	01b5812b          	p.sb	s11,2(a1!)
			*buf++ = '+';
1c0134fc:	02b00793          	li	a5,43
		if (decexp < 0) {
1c013500:	000d5663          	bgez	s10,1c01350c <_prf+0x816>
			decexp = -decexp;
1c013504:	41a00d33          	neg	s10,s10
			*buf++ = '-';
1c013508:	02d00793          	li	a5,45
			*buf++ = '+';
1c01350c:	00f900a3          	sb	a5,1(s2)
		if (decexp >= 100) {
1c013510:	06300793          	li	a5,99
1c013514:	01a7de63          	ble	s10,a5,1c013530 <_prf+0x83a>
			*buf++ = (decexp / 100) + '0';
1c013518:	06400713          	li	a4,100
1c01351c:	02ed47b3          	div	a5,s10,a4
1c013520:	00390593          	addi	a1,s2,3
			decexp %= 100;
1c013524:	02ed6d33          	rem	s10,s10,a4
			*buf++ = (decexp / 100) + '0';
1c013528:	03078793          	addi	a5,a5,48 # 80000030 <pulp__FC+0x80000031>
1c01352c:	00f90123          	sb	a5,2(s2)
		*buf++ = (decexp / 10) + '0';
1c013530:	47a9                	li	a5,10
1c013532:	892e                	mv	s2,a1
1c013534:	02fd4733          	div	a4,s10,a5
		decexp %= 10;
1c013538:	02fd68b3          	rem	a7,s10,a5
		*buf++ = (decexp / 10) + '0';
1c01353c:	03070713          	addi	a4,a4,48
1c013540:	00e9012b          	p.sb	a4,2(s2!)
		*buf++ = decexp + '0';
1c013544:	03088893          	addi	a7,a7,48
1c013548:	011580a3          	sb	a7,1(a1)
1c01354c:	bf05                	j	1c01347c <_prf+0x786>
			*buf++ = _get_digit(&fract, &digit_count);
1c01354e:	106c                	addi	a1,sp,44
1c013550:	1808                	addi	a0,sp,48
1c013552:	f70ff0ef          	jal	ra,1c012cc2 <_get_digit>
1c013556:	00a900ab          	p.sb	a0,1(s2!)
			precision--;
1c01355a:	147d                	addi	s0,s0,-1
1c01355c:	b785                	j	1c0134bc <_prf+0x7c6>
		while (*--buf == '0')
1c01355e:	893a                	mv	s2,a4
1c013560:	bf8d                	j	1c0134d2 <_prf+0x7dc>
1c013562:	8a4a                	mv	s4,s2
				switch (i) {
1c013564:	04c00693          	li	a3,76
1c013568:	004a278b          	p.lw	a5,4(s4!)
1c01356c:	02d48a63          	beq	s1,a3,1c0135a0 <_prf+0x8aa>
1c013570:	0096c963          	blt	a3,s1,1c013582 <_prf+0x88c>
1c013574:	04800693          	li	a3,72
1c013578:	02d48063          	beq	s1,a3,1c013598 <_prf+0x8a2>
					*va_arg(vargs, int *) = count;
1c01357c:	0137a023          	sw	s3,0(a5)
					break;
1c013580:	a801                	j	1c013590 <_prf+0x89a>
				switch (i) {
1c013582:	06800693          	li	a3,104
1c013586:	fed49be3          	bne	s1,a3,1c01357c <_prf+0x886>
					*va_arg(vargs, short *) = count;
1c01358a:	874e                	mv	a4,s3
1c01358c:	00e79023          	sh	a4,0(a5)
				continue;
1c013590:	8952                	mv	s2,s4
1c013592:	8662                	mv	a2,s8
1c013594:	f86ff06f          	j	1c012d1a <_prf+0x24>
					*va_arg(vargs, char *) = count;
1c013598:	874e                	mv	a4,s3
1c01359a:	00e78023          	sb	a4,0(a5)
					break;
1c01359e:	bfcd                	j	1c013590 <_prf+0x89a>
					*va_arg(vargs, long long *) = count;
1c0135a0:	41f9d713          	srai	a4,s3,0x1f
1c0135a4:	0137a023          	sw	s3,0(a5)
1c0135a8:	c3d8                	sw	a4,4(a5)
					break;
1c0135aa:	b7dd                	j	1c013590 <_prf+0x89a>
				clen = _to_hex(buf, val, true, 'x');
1c0135ac:	00092583          	lw	a1,0(s2)
		*buf++ = '0';
1c0135b0:	77e1                	lui	a5,0xffff8
1c0135b2:	8307c793          	xori	a5,a5,-2000
	len = _to_x(buf, value, 16);
1c0135b6:	46c1                	li	a3,16
1c0135b8:	4601                	li	a2,0
1c0135ba:	04610513          	addi	a0,sp,70
		*buf++ = '0';
1c0135be:	04f11223          	sh	a5,68(sp)
	len = _to_x(buf, value, 16);
1c0135c2:	e0aff0ef          	jal	ra,1c012bcc <_to_x>
				val = (uintptr_t) va_arg(vargs, void *);
1c0135c6:	00490a13          	addi	s4,s2,4
	return len + (buf - buf0);
1c0135ca:	00250d93          	addi	s11,a0,2
				prefix = 2;
1c0135ce:	4909                	li	s2,2
				break;
1c0135d0:	b40d                	j	1c012ff2 <_prf+0x2fc>
					if (cptr[clen] == '\0') {
1c0135d2:	0016c60b          	p.lbu	a2,1(a3!) # 8000001 <__L2+0x7f80001>
1c0135d6:	a4060ee3          	beqz	a2,1c013032 <_prf+0x33c>
				for (clen = 0; clen < precision; clen++) {
1c0135da:	0d85                	addi	s11,s11,1
1c0135dc:	bc89                	j	1c01302e <_prf+0x338>
					val = va_arg(vargs, unsigned int);
1c0135de:	00490a13          	addi	s4,s2,4
1c0135e2:	00092583          	lw	a1,0(s2)
1c0135e6:	4601                	li	a2,0
					break;
1c0135e8:	ba99                	j	1c012f3e <_prf+0x248>
	if (alt_form) {
1c0135ea:	8526                	mv	a0,s1
	return (buf - buf0) + _to_x(buf, value, 8);
1c0135ec:	46a1                	li	a3,8
1c0135ee:	409504b3          	sub	s1,a0,s1
1c0135f2:	ddaff0ef          	jal	ra,1c012bcc <_to_x>
1c0135f6:	00a48db3          	add	s11,s1,a0
			prefix = 0;
1c0135fa:	4901                	li	s2,0
1c0135fc:	badd                	j	1c012ff2 <_prf+0x2fc>
				} else if (c == 'u') {
1c0135fe:	07500713          	li	a4,117
1c013602:	00ed9863          	bne	s11,a4,1c013612 <_prf+0x91c>
	return _to_x(buf, value, 10);
1c013606:	46a9                	li	a3,10
1c013608:	8526                	mv	a0,s1
1c01360a:	dc2ff0ef          	jal	ra,1c012bcc <_to_x>
1c01360e:	8daa                	mv	s11,a0
1c013610:	b7ed                	j	1c0135fa <_prf+0x904>
	if (alt_form) {
1c013612:	8d26                	mv	s10,s1
1c013614:	000a8963          	beqz	s5,1c013626 <_prf+0x930>
		*buf++ = '0';
1c013618:	7761                	lui	a4,0xffff8
1c01361a:	83074713          	xori	a4,a4,-2000
1c01361e:	04e11223          	sh	a4,68(sp)
		*buf++ = 'x';
1c013622:	04610d13          	addi	s10,sp,70
	len = _to_x(buf, value, 16);
1c013626:	46c1                	li	a3,16
1c013628:	856a                	mv	a0,s10
1c01362a:	da2ff0ef          	jal	ra,1c012bcc <_to_x>
	if (prefix == 'X') {
1c01362e:	05800713          	li	a4,88
1c013632:	02ed9263          	bne	s11,a4,1c013656 <_prf+0x960>
1c013636:	87a6                	mv	a5,s1
		if (*buf >= 'a' && *buf <= 'z') {
1c013638:	45e5                	li	a1,25
1c01363a:	0017c68b          	p.lbu	a3,1(a5!) # ffff8001 <pulp__FC+0xffff8002>
1c01363e:	f9f68613          	addi	a2,a3,-97
1c013642:	0ff67613          	andi	a2,a2,255
1c013646:	00c5e563          	bltu	a1,a2,1c013650 <_prf+0x95a>
			*buf += 'A' - 'a';
1c01364a:	1681                	addi	a3,a3,-32
1c01364c:	fed78fa3          	sb	a3,-1(a5)
	} while (*buf++);
1c013650:	fff7c703          	lbu	a4,-1(a5)
1c013654:	f37d                	bnez	a4,1c01363a <_prf+0x944>
	return len + (buf - buf0);
1c013656:	409d0733          	sub	a4,s10,s1
1c01365a:	00a70db3          	add	s11,a4,a0
			prefix = 0;
1c01365e:	001a9913          	slli	s2,s5,0x1
1c013662:	ba41                	j	1c012ff2 <_prf+0x2fc>
				PUTC('%');
1c013664:	85de                	mv	a1,s7
1c013666:	02500513          	li	a0,37
1c01366a:	ec4ff06f          	j	1c012d2e <_prf+0x38>
				count++;
1c01366e:	0985                	addi	s3,s3,1
				continue;
1c013670:	8a4a                	mv	s4,s2
1c013672:	bf39                	j	1c013590 <_prf+0x89a>
1c013674:	00dc                	addi	a5,sp,68
				zero_head = 0;
1c013676:	4d01                	li	s10,0
1c013678:	b2d5                	j	1c01305c <_prf+0x366>
					PUTC(' ');
1c01367a:	85de                	mv	a1,s7
1c01367c:	02000513          	li	a0,32
1c013680:	c036                	sw	a3,0(sp)
1c013682:	c43e                	sw	a5,8(sp)
1c013684:	9b02                	jalr	s6
1c013686:	4682                	lw	a3,0(sp)
1c013688:	47a2                	lw	a5,8(sp)
1c01368a:	ebf52563          	p.beqimm	a0,-1,1c012d34 <_prf+0x3e>
				while (width-- > 0) {
1c01368e:	14fd                	addi	s1,s1,-1
1c013690:	fff4b5e3          	p.bneimm	s1,-1,1c01367a <_prf+0x984>
				count += width;
1c013694:	99e6                	add	s3,s3,s9
				while (width-- > 0) {
1c013696:	5cfd                	li	s9,-1
1c013698:	bad9                	j	1c01306e <_prf+0x378>
				PUTC(*cptr++);
1c01369a:	0017c50b          	p.lbu	a0,1(a5!)
1c01369e:	85de                	mv	a1,s7
1c0136a0:	c036                	sw	a3,0(sp)
1c0136a2:	c43e                	sw	a5,8(sp)
1c0136a4:	9b02                	jalr	s6
1c0136a6:	4682                	lw	a3,0(sp)
1c0136a8:	47a2                	lw	a5,8(sp)
1c0136aa:	9df534e3          	p.bneimm	a0,-1,1c013072 <_prf+0x37c>
1c0136ae:	e86ff06f          	j	1c012d34 <_prf+0x3e>
				PUTC('0');
1c0136b2:	85de                	mv	a1,s7
1c0136b4:	03000513          	li	a0,48
1c0136b8:	c036                	sw	a3,0(sp)
1c0136ba:	c43e                	sw	a5,8(sp)
1c0136bc:	9b02                	jalr	s6
1c0136be:	4682                	lw	a3,0(sp)
1c0136c0:	47a2                	lw	a5,8(sp)
1c0136c2:	9bf53be3          	p.bneimm	a0,-1,1c013078 <_prf+0x382>
1c0136c6:	e6eff06f          	j	1c012d34 <_prf+0x3e>
					PUTC(c);
1c0136ca:	85de                	mv	a1,s7
1c0136cc:	c232                	sw	a2,4(sp)
1c0136ce:	c036                	sw	a3,0(sp)
1c0136d0:	c442                	sw	a6,8(sp)
1c0136d2:	9b02                	jalr	s6
1c0136d4:	4612                	lw	a2,4(sp)
1c0136d6:	4682                	lw	a3,0(sp)
1c0136d8:	4822                	lw	a6,8(sp)
1c0136da:	e5f52d63          	p.beqimm	a0,-1,1c012d34 <_prf+0x3e>
					c = *++cptr;
1c0136de:	0d85                	addi	s11,s11,1
1c0136e0:	000dc503          	lbu	a0,0(s11)
1c0136e4:	b27d                	j	1c013092 <_prf+0x39c>
					PUTC('0');
1c0136e6:	85de                	mv	a1,s7
1c0136e8:	03000513          	li	a0,48
1c0136ec:	c232                	sw	a2,4(sp)
1c0136ee:	c036                	sw	a3,0(sp)
1c0136f0:	c43a                	sw	a4,8(sp)
1c0136f2:	9b02                	jalr	s6
1c0136f4:	4612                	lw	a2,4(sp)
1c0136f6:	4682                	lw	a3,0(sp)
1c0136f8:	4722                	lw	a4,8(sp)
1c0136fa:	167d                	addi	a2,a2,-1
1c0136fc:	9bf532e3          	p.bneimm	a0,-1,1c0130a0 <_prf+0x3aa>
1c013700:	e34ff06f          	j	1c012d34 <_prf+0x3e>
					PUTC('0');
1c013704:	85de                	mv	a1,s7
1c013706:	03000513          	li	a0,48
1c01370a:	c036                	sw	a3,0(sp)
1c01370c:	c43a                	sw	a4,8(sp)
1c01370e:	9b02                	jalr	s6
1c013710:	4682                	lw	a3,0(sp)
1c013712:	4722                	lw	a4,8(sp)
1c013714:	16fd                	addi	a3,a3,-1
1c013716:	9df532e3          	p.bneimm	a0,-1,1c0130da <_prf+0x3e4>
1c01371a:	e1aff06f          	j	1c012d34 <_prf+0x3e>
					PUTC(c);
1c01371e:	85de                	mv	a1,s7
1c013720:	c232                	sw	a2,4(sp)
1c013722:	c036                	sw	a3,0(sp)
1c013724:	c43a                	sw	a4,8(sp)
1c013726:	9b02                	jalr	s6
1c013728:	4612                	lw	a2,4(sp)
1c01372a:	4682                	lw	a3,0(sp)
1c01372c:	4722                	lw	a4,8(sp)
1c01372e:	e1f52363          	p.beqimm	a0,-1,1c012d34 <_prf+0x3e>
					c = *++cptr;
1c013732:	0d85                	addi	s11,s11,1
1c013734:	000dc503          	lbu	a0,0(s11)
1c013738:	ba75                	j	1c0130f4 <_prf+0x3fe>
					PUTC('0');
1c01373a:	85de                	mv	a1,s7
1c01373c:	03000513          	li	a0,48
1c013740:	c43a                	sw	a4,8(sp)
1c013742:	9b02                	jalr	s6
1c013744:	4722                	lw	a4,8(sp)
1c013746:	177d                	addi	a4,a4,-1
1c013748:	9bf53fe3          	p.bneimm	a0,-1,1c013106 <_prf+0x410>
1c01374c:	de8ff06f          	j	1c012d34 <_prf+0x3e>
				PUTC(*cptr++);
1c013750:	0014450b          	p.lbu	a0,1(s0!)
1c013754:	85de                	mv	a1,s7
1c013756:	9b02                	jalr	s6
1c013758:	ddf52e63          	p.beqimm	a0,-1,1c012d34 <_prf+0x3e>
1c01375c:	408a87b3          	sub	a5,s5,s0
			while (clen-- > 0) {
1c013760:	fef048e3          	bgtz	a5,1c013750 <_prf+0xa5a>
			count += prefix;
1c013764:	994e                	add	s2,s2,s3
			count += zero_head;
1c013766:	012d09b3          	add	s3,s10,s2
			count += clen;
1c01376a:	99a6                	add	s3,s3,s1
			if (width > 0) {
1c01376c:	e39052e3          	blez	s9,1c013590 <_prf+0x89a>
				count += width;
1c013770:	99e6                	add	s3,s3,s9
				while (width-- > 0) {
1c013772:	1cfd                	addi	s9,s9,-1
1c013774:	e1fcaee3          	p.beqimm	s9,-1,1c013590 <_prf+0x89a>
					PUTC(' ');
1c013778:	85de                	mv	a1,s7
1c01377a:	02000513          	li	a0,32
1c01377e:	9b02                	jalr	s6
1c013780:	fff539e3          	p.bneimm	a0,-1,1c013772 <_prf+0xa7c>
1c013784:	db0ff06f          	j	1c012d34 <_prf+0x3e>
			*buf++ = '.';
1c013788:	02e00693          	li	a3,46
1c01378c:	00d90023          	sb	a3,0(s2)
1c013790:	00190713          	addi	a4,s2,1
			zp->predot = decexp;
1c013794:	86ea                	mv	a3,s10
			decexp = 0;
1c013796:	4d01                	li	s10,0
			zero.predot = zero.postdot = zero.trail = 0;
1c013798:	4a81                	li	s5,0
1c01379a:	b6f9                	j	1c013368 <_prf+0x672>
	prune_zero = false;		/* Assume trailing 0's allowed     */
1c01379c:	ca02                	sw	zero,20(sp)
		exp = precision + 1;
1c01379e:	00140713          	addi	a4,s0,1
	digit_count = 16;
1c0137a2:	46c1                	li	a3,16
1c0137a4:	d636                	sw	a3,44(sp)
1c0137a6:	04d74933          	p.min	s2,a4,a3
1c0137aa:	b691                	j	1c0132ee <_prf+0x5f8>

1c0137ac <sprintf_out>:
	r = _prf_locked(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
	return r;
}
1c0137ac:	41d8                	lw	a4,4(a1)
1c0137ae:	4785                	li	a5,1
1c0137b0:	00e7db63          	ble	a4,a5,1c0137c6 <sprintf_out+0x1a>
1c0137b4:	419c                	lw	a5,0(a1)
1c0137b6:	00a78023          	sb	a0,0(a5)
1c0137ba:	419c                	lw	a5,0(a1)
1c0137bc:	0785                	addi	a5,a5,1
1c0137be:	c19c                	sw	a5,0(a1)
1c0137c0:	41dc                	lw	a5,4(a1)
1c0137c2:	17fd                	addi	a5,a5,-1
1c0137c4:	c1dc                	sw	a5,4(a1)
1c0137c6:	4501                	li	a0,0
1c0137c8:	8082                	ret

1c0137ca <sprintf>:

int sprintf(char *s, const char *format, ...)
{
1c0137ca:	7139                	addi	sp,sp,-64
1c0137cc:	da3e                	sw	a5,52(sp)
	va_list vargs;

	struct emitter p;
	int     r;

	p.ptr = s;
1c0137ce:	c42a                	sw	a0,8(sp)
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
1c0137d0:	800007b7          	lui	a5,0x80000

	va_start(vargs, format);
	r = _prf_locked(sprintf_out, (void *) (&p), format, vargs);
1c0137d4:	1c013537          	lui	a0,0x1c013
{
1c0137d8:	d432                	sw	a2,40(sp)
1c0137da:	d636                	sw	a3,44(sp)
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
1c0137dc:	fff7c793          	not	a5,a5
	va_start(vargs, format);
1c0137e0:	1034                	addi	a3,sp,40
	r = _prf_locked(sprintf_out, (void *) (&p), format, vargs);
1c0137e2:	862e                	mv	a2,a1
1c0137e4:	7ac50513          	addi	a0,a0,1964 # 1c0137ac <sprintf_out>
1c0137e8:	002c                	addi	a1,sp,8
{
1c0137ea:	ce06                	sw	ra,28(sp)
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
1c0137ec:	c63e                	sw	a5,12(sp)
{
1c0137ee:	d83a                	sw	a4,48(sp)
1c0137f0:	dc42                	sw	a6,56(sp)
1c0137f2:	de46                	sw	a7,60(sp)
	va_start(vargs, format);
1c0137f4:	c236                	sw	a3,4(sp)
	r = _prf_locked(sprintf_out, (void *) (&p), format, vargs);
1c0137f6:	a90ff0ef          	jal	ra,1c012a86 <_prf_locked>
	va_end(vargs);

	*(p.ptr) = 0;
1c0137fa:	47a2                	lw	a5,8(sp)
1c0137fc:	00078023          	sb	zero,0(a5) # 80000000 <pulp__FC+0x80000001>
	return r;
}
1c013800:	40f2                	lw	ra,28(sp)
1c013802:	6121                	addi	sp,sp,64
1c013804:	8082                	ret

1c013806 <__rt_uart_cluster_req_done>:
  }

  return __rt_uart_open(channel, conf, event, dev_name);
  
error:
  rt_warning("[UART] Failed to open uart device\n");
1c013806:	300476f3          	csrrci	a3,mstatus,8
1c01380a:	4785                	li	a5,1
1c01380c:	08f50623          	sb	a5,140(a0)
1c013810:	08d54783          	lbu	a5,141(a0)
1c013814:	00201737          	lui	a4,0x201
1c013818:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c01381c:	04078793          	addi	a5,a5,64
1c013820:	07da                	slli	a5,a5,0x16
1c013822:	0007e723          	p.sw	zero,a4(a5)
1c013826:	30069073          	csrw	mstatus,a3
1c01382a:	8082                	ret

1c01382c <__rt_uart_setup.isra.5>:
1c01382c:	1c015737          	lui	a4,0x1c015
1c013830:	04c72703          	lw	a4,76(a4) # 1c01504c <__rt_freq_domains>
1c013834:	00155793          	srli	a5,a0,0x1
1c013838:	97ba                	add	a5,a5,a4
1c01383a:	02a7d7b3          	divu	a5,a5,a0
1c01383e:	1a102737          	lui	a4,0x1a102
1c013842:	17fd                	addi	a5,a5,-1
1c013844:	07c2                	slli	a5,a5,0x10
1c013846:	3067e793          	ori	a5,a5,774
1c01384a:	22f72223          	sw	a5,548(a4) # 1a102224 <__l1_end+0xa1021fc>
1c01384e:	8082                	ret

1c013850 <__rt_uart_setfreq_after>:
1c013850:	1c0157b7          	lui	a5,0x1c015
1c013854:	f6078793          	addi	a5,a5,-160 # 1c014f60 <__rt_uart>
1c013858:	4398                	lw	a4,0(a5)
1c01385a:	cb11                	beqz	a4,1c01386e <__rt_uart_setfreq_after+0x1e>
1c01385c:	4788                	lw	a0,8(a5)
1c01385e:	1141                	addi	sp,sp,-16
1c013860:	c606                	sw	ra,12(sp)
1c013862:	fcbff0ef          	jal	ra,1c01382c <__rt_uart_setup.isra.5>
1c013866:	40b2                	lw	ra,12(sp)
1c013868:	4501                	li	a0,0
1c01386a:	0141                	addi	sp,sp,16
1c01386c:	8082                	ret
1c01386e:	4501                	li	a0,0
1c013870:	8082                	ret

1c013872 <__rt_uart_wait_tx_done.isra.6>:
1c013872:	1a102737          	lui	a4,0x1a102
1c013876:	1141                	addi	sp,sp,-16
1c013878:	21870713          	addi	a4,a4,536 # 1a102218 <__l1_end+0xa1021f0>
1c01387c:	002046b7          	lui	a3,0x204
1c013880:	431c                	lw	a5,0(a4)
1c013882:	8bc1                	andi	a5,a5,16
1c013884:	e38d                	bnez	a5,1c0138a6 <__rt_uart_wait_tx_done.isra.6+0x34>
1c013886:	1a102737          	lui	a4,0x1a102
1c01388a:	22070713          	addi	a4,a4,544 # 1a102220 <__l1_end+0xa1021f8>
1c01388e:	431c                	lw	a5,0(a4)
1c013890:	fc17b7b3          	p.bclr	a5,a5,30,1
1c013894:	ffed                	bnez	a5,1c01388e <__rt_uart_wait_tx_done.isra.6+0x1c>
1c013896:	c602                	sw	zero,12(sp)
1c013898:	7cf00713          	li	a4,1999
1c01389c:	47b2                	lw	a5,12(sp)
1c01389e:	00f75763          	ble	a5,a4,1c0138ac <__rt_uart_wait_tx_done.isra.6+0x3a>
1c0138a2:	0141                	addi	sp,sp,16
1c0138a4:	8082                	ret
1c0138a6:	0386e783          	p.elw	a5,56(a3) # 204038 <__L2+0x184038>
1c0138aa:	bfd9                	j	1c013880 <__rt_uart_wait_tx_done.isra.6+0xe>
1c0138ac:	47b2                	lw	a5,12(sp)
1c0138ae:	0785                	addi	a5,a5,1
1c0138b0:	c63e                	sw	a5,12(sp)
1c0138b2:	b7ed                	j	1c01389c <__rt_uart_wait_tx_done.isra.6+0x2a>

1c0138b4 <__rt_uart_setfreq_before>:
1c0138b4:	1c0157b7          	lui	a5,0x1c015
1c0138b8:	f607a783          	lw	a5,-160(a5) # 1c014f60 <__rt_uart>
1c0138bc:	c385                	beqz	a5,1c0138dc <__rt_uart_setfreq_before+0x28>
1c0138be:	1141                	addi	sp,sp,-16
1c0138c0:	c606                	sw	ra,12(sp)
1c0138c2:	fb1ff0ef          	jal	ra,1c013872 <__rt_uart_wait_tx_done.isra.6>
1c0138c6:	40b2                	lw	ra,12(sp)
1c0138c8:	005007b7          	lui	a5,0x500
1c0138cc:	1a102737          	lui	a4,0x1a102
1c0138d0:	0799                	addi	a5,a5,6
1c0138d2:	22f72223          	sw	a5,548(a4) # 1a102224 <__l1_end+0xa1021fc>
1c0138d6:	4501                	li	a0,0
1c0138d8:	0141                	addi	sp,sp,16
1c0138da:	8082                	ret
1c0138dc:	4501                	li	a0,0
1c0138de:	8082                	ret

1c0138e0 <__rt_uart_cluster_req>:
1c0138e0:	1141                	addi	sp,sp,-16
1c0138e2:	c606                	sw	ra,12(sp)
1c0138e4:	c422                	sw	s0,8(sp)
1c0138e6:	30047473          	csrrci	s0,mstatus,8
1c0138ea:	1c0147b7          	lui	a5,0x1c014
1c0138ee:	80678793          	addi	a5,a5,-2042 # 1c013806 <__rt_uart_cluster_req_done>
1c0138f2:	c91c                	sw	a5,16(a0)
1c0138f4:	4785                	li	a5,1
1c0138f6:	d91c                	sw	a5,48(a0)
1c0138f8:	411c                	lw	a5,0(a0)
1c0138fa:	02052a23          	sw	zero,52(a0)
1c0138fe:	c948                	sw	a0,20(a0)
1c013900:	43cc                	lw	a1,4(a5)
1c013902:	4514                	lw	a3,8(a0)
1c013904:	4150                	lw	a2,4(a0)
1c013906:	0586                	slli	a1,a1,0x1
1c013908:	00c50793          	addi	a5,a0,12
1c01390c:	4701                	li	a4,0
1c01390e:	0585                	addi	a1,a1,1
1c013910:	4501                	li	a0,0
1c013912:	bd2fd0ef          	jal	ra,1c010ce4 <rt_periph_copy>
1c013916:	30041073          	csrw	mstatus,s0
1c01391a:	40b2                	lw	ra,12(sp)
1c01391c:	4422                	lw	s0,8(sp)
1c01391e:	0141                	addi	sp,sp,16
1c013920:	8082                	ret

1c013922 <soc_eu_fcEventMask_setEvent>:
1c013922:	47fd                	li	a5,31
1c013924:	4721                	li	a4,8
1c013926:	00a7d463          	ble	a0,a5,1c01392e <soc_eu_fcEventMask_setEvent+0xc>
1c01392a:	1501                	addi	a0,a0,-32
1c01392c:	4711                	li	a4,4
1c01392e:	1a1066b7          	lui	a3,0x1a106
1c013932:	20e6f603          	p.lw	a2,a4(a3)
1c013936:	4785                	li	a5,1
1c013938:	00a79533          	sll	a0,a5,a0
1c01393c:	fff54513          	not	a0,a0
1c013940:	8d71                	and	a0,a0,a2
1c013942:	00a6e723          	p.sw	a0,a4(a3)
1c013946:	8082                	ret

1c013948 <rt_uart_conf_init>:
1c013948:	000997b7          	lui	a5,0x99
1c01394c:	96878793          	addi	a5,a5,-1688 # 98968 <__L2+0x18968>
1c013950:	c11c                	sw	a5,0(a0)
1c013952:	57fd                	li	a5,-1
1c013954:	c15c                	sw	a5,4(a0)
1c013956:	8082                	ret

1c013958 <__rt_uart_open>:
1c013958:	1141                	addi	sp,sp,-16
1c01395a:	c606                	sw	ra,12(sp)
1c01395c:	c422                	sw	s0,8(sp)
1c01395e:	c226                	sw	s1,4(sp)
1c013960:	c04a                	sw	s2,0(sp)
1c013962:	30047973          	csrrci	s2,mstatus,8
1c013966:	cd8d                	beqz	a1,1c0139a0 <__rt_uart_open+0x48>
1c013968:	4198                	lw	a4,0(a1)
1c01396a:	1c0156b7          	lui	a3,0x1c015
1c01396e:	ffc50793          	addi	a5,a0,-4
1c013972:	f6068413          	addi	s0,a3,-160 # 1c014f60 <__rt_uart>
1c013976:	0792                	slli	a5,a5,0x4
1c013978:	943e                	add	s0,s0,a5
1c01397a:	4010                	lw	a2,0(s0)
1c01397c:	f6068693          	addi	a3,a3,-160
1c013980:	c60d                	beqz	a2,1c0139aa <__rt_uart_open+0x52>
1c013982:	c589                	beqz	a1,1c01398c <__rt_uart_open+0x34>
1c013984:	418c                	lw	a1,0(a1)
1c013986:	4418                	lw	a4,8(s0)
1c013988:	04e59d63          	bne	a1,a4,1c0139e2 <__rt_uart_open+0x8a>
1c01398c:	0605                	addi	a2,a2,1
1c01398e:	00c6e7a3          	p.sw	a2,a5(a3)
1c013992:	8522                	mv	a0,s0
1c013994:	40b2                	lw	ra,12(sp)
1c013996:	4422                	lw	s0,8(sp)
1c013998:	4492                	lw	s1,4(sp)
1c01399a:	4902                	lw	s2,0(sp)
1c01399c:	0141                	addi	sp,sp,16
1c01399e:	8082                	ret
1c0139a0:	00099737          	lui	a4,0x99
1c0139a4:	96870713          	addi	a4,a4,-1688 # 98968 <__L2+0x18968>
1c0139a8:	b7c9                	j	1c01396a <__rt_uart_open+0x12>
1c0139aa:	c418                	sw	a4,8(s0)
1c0139ac:	4785                	li	a5,1
1c0139ae:	1a102737          	lui	a4,0x1a102
1c0139b2:	78070713          	addi	a4,a4,1920 # 1a102780 <__l1_end+0xa102758>
1c0139b6:	c01c                	sw	a5,0(s0)
1c0139b8:	c048                	sw	a0,4(s0)
1c0139ba:	4314                	lw	a3,0(a4)
1c0139bc:	00a797b3          	sll	a5,a5,a0
1c0139c0:	00151493          	slli	s1,a0,0x1
1c0139c4:	8fd5                	or	a5,a5,a3
1c0139c6:	c31c                	sw	a5,0(a4)
1c0139c8:	8526                	mv	a0,s1
1c0139ca:	f59ff0ef          	jal	ra,1c013922 <soc_eu_fcEventMask_setEvent>
1c0139ce:	00148513          	addi	a0,s1,1
1c0139d2:	f51ff0ef          	jal	ra,1c013922 <soc_eu_fcEventMask_setEvent>
1c0139d6:	4408                	lw	a0,8(s0)
1c0139d8:	e55ff0ef          	jal	ra,1c01382c <__rt_uart_setup.isra.5>
1c0139dc:	30091073          	csrw	mstatus,s2
1c0139e0:	bf4d                	j	1c013992 <__rt_uart_open+0x3a>
1c0139e2:	4401                	li	s0,0
1c0139e4:	b77d                	j	1c013992 <__rt_uart_open+0x3a>

1c0139e6 <rt_uart_close>:
}



void rt_uart_close(rt_uart_t *uart, rt_event_t *event)
{
1c0139e6:	1141                	addi	sp,sp,-16
1c0139e8:	c606                	sw	ra,12(sp)
1c0139ea:	c422                	sw	s0,8(sp)
1c0139ec:	c226                	sw	s1,4(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0139ee:	300474f3          	csrrci	s1,mstatus,8
  int irq = rt_irq_disable();

  rt_trace(RT_TRACE_DEV_CTRL, "[UART] Closing uart device (handle: %p)\n", uart);

  uart->open_count--;
1c0139f2:	411c                	lw	a5,0(a0)
1c0139f4:	17fd                	addi	a5,a5,-1
1c0139f6:	c11c                	sw	a5,0(a0)

  if (uart->open_count == 0)
1c0139f8:	e79d                	bnez	a5,1c013a26 <rt_uart_close+0x40>
1c0139fa:	842a                	mv	s0,a0
  {
      // First wait for pending transfers to finish before stoppping uart in case
      // some printf are still pending
      __rt_uart_wait_tx_done(uart);
1c0139fc:	e77ff0ef          	jal	ra,1c013872 <__rt_uart_wait_tx_done.isra.6>

  pulp_write32(ARCHI_UDMA_ADDR + UDMA_UART_OFFSET(channel) + UDMA_CHANNEL_CUSTOM_OFFSET + UART_SETUP_OFFSET, val);
}

static inline void plp_uart_disable(int channel) {
  pulp_write32(ARCHI_UDMA_ADDR + UDMA_UART_OFFSET(channel) + UDMA_CHANNEL_CUSTOM_OFFSET + UART_SETUP_OFFSET, 0x00500006);
1c013a00:	1a102737          	lui	a4,0x1a102
1c013a04:	005007b7          	lui	a5,0x500
1c013a08:	22470693          	addi	a3,a4,548 # 1a102224 <__l1_end+0xa1021fc>
1c013a0c:	0799                	addi	a5,a5,6
1c013a0e:	c29c                	sw	a5,0(a3)
      // Set enable bits for uart channel back to 0 
      // This is needed to be able to propagate new configs when re-opening
      plp_uart_disable(uart->channel - ARCHI_UDMA_UART_ID(0));      

      // Then stop the uart
      plp_udma_cg_set(plp_udma_cg_get() & ~(1<<uart->channel));
1c013a10:	4050                	lw	a2,4(s0)
  return pulp_read32(ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_CONF_OFFSET + UDMA_CONF_CG_OFFSET);
1c013a12:	78070713          	addi	a4,a4,1920
1c013a16:	4314                	lw	a3,0(a4)
1c013a18:	4785                	li	a5,1
1c013a1a:	00c797b3          	sll	a5,a5,a2
1c013a1e:	fff7c793          	not	a5,a5
1c013a22:	8ff5                	and	a5,a5,a3
  pulp_write32(ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_CONF_OFFSET + UDMA_CONF_CG_OFFSET, value);
1c013a24:	c31c                	sw	a5,0(a4)
  __builtin_pulp_spr_write(reg, val);
1c013a26:	30049073          	csrw	mstatus,s1
  }

  rt_irq_restore(irq);
}
1c013a2a:	40b2                	lw	ra,12(sp)
1c013a2c:	4422                	lw	s0,8(sp)
1c013a2e:	4492                	lw	s1,4(sp)
1c013a30:	0141                	addi	sp,sp,16
1c013a32:	8082                	ret

1c013a34 <rt_uart_cluster_write>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c013a34:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c013a38:	8795                	srai	a5,a5,0x5
1c013a3a:	f267b7b3          	p.bclr	a5,a5,25,6
void rt_uart_cluster_write(rt_uart_t *handle, void *buffer, size_t size, rt_uart_req_t *req)
{
  req->uart = handle;
  req->buffer = buffer;
  req->size = size;
  req->cid = rt_cluster_id();
1c013a3e:	08f686a3          	sb	a5,141(a3)
  event->arg[0] = (uintptr_t)callback;
1c013a42:	1c0147b7          	lui	a5,0x1c014
1c013a46:	8e078793          	addi	a5,a5,-1824 # 1c0138e0 <__rt_uart_cluster_req>
1c013a4a:	ca9c                	sw	a5,16(a3)
  event->implem.pending = 1;  
1c013a4c:	4785                	li	a5,1
  req->uart = handle;
1c013a4e:	c288                	sw	a0,0(a3)
  req->buffer = buffer;
1c013a50:	c2cc                	sw	a1,4(a3)
  req->size = size;
1c013a52:	c690                	sw	a2,8(a3)
  req->done = 0;
1c013a54:	08068623          	sb	zero,140(a3)
  event->implem.keep = 0;
1c013a58:	0206aa23          	sw	zero,52(a3)
  event->arg[1] = (uintptr_t)arg;
1c013a5c:	cad4                	sw	a3,20(a3)
  event->implem.pending = 1;  
1c013a5e:	da9c                	sw	a5,48(a3)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_uart_cluster_req, (void *)req);
  __rt_event_set_pending(&req->event);
  __rt_cluster_push_fc_event(&req->event);
1c013a60:	00c68513          	addi	a0,a3,12
1c013a64:	c3dfd06f          	j	1c0116a0 <__rt_cluster_push_fc_event>

1c013a68 <__rt_uart_init>:
{
  // In case the peripheral clock can dynamically change, we need to be notified
  // when this happens so that we flush pending transfers before updating the frequency
  int err = 0;

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c013a68:	1c0145b7          	lui	a1,0x1c014
{
1c013a6c:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c013a6e:	4601                	li	a2,0
1c013a70:	8b458593          	addi	a1,a1,-1868 # 1c0138b4 <__rt_uart_setfreq_before>
1c013a74:	4511                	li	a0,4
{
1c013a76:	c606                	sw	ra,12(sp)
1c013a78:	c422                	sw	s0,8(sp)
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c013a7a:	845fc0ef          	jal	ra,1c0102be <__rt_cbsys_add>

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c013a7e:	1c0145b7          	lui	a1,0x1c014
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c013a82:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c013a84:	4601                	li	a2,0
1c013a86:	85058593          	addi	a1,a1,-1968 # 1c013850 <__rt_uart_setfreq_after>
1c013a8a:	4515                	li	a0,5
1c013a8c:	833fc0ef          	jal	ra,1c0102be <__rt_cbsys_add>


  for (int i=0; i<ARCHI_UDMA_NB_UART; i++)
  {
    __rt_uart[i].open_count = 0;
1c013a90:	1c0157b7          	lui	a5,0x1c015
1c013a94:	f607a023          	sw	zero,-160(a5) # 1c014f60 <__rt_uart>
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c013a98:	8d41                	or	a0,a0,s0
  }

  if (err) rt_fatal("Unable to initialize uart driver\n");
1c013a9a:	c10d                	beqz	a0,1c013abc <__rt_uart_init+0x54>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c013a9c:	01402673          	csrr	a2,uhartid
1c013aa0:	1c014537          	lui	a0,0x1c014
  return (hart_id >> 5) & 0x3f;
1c013aa4:	40565593          	srai	a1,a2,0x5
1c013aa8:	f265b5b3          	p.bclr	a1,a1,25,6
1c013aac:	f4563633          	p.bclr	a2,a2,26,5
1c013ab0:	7fc50513          	addi	a0,a0,2044 # 1c0147fc <__hyper_pad+0xa4>
1c013ab4:	8ecff0ef          	jal	ra,1c012ba0 <printf>
1c013ab8:	86cff0ef          	jal	ra,1c012b24 <abort>
}
1c013abc:	40b2                	lw	ra,12(sp)
1c013abe:	4422                	lw	s0,8(sp)
1c013ac0:	0141                	addi	sp,sp,16
1c013ac2:	8082                	ret

1c013ac4 <__cluster_text_start>:
  .global __rt_pe_start
__rt_pe_start:

#endif

    csrr    a0, 0xF14
1c013ac4:	f1402573          	csrr	a0,mhartid
    andi    a1, a0, 0x1f
1c013ac8:	01f57593          	andi	a1,a0,31
    srli    a0, a0, 5
1c013acc:	8115                	srli	a0,a0,0x5
    
    // Activate a few events
    li      t0, (1<<PULP_DISPATCH_EVENT) | (1<<PULP_HW_BAR_EVENT) | (1<<PULP_MUTEX_EVENT)
1c013ace:	000702b7          	lui	t0,0x70
    li      t1, ARCHI_EU_DEMUX_ADDR
1c013ad2:	00204337          	lui	t1,0x204
    sw      t0, EU_CORE_MASK(t1)
1c013ad6:	00532023          	sw	t0,0(t1) # 204000 <__L2+0x184000>

#ifndef ARCHI_NO_L1_TINY
    sw      x0, %tiny(__rt_dma_first_pending)(x0)
1c013ada:	00002a23          	sw	zero,20(zero) # 14 <__rt_bridge_eeprom_handle>

#ifdef ARCHI_HAS_CC
    li      t2, ARCHI_CC_CORE_ID
    bne     a1, t2, __rt_slave_start
#else
    bne     a1, x0, __rt_slave_start
1c013ade:	10059063          	bnez	a1,1c013bde <__rt_slave_start>
#endif

    li      t0, (1<<ARCHI_CL_EVT_DMA1)
1c013ae2:	20000293          	li	t0,512
    li      t1, ARCHI_EU_DEMUX_ADDR
1c013ae6:	00204337          	lui	t1,0x204
    sw      t0, EU_CORE_MASK_IRQ_OR(t1)
1c013aea:	00532a23          	sw	t0,20(t1) # 204014 <__L2+0x184014>



    // Prepare few values that will be kept in saved registers to optimize the loop
    la      s0, __rt_cluster_pool
1c013aee:	e3fec417          	auipc	s0,0xe3fec
1c013af2:	51640413          	addi	s0,s0,1302 # 4 <__rt_bridge_flash_handle>
    li      s3, ARCHI_EU_DEMUX_ADDR
1c013af6:	002049b7          	lui	s3,0x204
    li      s4, 1<<RT_CLUSTER_CALL_EVT
1c013afa:	4a09                	li	s4,2
    la      s5, __rt_master_event
1c013afc:	00000a97          	auipc	s5,0x0
1c013b00:	038a8a93          	addi	s5,s5,56 # 1c013b34 <__rt_master_event>
    la      s7, __rt_fc_cluster_data
1c013b04:	00001b97          	auipc	s7,0x1
1c013b08:	558b8b93          	addi	s7,s7,1368 # 1c01505c <__rt_fc_cluster_data>
    li      t2, RT_FC_CLUSTER_DATA_T_SIZEOF
1c013b0c:	02800393          	li	t2,40
    mul     t2, t2, a0
1c013b10:	02a383b3          	mul	t2,t2,a0
    add     s7, s7, t2
1c013b14:	9b9e                	add	s7,s7,t2
    addi    s7, s7, RT_FC_CLUSTER_DATA_T_EVENTS
1c013b16:	0b91                	addi	s7,s7,4
#if defined(ARCHI_HAS_FC)
#if defined(ITC_VERSION)
    li      s9, ARCHI_FC_ITC_ADDR + ITC_STATUS_SET_OFFSET
    li      s8, 1<<RT_FC_ENQUEUE_EVENT
#else
    li      s9, ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_FC_ENQUEUE_EVENT << 2)
1c013b18:	1b201cb7          	lui	s9,0x1b201
1c013b1c:	e04c8c93          	addi	s9,s9,-508 # 1b200e04 <__fc_tcdm_end+0x1ffe34>
    li      s8, 1
1c013b20:	4c05                	li	s8,1
    // In case there is no FC, the event must be sent to cluster 0 event unit
    li      s9, ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(0) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_FC_ENQUEUE_EVENT << 2)
    li      s8, 1    
#endif
#ifndef ARCHI_HAS_NO_DISPATCH
    la      s10, __rt_set_slave_stack
1c013b22:	00000d17          	auipc	s10,0x0
1c013b26:	0fad0d13          	addi	s10,s10,250 # 1c013c1c <__rt_set_slave_stack>
    ori     s10, s10, 1
1c013b2a:	001d6d13          	ori	s10,s10,1
#endif

    csrwi   0x300, 0x8
1c013b2e:	30045073          	csrwi	mstatus,8

    j       __rt_master_loop
1c013b32:	a819                	j	1c013b48 <__rt_master_loop>

1c013b34 <__rt_master_event>:



__rt_master_event:
    beq     s6, x0, __rt_master_loop
1c013b34:	000b0a63          	beqz	s6,1c013b48 <__rt_master_loop>

1c013b38 <__rt_push_event_to_fc_retry>:

__rt_push_event_to_fc_retry:
    // Now we have to push the termination event to FC side
    // First wait until the slot for posting events is free
    lw      t0, 0(s7)
1c013b38:	000ba283          	lw	t0,0(s7)
    bne     t0, x0, __rt_push_event_to_fc_wait
1c013b3c:	08029a63          	bnez	t0,1c013bd0 <__rt_push_event_to_fc_wait>

    // Push it
    sw      s6, 0(s7)
1c013b40:	016ba023          	sw	s6,0(s7)

    // And notify the FC side with a HW event in case it is sleeping
    sw      s8, 0(s9)
1c013b44:	018ca023          	sw	s8,0(s9)

1c013b48 <__rt_master_loop>:


__rt_master_loop:
    // Check if a task is ready in the pool
    lw      t3, 0(s0)
1c013b48:	00042e03          	lw	t3,0(s0)
    // Check if a call is ready, e.g. if nb_pe is not zero
    // otherwise go to sleep
    beq     t3, x0, __rt_master_sleep
1c013b4c:	060e0b63          	beqz	t3,1c013bc2 <__rt_master_sleep>

1c013b50 <__rt_master_loop_update_next>:

__rt_master_loop_update_next:
    lw      t4, RT_CLUSTER_TASK_NEXT(t3)
1c013b50:	020e2e83          	lw	t4,32(t3)
    sw      x0, RT_CLUSTER_TASK_PENDING(t3)
1c013b54:	020e2223          	sw	zero,36(t3)
    sw      t4, 0(s0)
1c013b58:	01d42023          	sw	t4,0(s0)

    // Check again next pointer in case it was updated by the FC.
    // If so, do it it again as this will ensure that either we see the new
    // value or the FC sees our write
    lw      t5, RT_CLUSTER_TASK_NEXT(t3)
1c013b5c:	020e2f03          	lw	t5,32(t3)
    bne     t4, t5, __rt_master_loop_update_next
1c013b60:	ffee98e3          	bne	t4,t5,1c013b50 <__rt_master_loop_update_next>
    li      a4, 0
    ebreak
#endif

#ifdef __RT_USE_ASSERT
    csrwi   0x7D0, 0
1c013b64:	7d005073          	csrwi	0x7d0,0
#endif

    // Reads entry point information
    lw      a0, RT_CLUSTER_TASK_ARG(t3)
1c013b68:	004e2503          	lw	a0,4(t3)
    lw      t0, RT_CLUSTER_TASK_ENTRY(t3)
1c013b6c:	000e2283          	lw	t0,0(t3)
    lw      sp, RT_CLUSTER_TASK_STACKS(t3)
1c013b70:	008e2103          	lw	sp,8(t3)
    lw      t1, RT_CLUSTER_TASK_STACK_SIZE(t3)
1c013b74:	00ce2303          	lw	t1,12(t3)
    lw      t2, RT_CLUSTER_TASK_SLAVE_STACK_SIZE(t3)
1c013b78:	010e2383          	lw	t2,16(t3)
    lw      t5, RT_CLUSTER_TASK_CORE_MASK(t3)
1c013b7c:	028e2f03          	lw	t5,40(t3)
    lw      s6, RT_CLUSTER_TASK_COMPLETION_CALLBACK(t3)
1c013b80:	018e2b03          	lw	s6,24(t3)
    lw      t6, RT_CLUSTER_TASK_NB_CORES(t3)
1c013b84:	014e2f83          	lw	t6,20(t3)
    mv      ra, s5
1c013b88:	80d6                	mv	ra,s5

    add     sp, sp, t1
1c013b8a:	911a                	add	sp,sp,t1

#ifdef ARCHI_NO_L1_TINY
    la      t4, __rt_cluster_nb_active_pe
    sw      t6, 0(t4)
#else
    sw      t6, %tiny(__rt_cluster_nb_active_pe)(x0)
1c013b8c:	01f02c23          	sw	t6,24(zero) # 18 <__rt_first_free>
#endif

#ifdef __RT_USE_ASSERT
    // Update stack checking information
    beqz    t1, __rt_no_stack_check
1c013b90:	00030a63          	beqz	t1,1c013ba4 <__rt_no_stack_check>
    sub     t4, sp, t1
1c013b94:	40610eb3          	sub	t4,sp,t1
    csrw    0x7D1, t4
1c013b98:	7d1e9073          	csrw	0x7d1,t4
    csrw    0x7D2, sp
1c013b9c:	7d211073          	csrw	0x7d2,sp
    csrwi   0x7D0, 1
1c013ba0:	7d00d073          	csrwi	0x7d0,1

1c013ba4 <__rt_no_stack_check>:
#endif

__rt_no_stack_check:
    // Whatever the number of cores, we need to setup the barrier as the master code is compiled to use it
    sw      t5, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG(s3)
1c013ba4:	09e9a223          	sw	t5,132(s3) # 204084 <__L2+0x184084>
#ifdef ARCHI_HAS_CC
    // When we have a cluster controller, don't configure the slave barrier
    // if we don't have have any slave
    beqz    t5, __rt_master_no_slave_barrier
#endif
    sw      t5, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_MASK(s3)
1c013ba8:	21e9a023          	sw	t5,512(s3)
    sw      t5, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TARGET_MASK(s3)
1c013bac:	21e9a623          	sw	t5,524(s3)

1c013bb0 <__rt_master_no_slave_barrier>:
    sw      t6, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TARGET_MASK + EU_BARRIER_SIZE(s3)
#endif

    // Set stack on slaves
    // For that we push first the function for setting stack, then the stack size and the base
    p.beqimm t5, 0, __rt_master_loop_no_slave
1c013bb0:	000f2863          	p.beqimm	t5,0,1c013bc0 <__rt_master_loop_no_slave>
    sw      s10, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c013bb4:	09a9a023          	sw	s10,128(s3)
    sw      t2, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c013bb8:	0879a023          	sw	t2,128(s3)
    sw      sp, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c013bbc:	0829a023          	sw	sp,128(s3)

1c013bc0 <__rt_master_loop_no_slave>:

__rt_master_loop_no_slave:

    // Call the entry point, this will directly come back to the master loop
    jr      t0
1c013bc0:	8282                	jr	t0

1c013bc2 <__rt_master_sleep>:
    lw      a1, %tiny(__rt_pe_trace)(x0)
    li      a2, 1
    ebreak
#endif

    sw      s4, EU_CORE_MASK_OR(s3)
1c013bc2:	0149a423          	sw	s4,8(s3)
    p.elw   x0, EU_CORE_EVENT_WAIT_CLEAR(s3)
1c013bc6:	03c9e003          	p.elw	zero,60(s3)
    sw      s4, EU_CORE_MASK_AND(s3)
1c013bca:	0149a223          	sw	s4,4(s3)
    j       __rt_master_loop
1c013bce:	bfad                	j	1c013b48 <__rt_master_loop>

1c013bd0 <__rt_push_event_to_fc_wait>:




__rt_push_event_to_fc_wait:
    sw      s4, EU_CORE_MASK_OR(s3)
1c013bd0:	0149a423          	sw	s4,8(s3)
    p.elw   x0, EU_CORE_EVENT_WAIT_CLEAR(s3)
1c013bd4:	03c9e003          	p.elw	zero,60(s3)
    sw      s4, EU_CORE_MASK_AND(s3)
1c013bd8:	0149a223          	sw	s4,4(s3)
    j       __rt_push_event_to_fc_retry
1c013bdc:	bfb1                	j	1c013b38 <__rt_push_event_to_fc_retry>

1c013bde <__rt_slave_start>:
__rt_slave_start:


#ifndef ARCHI_HAS_NO_DISPATCH

    li      s2, ARCHI_EU_DEMUX_ADDR
1c013bde:	00204937          	lui	s2,0x204
    csrr    s3, 0xF14
1c013be2:	f14029f3          	csrr	s3,mhartid
    and     s3, s3, 0x1f
1c013be6:	01f9f993          	andi	s3,s3,31
    la      s4, __rt_fork_return
1c013bea:	00000a17          	auipc	s4,0x0
1c013bee:	012a0a13          	addi	s4,s4,18 # 1c013bfc <__rt_fork_return>
    la      s5, __rt_wait_for_dispatch
1c013bf2:	00000a97          	auipc	s5,0x0
1c013bf6:	00ea8a93          	addi	s5,s5,14 # 1c013c00 <__rt_wait_for_dispatch>
    j       __rt_wait_for_dispatch
1c013bfa:	a019                	j	1c013c00 <__rt_wait_for_dispatch>

1c013bfc <__rt_fork_return>:
    // When the cluster has a controller barrier 0 is used for normal team barrier
    // and barrier 1 is used for end of offload
    p.elw   t0, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_WAIT_CLEAR + EU_BARRIER_SIZE(s2)
#else
#ifndef ARCHI_HAS_NO_BARRIER
    p.elw   t0, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_WAIT_CLEAR(s2)
1c013bfc:	21c96283          	p.elw	t0,540(s2) # 20421c <__L2+0x18421c>

1c013c00 <__rt_wait_for_dispatch>:
    li      a2, 1
    ebreak
#endif

    // Wait for PC + arg information from dispatcher
    p.elw   t0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c013c00:	08096283          	p.elw	t0,128(s2)
    p.elw   a0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c013c04:	08096503          	p.elw	a0,128(s2)
    ebreak
    mv      a0, t1
#endif

    // Check if this is an entry with a barrier at the end (fork entry)
    andi    t1, t0, 1
1c013c08:	0012f313          	andi	t1,t0,1
    bne     t1, zero, __rt_other_entry
1c013c0c:	00031563          	bnez	t1,1c013c16 <__rt_other_entry>

1c013c10 <__rt_fork_entry>:

__rt_fork_entry:

    // Jump to the handler and prepare r9 to jump back just before the main loop
    add     ra, s4, x0
1c013c10:	000a00b3          	add	ra,s4,zero
    jr      t0
1c013c14:	8282                	jr	t0

1c013c16 <__rt_other_entry>:

__rt_other_entry:

  // Jump to the handler and prepare r9 to jump back directly to the main loop
    add     ra, s5, x0
1c013c16:	000a80b3          	add	ra,s5,zero
    jr      t0
1c013c1a:	8282                	jr	t0

1c013c1c <__rt_set_slave_stack>:

  .global __rt_set_slave_stack
__rt_set_slave_stack:

#ifdef __RT_USE_ASSERT
    csrwi   0x7D0, 0
1c013c1c:	7d005073          	csrwi	0x7d0,0
#endif

    // Multiply the stack size by the core ID and add the stack base to get our stack
    p.elw   t0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c013c20:	08096283          	p.elw	t0,128(s2)
    // If the cluster has a cluster controller, the first slave has core ID 0
    // and thus we need to take the next stack
    addi     t5, s3, 1
    p.mul   t4, t5, a0
#else
    p.mul   t4, s3, a0
1c013c24:	02a98eb3          	mul	t4,s3,a0
#endif
    add     sp, t4, t0
1c013c28:	005e8133          	add	sp,t4,t0

#ifdef __RT_USE_ASSERT
    beqz    a0, __rt_no_stack_check_end
1c013c2c:	c909                	beqz	a0,1c013c3e <__rt_no_stack_check_end>
    sub     t4, sp, a0
1c013c2e:	40a10eb3          	sub	t4,sp,a0
    csrw    0x7D1, t4
1c013c32:	7d1e9073          	csrw	0x7d1,t4
    csrw    0x7D2, sp
1c013c36:	7d211073          	csrw	0x7d2,sp
    csrwi   0x7D0, 1
1c013c3a:	7d00d073          	csrwi	0x7d0,1

1c013c3e <__rt_no_stack_check_end>:
#endif
__rt_no_stack_check_end:
    ret
1c013c3e:	8082                	ret

1c013c40 <__rt_dma_2d>:
#if defined(ARCHI_HAS_CLUSTER)
#ifndef ARCHI_NO_L1_TINY
    .global __rt_dma_2d
__rt_dma_2d:

    sw  x8, -4(sp)
1c013c40:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c013c44:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c013c48:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c013c4c:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c013c50:	fec12623          	sw	a2,-20(sp)

    li  a2, ARCHI_MCHAN_DEMUX_ADDR
1c013c54:	00204637          	lui	a2,0x204
1c013c58:	40060613          	addi	a2,a2,1024 # 204400 <__L2+0x184400>

    lw  x8, %tiny(__rt_dma_first_pending)(x0)
1c013c5c:	01402403          	lw	s0,20(zero) # 14 <__rt_bridge_eeprom_handle>

    lw  a1, CL_DMA_CMD_T_ID(x8)
1c013c60:	400c                	lw	a1,0(s0)
    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c013c62:	4408                	lw	a0,8(s0)
    p.bsetr a1, x0, a1
1c013c64:	80b045b3          	p.bsetr	a1,zero,a1
    sw  a1, MCHAN_STATUS_OFFSET(a2)
1c013c68:	c24c                	sw	a1,4(a2)
    lw  a1, CL_DMA_CMD_T_LENGTH(x8)
1c013c6a:	480c                	lw	a1,16(s0)

    beqz a0, __rt_dma_2d_done
1c013c6c:	c131                	beqz	a0,1c013cb0 <__rt_dma_2d_done>

1c013c6e <__rt_dma_2d_redo>:

__rt_dma_2d_redo:
    lw  x9, CL_DMA_CMD_T_CMD(x8)
1c013c6e:	4044                	lw	s1,4(s0)
    
    bgt a0, a1, __rt_dma_2d_not_last
1c013c70:	00a5c363          	blt	a1,a0,1c013c76 <__rt_dma_2d_not_last>
    mv  a1, a0
1c013c74:	85aa                	mv	a1,a0

1c013c76 <__rt_dma_2d_not_last>:

__rt_dma_2d_not_last:
    lw  a0, MCHAN_CMD_OFFSET(a2)
1c013c76:	4208                	lw	a0,0(a2)
    sw  a0, CL_DMA_CMD_T_ID(x8)
1c013c78:	c008                	sw	a0,0(s0)

    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c013c7a:	4408                	lw	a0,8(s0)

    p.inserti x9, a1, MCHAN_CMD_CMD_LEN_WIDTH-1, MCHAN_CMD_CMD_LEN_BIT
1c013c7c:	de05a4b3          	p.insert	s1,a1,15,0

    sw  x9, MCHAN_CMD_OFFSET(a2)   // cmd
1c013c80:	c204                	sw	s1,0(a2)

    sub a0, a0, a1
1c013c82:	8d0d                	sub	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_SIZE(x8)
1c013c84:	c408                	sw	a0,8(s0)

    lw  a0, CL_DMA_CMD_T_LOC_ADDR(x8)
1c013c86:	4848                	lw	a0,20(s0)

    sw  a0, MCHAN_CMD_OFFSET(a2)   // local address
1c013c88:	c208                	sw	a0,0(a2)
    add a0, a0, a1
1c013c8a:	952e                	add	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_LOC_ADDR(x8)
1c013c8c:	c848                	sw	a0,20(s0)


    lw  a0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c013c8e:	4c08                	lw	a0,24(s0)
    lw  a1, CL_DMA_CMD_T_STRIDE(x8)
1c013c90:	444c                	lw	a1,12(s0)

    sw  a0, MCHAN_CMD_OFFSET(a2)   // external address
1c013c92:	c208                	sw	a0,0(a2)
    add a0, a0, a1
1c013c94:	952e                	add	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c013c96:	cc08                	sw	a0,24(s0)

1c013c98 <__rt_dma_2d_exit>:

__rt_dma_2d_exit:
    lw  x8, -4(sp)
1c013c98:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c013c9c:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c013ca0:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c013ca4:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c013ca8:	fec12603          	lw	a2,-20(sp)

    mret
1c013cac:	30200073          	mret

1c013cb0 <__rt_dma_2d_done>:

__rt_dma_2d_done:
    sw  x0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c013cb0:	00042c23          	sw	zero,24(s0)

    lw  x9, CL_DMA_CMD_T_NEXT(x8)
1c013cb4:	4c44                	lw	s1,28(s0)
    sw  x9, %tiny(__rt_dma_first_pending)(x0)
1c013cb6:	00902a23          	sw	s1,20(zero) # 14 <__rt_bridge_eeprom_handle>

    li  x8, ARCHI_EU_DEMUX_ADDR + EU_SW_EVENTS_DEMUX_OFFSET + (RT_DMA_EVENT<<2)
1c013cba:	00204437          	lui	s0,0x204
1c013cbe:	11440413          	addi	s0,s0,276 # 204114 <__L2+0x184114>
    sw  x0, EU_CORE_TRIGG_SW_EVENT(x8)
1c013cc2:	00042023          	sw	zero,0(s0)

    beqz x9, __rt_dma_2d_exit
1c013cc6:	d8e9                	beqz	s1,1c013c98 <__rt_dma_2d_exit>

    mv  x8, x9
1c013cc8:	8426                	mv	s0,s1

    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c013cca:	4408                	lw	a0,8(s0)
    lw  a1, CL_DMA_CMD_T_LENGTH(x8)
1c013ccc:	480c                	lw	a1,16(s0)

    j   __rt_dma_2d_redo
1c013cce:	b745                	j	1c013c6e <__rt_dma_2d_redo>
